<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="53621"><g><title>ic_cdk::setup (19 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0354%" height="15" fill="rgb(212,200,25)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.0354%" y="197" width="0.1417%" height="15" fill="rgb(235,170,13)" fg:x="19" fg:w="76"/><text x="0.3284%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.1772%" y="197" width="0.1417%" height="15" fill="rgb(219,158,39)" fg:x="95" fg:w="76"/><text x="0.4701%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.3189%" y="165" width="0.1417%" height="15" fill="rgb(235,174,6)" fg:x="171" fg:w="76"/><text x="0.6119%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.13%)</title><rect x="0.4606%" y="149" width="0.1287%" height="15" fill="rgb(207,200,3)" fg:x="247" fg:w="69"/><text x="0.7536%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.76%)</title><rect x="0.5893%" y="149" width="0.7572%" height="15" fill="rgb(220,17,32)" fg:x="316" fg:w="406"/><text x="0.8823%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.15%)</title><rect x="1.3465%" y="149" width="0.1529%" height="15" fill="rgb(241,166,44)" fg:x="722" fg:w="82"/><text x="1.6395%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.4994%" y="149" width="0.1007%" height="15" fill="rgb(241,167,27)" fg:x="804" fg:w="54"/><text x="1.7924%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.6001%" y="149" width="0.1007%" height="15" fill="rgb(251,11,13)" fg:x="858" fg:w="54"/><text x="1.8931%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.7008%" y="149" width="0.1007%" height="15" fill="rgb(239,99,20)" fg:x="912" fg:w="54"/><text x="1.9938%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.8015%" y="149" width="0.1007%" height="15" fill="rgb(233,125,13)" fg:x="966" fg:w="54"/><text x="2.0945%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.13%)</title><rect x="1.9022%" y="149" width="0.1287%" height="15" fill="rgb(217,1,43)" fg:x="1020" fg:w="69"/><text x="2.1952%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.12%)</title><rect x="2.0309%" y="149" width="0.1212%" height="15" fill="rgb(228,39,26)" fg:x="1089" fg:w="65"/><text x="2.3239%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.76%)</title><rect x="2.1521%" y="149" width="0.7572%" height="15" fill="rgb(216,30,46)" fg:x="1154" fg:w="406"/><text x="2.4451%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="2.9093%" y="149" width="0.0298%" height="15" fill="rgb(216,28,30)" fg:x="1560" fg:w="16"/><text x="3.2023%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="2.9391%" y="133" width="0.1417%" height="15" fill="rgb(236,205,52)" fg:x="1576" fg:w="76"/><text x="3.2321%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.11%)</title><rect x="3.0809%" y="101" width="0.1119%" height="15" fill="rgb(230,164,30)" fg:x="1652" fg:w="60"/><text x="3.3739%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.16%)</title><rect x="3.0809%" y="117" width="0.1585%" height="15" fill="rgb(244,172,26)" fg:x="1652" fg:w="85"/><text x="3.3739%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.2394%" y="69" width="0.0168%" height="15" fill="rgb(246,146,6)" fg:x="1737" fg:w="9"/><text x="3.5324%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="3.2562%" y="53" width="0.0559%" height="15" fill="rgb(241,102,25)" fg:x="1746" fg:w="30"/><text x="3.5492%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="3.2562%" y="69" width="0.1026%" height="15" fill="rgb(216,99,49)" fg:x="1746" fg:w="55"/><text x="3.5492%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.22%)</title><rect x="3.2394%" y="85" width="0.2201%" height="15" fill="rgb(215,224,36)" fg:x="1737" fg:w="118"/><text x="3.5324%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.32%)</title><rect x="3.2394%" y="101" width="0.3189%" height="15" fill="rgb(225,164,12)" fg:x="1737" fg:w="171"/><text x="3.5324%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.33%)</title><rect x="3.2394%" y="117" width="0.3282%" height="15" fill="rgb(209,24,1)" fg:x="1737" fg:w="176"/><text x="3.5324%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.69%)</title><rect x="3.0809%" y="133" width="0.6938%" height="15" fill="rgb(247,57,47)" fg:x="1652" fg:w="372"/><text x="3.3739%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 1.10%)</title><rect x="2.9391%" y="149" width="1.0985%" height="15" fill="rgb(229,211,30)" fg:x="1576" fg:w="589"/><text x="3.2321%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.15%)</title><rect x="4.0376%" y="149" width="0.1529%" height="15" fill="rgb(229,217,37)" fg:x="2165" fg:w="82"/><text x="4.3306%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="4.1905%" y="149" width="0.1026%" height="15" fill="rgb(249,2,20)" fg:x="2247" fg:w="55"/><text x="4.4835%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.12%)</title><rect x="4.2931%" y="149" width="0.1175%" height="15" fill="rgb(227,20,42)" fg:x="2302" fg:w="63"/><text x="4.5861%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.12%)</title><rect x="4.4106%" y="149" width="0.1212%" height="15" fill="rgb(233,140,21)" fg:x="2365" fg:w="65"/><text x="4.7036%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.76%)</title><rect x="4.5318%" y="133" width="0.7572%" height="15" fill="rgb(244,162,8)" fg:x="2430" fg:w="406"/><text x="4.8248%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="5.2890%" y="133" width="0.0298%" height="15" fill="rgb(205,213,25)" fg:x="2836" fg:w="16"/><text x="5.5819%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="5.3188%" y="117" width="0.1417%" height="15" fill="rgb(209,194,49)" fg:x="2852" fg:w="76"/><text x="5.6118%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.11%)</title><rect x="5.4605%" y="85" width="0.1119%" height="15" fill="rgb(239,2,21)" fg:x="2928" fg:w="60"/><text x="5.7535%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.16%)</title><rect x="5.4605%" y="101" width="0.1585%" height="15" fill="rgb(251,174,29)" fg:x="2928" fg:w="85"/><text x="5.7535%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="5.6191%" y="53" width="0.0168%" height="15" fill="rgb(242,223,20)" fg:x="3013" fg:w="9"/><text x="5.9120%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="5.6359%" y="37" width="0.0559%" height="15" fill="rgb(221,105,20)" fg:x="3022" fg:w="30"/><text x="5.9288%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="5.6359%" y="53" width="0.1026%" height="15" fill="rgb(238,101,53)" fg:x="3022" fg:w="55"/><text x="5.9288%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.22%)</title><rect x="5.6191%" y="69" width="0.2201%" height="15" fill="rgb(211,121,44)" fg:x="3013" fg:w="118"/><text x="5.9120%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.32%)</title><rect x="5.6191%" y="85" width="0.3189%" height="15" fill="rgb(236,170,11)" fg:x="3013" fg:w="171"/><text x="5.9120%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.33%)</title><rect x="5.6191%" y="101" width="0.3282%" height="15" fill="rgb(220,131,11)" fg:x="3013" fg:w="176"/><text x="5.9120%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.69%)</title><rect x="5.4605%" y="117" width="0.6938%" height="15" fill="rgb(217,109,29)" fg:x="2928" fg:w="372"/><text x="5.7535%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 1.10%)</title><rect x="5.3188%" y="133" width="1.0985%" height="15" fill="rgb(211,119,2)" fg:x="2852" fg:w="589"/><text x="5.6118%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.15%)</title><rect x="6.4173%" y="133" width="0.1529%" height="15" fill="rgb(215,160,16)" fg:x="3441" fg:w="82"/><text x="6.7102%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="6.5702%" y="133" width="0.1026%" height="15" fill="rgb(229,136,26)" fg:x="3523" fg:w="55"/><text x="6.8632%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.13%)</title><rect x="6.6728%" y="117" width="0.1287%" height="15" fill="rgb(218,70,20)" fg:x="3578" fg:w="69"/><text x="6.9657%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.17%)</title><rect x="6.8014%" y="117" width="0.1697%" height="15" fill="rgb(235,167,4)" fg:x="3647" fg:w="91"/><text x="7.0944%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.12%)</title><rect x="6.9711%" y="117" width="0.1175%" height="15" fill="rgb(219,49,7)" fg:x="3738" fg:w="63"/><text x="7.2641%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.53%)</title><rect x="6.6728%" y="133" width="0.5259%" height="15" fill="rgb(244,0,51)" fg:x="3578" fg:w="282"/><text x="6.9657%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.15%)</title><rect x="7.1987%" y="133" width="0.1455%" height="15" fill="rgb(210,143,0)" fg:x="3860" fg:w="78"/><text x="7.4916%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,711 instructions, 3.19%)</title><rect x="4.5318%" y="149" width="3.1909%" height="15" fill="rgb(206,94,20)" fg:x="2430" fg:w="1711"/><text x="4.8248%" y="159.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.12%)</title><rect x="7.7227%" y="149" width="0.1175%" height="15" fill="rgb(245,204,12)" fg:x="4141" fg:w="63"/><text x="8.0157%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.8402%" y="149" width="0.0242%" height="15" fill="rgb(230,34,26)" fg:x="4204" fg:w="13"/><text x="8.1332%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.8645%" y="149" width="0.0242%" height="15" fill="rgb(231,136,27)" fg:x="4217" fg:w="13"/><text x="8.1574%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.01%)</title><rect x="7.8887%" y="149" width="0.0131%" height="15" fill="rgb(250,110,13)" fg:x="4230" fg:w="7"/><text x="8.1817%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.03%)</title><rect x="7.9018%" y="149" width="0.0280%" height="15" fill="rgb(253,183,27)" fg:x="4237" fg:w="15"/><text x="8.1947%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="7.9297%" y="133" width="0.1417%" height="15" fill="rgb(220,160,31)" fg:x="4252" fg:w="76"/><text x="8.2227%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.30%)</title><rect x="7.9297%" y="149" width="0.2965%" height="15" fill="rgb(231,44,21)" fg:x="4252" fg:w="159"/><text x="8.2227%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.2263%" y="117" width="0.1417%" height="15" fill="rgb(235,32,31)" fg:x="4411" fg:w="76"/><text x="8.5192%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.21%)</title><rect x="8.2263%" y="133" width="0.2051%" height="15" fill="rgb(219,39,37)" fg:x="4411" fg:w="110"/><text x="8.5192%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 0.33%)</title><rect x="8.2263%" y="149" width="0.3320%" height="15" fill="rgb(233,214,8)" fg:x="4411" fg:w="178"/><text x="8.5192%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.5582%" y="149" width="0.1417%" height="15" fill="rgb(227,126,42)" fg:x="4589" fg:w="76"/><text x="8.8512%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="8.6999%" y="149" width="0.1511%" height="15" fill="rgb(228,41,1)" fg:x="4665" fg:w="81"/><text x="8.9929%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.8510%" y="149" width="0.1417%" height="15" fill="rgb(219,215,42)" fg:x="4746" fg:w="76"/><text x="9.1440%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.9927%" y="149" width="0.1417%" height="15" fill="rgb(231,69,33)" fg:x="4822" fg:w="76"/><text x="9.2857%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="9.1382%" y="149" width="0.1511%" height="15" fill="rgb(227,26,12)" fg:x="4900" fg:w="81"/><text x="9.4312%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.74%)</title><rect x="9.2893%" y="149" width="0.7441%" height="15" fill="rgb(242,155,5)" fg:x="4981" fg:w="399"/><text x="9.5822%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.74%)</title><rect x="10.0334%" y="149" width="0.7441%" height="15" fill="rgb(226,106,27)" fg:x="5380" fg:w="399"/><text x="10.3264%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,459 instructions, 12.05%)</title><rect x="0.4606%" y="165" width="12.0457%" height="15" fill="rgb(211,102,20)" fg:x="247" fg:w="6459"/><text x="0.7536%" y="175.50">candid::de::IDL..</text></g><g><title>memcpy (354 instructions, 0.66%)</title><rect x="12.5063%" y="165" width="0.6602%" height="15" fill="rgb(231,52,33)" fg:x="6706" fg:w="354"/><text x="12.7993%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.07%)</title><rect x="13.1665%" y="165" width="0.0727%" height="15" fill="rgb(231,162,30)" fg:x="7060" fg:w="39"/><text x="13.4595%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="13.2392%" y="165" width="0.1417%" height="15" fill="rgb(244,229,3)" fg:x="7099" fg:w="76"/><text x="13.5322%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="13.3903%" y="133" width="0.0988%" height="15" fill="rgb(209,27,33)" fg:x="7180" fg:w="53"/><text x="13.6832%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.16%)</title><rect x="13.4891%" y="133" width="0.1641%" height="15" fill="rgb(225,227,41)" fg:x="7233" fg:w="88"/><text x="13.7821%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.30%)</title><rect x="13.6532%" y="133" width="0.3021%" height="15" fill="rgb(215,139,23)" fg:x="7321" fg:w="162"/><text x="13.9462%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.01%)</title><rect x="13.3903%" y="149" width="1.0071%" height="15" fill="rgb(221,50,16)" fg:x="7180" fg:w="540"/><text x="13.6832%" y="159.50"></text></g><g><title>candid::types::internal::env_add (749 instructions, 1.40%)</title><rect x="13.3810%" y="165" width="1.3968%" height="15" fill="rgb(229,183,47)" fg:x="7175" fg:w="749"/><text x="13.6739%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="14.7778%" y="165" width="0.1417%" height="15" fill="rgb(250,166,28)" fg:x="7924" fg:w="76"/><text x="15.0708%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="14.9289%" y="133" width="0.0988%" height="15" fill="rgb(233,70,7)" fg:x="8005" fg:w="53"/><text x="15.2218%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.16%)</title><rect x="15.0277%" y="133" width="0.1641%" height="15" fill="rgb(223,215,2)" fg:x="8058" fg:w="88"/><text x="15.3207%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.30%)</title><rect x="15.1918%" y="133" width="0.3021%" height="15" fill="rgb(227,125,6)" fg:x="8146" fg:w="162"/><text x="15.4848%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.01%)</title><rect x="14.9289%" y="149" width="1.0071%" height="15" fill="rgb(249,187,24)" fg:x="8005" fg:w="540"/><text x="15.2218%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.13%)</title><rect x="15.9359%" y="149" width="0.1268%" height="15" fill="rgb(218,216,51)" fg:x="8545" fg:w="68"/><text x="16.2289%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="16.0627%" y="133" width="0.1511%" height="15" fill="rgb(242,160,40)" fg:x="8613" fg:w="81"/><text x="16.3557%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.20%)</title><rect x="16.0627%" y="149" width="0.2014%" height="15" fill="rgb(239,89,38)" fg:x="8613" fg:w="108"/><text x="16.3557%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 1.66%)</title><rect x="14.9195%" y="165" width="1.6598%" height="15" fill="rgb(246,166,50)" fg:x="8000" fg:w="890"/><text x="15.2125%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="16.5793%" y="117" width="0.0988%" height="15" fill="rgb(231,168,42)" fg:x="8890" fg:w="53"/><text x="16.8723%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.15%)</title><rect x="16.5793%" y="133" width="0.1455%" height="15" fill="rgb(244,217,47)" fg:x="8890" fg:w="78"/><text x="16.8723%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 0.55%)</title><rect x="16.5793%" y="149" width="0.5464%" height="15" fill="rgb(219,55,7)" fg:x="8890" fg:w="293"/><text x="16.8723%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1318 (15 instructions, 0.03%)</title><rect x="17.1258%" y="149" width="0.0280%" height="15" fill="rgb(226,87,35)" fg:x="9183" fg:w="15"/><text x="17.4187%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="17.1537%" y="149" width="0.0205%" height="15" fill="rgb(248,77,52)" fg:x="9198" fg:w="11"/><text x="17.4467%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.89%)</title><rect x="16.5793%" y="165" width="0.8914%" height="15" fill="rgb(254,38,48)" fg:x="8890" fg:w="478"/><text x="16.8723%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.09%)</title><rect x="17.4708%" y="165" width="0.0877%" height="15" fill="rgb(222,164,11)" fg:x="9368" fg:w="47"/><text x="17.7637%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.23%)</title><rect x="17.5584%" y="149" width="0.2294%" height="15" fill="rgb(234,124,46)" fg:x="9415" fg:w="123"/><text x="17.8514%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.23%)</title><rect x="17.8382%" y="149" width="0.2294%" height="15" fill="rgb(205,57,21)" fg:x="9565" fg:w="123"/><text x="18.1311%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.56%)</title><rect x="17.5584%" y="165" width="0.5595%" height="15" fill="rgb(227,150,14)" fg:x="9415" fg:w="300"/><text x="17.8514%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="18.1179%" y="149" width="0.0522%" height="15" fill="rgb(248,133,30)" fg:x="9715" fg:w="28"/><text x="18.4109%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1724 (15 instructions, 0.03%)</title><rect x="18.1701%" y="149" width="0.0280%" height="15" fill="rgb(213,197,31)" fg:x="9743" fg:w="15"/><text x="18.4631%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1724 (15 instructions, 0.03%)</title><rect x="18.1981%" y="149" width="0.0280%" height="15" fill="rgb(253,198,17)" fg:x="9758" fg:w="15"/><text x="18.4911%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.25%)</title><rect x="18.1179%" y="165" width="0.2518%" height="15" fill="rgb(208,148,8)" fg:x="9715" fg:w="135"/><text x="18.4109%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.3697%" y="165" width="0.0205%" height="15" fill="rgb(213,152,15)" fg:x="9850" fg:w="11"/><text x="18.6626%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.3902%" y="165" width="0.0205%" height="15" fill="rgb(213,114,23)" fg:x="9861" fg:w="11"/><text x="18.6832%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.4107%" y="165" width="0.0205%" height="15" fill="rgb(214,150,42)" fg:x="9872" fg:w="11"/><text x="18.7037%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.76%)</title><rect x="18.4312%" y="165" width="0.7646%" height="15" fill="rgb(230,56,18)" fg:x="9883" fg:w="410"/><text x="18.7242%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.02%)</title><rect x="19.1958%" y="133" width="0.0224%" height="15" fill="rgb(223,180,21)" fg:x="10293" fg:w="12"/><text x="19.4888%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.31%)</title><rect x="19.2182%" y="133" width="0.3133%" height="15" fill="rgb(236,79,44)" fg:x="10305" fg:w="168"/><text x="19.5112%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.18%)</title><rect x="19.5315%" y="101" width="0.1772%" height="15" fill="rgb(247,126,0)" fg:x="10473" fg:w="95"/><text x="19.8245%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (195 instructions, 0.36%)</title><rect x="19.5315%" y="117" width="0.3637%" height="15" fill="rgb(251,198,17)" fg:x="10473" fg:w="195"/><text x="19.8245%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (222 instructions, 0.41%)</title><rect x="19.5315%" y="133" width="0.4140%" height="15" fill="rgb(235,146,18)" fg:x="10473" fg:w="222"/><text x="19.8245%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="19.9455%" y="133" width="0.0205%" height="15" fill="rgb(237,32,15)" fg:x="10695" fg:w="11"/><text x="20.2385%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (453 instructions, 0.84%)</title><rect x="19.1958%" y="149" width="0.8448%" height="15" fill="rgb(209,188,16)" fg:x="10293" fg:w="453"/><text x="19.4888%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (491 instructions, 0.92%)</title><rect x="19.1958%" y="165" width="0.9157%" height="15" fill="rgb(206,90,21)" fg:x="10293" fg:w="491"/><text x="19.4888%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.10%)</title><rect x="20.1115%" y="149" width="0.1007%" height="15" fill="rgb(242,56,23)" fg:x="10784" fg:w="54"/><text x="20.4045%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.18%)</title><rect x="20.2122%" y="149" width="0.1772%" height="15" fill="rgb(210,185,5)" fg:x="10838" fg:w="95"/><text x="20.5052%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 0.43%)</title><rect x="20.1115%" y="165" width="0.4289%" height="15" fill="rgb(218,79,52)" fg:x="10784" fg:w="230"/><text x="20.4045%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,236 instructions, 20.95%)</title><rect x="0.3189%" y="181" width="20.9545%" height="15" fill="rgb(244,215,4)" fg:x="171" fg:w="11236"/><text x="0.6119%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="21.2734%" y="181" width="1.4920%" height="15" fill="rgb(243,34,45)" fg:x="11407" fg:w="800"/><text x="21.5664%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="22.7653%" y="181" width="1.5460%" height="15" fill="rgb(252,171,30)" fg:x="12207" fg:w="829"/><text x="23.0583%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="24.3114%" y="181" width="1.5460%" height="15" fill="rgb(238,125,22)" fg:x="13036" fg:w="829"/><text x="24.6043%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="25.8574%" y="181" width="1.4920%" height="15" fill="rgb(225,133,2)" fg:x="13865" fg:w="800"/><text x="26.1504%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="27.3494%" y="181" width="1.4920%" height="15" fill="rgb(225,190,54)" fg:x="14665" fg:w="800"/><text x="27.6423%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="28.8413%" y="181" width="1.5460%" height="15" fill="rgb(209,182,2)" fg:x="15465" fg:w="829"/><text x="29.1343%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="30.3873%" y="181" width="1.4920%" height="15" fill="rgb(208,96,35)" fg:x="16294" fg:w="800"/><text x="30.6803%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (887 instructions, 1.65%)</title><rect x="31.8793%" y="181" width="1.6542%" height="15" fill="rgb(205,33,33)" fg:x="17094" fg:w="887"/><text x="32.1723%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="33.5335%" y="181" width="1.4920%" height="15" fill="rgb(208,205,33)" fg:x="17981" fg:w="800"/><text x="33.8265%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="35.0255%" y="181" width="1.4920%" height="15" fill="rgb(248,1,49)" fg:x="18781" fg:w="800"/><text x="35.3184%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="36.5174%" y="181" width="1.5460%" height="15" fill="rgb(217,62,23)" fg:x="19581" fg:w="829"/><text x="36.8104%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="38.0634%" y="181" width="1.4920%" height="15" fill="rgb(208,152,5)" fg:x="20410" fg:w="800"/><text x="38.3564%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="39.5554%" y="181" width="1.4920%" height="15" fill="rgb(252,224,36)" fg:x="21210" fg:w="800"/><text x="39.8484%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="41.0474%" y="181" width="1.4920%" height="15" fill="rgb(220,222,51)" fg:x="22010" fg:w="800"/><text x="41.3403%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="42.5393%" y="181" width="1.4920%" height="15" fill="rgb(226,197,10)" fg:x="22810" fg:w="800"/><text x="42.8323%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="44.0313%" y="181" width="1.4920%" height="15" fill="rgb(223,29,1)" fg:x="23610" fg:w="800"/><text x="44.3242%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="45.5232%" y="181" width="1.4920%" height="15" fill="rgb(252,59,53)" fg:x="24410" fg:w="800"/><text x="45.8162%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="47.0152%" y="181" width="1.4920%" height="15" fill="rgb(220,57,24)" fg:x="25210" fg:w="800"/><text x="47.3081%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="48.5071%" y="181" width="1.4920%" height="15" fill="rgb(235,144,39)" fg:x="26010" fg:w="800"/><text x="48.8001%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="49.9991%" y="181" width="1.5460%" height="15" fill="rgb(211,226,41)" fg:x="26810" fg:w="829"/><text x="50.2920%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="51.5451%" y="181" width="1.5460%" height="15" fill="rgb(205,179,34)" fg:x="27639" fg:w="829"/><text x="51.8381%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="53.0911%" y="181" width="1.5460%" height="15" fill="rgb(248,95,38)" fg:x="28468" fg:w="829"/><text x="53.3841%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (858 instructions, 1.60%)</title><rect x="54.6372%" y="181" width="1.6001%" height="15" fill="rgb(233,41,28)" fg:x="29297" fg:w="858"/><text x="54.9301%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="56.2373%" y="181" width="1.4920%" height="15" fill="rgb(211,96,23)" fg:x="30155" fg:w="800"/><text x="56.5303%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="57.7292%" y="181" width="1.5460%" height="15" fill="rgb(240,46,5)" fg:x="30955" fg:w="829"/><text x="58.0222%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="59.2753%" y="181" width="1.4920%" height="15" fill="rgb(231,191,31)" fg:x="31784" fg:w="800"/><text x="59.5683%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="60.7672%" y="181" width="1.4920%" height="15" fill="rgb(206,226,24)" fg:x="32584" fg:w="800"/><text x="61.0602%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="62.2592%" y="181" width="1.4920%" height="15" fill="rgb(239,39,10)" fg:x="33384" fg:w="800"/><text x="62.5522%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="63.7511%" y="181" width="1.4920%" height="15" fill="rgb(250,212,36)" fg:x="34184" fg:w="800"/><text x="64.0441%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="65.2431%" y="181" width="1.4920%" height="15" fill="rgb(245,139,6)" fg:x="34984" fg:w="800"/><text x="65.5361%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="66.7350%" y="181" width="1.5460%" height="15" fill="rgb(238,188,6)" fg:x="35784" fg:w="829"/><text x="67.0280%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="68.2811%" y="181" width="1.4920%" height="15" fill="rgb(219,37,16)" fg:x="36613" fg:w="800"/><text x="68.5741%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="69.7730%" y="181" width="1.4920%" height="15" fill="rgb(229,13,6)" fg:x="37413" fg:w="800"/><text x="70.0660%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="71.2650%" y="181" width="1.4920%" height="15" fill="rgb(224,159,32)" fg:x="38213" fg:w="800"/><text x="71.5580%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="72.7569%" y="181" width="1.4920%" height="15" fill="rgb(234,0,42)" fg:x="39013" fg:w="800"/><text x="73.0499%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="74.2489%" y="181" width="1.4920%" height="15" fill="rgb(211,130,31)" fg:x="39813" fg:w="800"/><text x="74.5419%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="75.7408%" y="181" width="1.5460%" height="15" fill="rgb(213,29,29)" fg:x="40613" fg:w="829"/><text x="76.0338%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="77.2869%" y="181" width="1.4920%" height="15" fill="rgb(208,50,40)" fg:x="41442" fg:w="800"/><text x="77.5799%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="78.7788%" y="181" width="1.4920%" height="15" fill="rgb(206,162,39)" fg:x="42242" fg:w="800"/><text x="79.0718%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="80.2708%" y="181" width="1.4920%" height="15" fill="rgb(208,62,16)" fg:x="43042" fg:w="800"/><text x="80.5638%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="81.7627%" y="181" width="1.5460%" height="15" fill="rgb(222,64,20)" fg:x="43842" fg:w="829"/><text x="82.0557%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="83.3088%" y="181" width="1.4920%" height="15" fill="rgb(218,70,53)" fg:x="44671" fg:w="800"/><text x="83.6017%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="84.8007%" y="181" width="1.4920%" height="15" fill="rgb(217,31,36)" fg:x="45471" fg:w="800"/><text x="85.0937%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="86.2927%" y="181" width="1.4920%" height="15" fill="rgb(236,184,45)" fg:x="46271" fg:w="800"/><text x="86.5857%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="87.7846%" y="181" width="1.4920%" height="15" fill="rgb(217,175,47)" fg:x="47071" fg:w="800"/><text x="88.0776%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="89.2766%" y="181" width="1.4920%" height="15" fill="rgb(247,123,3)" fg:x="47871" fg:w="800"/><text x="89.5696%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="90.7685%" y="181" width="1.4920%" height="15" fill="rgb(250,75,10)" fg:x="48671" fg:w="800"/><text x="91.0615%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="92.2605%" y="181" width="1.4920%" height="15" fill="rgb(226,74,51)" fg:x="49471" fg:w="800"/><text x="92.5535%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (800 instructions, 1.49%)</title><rect x="93.7524%" y="181" width="1.4920%" height="15" fill="rgb(240,83,9)" fg:x="50271" fg:w="800"/><text x="94.0454%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (829 instructions, 1.55%)</title><rect x="95.2444%" y="181" width="1.5460%" height="15" fill="rgb(250,27,52)" fg:x="51071" fg:w="829"/><text x="95.5374%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.10%)</title><rect x="96.7998%" y="117" width="0.1007%" height="15" fill="rgb(251,149,21)" fg:x="51905" fg:w="54"/><text x="97.0927%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.25%)</title><rect x="96.7998%" y="133" width="0.2518%" height="15" fill="rgb(237,215,46)" fg:x="51905" fg:w="135"/><text x="97.0927%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.30%)</title><rect x="96.7998%" y="149" width="0.3021%" height="15" fill="rgb(214,59,32)" fg:x="51905" fg:w="162"/><text x="97.0927%" y="159.50"></text></g><g><title>memset (136 instructions, 0.25%)</title><rect x="97.1019%" y="149" width="0.2536%" height="15" fill="rgb(245,80,48)" fg:x="52067" fg:w="136"/><text x="97.3949%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (463 instructions, 0.86%)</title><rect x="96.7904%" y="165" width="0.8635%" height="15" fill="rgb(227,192,36)" fg:x="51900" fg:w="463"/><text x="97.0834%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.06%)</title><rect x="97.6539%" y="149" width="0.0597%" height="15" fill="rgb(235,113,46)" fg:x="52363" fg:w="32"/><text x="97.9469%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="97.7136%" y="101" width="0.1417%" height="15" fill="rgb(250,31,37)" fg:x="52395" fg:w="76"/><text x="98.0066%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.21%)</title><rect x="97.7136%" y="117" width="0.2051%" height="15" fill="rgb(211,36,50)" fg:x="52395" fg:w="110"/><text x="98.0066%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.33%)</title><rect x="97.7136%" y="133" width="0.3264%" height="15" fill="rgb(237,36,28)" fg:x="52395" fg:w="175"/><text x="98.0066%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="98.0399%" y="133" width="0.0205%" height="15" fill="rgb(220,155,39)" fg:x="52570" fg:w="11"/><text x="98.3329%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="98.0605%" y="133" width="0.0205%" height="15" fill="rgb(234,97,27)" fg:x="52581" fg:w="11"/><text x="98.3534%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (359 instructions, 0.67%)</title><rect x="97.7136%" y="149" width="0.6695%" height="15" fill="rgb(232,82,20)" fg:x="52395" fg:w="359"/><text x="98.0066%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.06%)</title><rect x="98.3831%" y="149" width="0.0559%" height="15" fill="rgb(225,31,13)" fg:x="52754" fg:w="30"/><text x="98.6761%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (494 instructions, 0.92%)</title><rect x="97.6539%" y="165" width="0.9213%" height="15" fill="rgb(208,44,14)" fg:x="52363" fg:w="494"/><text x="97.9469%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="98.5845%" y="165" width="0.1026%" height="15" fill="rgb(249,8,38)" fg:x="52862" fg:w="55"/><text x="98.8775%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,091 instructions, 2.03%)</title><rect x="96.7904%" y="181" width="2.0347%" height="15" fill="rgb(249,79,53)" fg:x="51900" fg:w="1091"/><text x="97.0834%" y="191.50"></text></g><g><title>heap::batch_remove_7_::{{closure}} (53,159 instructions, 99.14%)</title><rect x="0.3189%" y="197" width="99.1384%" height="15" fill="rgb(214,144,11)" fg:x="171" fg:w="53159"/><text x="0.6119%" y="207.50">heap::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.02%)</title><rect x="99.4573%" y="197" width="0.0224%" height="15" fill="rgb(232,70,0)" fg:x="53330" fg:w="12"/><text x="99.7503%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="99.4797%" y="197" width="0.1511%" height="15" fill="rgb(253,157,49)" fg:x="53342" fg:w="81"/><text x="99.7727%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.19%)</title><rect x="99.6307%" y="197" width="0.1865%" height="15" fill="rgb(216,95,30)" fg:x="53423" fg:w="100"/><text x="99.9237%" y="207.50"></text></g><g><title>all (53,621 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(218,9,1)" fg:x="0" fg:w="53621"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (53,621 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(246,14,51)" fg:x="0" fg:w="53621"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>