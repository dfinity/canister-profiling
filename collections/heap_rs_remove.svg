<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="53543"><g><title>ic_cdk::setup (19 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0355%" height="15" fill="rgb(220,202,21)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.0355%" y="197" width="0.1419%" height="15" fill="rgb(252,211,12)" fg:x="19" fg:w="76"/><text x="0.3285%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.1774%" y="197" width="0.1419%" height="15" fill="rgb(220,147,43)" fg:x="95" fg:w="76"/><text x="0.4704%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="0.3194%" y="165" width="0.1419%" height="15" fill="rgb(241,147,37)" fg:x="171" fg:w="76"/><text x="0.6123%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.13%)</title><rect x="0.4613%" y="149" width="0.1326%" height="15" fill="rgb(233,223,47)" fg:x="247" fg:w="71"/><text x="0.7543%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.75%)</title><rect x="0.5939%" y="149" width="0.7471%" height="15" fill="rgb(228,228,37)" fg:x="318" fg:w="400"/><text x="0.8869%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.16%)</title><rect x="1.3410%" y="149" width="0.1588%" height="15" fill="rgb(213,144,48)" fg:x="718" fg:w="85"/><text x="1.6339%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.4997%" y="149" width="0.1009%" height="15" fill="rgb(229,62,49)" fg:x="803" fg:w="54"/><text x="1.7927%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.6006%" y="149" width="0.1009%" height="15" fill="rgb(232,208,7)" fg:x="857" fg:w="54"/><text x="1.8936%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.7014%" y="149" width="0.1009%" height="15" fill="rgb(233,129,30)" fg:x="911" fg:w="54"/><text x="1.9944%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.10%)</title><rect x="1.8023%" y="149" width="0.1009%" height="15" fill="rgb(245,102,53)" fg:x="965" fg:w="54"/><text x="2.0953%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.13%)</title><rect x="1.9031%" y="149" width="0.1326%" height="15" fill="rgb(241,131,5)" fg:x="1019" fg:w="71"/><text x="2.1961%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.12%)</title><rect x="2.0357%" y="149" width="0.1214%" height="15" fill="rgb(211,19,40)" fg:x="1090" fg:w="65"/><text x="2.3287%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.75%)</title><rect x="2.1571%" y="149" width="0.7471%" height="15" fill="rgb(234,154,40)" fg:x="1155" fg:w="400"/><text x="2.4501%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="2.9042%" y="149" width="0.0299%" height="15" fill="rgb(236,27,11)" fg:x="1555" fg:w="16"/><text x="3.1972%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="2.9341%" y="133" width="0.1419%" height="15" fill="rgb(213,122,44)" fg:x="1571" fg:w="76"/><text x="3.2271%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.11%)</title><rect x="3.0760%" y="101" width="0.1121%" height="15" fill="rgb(213,171,20)" fg:x="1647" fg:w="60"/><text x="3.3690%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.16%)</title><rect x="3.0760%" y="117" width="0.1588%" height="15" fill="rgb(250,105,23)" fg:x="1647" fg:w="85"/><text x="3.3690%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="3.2348%" y="69" width="0.0168%" height="15" fill="rgb(241,226,43)" fg:x="1732" fg:w="9"/><text x="3.5278%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="3.2516%" y="53" width="0.0560%" height="15" fill="rgb(230,133,43)" fg:x="1741" fg:w="30"/><text x="3.5446%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="3.2516%" y="69" width="0.1027%" height="15" fill="rgb(240,20,25)" fg:x="1741" fg:w="55"/><text x="3.5446%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.22%)</title><rect x="3.2348%" y="85" width="0.2204%" height="15" fill="rgb(215,47,49)" fg:x="1732" fg:w="118"/><text x="3.5278%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.32%)</title><rect x="3.2348%" y="101" width="0.3194%" height="15" fill="rgb(231,201,7)" fg:x="1732" fg:w="171"/><text x="3.5278%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.33%)</title><rect x="3.2348%" y="117" width="0.3287%" height="15" fill="rgb(208,89,15)" fg:x="1732" fg:w="176"/><text x="3.5278%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.69%)</title><rect x="3.0760%" y="133" width="0.6948%" height="15" fill="rgb(244,202,23)" fg:x="1647" fg:w="372"/><text x="3.3690%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 1.11%)</title><rect x="2.9341%" y="149" width="1.1094%" height="15" fill="rgb(232,52,5)" fg:x="1571" fg:w="594"/><text x="3.2271%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.16%)</title><rect x="4.0435%" y="149" width="0.1588%" height="15" fill="rgb(251,12,32)" fg:x="2165" fg:w="85"/><text x="4.3364%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="4.2022%" y="149" width="0.1027%" height="15" fill="rgb(219,152,43)" fg:x="2250" fg:w="55"/><text x="4.4952%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.12%)</title><rect x="4.3050%" y="149" width="0.1233%" height="15" fill="rgb(224,96,21)" fg:x="2305" fg:w="66"/><text x="4.5979%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.12%)</title><rect x="4.4282%" y="149" width="0.1214%" height="15" fill="rgb(215,205,39)" fg:x="2371" fg:w="65"/><text x="4.7212%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.75%)</title><rect x="4.5496%" y="133" width="0.7471%" height="15" fill="rgb(247,73,50)" fg:x="2436" fg:w="400"/><text x="4.8426%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="5.2967%" y="133" width="0.0299%" height="15" fill="rgb(244,139,53)" fg:x="2836" fg:w="16"/><text x="5.5896%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="5.3266%" y="117" width="0.1419%" height="15" fill="rgb(246,50,42)" fg:x="2852" fg:w="76"/><text x="5.6195%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.11%)</title><rect x="5.4685%" y="85" width="0.1121%" height="15" fill="rgb(230,91,13)" fg:x="2928" fg:w="60"/><text x="5.7615%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.16%)</title><rect x="5.4685%" y="101" width="0.1588%" height="15" fill="rgb(226,154,24)" fg:x="2928" fg:w="85"/><text x="5.7615%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="5.6273%" y="53" width="0.0168%" height="15" fill="rgb(230,151,46)" fg:x="3013" fg:w="9"/><text x="5.9202%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.06%)</title><rect x="5.6441%" y="37" width="0.0560%" height="15" fill="rgb(252,123,0)" fg:x="3022" fg:w="30"/><text x="5.9370%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.10%)</title><rect x="5.6441%" y="53" width="0.1027%" height="15" fill="rgb(233,129,38)" fg:x="3022" fg:w="55"/><text x="5.9370%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.22%)</title><rect x="5.6273%" y="69" width="0.2204%" height="15" fill="rgb(233,155,0)" fg:x="3013" fg:w="118"/><text x="5.9202%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.32%)</title><rect x="5.6273%" y="85" width="0.3194%" height="15" fill="rgb(216,220,44)" fg:x="3013" fg:w="171"/><text x="5.9202%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.33%)</title><rect x="5.6273%" y="101" width="0.3287%" height="15" fill="rgb(216,24,17)" fg:x="3013" fg:w="176"/><text x="5.9202%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.69%)</title><rect x="5.4685%" y="117" width="0.6948%" height="15" fill="rgb(232,28,48)" fg:x="2928" fg:w="372"/><text x="5.7615%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 1.11%)</title><rect x="5.3266%" y="133" width="1.1094%" height="15" fill="rgb(245,102,30)" fg:x="2852" fg:w="594"/><text x="5.6195%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.16%)</title><rect x="6.4359%" y="133" width="0.1588%" height="15" fill="rgb(248,146,5)" fg:x="3446" fg:w="85"/><text x="6.7289%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="6.5947%" y="133" width="0.1027%" height="15" fill="rgb(235,224,54)" fg:x="3531" fg:w="55"/><text x="6.8877%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.13%)</title><rect x="6.6974%" y="117" width="0.1326%" height="15" fill="rgb(243,212,4)" fg:x="3586" fg:w="71"/><text x="6.9904%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.17%)</title><rect x="6.8300%" y="117" width="0.1700%" height="15" fill="rgb(230,184,40)" fg:x="3657" fg:w="91"/><text x="7.1230%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.12%)</title><rect x="7.0000%" y="117" width="0.1233%" height="15" fill="rgb(207,175,21)" fg:x="3748" fg:w="66"/><text x="7.2930%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 0.54%)</title><rect x="6.6974%" y="133" width="0.5360%" height="15" fill="rgb(247,190,10)" fg:x="3586" fg:w="287"/><text x="6.9904%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="7.2334%" y="133" width="0.1419%" height="15" fill="rgb(219,127,33)" fg:x="3873" fg:w="76"/><text x="7.5264%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,714 instructions, 3.20%)</title><rect x="4.5496%" y="149" width="3.2012%" height="15" fill="rgb(225,89,8)" fg:x="2436" fg:w="1714"/><text x="4.8426%" y="159.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.12%)</title><rect x="7.7508%" y="149" width="0.1233%" height="15" fill="rgb(245,201,40)" fg:x="4150" fg:w="66"/><text x="8.0437%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.8740%" y="149" width="0.0243%" height="15" fill="rgb(226,119,13)" fg:x="4216" fg:w="13"/><text x="8.1670%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.8983%" y="149" width="0.0243%" height="15" fill="rgb(249,129,11)" fg:x="4229" fg:w="13"/><text x="8.1913%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.01%)</title><rect x="7.9226%" y="149" width="0.0131%" height="15" fill="rgb(207,111,20)" fg:x="4242" fg:w="7"/><text x="8.2156%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.03%)</title><rect x="7.9357%" y="149" width="0.0280%" height="15" fill="rgb(228,222,46)" fg:x="4249" fg:w="15"/><text x="8.2286%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="7.9637%" y="133" width="0.1419%" height="15" fill="rgb(223,70,37)" fg:x="4264" fg:w="76"/><text x="8.2567%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.30%)</title><rect x="7.9637%" y="149" width="0.2970%" height="15" fill="rgb(244,29,25)" fg:x="4264" fg:w="159"/><text x="8.2567%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.2607%" y="117" width="0.1419%" height="15" fill="rgb(207,117,43)" fg:x="4423" fg:w="76"/><text x="8.5536%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.21%)</title><rect x="8.2607%" y="133" width="0.2073%" height="15" fill="rgb(244,92,40)" fg:x="4423" fg:w="111"/><text x="8.5536%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (179 instructions, 0.33%)</title><rect x="8.2607%" y="149" width="0.3343%" height="15" fill="rgb(211,66,1)" fg:x="4423" fg:w="179"/><text x="8.5536%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.5950%" y="149" width="0.1419%" height="15" fill="rgb(239,206,51)" fg:x="4602" fg:w="76"/><text x="8.8879%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="8.7369%" y="149" width="0.1513%" height="15" fill="rgb(236,7,28)" fg:x="4678" fg:w="81"/><text x="9.0299%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="8.8882%" y="149" width="0.1419%" height="15" fill="rgb(210,17,43)" fg:x="4759" fg:w="76"/><text x="9.1812%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="9.0301%" y="149" width="0.1419%" height="15" fill="rgb(248,163,24)" fg:x="4835" fg:w="76"/><text x="9.3231%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="9.1758%" y="149" width="0.1513%" height="15" fill="rgb(224,215,30)" fg:x="4913" fg:w="81"/><text x="9.4688%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.71%)</title><rect x="9.3271%" y="149" width="0.7116%" height="15" fill="rgb(246,207,23)" fg:x="4994" fg:w="381"/><text x="9.6201%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.71%)</title><rect x="10.0387%" y="149" width="0.7116%" height="15" fill="rgb(247,70,32)" fg:x="5375" fg:w="381"/><text x="10.3316%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,424 instructions, 12.00%)</title><rect x="0.4613%" y="165" width="11.9978%" height="15" fill="rgb(230,12,38)" fg:x="247" fg:w="6424"/><text x="0.7543%" y="175.50">candid::de::IDL..</text></g><g><title>memcpy (336 instructions, 0.63%)</title><rect x="12.4591%" y="165" width="0.6275%" height="15" fill="rgb(232,218,35)" fg:x="6671" fg:w="336"/><text x="12.7521%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.07%)</title><rect x="13.0867%" y="165" width="0.0728%" height="15" fill="rgb(210,36,27)" fg:x="7007" fg:w="39"/><text x="13.3796%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="13.1595%" y="165" width="0.1419%" height="15" fill="rgb(234,116,47)" fg:x="7046" fg:w="76"/><text x="13.4525%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="13.3108%" y="133" width="0.0990%" height="15" fill="rgb(205,143,24)" fg:x="7127" fg:w="53"/><text x="13.6038%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.17%)</title><rect x="13.4098%" y="133" width="0.1662%" height="15" fill="rgb(240,104,33)" fg:x="7180" fg:w="89"/><text x="13.7028%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.30%)</title><rect x="13.5760%" y="133" width="0.3007%" height="15" fill="rgb(235,115,37)" fg:x="7269" fg:w="161"/><text x="13.8690%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.01%)</title><rect x="13.3108%" y="149" width="1.0085%" height="15" fill="rgb(238,11,24)" fg:x="7127" fg:w="540"/><text x="13.6038%" y="159.50"></text></g><g><title>candid::types::internal::env_add (755 instructions, 1.41%)</title><rect x="13.3015%" y="165" width="1.4101%" height="15" fill="rgb(216,95,30)" fg:x="7122" fg:w="755"/><text x="13.5944%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="14.7115%" y="165" width="0.1419%" height="15" fill="rgb(227,3,40)" fg:x="7877" fg:w="76"/><text x="15.0045%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="14.8628%" y="133" width="0.0990%" height="15" fill="rgb(253,135,43)" fg:x="7958" fg:w="53"/><text x="15.1558%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.17%)</title><rect x="14.9618%" y="133" width="0.1662%" height="15" fill="rgb(229,168,32)" fg:x="8011" fg:w="89"/><text x="15.2548%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.30%)</title><rect x="15.1280%" y="133" width="0.3007%" height="15" fill="rgb(250,8,18)" fg:x="8100" fg:w="161"/><text x="15.4210%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.01%)</title><rect x="14.8628%" y="149" width="1.0085%" height="15" fill="rgb(220,18,38)" fg:x="7958" fg:w="540"/><text x="15.1558%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.13%)</title><rect x="15.8714%" y="149" width="0.1270%" height="15" fill="rgb(218,174,43)" fg:x="8498" fg:w="68"/><text x="16.1643%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="15.9984%" y="133" width="0.1513%" height="15" fill="rgb(223,144,53)" fg:x="8566" fg:w="81"/><text x="16.2913%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.20%)</title><rect x="15.9984%" y="149" width="0.2017%" height="15" fill="rgb(221,99,52)" fg:x="8566" fg:w="108"/><text x="16.2913%" y="159.50"></text></g><g><title>candid::types::internal::env_add (889 instructions, 1.66%)</title><rect x="14.8535%" y="165" width="1.6603%" height="15" fill="rgb(219,146,34)" fg:x="7953" fg:w="889"/><text x="15.1465%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.10%)</title><rect x="16.5138%" y="117" width="0.0990%" height="15" fill="rgb(219,218,5)" fg:x="8842" fg:w="53"/><text x="16.8068%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.15%)</title><rect x="16.5138%" y="133" width="0.1475%" height="15" fill="rgb(210,154,36)" fg:x="8842" fg:w="79"/><text x="16.8068%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.55%)</title><rect x="16.5138%" y="149" width="0.5454%" height="15" fill="rgb(207,183,3)" fg:x="8842" fg:w="292"/><text x="16.8068%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.176 (15 instructions, 0.03%)</title><rect x="17.0592%" y="149" width="0.0280%" height="15" fill="rgb(235,196,18)" fg:x="9134" fg:w="15"/><text x="17.3522%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="17.0872%" y="149" width="0.0205%" height="15" fill="rgb(231,162,23)" fg:x="9149" fg:w="11"/><text x="17.3802%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.89%)</title><rect x="16.5138%" y="165" width="0.8927%" height="15" fill="rgb(248,152,18)" fg:x="8842" fg:w="478"/><text x="16.8068%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.06%)</title><rect x="17.4066%" y="165" width="0.0616%" height="15" fill="rgb(217,14,27)" fg:x="9320" fg:w="33"/><text x="17.6995%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.23%)</title><rect x="17.4682%" y="149" width="0.2297%" height="15" fill="rgb(239,211,6)" fg:x="9353" fg:w="123"/><text x="17.7612%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.23%)</title><rect x="17.7484%" y="149" width="0.2297%" height="15" fill="rgb(220,223,47)" fg:x="9503" fg:w="123"/><text x="18.0413%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.56%)</title><rect x="17.4682%" y="165" width="0.5603%" height="15" fill="rgb(231,174,17)" fg:x="9353" fg:w="300"/><text x="17.7612%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="18.0285%" y="149" width="0.0523%" height="15" fill="rgb(224,53,54)" fg:x="9653" fg:w="28"/><text x="18.3215%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.18%)</title><rect x="18.0285%" y="165" width="0.1812%" height="15" fill="rgb(242,72,6)" fg:x="9653" fg:w="97"/><text x="18.3215%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.2097%" y="165" width="0.0205%" height="15" fill="rgb(253,221,16)" fg:x="9750" fg:w="11"/><text x="18.5026%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.2302%" y="165" width="0.0205%" height="15" fill="rgb(249,99,46)" fg:x="9761" fg:w="11"/><text x="18.5232%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.2508%" y="165" width="0.0205%" height="15" fill="rgb(208,35,42)" fg:x="9772" fg:w="11"/><text x="18.5437%" y="175.50"></text></g><g><title>memcpy (411 instructions, 0.77%)</title><rect x="18.2713%" y="165" width="0.7676%" height="15" fill="rgb(231,179,48)" fg:x="9783" fg:w="411"/><text x="18.5643%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.02%)</title><rect x="19.0389%" y="133" width="0.0224%" height="15" fill="rgb(250,111,30)" fg:x="10194" fg:w="12"/><text x="19.3319%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.31%)</title><rect x="19.0613%" y="133" width="0.3138%" height="15" fill="rgb(233,95,50)" fg:x="10206" fg:w="168"/><text x="19.3543%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.18%)</title><rect x="19.3751%" y="101" width="0.1774%" height="15" fill="rgb(233,171,33)" fg:x="10374" fg:w="95"/><text x="19.6681%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (241 instructions, 0.45%)</title><rect x="19.3751%" y="117" width="0.4501%" height="15" fill="rgb(239,224,34)" fg:x="10374" fg:w="241"/><text x="19.6681%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (268 instructions, 0.50%)</title><rect x="19.3751%" y="133" width="0.5005%" height="15" fill="rgb(242,53,20)" fg:x="10374" fg:w="268"/><text x="19.6681%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="19.8756%" y="133" width="0.0205%" height="15" fill="rgb(217,56,9)" fg:x="10642" fg:w="11"/><text x="20.1686%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (501 instructions, 0.94%)</title><rect x="19.0389%" y="149" width="0.9357%" height="15" fill="rgb(234,56,26)" fg:x="10194" fg:w="501"/><text x="19.3319%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (535 instructions, 1.00%)</title><rect x="19.0389%" y="165" width="0.9992%" height="15" fill="rgb(217,86,12)" fg:x="10194" fg:w="535"/><text x="19.3319%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.10%)</title><rect x="20.0381%" y="149" width="0.1009%" height="15" fill="rgb(208,60,29)" fg:x="10729" fg:w="54"/><text x="20.3311%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.18%)</title><rect x="20.1390%" y="149" width="0.1774%" height="15" fill="rgb(206,108,20)" fg:x="10783" fg:w="95"/><text x="20.4319%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (231 instructions, 0.43%)</title><rect x="20.0381%" y="165" width="0.4314%" height="15" fill="rgb(236,227,43)" fg:x="10729" fg:w="231"/><text x="20.3311%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,180 instructions, 20.88%)</title><rect x="0.3194%" y="181" width="20.8804%" height="15" fill="rgb(235,7,33)" fg:x="171" fg:w="11180"/><text x="0.6123%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="21.1998%" y="181" width="1.4941%" height="15" fill="rgb(247,34,17)" fg:x="11351" fg:w="800"/><text x="21.4928%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="22.6939%" y="181" width="1.5483%" height="15" fill="rgb(250,51,50)" fg:x="12151" fg:w="829"/><text x="22.9869%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="24.2422%" y="181" width="1.5483%" height="15" fill="rgb(223,91,52)" fg:x="12980" fg:w="829"/><text x="24.5352%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="25.7905%" y="181" width="1.4941%" height="15" fill="rgb(247,17,3)" fg:x="13809" fg:w="800"/><text x="26.0835%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="27.2846%" y="181" width="1.4941%" height="15" fill="rgb(210,210,53)" fg:x="14609" fg:w="800"/><text x="27.5776%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="28.7787%" y="181" width="1.5483%" height="15" fill="rgb(219,160,30)" fg:x="15409" fg:w="829"/><text x="29.0717%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="30.3270%" y="181" width="1.4941%" height="15" fill="rgb(251,226,37)" fg:x="16238" fg:w="800"/><text x="30.6200%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (887 instructions, 1.66%)</title><rect x="31.8212%" y="181" width="1.6566%" height="15" fill="rgb(210,132,18)" fg:x="17038" fg:w="887"/><text x="32.1141%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="33.4778%" y="181" width="1.4941%" height="15" fill="rgb(240,181,35)" fg:x="17925" fg:w="800"/><text x="33.7707%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="34.9719%" y="181" width="1.4941%" height="15" fill="rgb(206,146,46)" fg:x="18725" fg:w="800"/><text x="35.2649%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="36.4660%" y="181" width="1.5483%" height="15" fill="rgb(215,166,18)" fg:x="19525" fg:w="829"/><text x="36.7590%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="38.0143%" y="181" width="1.4941%" height="15" fill="rgb(233,179,15)" fg:x="20354" fg:w="800"/><text x="38.3073%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="39.5084%" y="181" width="1.4941%" height="15" fill="rgb(212,172,37)" fg:x="21154" fg:w="800"/><text x="39.8014%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="41.0026%" y="181" width="1.4941%" height="15" fill="rgb(250,229,15)" fg:x="21954" fg:w="800"/><text x="41.2955%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="42.4967%" y="181" width="1.4941%" height="15" fill="rgb(225,79,4)" fg:x="22754" fg:w="800"/><text x="42.7897%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="43.9908%" y="181" width="1.4941%" height="15" fill="rgb(238,62,17)" fg:x="23554" fg:w="800"/><text x="44.2838%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="45.4849%" y="181" width="1.4941%" height="15" fill="rgb(211,229,48)" fg:x="24354" fg:w="800"/><text x="45.7779%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="46.9791%" y="181" width="1.4941%" height="15" fill="rgb(254,49,0)" fg:x="25154" fg:w="800"/><text x="47.2720%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="48.4732%" y="181" width="1.4941%" height="15" fill="rgb(210,24,9)" fg:x="25954" fg:w="800"/><text x="48.7662%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="49.9673%" y="181" width="1.5483%" height="15" fill="rgb(211,117,12)" fg:x="26754" fg:w="829"/><text x="50.2603%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="51.5156%" y="181" width="1.5483%" height="15" fill="rgb(222,136,34)" fg:x="27583" fg:w="829"/><text x="51.8086%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="53.0639%" y="181" width="1.5483%" height="15" fill="rgb(241,205,52)" fg:x="28412" fg:w="829"/><text x="53.3569%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (858 instructions, 1.60%)</title><rect x="54.6122%" y="181" width="1.6025%" height="15" fill="rgb(233,5,21)" fg:x="29241" fg:w="858"/><text x="54.9051%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="56.2146%" y="181" width="1.4941%" height="15" fill="rgb(212,14,16)" fg:x="30099" fg:w="800"/><text x="56.5076%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="57.7088%" y="181" width="1.5483%" height="15" fill="rgb(244,78,6)" fg:x="30899" fg:w="829"/><text x="58.0017%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="59.2570%" y="181" width="1.4941%" height="15" fill="rgb(254,120,39)" fg:x="31728" fg:w="800"/><text x="59.5500%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="60.7512%" y="181" width="1.4941%" height="15" fill="rgb(208,16,25)" fg:x="32528" fg:w="800"/><text x="61.0441%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="62.2453%" y="181" width="1.4941%" height="15" fill="rgb(243,6,40)" fg:x="33328" fg:w="800"/><text x="62.5383%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="63.7394%" y="181" width="1.4941%" height="15" fill="rgb(244,200,18)" fg:x="34128" fg:w="800"/><text x="64.0324%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="65.2336%" y="181" width="1.4941%" height="15" fill="rgb(253,129,45)" fg:x="34928" fg:w="800"/><text x="65.5265%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="66.7277%" y="181" width="1.5483%" height="15" fill="rgb(242,10,33)" fg:x="35728" fg:w="829"/><text x="67.0206%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="68.2760%" y="181" width="1.4941%" height="15" fill="rgb(247,95,21)" fg:x="36557" fg:w="800"/><text x="68.5689%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="69.7701%" y="181" width="1.4941%" height="15" fill="rgb(248,159,5)" fg:x="37357" fg:w="800"/><text x="70.0631%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="71.2642%" y="181" width="1.4941%" height="15" fill="rgb(241,73,23)" fg:x="38157" fg:w="800"/><text x="71.5572%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="72.7583%" y="181" width="1.4941%" height="15" fill="rgb(226,98,27)" fg:x="38957" fg:w="800"/><text x="73.0513%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="74.2525%" y="181" width="1.4941%" height="15" fill="rgb(231,60,35)" fg:x="39757" fg:w="800"/><text x="74.5454%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="75.7466%" y="181" width="1.5483%" height="15" fill="rgb(209,147,11)" fg:x="40557" fg:w="829"/><text x="76.0396%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="77.2949%" y="181" width="1.4941%" height="15" fill="rgb(233,98,53)" fg:x="41386" fg:w="800"/><text x="77.5879%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="78.7890%" y="181" width="1.4941%" height="15" fill="rgb(244,112,44)" fg:x="42186" fg:w="800"/><text x="79.0820%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="80.2831%" y="181" width="1.4941%" height="15" fill="rgb(224,10,52)" fg:x="42986" fg:w="800"/><text x="80.5761%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="81.7773%" y="181" width="1.5483%" height="15" fill="rgb(245,64,47)" fg:x="43786" fg:w="829"/><text x="82.0702%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="83.3256%" y="181" width="1.4941%" height="15" fill="rgb(220,159,40)" fg:x="44615" fg:w="800"/><text x="83.6185%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="84.8197%" y="181" width="1.4941%" height="15" fill="rgb(207,181,53)" fg:x="45415" fg:w="800"/><text x="85.1126%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="86.3138%" y="181" width="1.4941%" height="15" fill="rgb(237,155,50)" fg:x="46215" fg:w="800"/><text x="86.6068%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="87.8079%" y="181" width="1.4941%" height="15" fill="rgb(250,159,49)" fg:x="47015" fg:w="800"/><text x="88.1009%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="89.3021%" y="181" width="1.4941%" height="15" fill="rgb(236,188,8)" fg:x="47815" fg:w="800"/><text x="89.5950%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="90.7962%" y="181" width="1.4941%" height="15" fill="rgb(222,99,26)" fg:x="48615" fg:w="800"/><text x="91.0892%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="92.2903%" y="181" width="1.4941%" height="15" fill="rgb(237,180,25)" fg:x="49415" fg:w="800"/><text x="92.5833%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (800 instructions, 1.49%)</title><rect x="93.7844%" y="181" width="1.4941%" height="15" fill="rgb(242,103,6)" fg:x="50215" fg:w="800"/><text x="94.0774%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (829 instructions, 1.55%)</title><rect x="95.2786%" y="181" width="1.5483%" height="15" fill="rgb(245,41,17)" fg:x="51015" fg:w="829"/><text x="95.5715%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.10%)</title><rect x="96.8362%" y="117" width="0.1009%" height="15" fill="rgb(220,166,24)" fg:x="51849" fg:w="54"/><text x="97.1292%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.25%)</title><rect x="96.8362%" y="133" width="0.2521%" height="15" fill="rgb(216,91,46)" fg:x="51849" fg:w="135"/><text x="97.1292%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.30%)</title><rect x="96.8362%" y="149" width="0.3026%" height="15" fill="rgb(252,103,37)" fg:x="51849" fg:w="162"/><text x="97.1292%" y="159.50"></text></g><g><title>memset (136 instructions, 0.25%)</title><rect x="97.1387%" y="149" width="0.2540%" height="15" fill="rgb(207,169,29)" fg:x="52011" fg:w="136"/><text x="97.4317%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (462 instructions, 0.86%)</title><rect x="96.8268%" y="165" width="0.8629%" height="15" fill="rgb(214,27,27)" fg:x="51844" fg:w="462"/><text x="97.1198%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.06%)</title><rect x="97.6897%" y="149" width="0.0598%" height="15" fill="rgb(231,106,47)" fg:x="52306" fg:w="32"/><text x="97.9827%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.14%)</title><rect x="97.7495%" y="117" width="0.1419%" height="15" fill="rgb(234,147,3)" fg:x="52338" fg:w="76"/><text x="98.0424%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.21%)</title><rect x="97.7495%" y="133" width="0.2073%" height="15" fill="rgb(239,158,20)" fg:x="52338" fg:w="111"/><text x="98.0424%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (176 instructions, 0.33%)</title><rect x="97.7495%" y="149" width="0.3287%" height="15" fill="rgb(226,159,8)" fg:x="52338" fg:w="176"/><text x="98.0424%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="98.0782%" y="149" width="0.0205%" height="15" fill="rgb(230,194,33)" fg:x="52514" fg:w="11"/><text x="98.3711%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="98.0987%" y="149" width="0.0205%" height="15" fill="rgb(231,210,1)" fg:x="52525" fg:w="11"/><text x="98.3917%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.06%)</title><rect x="98.1193%" y="149" width="0.0560%" height="15" fill="rgb(237,50,24)" fg:x="52536" fg:w="30"/><text x="98.4122%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (472 instructions, 0.88%)</title><rect x="97.6897%" y="165" width="0.8815%" height="15" fill="rgb(240,53,20)" fg:x="52306" fg:w="472"/><text x="97.9827%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.10%)</title><rect x="98.5806%" y="165" width="0.1027%" height="15" fill="rgb(235,59,1)" fg:x="52783" fg:w="55"/><text x="98.8735%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,068 instructions, 1.99%)</title><rect x="96.8268%" y="181" width="1.9947%" height="15" fill="rgb(251,143,19)" fg:x="51844" fg:w="1068"/><text x="97.1198%" y="191.50"></text></g><g><title>heap::batch_remove_4_::{{closure}} (53,081 instructions, 99.14%)</title><rect x="0.3194%" y="197" width="99.1371%" height="15" fill="rgb(235,53,43)" fg:x="171" fg:w="53081"/><text x="0.6123%" y="207.50">heap::batch_remove_4_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.02%)</title><rect x="99.4565%" y="197" width="0.0224%" height="15" fill="rgb(245,115,42)" fg:x="53252" fg:w="12"/><text x="99.7495%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.15%)</title><rect x="99.4789%" y="197" width="0.1513%" height="15" fill="rgb(233,180,6)" fg:x="53264" fg:w="81"/><text x="99.7719%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.19%)</title><rect x="99.6302%" y="197" width="0.1868%" height="15" fill="rgb(211,81,22)" fg:x="53345" fg:w="100"/><text x="99.9232%" y="207.50"></text></g><g><title>all (53,543 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(251,152,4)" fg:x="0" fg:w="53543"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (53,543 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,188,15)" fg:x="0" fg:w="53543"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>