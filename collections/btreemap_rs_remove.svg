<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="81263"><g><title>ic_cdk::setup (19 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0234%" height="15" fill="rgb(220,101,40)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="0.0234%" y="197" width="0.0935%" height="15" fill="rgb(222,129,31)" fg:x="19" fg:w="76"/><text x="0.3163%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="0.1169%" y="197" width="0.0935%" height="15" fill="rgb(227,103,18)" fg:x="95" fg:w="76"/><text x="0.4099%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="0.2104%" y="165" width="0.0935%" height="15" fill="rgb(211,133,9)" fg:x="171" fg:w="76"/><text x="0.5034%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.09%)</title><rect x="0.3040%" y="149" width="0.0874%" height="15" fill="rgb(211,220,5)" fg:x="247" fg:w="71"/><text x="0.5969%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.49%)</title><rect x="0.3913%" y="149" width="0.4922%" height="15" fill="rgb(211,149,6)" fg:x="318" fg:w="400"/><text x="0.6843%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.10%)</title><rect x="0.8836%" y="149" width="0.1046%" height="15" fill="rgb(238,164,51)" fg:x="718" fg:w="85"/><text x="1.1765%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="0.9881%" y="149" width="0.0665%" height="15" fill="rgb(241,128,45)" fg:x="803" fg:w="54"/><text x="1.2811%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.0546%" y="149" width="0.0665%" height="15" fill="rgb(248,134,29)" fg:x="857" fg:w="54"/><text x="1.3476%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.1211%" y="149" width="0.0665%" height="15" fill="rgb(211,192,50)" fg:x="911" fg:w="54"/><text x="1.4140%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.1875%" y="149" width="0.0665%" height="15" fill="rgb(223,170,45)" fg:x="965" fg:w="54"/><text x="1.4805%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.09%)</title><rect x="1.2540%" y="149" width="0.0874%" height="15" fill="rgb(219,135,45)" fg:x="1019" fg:w="71"/><text x="1.5469%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.08%)</title><rect x="1.3413%" y="149" width="0.0800%" height="15" fill="rgb(224,60,45)" fg:x="1090" fg:w="65"/><text x="1.6343%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.49%)</title><rect x="1.4213%" y="149" width="0.4922%" height="15" fill="rgb(243,27,38)" fg:x="1155" fg:w="400"/><text x="1.7143%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="1.9135%" y="149" width="0.0197%" height="15" fill="rgb(228,24,38)" fg:x="1555" fg:w="16"/><text x="2.2065%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="1.9332%" y="133" width="0.0935%" height="15" fill="rgb(223,204,21)" fg:x="1571" fg:w="76"/><text x="2.2262%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.07%)</title><rect x="2.0268%" y="101" width="0.0738%" height="15" fill="rgb(210,102,9)" fg:x="1647" fg:w="60"/><text x="2.3197%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.10%)</title><rect x="2.0268%" y="117" width="0.1046%" height="15" fill="rgb(217,73,1)" fg:x="1647" fg:w="85"/><text x="2.3197%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="2.1314%" y="69" width="0.0111%" height="15" fill="rgb(211,18,46)" fg:x="1732" fg:w="9"/><text x="2.4243%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.04%)</title><rect x="2.1424%" y="53" width="0.0369%" height="15" fill="rgb(247,126,23)" fg:x="1741" fg:w="30"/><text x="2.4354%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.07%)</title><rect x="2.1424%" y="69" width="0.0677%" height="15" fill="rgb(235,46,19)" fg:x="1741" fg:w="55"/><text x="2.4354%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.15%)</title><rect x="2.1314%" y="85" width="0.1452%" height="15" fill="rgb(243,15,47)" fg:x="1732" fg:w="118"/><text x="2.4243%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.21%)</title><rect x="2.1314%" y="101" width="0.2104%" height="15" fill="rgb(236,82,52)" fg:x="1732" fg:w="171"/><text x="2.4243%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.22%)</title><rect x="2.1314%" y="117" width="0.2166%" height="15" fill="rgb(211,41,47)" fg:x="1732" fg:w="176"/><text x="2.4243%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.46%)</title><rect x="2.0268%" y="133" width="0.4578%" height="15" fill="rgb(220,35,32)" fg:x="1647" fg:w="372"/><text x="2.3197%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 0.73%)</title><rect x="1.9332%" y="149" width="0.7310%" height="15" fill="rgb(222,196,9)" fg:x="1571" fg:w="594"/><text x="2.2262%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.10%)</title><rect x="2.6642%" y="149" width="0.1046%" height="15" fill="rgb(210,216,9)" fg:x="2165" fg:w="85"/><text x="2.9572%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="2.7688%" y="149" width="0.0677%" height="15" fill="rgb(230,58,49)" fg:x="2250" fg:w="55"/><text x="3.0618%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.08%)</title><rect x="2.8365%" y="149" width="0.0812%" height="15" fill="rgb(230,163,41)" fg:x="2305" fg:w="66"/><text x="3.1294%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.08%)</title><rect x="2.9177%" y="149" width="0.0800%" height="15" fill="rgb(205,135,42)" fg:x="2371" fg:w="65"/><text x="3.2107%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.49%)</title><rect x="2.9977%" y="133" width="0.4922%" height="15" fill="rgb(246,227,0)" fg:x="2436" fg:w="400"/><text x="3.2906%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="3.4899%" y="133" width="0.0197%" height="15" fill="rgb(208,186,10)" fg:x="2836" fg:w="16"/><text x="3.7829%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="3.5096%" y="117" width="0.0935%" height="15" fill="rgb(218,215,25)" fg:x="2852" fg:w="76"/><text x="3.8026%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.07%)</title><rect x="3.6031%" y="85" width="0.0738%" height="15" fill="rgb(241,215,5)" fg:x="2928" fg:w="60"/><text x="3.8961%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.10%)</title><rect x="3.6031%" y="101" width="0.1046%" height="15" fill="rgb(247,14,27)" fg:x="2928" fg:w="85"/><text x="3.8961%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="3.7077%" y="53" width="0.0111%" height="15" fill="rgb(215,157,6)" fg:x="3013" fg:w="9"/><text x="4.0007%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.04%)</title><rect x="3.7188%" y="37" width="0.0369%" height="15" fill="rgb(234,157,38)" fg:x="3022" fg:w="30"/><text x="4.0118%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.07%)</title><rect x="3.7188%" y="53" width="0.0677%" height="15" fill="rgb(228,40,26)" fg:x="3022" fg:w="55"/><text x="4.0118%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.15%)</title><rect x="3.7077%" y="69" width="0.1452%" height="15" fill="rgb(214,149,27)" fg:x="3013" fg:w="118"/><text x="4.0007%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.21%)</title><rect x="3.7077%" y="85" width="0.2104%" height="15" fill="rgb(239,158,50)" fg:x="3013" fg:w="171"/><text x="4.0007%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.22%)</title><rect x="3.7077%" y="101" width="0.2166%" height="15" fill="rgb(248,194,53)" fg:x="3013" fg:w="176"/><text x="4.0007%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.46%)</title><rect x="3.6031%" y="117" width="0.4578%" height="15" fill="rgb(231,187,49)" fg:x="2928" fg:w="372"/><text x="3.8961%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 0.73%)</title><rect x="3.5096%" y="133" width="0.7310%" height="15" fill="rgb(220,125,11)" fg:x="2852" fg:w="594"/><text x="3.8026%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.10%)</title><rect x="4.2406%" y="133" width="0.1046%" height="15" fill="rgb(253,203,5)" fg:x="3446" fg:w="85"/><text x="4.5335%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="4.3452%" y="133" width="0.0677%" height="15" fill="rgb(222,154,45)" fg:x="3531" fg:w="55"/><text x="4.6381%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.09%)</title><rect x="4.4128%" y="117" width="0.0874%" height="15" fill="rgb(211,130,6)" fg:x="3586" fg:w="71"/><text x="4.7058%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.11%)</title><rect x="4.5002%" y="117" width="0.1120%" height="15" fill="rgb(219,136,18)" fg:x="3657" fg:w="91"/><text x="4.7932%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.08%)</title><rect x="4.6122%" y="117" width="0.0812%" height="15" fill="rgb(235,180,30)" fg:x="3748" fg:w="66"/><text x="4.9052%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 0.35%)</title><rect x="4.4128%" y="133" width="0.3532%" height="15" fill="rgb(209,122,14)" fg:x="3586" fg:w="287"/><text x="4.7058%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (79 instructions, 0.10%)</title><rect x="4.7660%" y="133" width="0.0972%" height="15" fill="rgb(240,10,0)" fg:x="3873" fg:w="79"/><text x="5.0590%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,717 instructions, 2.11%)</title><rect x="2.9977%" y="149" width="2.1129%" height="15" fill="rgb(209,167,28)" fg:x="2436" fg:w="1717"/><text x="3.2906%" y="159.50">b..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.08%)</title><rect x="5.1106%" y="149" width="0.0812%" height="15" fill="rgb(244,114,11)" fg:x="4153" fg:w="66"/><text x="5.4035%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="5.1918%" y="149" width="0.0160%" height="15" fill="rgb(239,0,4)" fg:x="4219" fg:w="13"/><text x="5.4848%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="5.2078%" y="149" width="0.0160%" height="15" fill="rgb(221,109,47)" fg:x="4232" fg:w="13"/><text x="5.5008%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.02%)</title><rect x="5.2324%" y="149" width="0.0185%" height="15" fill="rgb(205,195,7)" fg:x="4252" fg:w="15"/><text x="5.5254%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.09%)</title><rect x="5.2509%" y="133" width="0.0898%" height="15" fill="rgb(226,220,13)" fg:x="4267" fg:w="73"/><text x="5.5438%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (156 instructions, 0.19%)</title><rect x="5.2509%" y="149" width="0.1920%" height="15" fill="rgb(252,34,4)" fg:x="4267" fg:w="156"/><text x="5.5438%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.15%)</title><rect x="5.4428%" y="117" width="0.1452%" height="15" fill="rgb(247,158,39)" fg:x="4423" fg:w="118"/><text x="5.7358%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (153 instructions, 0.19%)</title><rect x="5.4428%" y="133" width="0.1883%" height="15" fill="rgb(228,37,52)" fg:x="4423" fg:w="153"/><text x="5.7358%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (221 instructions, 0.27%)</title><rect x="5.4428%" y="149" width="0.2720%" height="15" fill="rgb(219,45,42)" fg:x="4423" fg:w="221"/><text x="5.7358%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="5.7148%" y="149" width="0.0935%" height="15" fill="rgb(219,68,42)" fg:x="4644" fg:w="76"/><text x="6.0077%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="5.8083%" y="149" width="0.0997%" height="15" fill="rgb(241,229,51)" fg:x="4720" fg:w="81"/><text x="6.1013%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="5.9080%" y="149" width="0.0935%" height="15" fill="rgb(221,166,19)" fg:x="4801" fg:w="76"/><text x="6.2009%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="6.0015%" y="149" width="0.0935%" height="15" fill="rgb(219,187,21)" fg:x="4877" fg:w="76"/><text x="6.2945%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="6.0975%" y="149" width="0.0997%" height="15" fill="rgb(226,197,11)" fg:x="4955" fg:w="81"/><text x="6.3905%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.47%)</title><rect x="6.1972%" y="149" width="0.4688%" height="15" fill="rgb(240,46,49)" fg:x="5036" fg:w="381"/><text x="6.4901%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.47%)</title><rect x="6.6660%" y="149" width="0.4688%" height="15" fill="rgb(240,229,26)" fg:x="5417" fg:w="381"/><text x="6.9590%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,466 instructions, 7.96%)</title><rect x="0.3040%" y="165" width="7.9569%" height="15" fill="rgb(213,25,43)" fg:x="247" fg:w="6466"/><text x="0.5969%" y="175.50">candid::d..</text></g><g><title>memcpy (336 instructions, 0.41%)</title><rect x="8.2608%" y="165" width="0.4135%" height="15" fill="rgb(238,98,45)" fg:x="6713" fg:w="336"/><text x="8.5538%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.05%)</title><rect x="8.6743%" y="165" width="0.0480%" height="15" fill="rgb(229,58,16)" fg:x="7049" fg:w="39"/><text x="8.9673%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="8.7223%" y="165" width="0.0935%" height="15" fill="rgb(217,86,13)" fg:x="7088" fg:w="76"/><text x="9.0153%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="8.8220%" y="133" width="0.0652%" height="15" fill="rgb(246,36,46)" fg:x="7169" fg:w="53"/><text x="9.1149%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.11%)</title><rect x="8.8872%" y="133" width="0.1095%" height="15" fill="rgb(248,64,45)" fg:x="7222" fg:w="89"/><text x="9.1802%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.20%)</title><rect x="8.9967%" y="133" width="0.1981%" height="15" fill="rgb(245,126,49)" fg:x="7311" fg:w="161"/><text x="9.2897%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.66%)</title><rect x="8.8220%" y="149" width="0.6645%" height="15" fill="rgb(212,64,50)" fg:x="7169" fg:w="540"/><text x="9.1149%" y="159.50"></text></g><g><title>candid::types::internal::env_add (755 instructions, 0.93%)</title><rect x="8.8158%" y="165" width="0.9291%" height="15" fill="rgb(244,8,45)" fg:x="7164" fg:w="755"/><text x="9.1088%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="9.7449%" y="165" width="0.1009%" height="15" fill="rgb(252,55,28)" fg:x="7919" fg:w="82"/><text x="10.0379%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="9.8520%" y="133" width="0.0652%" height="15" fill="rgb(218,67,29)" fg:x="8006" fg:w="53"/><text x="10.1449%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.11%)</title><rect x="9.9172%" y="133" width="0.1095%" height="15" fill="rgb(243,92,45)" fg:x="8059" fg:w="89"/><text x="10.2102%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.20%)</title><rect x="10.0267%" y="133" width="0.1981%" height="15" fill="rgb(243,165,19)" fg:x="8148" fg:w="161"/><text x="10.3197%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.66%)</title><rect x="9.8520%" y="149" width="0.6645%" height="15" fill="rgb(219,140,45)" fg:x="8006" fg:w="540"/><text x="10.1449%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.08%)</title><rect x="10.5165%" y="149" width="0.0837%" height="15" fill="rgb(219,153,17)" fg:x="8546" fg:w="68"/><text x="10.8094%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="10.6002%" y="133" width="0.0677%" height="15" fill="rgb(211,177,40)" fg:x="8614" fg:w="55"/><text x="10.8931%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 instructions, 0.10%)</title><rect x="10.6002%" y="149" width="0.1009%" height="15" fill="rgb(214,105,22)" fg:x="8614" fg:w="82"/><text x="10.8931%" y="159.50"></text></g><g><title>candid::types::internal::env_add (863 instructions, 1.06%)</title><rect x="9.8458%" y="165" width="1.0620%" height="15" fill="rgb(208,14,44)" fg:x="8001" fg:w="863"/><text x="10.1388%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="10.9078%" y="117" width="0.0652%" height="15" fill="rgb(232,164,7)" fg:x="8864" fg:w="53"/><text x="11.2008%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.10%)</title><rect x="10.9078%" y="133" width="0.0972%" height="15" fill="rgb(233,57,15)" fg:x="8864" fg:w="79"/><text x="11.2008%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.36%)</title><rect x="10.9078%" y="149" width="0.3593%" height="15" fill="rgb(238,88,15)" fg:x="8864" fg:w="292"/><text x="11.2008%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.310 (15 instructions, 0.02%)</title><rect x="11.2671%" y="149" width="0.0185%" height="15" fill="rgb(230,137,54)" fg:x="9156" fg:w="15"/><text x="11.5601%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.2856%" y="149" width="0.0135%" height="15" fill="rgb(241,228,31)" fg:x="9171" fg:w="11"/><text x="11.5785%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.59%)</title><rect x="10.9078%" y="165" width="0.5882%" height="15" fill="rgb(221,25,3)" fg:x="8864" fg:w="478"/><text x="11.2008%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.04%)</title><rect x="11.4960%" y="165" width="0.0406%" height="15" fill="rgb(240,166,10)" fg:x="9342" fg:w="33"/><text x="11.7890%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="11.5366%" y="149" width="0.0677%" height="15" fill="rgb(207,173,52)" fg:x="9375" fg:w="55"/><text x="11.8296%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="11.6375%" y="149" width="0.0677%" height="15" fill="rgb(229,117,46)" fg:x="9457" fg:w="55"/><text x="11.9305%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (164 instructions, 0.20%)</title><rect x="11.5366%" y="165" width="0.2018%" height="15" fill="rgb(235,200,21)" fg:x="9375" fg:w="164"/><text x="11.8296%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.03%)</title><rect x="11.7384%" y="149" width="0.0345%" height="15" fill="rgb(232,47,9)" fg:x="9539" fg:w="28"/><text x="12.0314%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.12%)</title><rect x="11.7384%" y="165" width="0.1194%" height="15" fill="rgb(210,219,50)" fg:x="9539" fg:w="97"/><text x="12.0314%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.8578%" y="165" width="0.0135%" height="15" fill="rgb(239,209,14)" fg:x="9636" fg:w="11"/><text x="12.1508%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.8713%" y="165" width="0.0135%" height="15" fill="rgb(226,198,48)" fg:x="9647" fg:w="11"/><text x="12.1643%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.8849%" y="165" width="0.0135%" height="15" fill="rgb(228,163,7)" fg:x="9658" fg:w="11"/><text x="12.1778%" y="175.50"></text></g><g><title>memcpy (411 instructions, 0.51%)</title><rect x="11.8984%" y="165" width="0.5058%" height="15" fill="rgb(221,123,27)" fg:x="9669" fg:w="411"/><text x="12.1914%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.01%)</title><rect x="12.4042%" y="133" width="0.0148%" height="15" fill="rgb(211,114,34)" fg:x="10080" fg:w="12"/><text x="12.6971%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.12%)</title><rect x="12.4189%" y="133" width="0.1231%" height="15" fill="rgb(226,95,0)" fg:x="10092" fg:w="100"/><text x="12.7119%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="12.5420%" y="117" width="0.0997%" height="15" fill="rgb(231,103,47)" fg:x="10192" fg:w="81"/><text x="12.8350%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.13%)</title><rect x="12.5420%" y="133" width="0.1329%" height="15" fill="rgb(233,229,35)" fg:x="10192" fg:w="108"/><text x="12.8350%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="12.6749%" y="133" width="0.0135%" height="15" fill="rgb(242,13,0)" fg:x="10300" fg:w="11"/><text x="12.9679%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (273 instructions, 0.34%)</title><rect x="12.4042%" y="149" width="0.3359%" height="15" fill="rgb(219,48,24)" fg:x="10080" fg:w="273"/><text x="12.6971%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (307 instructions, 0.38%)</title><rect x="12.4042%" y="165" width="0.3778%" height="15" fill="rgb(214,127,19)" fg:x="10080" fg:w="307"/><text x="12.6971%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.15%)</title><rect x="12.7820%" y="165" width="0.1514%" height="15" fill="rgb(206,6,46)" fg:x="10387" fg:w="123"/><text x="13.0749%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (10,730 instructions, 13.20%)</title><rect x="0.2104%" y="181" width="13.2040%" height="15" fill="rgb(229,101,51)" fg:x="171" fg:w="10730"/><text x="0.5034%" y="191.50">ic_cdk::api::call..</text></g><g><title>btreemap::MAP::__getit (9 instructions, 0.01%)</title><rect x="13.4145%" y="181" width="0.0111%" height="15" fill="rgb(241,224,23)" fg:x="10901" fg:w="9"/><text x="13.7074%" y="191.50"></text></g><g><title>memmove (143 instructions, 0.18%)</title><rect x="13.4255%" y="165" width="0.1760%" height="15" fill="rgb(211,35,53)" fg:x="10910" fg:w="143"/><text x="13.7185%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.18%)</title><rect x="13.6015%" y="165" width="0.1760%" height="15" fill="rgb(247,10,53)" fg:x="11053" fg:w="143"/><text x="13.8945%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="13.8944%" y="165" width="0.0234%" height="15" fill="rgb(254,67,7)" fg:x="11291" fg:w="19"/><text x="14.1874%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="13.9178%" y="165" width="0.0234%" height="15" fill="rgb(216,105,40)" fg:x="11310" fg:w="19"/><text x="14.2107%" y="175.50"></text></g><g><title>memmove (300 instructions, 0.37%)</title><rect x="13.9412%" y="149" width="0.3692%" height="15" fill="rgb(205,196,3)" fg:x="11329" fg:w="300"/><text x="14.2341%" y="159.50"></text></g><g><title>memcpy (171 instructions, 0.21%)</title><rect x="14.3103%" y="149" width="0.2104%" height="15" fill="rgb(252,112,4)" fg:x="11629" fg:w="171"/><text x="14.6033%" y="159.50"></text></g><g><title>memmove (300 instructions, 0.37%)</title><rect x="14.5208%" y="149" width="0.3692%" height="15" fill="rgb(217,143,41)" fg:x="11800" fg:w="300"/><text x="14.8137%" y="159.50"></text></g><g><title>memcpy (171 instructions, 0.21%)</title><rect x="14.8899%" y="149" width="0.2104%" height="15" fill="rgb(220,28,16)" fg:x="12100" fg:w="171"/><text x="15.1829%" y="159.50"></text></g><g><title>memmove (180 instructions, 0.22%)</title><rect x="15.1004%" y="149" width="0.2215%" height="15" fill="rgb(243,121,26)" fg:x="12271" fg:w="180"/><text x="15.3933%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="15.3219%" y="149" width="0.0997%" height="15" fill="rgb(231,70,21)" fg:x="12451" fg:w="81"/><text x="15.6148%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,525 instructions, 1.88%)</title><rect x="13.9412%" y="165" width="1.8766%" height="15" fill="rgb(209,37,20)" fg:x="11329" fg:w="1525"/><text x="14.2341%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.0430%" y="165" width="0.0234%" height="15" fill="rgb(251,184,22)" fg:x="13037" fg:w="19"/><text x="16.3359%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.0664%" y="165" width="0.0234%" height="15" fill="rgb(218,211,31)" fg:x="13056" fg:w="19"/><text x="16.3593%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.2066%" y="165" width="0.0234%" height="15" fill="rgb(212,4,20)" fg:x="13170" fg:w="19"/><text x="16.4996%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.2300%" y="165" width="0.0234%" height="15" fill="rgb(215,113,5)" fg:x="13189" fg:w="19"/><text x="16.5230%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="16.2534%" y="149" width="0.0135%" height="15" fill="rgb(205,59,4)" fg:x="13208" fg:w="11"/><text x="16.5464%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="16.2669%" y="149" width="0.0135%" height="15" fill="rgb(226,30,8)" fg:x="13219" fg:w="11"/><text x="16.5599%" y="159.50"></text></g><g><title>memmove (270 instructions, 0.33%)</title><rect x="16.2805%" y="149" width="0.3323%" height="15" fill="rgb(239,102,20)" fg:x="13230" fg:w="270"/><text x="16.5734%" y="159.50"></text></g><g><title>memmove (270 instructions, 0.33%)</title><rect x="16.6127%" y="149" width="0.3323%" height="15" fill="rgb(221,224,32)" fg:x="13500" fg:w="270"/><text x="16.9057%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_right (704 instructions, 0.87%)</title><rect x="16.2534%" y="165" width="0.8663%" height="15" fill="rgb(244,2,17)" fg:x="13208" fg:w="704"/><text x="16.5464%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="17.3474%" y="165" width="0.0234%" height="15" fill="rgb(214,208,53)" fg:x="14097" fg:w="19"/><text x="17.6403%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="17.3708%" y="165" width="0.0234%" height="15" fill="rgb(228,107,19)" fg:x="14116" fg:w="19"/><text x="17.6637%" y="175.50"></text></g><g><title>memmove (180 instructions, 0.22%)</title><rect x="17.5110%" y="165" width="0.2215%" height="15" fill="rgb(249,110,8)" fg:x="14230" fg:w="180"/><text x="17.8040%" y="175.50"></text></g><g><title>memmove (180 instructions, 0.22%)</title><rect x="17.7325%" y="165" width="0.2215%" height="15" fill="rgb(236,165,39)" fg:x="14410" fg:w="180"/><text x="18.0255%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.0710%" y="165" width="0.0234%" height="15" fill="rgb(250,81,28)" fg:x="14685" fg:w="19"/><text x="18.3639%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.0943%" y="165" width="0.0234%" height="15" fill="rgb(222,188,44)" fg:x="14704" fg:w="19"/><text x="18.3873%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.2346%" y="165" width="0.0234%" height="15" fill="rgb(240,22,31)" fg:x="14818" fg:w="19"/><text x="18.5276%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.2580%" y="165" width="0.0234%" height="15" fill="rgb(224,15,12)" fg:x="14837" fg:w="19"/><text x="18.5510%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.3983%" y="165" width="0.0234%" height="15" fill="rgb(240,20,2)" fg:x="14951" fg:w="19"/><text x="18.6913%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.4217%" y="165" width="0.0234%" height="15" fill="rgb(207,13,26)" fg:x="14970" fg:w="19"/><text x="18.7146%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.5620%" y="165" width="0.0234%" height="15" fill="rgb(239,182,18)" fg:x="15084" fg:w="19"/><text x="18.8549%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.5853%" y="165" width="0.0234%" height="15" fill="rgb(218,73,4)" fg:x="15103" fg:w="19"/><text x="18.8783%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.7256%" y="165" width="0.0234%" height="15" fill="rgb(218,17,48)" fg:x="15217" fg:w="19"/><text x="19.0186%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.7490%" y="165" width="0.0234%" height="15" fill="rgb(207,107,30)" fg:x="15236" fg:w="19"/><text x="19.0420%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.8893%" y="165" width="0.0234%" height="15" fill="rgb(247,38,21)" fg:x="15350" fg:w="19"/><text x="19.1823%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.9127%" y="165" width="0.0234%" height="15" fill="rgb(222,33,52)" fg:x="15369" fg:w="19"/><text x="19.2056%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.0530%" y="165" width="0.0234%" height="15" fill="rgb(218,163,50)" fg:x="15483" fg:w="19"/><text x="19.3459%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.0763%" y="165" width="0.0234%" height="15" fill="rgb(217,61,4)" fg:x="15502" fg:w="19"/><text x="19.3693%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.2166%" y="165" width="0.0234%" height="15" fill="rgb(241,8,16)" fg:x="15616" fg:w="19"/><text x="19.5096%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.2400%" y="165" width="0.0234%" height="15" fill="rgb(244,128,52)" fg:x="15635" fg:w="19"/><text x="19.5330%" y="175.50"></text></g><g><title>memmove (210 instructions, 0.26%)</title><rect x="19.3803%" y="165" width="0.2584%" height="15" fill="rgb(209,137,30)" fg:x="15749" fg:w="210"/><text x="19.6733%" y="175.50"></text></g><g><title>memmove (210 instructions, 0.26%)</title><rect x="19.6387%" y="165" width="0.2584%" height="15" fill="rgb(247,36,26)" fg:x="15959" fg:w="210"/><text x="19.9317%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.0140%" y="165" width="0.0234%" height="15" fill="rgb(210,85,27)" fg:x="16264" fg:w="19"/><text x="20.3070%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.0374%" y="165" width="0.0234%" height="15" fill="rgb(213,152,2)" fg:x="16283" fg:w="19"/><text x="20.3304%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.1777%" y="165" width="0.0234%" height="15" fill="rgb(210,3,39)" fg:x="16397" fg:w="19"/><text x="20.4707%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.2011%" y="165" width="0.0234%" height="15" fill="rgb(248,166,45)" fg:x="16416" fg:w="19"/><text x="20.4940%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.3414%" y="165" width="0.0234%" height="15" fill="rgb(250,31,48)" fg:x="16530" fg:w="19"/><text x="20.6343%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.3647%" y="165" width="0.0234%" height="15" fill="rgb(220,92,20)" fg:x="16549" fg:w="19"/><text x="20.6577%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.5050%" y="165" width="0.0234%" height="15" fill="rgb(219,46,45)" fg:x="16663" fg:w="19"/><text x="20.7980%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.5284%" y="165" width="0.0234%" height="15" fill="rgb(242,224,50)" fg:x="16682" fg:w="19"/><text x="20.8214%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.6687%" y="165" width="0.0234%" height="15" fill="rgb(229,53,23)" fg:x="16796" fg:w="19"/><text x="20.9617%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.6921%" y="165" width="0.0234%" height="15" fill="rgb(214,156,36)" fg:x="16815" fg:w="19"/><text x="20.9850%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.8324%" y="165" width="0.0234%" height="15" fill="rgb(251,164,4)" fg:x="16929" fg:w="19"/><text x="21.1253%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.8557%" y="165" width="0.0234%" height="15" fill="rgb(223,49,8)" fg:x="16948" fg:w="19"/><text x="21.1487%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.9960%" y="165" width="0.0234%" height="15" fill="rgb(205,169,17)" fg:x="17062" fg:w="19"/><text x="21.2890%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.0194%" y="165" width="0.0234%" height="15" fill="rgb(205,58,20)" fg:x="17081" fg:w="19"/><text x="21.3124%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.1597%" y="165" width="0.0234%" height="15" fill="rgb(236,227,14)" fg:x="17195" fg:w="19"/><text x="21.4527%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.1831%" y="165" width="0.0234%" height="15" fill="rgb(233,198,53)" fg:x="17214" fg:w="19"/><text x="21.4760%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.3234%" y="165" width="0.0234%" height="15" fill="rgb(212,161,42)" fg:x="17328" fg:w="19"/><text x="21.6163%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.3467%" y="165" width="0.0234%" height="15" fill="rgb(248,177,35)" fg:x="17347" fg:w="19"/><text x="21.6397%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.4870%" y="165" width="0.0234%" height="15" fill="rgb(242,73,36)" fg:x="17461" fg:w="19"/><text x="21.7800%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.5104%" y="165" width="0.0234%" height="15" fill="rgb(245,107,31)" fg:x="17480" fg:w="19"/><text x="21.8034%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.6507%" y="165" width="0.0234%" height="15" fill="rgb(220,120,0)" fg:x="17594" fg:w="19"/><text x="21.9437%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.6741%" y="165" width="0.0234%" height="15" fill="rgb(212,41,7)" fg:x="17613" fg:w="19"/><text x="21.9670%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.8144%" y="165" width="0.0234%" height="15" fill="rgb(232,70,4)" fg:x="17727" fg:w="19"/><text x="22.1073%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.8377%" y="165" width="0.0234%" height="15" fill="rgb(215,142,44)" fg:x="17746" fg:w="19"/><text x="22.1307%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.9780%" y="165" width="0.0234%" height="15" fill="rgb(215,84,33)" fg:x="17860" fg:w="19"/><text x="22.2710%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.0014%" y="165" width="0.0234%" height="15" fill="rgb(207,229,26)" fg:x="17879" fg:w="19"/><text x="22.2944%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.1417%" y="165" width="0.0234%" height="15" fill="rgb(252,106,39)" fg:x="17993" fg:w="19"/><text x="22.4347%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.1651%" y="165" width="0.0234%" height="15" fill="rgb(234,125,38)" fg:x="18012" fg:w="19"/><text x="22.4580%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.3054%" y="165" width="0.0234%" height="15" fill="rgb(252,3,2)" fg:x="18126" fg:w="19"/><text x="22.5983%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.3287%" y="165" width="0.0234%" height="15" fill="rgb(236,1,28)" fg:x="18145" fg:w="19"/><text x="22.6217%" y="175.50"></text></g><g><title>memmove (180 instructions, 0.22%)</title><rect x="22.4690%" y="165" width="0.2215%" height="15" fill="rgb(230,157,39)" fg:x="18259" fg:w="180"/><text x="22.7620%" y="175.50"></text></g><g><title>memmove (180 instructions, 0.22%)</title><rect x="22.6905%" y="165" width="0.2215%" height="15" fill="rgb(243,199,42)" fg:x="18439" fg:w="180"/><text x="22.9835%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.0289%" y="165" width="0.0234%" height="15" fill="rgb(215,46,49)" fg:x="18714" fg:w="19"/><text x="23.3219%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.0523%" y="165" width="0.0234%" height="15" fill="rgb(220,180,9)" fg:x="18733" fg:w="19"/><text x="23.3453%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.1926%" y="165" width="0.0234%" height="15" fill="rgb(219,185,36)" fg:x="18847" fg:w="19"/><text x="23.4856%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.2160%" y="165" width="0.0234%" height="15" fill="rgb(228,117,53)" fg:x="18866" fg:w="19"/><text x="23.5089%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.3563%" y="165" width="0.0234%" height="15" fill="rgb(221,106,12)" fg:x="18980" fg:w="19"/><text x="23.6492%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.3796%" y="165" width="0.0234%" height="15" fill="rgb(215,108,17)" fg:x="18999" fg:w="19"/><text x="23.6726%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.5199%" y="165" width="0.0234%" height="15" fill="rgb(245,26,18)" fg:x="19113" fg:w="19"/><text x="23.8129%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.5433%" y="165" width="0.0234%" height="15" fill="rgb(237,27,36)" fg:x="19132" fg:w="19"/><text x="23.8363%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.6836%" y="165" width="0.0234%" height="15" fill="rgb(247,5,1)" fg:x="19246" fg:w="19"/><text x="23.9766%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.7070%" y="165" width="0.0234%" height="15" fill="rgb(215,108,11)" fg:x="19265" fg:w="19"/><text x="23.9999%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.24%)</title><rect x="23.7304%" y="149" width="0.2363%" height="15" fill="rgb(252,83,12)" fg:x="19284" fg:w="192"/><text x="24.0233%" y="159.50"></text></g><g><title>memmove (192 instructions, 0.24%)</title><rect x="23.9666%" y="149" width="0.2363%" height="15" fill="rgb(224,206,18)" fg:x="19476" fg:w="192"/><text x="24.2596%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="24.2029%" y="149" width="0.0135%" height="15" fill="rgb(248,203,50)" fg:x="19668" fg:w="11"/><text x="24.4959%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="24.2164%" y="149" width="0.0135%" height="15" fill="rgb(252,31,12)" fg:x="19679" fg:w="11"/><text x="24.5094%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_left (548 instructions, 0.67%)</title><rect x="23.7304%" y="165" width="0.6744%" height="15" fill="rgb(232,228,4)" fg:x="19284" fg:w="548"/><text x="24.0233%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.18%)</title><rect x="24.6361%" y="165" width="0.1760%" height="15" fill="rgb(245,220,34)" fg:x="20020" fg:w="143"/><text x="24.9290%" y="175.50"></text></g><g><title>memmove (143 instructions, 0.18%)</title><rect x="24.8120%" y="165" width="0.1760%" height="15" fill="rgb(239,102,53)" fg:x="20163" fg:w="143"/><text x="25.1050%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.1049%" y="165" width="0.0234%" height="15" fill="rgb(239,63,17)" fg:x="20401" fg:w="19"/><text x="25.3979%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.1283%" y="165" width="0.0234%" height="15" fill="rgb(211,89,0)" fg:x="20420" fg:w="19"/><text x="25.4213%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.2686%" y="165" width="0.0234%" height="15" fill="rgb(228,127,4)" fg:x="20534" fg:w="19"/><text x="25.5615%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.2920%" y="165" width="0.0234%" height="15" fill="rgb(248,184,36)" fg:x="20553" fg:w="19"/><text x="25.5849%" y="175.50"></text></g><g><title>memmove (210 instructions, 0.26%)</title><rect x="25.4322%" y="165" width="0.2584%" height="15" fill="rgb(234,210,44)" fg:x="20667" fg:w="210"/><text x="25.7252%" y="175.50"></text></g><g><title>memmove (210 instructions, 0.26%)</title><rect x="25.6907%" y="165" width="0.2584%" height="15" fill="rgb(211,192,41)" fg:x="20877" fg:w="210"/><text x="25.9836%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.0660%" y="165" width="0.0234%" height="15" fill="rgb(234,98,45)" fg:x="21182" fg:w="19"/><text x="26.3590%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.0894%" y="165" width="0.0234%" height="15" fill="rgb(226,184,27)" fg:x="21201" fg:w="19"/><text x="26.3823%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.1127%" y="149" width="0.0234%" height="15" fill="rgb(248,47,9)" fg:x="21220" fg:w="19"/><text x="26.4057%" y="159.50"></text></g><g><title>memcpy (171 instructions, 0.21%)</title><rect x="26.1361%" y="149" width="0.2104%" height="15" fill="rgb(234,135,15)" fg:x="21239" fg:w="171"/><text x="26.4291%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.3466%" y="149" width="0.0234%" height="15" fill="rgb(218,229,45)" fg:x="21410" fg:w="19"/><text x="26.6395%" y="159.50"></text></g><g><title>memcpy (171 instructions, 0.21%)</title><rect x="26.3699%" y="149" width="0.2104%" height="15" fill="rgb(233,105,40)" fg:x="21429" fg:w="171"/><text x="26.6629%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.5804%" y="149" width="0.0234%" height="15" fill="rgb(228,166,10)" fg:x="21600" fg:w="19"/><text x="26.8733%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (78 instructions, 0.10%)</title><rect x="26.6037%" y="149" width="0.0960%" height="15" fill="rgb(243,66,27)" fg:x="21619" fg:w="78"/><text x="26.8967%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (656 instructions, 0.81%)</title><rect x="26.1127%" y="165" width="0.8073%" height="15" fill="rgb(231,46,38)" fg:x="21220" fg:w="656"/><text x="26.4057%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.1452%" y="165" width="0.0234%" height="15" fill="rgb(248,117,18)" fg:x="22059" fg:w="19"/><text x="27.4382%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.1686%" y="165" width="0.0234%" height="15" fill="rgb(210,189,6)" fg:x="22078" fg:w="19"/><text x="27.4615%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.3089%" y="165" width="0.0234%" height="15" fill="rgb(221,40,47)" fg:x="22192" fg:w="19"/><text x="27.6018%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.3322%" y="165" width="0.0234%" height="15" fill="rgb(208,18,49)" fg:x="22211" fg:w="19"/><text x="27.6252%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.4725%" y="165" width="0.0234%" height="15" fill="rgb(233,67,46)" fg:x="22325" fg:w="19"/><text x="27.7655%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.4959%" y="165" width="0.0234%" height="15" fill="rgb(250,128,28)" fg:x="22344" fg:w="19"/><text x="27.7889%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.6362%" y="165" width="0.0234%" height="15" fill="rgb(223,170,18)" fg:x="22458" fg:w="19"/><text x="27.9292%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.6596%" y="165" width="0.0234%" height="15" fill="rgb(209,211,26)" fg:x="22477" fg:w="19"/><text x="27.9525%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.7999%" y="165" width="0.0234%" height="15" fill="rgb(217,227,11)" fg:x="22591" fg:w="19"/><text x="28.0928%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.8232%" y="165" width="0.0234%" height="15" fill="rgb(211,85,42)" fg:x="22610" fg:w="19"/><text x="28.1162%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.9635%" y="165" width="0.0234%" height="15" fill="rgb(216,171,2)" fg:x="22724" fg:w="19"/><text x="28.2565%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.9869%" y="165" width="0.0234%" height="15" fill="rgb(250,124,51)" fg:x="22743" fg:w="19"/><text x="28.2799%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.1272%" y="165" width="0.0234%" height="15" fill="rgb(249,28,37)" fg:x="22857" fg:w="19"/><text x="28.4202%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.1506%" y="165" width="0.0234%" height="15" fill="rgb(218,102,20)" fg:x="22876" fg:w="19"/><text x="28.4435%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.2909%" y="165" width="0.0234%" height="15" fill="rgb(254,102,2)" fg:x="22990" fg:w="19"/><text x="28.5838%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.3142%" y="165" width="0.0234%" height="15" fill="rgb(241,42,0)" fg:x="23009" fg:w="19"/><text x="28.6072%" y="175.50"></text></g><g><title>memmove (210 instructions, 0.26%)</title><rect x="28.4545%" y="165" width="0.2584%" height="15" fill="rgb(215,39,30)" fg:x="23123" fg:w="210"/><text x="28.7475%" y="175.50"></text></g><g><title>memmove (210 instructions, 0.26%)</title><rect x="28.7129%" y="165" width="0.2584%" height="15" fill="rgb(205,72,52)" fg:x="23333" fg:w="210"/><text x="29.0059%" y="175.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (12,728 instructions, 15.66%)</title><rect x="13.4255%" y="181" width="15.6627%" height="15" fill="rgb(248,113,13)" fg:x="10910" fg:w="12728"/><text x="13.7185%" y="191.50">alloc::collections::..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (57 instructions, 0.07%)</title><rect x="29.0944%" y="133" width="0.0701%" height="15" fill="rgb(212,120,42)" fg:x="23643" fg:w="57"/><text x="29.3874%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (84 instructions, 0.10%)</title><rect x="29.0944%" y="149" width="0.1034%" height="15" fill="rgb(236,88,35)" fg:x="23643" fg:w="84"/><text x="29.3874%" y="159.50"></text></g><g><title>memset (136 instructions, 0.17%)</title><rect x="29.1978%" y="149" width="0.1674%" height="15" fill="rgb(248,224,14)" fg:x="23727" fg:w="136"/><text x="29.4908%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (384 instructions, 0.47%)</title><rect x="29.0883%" y="165" width="0.4725%" height="15" fill="rgb(227,174,17)" fg:x="23638" fg:w="384"/><text x="29.3812%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.04%)</title><rect x="29.5608%" y="149" width="0.0394%" height="15" fill="rgb(225,119,6)" fg:x="24022" fg:w="32"/><text x="29.8538%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="29.6002%" y="117" width="0.0935%" height="15" fill="rgb(211,178,6)" fg:x="24054" fg:w="76"/><text x="29.8932%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.14%)</title><rect x="29.6002%" y="133" width="0.1366%" height="15" fill="rgb(234,207,25)" fg:x="24054" fg:w="111"/><text x="29.8932%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (176 instructions, 0.22%)</title><rect x="29.6002%" y="149" width="0.2166%" height="15" fill="rgb(250,43,8)" fg:x="24054" fg:w="176"/><text x="29.8932%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="29.8168%" y="149" width="0.0135%" height="15" fill="rgb(208,20,18)" fg:x="24230" fg:w="11"/><text x="30.1097%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="29.8303%" y="149" width="0.0135%" height="15" fill="rgb(227,74,4)" fg:x="24241" fg:w="11"/><text x="30.1233%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.04%)</title><rect x="29.8438%" y="149" width="0.0369%" height="15" fill="rgb(254,167,9)" fg:x="24252" fg:w="30"/><text x="30.1368%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (472 instructions, 0.58%)</title><rect x="29.5608%" y="165" width="0.5808%" height="15" fill="rgb(233,18,12)" fg:x="24022" fg:w="472"/><text x="29.8538%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="30.1478%" y="165" width="0.0677%" height="15" fill="rgb(237,18,54)" fg:x="24499" fg:w="55"/><text x="30.4408%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (990 instructions, 1.22%)</title><rect x="29.0883%" y="181" width="1.2183%" height="15" fill="rgb(215,135,26)" fg:x="23638" fg:w="990"/><text x="29.3812%" y="191.50"></text></g><g><title>btreemap::batch_remove_4_::{{closure}} (80,733 instructions, 99.35%)</title><rect x="0.2104%" y="197" width="99.3478%" height="15" fill="rgb(234,52,47)" fg:x="171" fg:w="80733"/><text x="0.5034%" y="207.50">btreemap::batch_remove_4_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.01%)</title><rect x="99.5582%" y="197" width="0.0148%" height="15" fill="rgb(207,7,9)" fg:x="80904" fg:w="12"/><text x="99.8512%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="99.5730%" y="197" width="0.0997%" height="15" fill="rgb(218,149,23)" fg:x="80916" fg:w="81"/><text x="99.8660%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.21%)</title><rect x="99.6727%" y="197" width="0.2067%" height="15" fill="rgb(238,125,25)" fg:x="80997" fg:w="168"/><text x="99.9656%" y="207.50"></text></g><g><title>all (81,263 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(244,36,8)" fg:x="0" fg:w="81263"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (81,263 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,62,10)" fg:x="0" fg:w="81263"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>