<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="75309"><g><title>ic_cdk::setup (19 instructions, 0.03%)</title><rect x="0.0000%" y="197" width="0.0252%" height="15" fill="rgb(236,136,9)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="0.0252%" y="197" width="0.1009%" height="15" fill="rgb(237,184,9)" fg:x="19" fg:w="76"/><text x="0.3182%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="0.1261%" y="197" width="0.1009%" height="15" fill="rgb(219,47,16)" fg:x="95" fg:w="76"/><text x="0.4191%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="0.2271%" y="165" width="0.1009%" height="15" fill="rgb(229,105,14)" fg:x="171" fg:w="76"/><text x="0.5200%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.09%)</title><rect x="0.3280%" y="149" width="0.0943%" height="15" fill="rgb(249,111,32)" fg:x="247" fg:w="71"/><text x="0.6210%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.53%)</title><rect x="0.4223%" y="149" width="0.5338%" height="15" fill="rgb(238,190,25)" fg:x="318" fg:w="402"/><text x="0.7152%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.11%)</title><rect x="0.9561%" y="149" width="0.1102%" height="15" fill="rgb(232,151,10)" fg:x="720" fg:w="83"/><text x="1.2490%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.0663%" y="149" width="0.0717%" height="15" fill="rgb(217,42,22)" fg:x="803" fg:w="54"/><text x="1.3592%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.1380%" y="149" width="0.0717%" height="15" fill="rgb(254,215,22)" fg:x="857" fg:w="54"/><text x="1.4309%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.2097%" y="149" width="0.0717%" height="15" fill="rgb(240,71,21)" fg:x="911" fg:w="54"/><text x="1.5027%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.2814%" y="149" width="0.0717%" height="15" fill="rgb(216,112,32)" fg:x="965" fg:w="54"/><text x="1.5744%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.09%)</title><rect x="1.3531%" y="149" width="0.0943%" height="15" fill="rgb(249,0,28)" fg:x="1019" fg:w="71"/><text x="1.6461%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.09%)</title><rect x="1.4474%" y="149" width="0.0863%" height="15" fill="rgb(205,65,54)" fg:x="1090" fg:w="65"/><text x="1.7403%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.53%)</title><rect x="1.5337%" y="149" width="0.5338%" height="15" fill="rgb(207,137,6)" fg:x="1155" fg:w="402"/><text x="1.8266%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="2.0675%" y="149" width="0.0212%" height="15" fill="rgb(240,78,10)" fg:x="1557" fg:w="16"/><text x="2.3605%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="2.0887%" y="133" width="0.1009%" height="15" fill="rgb(212,224,16)" fg:x="1573" fg:w="76"/><text x="2.3817%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.08%)</title><rect x="2.1896%" y="101" width="0.0797%" height="15" fill="rgb(208,19,20)" fg:x="1649" fg:w="60"/><text x="2.4826%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.11%)</title><rect x="2.1896%" y="117" width="0.1129%" height="15" fill="rgb(231,159,47)" fg:x="1649" fg:w="85"/><text x="2.4826%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="2.3025%" y="69" width="0.0120%" height="15" fill="rgb(228,139,15)" fg:x="1734" fg:w="9"/><text x="2.5955%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.04%)</title><rect x="2.3145%" y="53" width="0.0398%" height="15" fill="rgb(228,169,37)" fg:x="1743" fg:w="30"/><text x="2.6074%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.07%)</title><rect x="2.3145%" y="69" width="0.0730%" height="15" fill="rgb(242,76,39)" fg:x="1743" fg:w="55"/><text x="2.6074%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.15%)</title><rect x="2.3025%" y="85" width="0.1514%" height="15" fill="rgb(242,114,33)" fg:x="1734" fg:w="114"/><text x="2.5955%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.22%)</title><rect x="2.3025%" y="101" width="0.2218%" height="15" fill="rgb(243,111,43)" fg:x="1734" fg:w="167"/><text x="2.5955%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.23%)</title><rect x="2.3025%" y="117" width="0.2284%" height="15" fill="rgb(232,144,23)" fg:x="1734" fg:w="172"/><text x="2.5955%" y="127.50"></text></g><g><title>core::fmt::write (368 instructions, 0.49%)</title><rect x="2.1896%" y="133" width="0.4887%" height="15" fill="rgb(247,18,26)" fg:x="1649" fg:w="368"/><text x="2.4826%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 0.75%)</title><rect x="2.0887%" y="149" width="0.7502%" height="15" fill="rgb(207,186,27)" fg:x="1573" fg:w="565"/><text x="2.3817%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.11%)</title><rect x="2.8390%" y="149" width="0.1102%" height="15" fill="rgb(214,88,33)" fg:x="2138" fg:w="83"/><text x="3.1319%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="2.9492%" y="149" width="0.0730%" height="15" fill="rgb(205,100,9)" fg:x="2221" fg:w="55"/><text x="3.2422%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.09%)</title><rect x="3.0222%" y="149" width="0.0863%" height="15" fill="rgb(240,185,0)" fg:x="2276" fg:w="65"/><text x="3.3152%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.09%)</title><rect x="3.1085%" y="149" width="0.0863%" height="15" fill="rgb(240,111,29)" fg:x="2341" fg:w="65"/><text x="3.4015%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 0.53%)</title><rect x="3.1948%" y="133" width="0.5338%" height="15" fill="rgb(238,224,47)" fg:x="2406" fg:w="402"/><text x="3.4878%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="3.7286%" y="133" width="0.0212%" height="15" fill="rgb(206,163,39)" fg:x="2808" fg:w="16"/><text x="4.0216%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="3.7499%" y="117" width="0.1009%" height="15" fill="rgb(227,191,49)" fg:x="2824" fg:w="76"/><text x="4.0429%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.08%)</title><rect x="3.8508%" y="85" width="0.0797%" height="15" fill="rgb(226,6,14)" fg:x="2900" fg:w="60"/><text x="4.1438%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.11%)</title><rect x="3.8508%" y="101" width="0.1129%" height="15" fill="rgb(235,38,26)" fg:x="2900" fg:w="85"/><text x="4.1438%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="3.9637%" y="53" width="0.0120%" height="15" fill="rgb(212,6,48)" fg:x="2985" fg:w="9"/><text x="4.2566%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.04%)</title><rect x="3.9756%" y="37" width="0.0398%" height="15" fill="rgb(227,34,37)" fg:x="2994" fg:w="30"/><text x="4.2686%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.07%)</title><rect x="3.9756%" y="53" width="0.0730%" height="15" fill="rgb(221,103,16)" fg:x="2994" fg:w="55"/><text x="4.2686%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.15%)</title><rect x="3.9637%" y="69" width="0.1514%" height="15" fill="rgb(250,193,16)" fg:x="2985" fg:w="114"/><text x="4.2566%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.22%)</title><rect x="3.9637%" y="85" width="0.2218%" height="15" fill="rgb(234,29,2)" fg:x="2985" fg:w="167"/><text x="4.2566%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.23%)</title><rect x="3.9637%" y="101" width="0.2284%" height="15" fill="rgb(212,52,10)" fg:x="2985" fg:w="172"/><text x="4.2566%" y="111.50"></text></g><g><title>core::fmt::write (368 instructions, 0.49%)</title><rect x="3.8508%" y="117" width="0.4887%" height="15" fill="rgb(231,128,52)" fg:x="2900" fg:w="368"/><text x="4.1438%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 0.75%)</title><rect x="3.7499%" y="133" width="0.7502%" height="15" fill="rgb(252,82,9)" fg:x="2824" fg:w="565"/><text x="4.0429%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.11%)</title><rect x="4.5001%" y="133" width="0.1102%" height="15" fill="rgb(241,21,44)" fg:x="3389" fg:w="83"/><text x="4.7931%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="4.6103%" y="133" width="0.0730%" height="15" fill="rgb(208,76,30)" fg:x="3472" fg:w="55"/><text x="4.9033%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.09%)</title><rect x="4.6834%" y="117" width="0.0943%" height="15" fill="rgb(249,118,6)" fg:x="3527" fg:w="71"/><text x="4.9763%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (90 instructions, 0.12%)</title><rect x="4.7776%" y="117" width="0.1195%" height="15" fill="rgb(231,38,26)" fg:x="3598" fg:w="90"/><text x="5.0706%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.09%)</title><rect x="4.8972%" y="117" width="0.0863%" height="15" fill="rgb(247,158,53)" fg:x="3688" fg:w="65"/><text x="5.1901%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (285 instructions, 0.38%)</title><rect x="4.6834%" y="133" width="0.3784%" height="15" fill="rgb(213,150,18)" fg:x="3527" fg:w="285"/><text x="4.9763%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.10%)</title><rect x="5.0618%" y="133" width="0.1036%" height="15" fill="rgb(250,75,32)" fg:x="3812" fg:w="78"/><text x="5.3548%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,687 instructions, 2.24%)</title><rect x="3.1948%" y="149" width="2.2401%" height="15" fill="rgb(239,93,41)" fg:x="2406" fg:w="1687"/><text x="3.4878%" y="159.50">b..</text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.09%)</title><rect x="5.4349%" y="149" width="0.0863%" height="15" fill="rgb(215,209,6)" fg:x="4093" fg:w="65"/><text x="5.7279%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="5.5213%" y="149" width="0.0173%" height="15" fill="rgb(209,124,7)" fg:x="4158" fg:w="13"/><text x="5.8142%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="5.5385%" y="149" width="0.0173%" height="15" fill="rgb(212,95,45)" fg:x="4171" fg:w="13"/><text x="5.8315%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.02%)</title><rect x="5.5651%" y="149" width="0.0199%" height="15" fill="rgb(213,203,26)" fg:x="4191" fg:w="15"/><text x="5.8580%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.09%)</title><rect x="5.5850%" y="133" width="0.0943%" height="15" fill="rgb(244,224,28)" fg:x="4206" fg:w="71"/><text x="5.8780%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (154 instructions, 0.20%)</title><rect x="5.5850%" y="149" width="0.2045%" height="15" fill="rgb(240,74,21)" fg:x="4206" fg:w="154"/><text x="5.8780%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (113 instructions, 0.15%)</title><rect x="5.7895%" y="117" width="0.1500%" height="15" fill="rgb(227,190,19)" fg:x="4360" fg:w="113"/><text x="6.0824%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (147 instructions, 0.20%)</title><rect x="5.7895%" y="133" width="0.1952%" height="15" fill="rgb(220,16,40)" fg:x="4360" fg:w="147"/><text x="6.0824%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (217 instructions, 0.29%)</title><rect x="5.7895%" y="149" width="0.2881%" height="15" fill="rgb(250,112,48)" fg:x="4360" fg:w="217"/><text x="6.0824%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="6.0776%" y="149" width="0.1009%" height="15" fill="rgb(233,174,19)" fg:x="4577" fg:w="76"/><text x="6.3706%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.11%)</title><rect x="6.1785%" y="149" width="0.1076%" height="15" fill="rgb(222,9,49)" fg:x="4653" fg:w="81"/><text x="6.4715%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="6.2861%" y="149" width="0.1009%" height="15" fill="rgb(231,213,34)" fg:x="4734" fg:w="76"/><text x="6.5791%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="6.3870%" y="149" width="0.1009%" height="15" fill="rgb(207,158,54)" fg:x="4810" fg:w="76"/><text x="6.6800%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.11%)</title><rect x="6.4906%" y="149" width="0.1076%" height="15" fill="rgb(230,119,35)" fg:x="4888" fg:w="81"/><text x="6.7836%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.53%)</title><rect x="6.5981%" y="149" width="0.5298%" height="15" fill="rgb(208,65,33)" fg:x="4969" fg:w="399"/><text x="6.8911%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.53%)</title><rect x="7.1280%" y="149" width="0.5298%" height="15" fill="rgb(220,183,48)" fg:x="5368" fg:w="399"/><text x="7.4209%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,480 instructions, 8.60%)</title><rect x="0.3280%" y="165" width="8.6045%" height="15" fill="rgb(239,148,2)" fg:x="247" fg:w="6480"/><text x="0.6210%" y="175.50">candid::de..</text></g><g><title>memcpy (354 instructions, 0.47%)</title><rect x="8.9325%" y="165" width="0.4701%" height="15" fill="rgb(250,83,27)" fg:x="6727" fg:w="354"/><text x="9.2255%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.02%)</title><rect x="9.4026%" y="149" width="0.0159%" height="15" fill="rgb(213,187,6)" fg:x="7081" fg:w="12"/><text x="9.6956%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.07%)</title><rect x="9.4026%" y="165" width="0.0664%" height="15" fill="rgb(238,152,14)" fg:x="7081" fg:w="50"/><text x="9.6956%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="9.4690%" y="165" width="0.1009%" height="15" fill="rgb(205,157,43)" fg:x="7131" fg:w="76"/><text x="9.7620%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.02%)</title><rect x="9.5699%" y="149" width="0.0159%" height="15" fill="rgb(228,168,7)" fg:x="7207" fg:w="12"/><text x="9.8629%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="9.5858%" y="133" width="0.0704%" height="15" fill="rgb(220,23,20)" fg:x="7219" fg:w="53"/><text x="9.8788%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.12%)</title><rect x="9.6562%" y="133" width="0.1169%" height="15" fill="rgb(207,179,18)" fg:x="7272" fg:w="88"/><text x="9.9492%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.22%)</title><rect x="9.7731%" y="133" width="0.2151%" height="15" fill="rgb(240,79,28)" fg:x="7360" fg:w="162"/><text x="10.0660%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.72%)</title><rect x="9.5858%" y="149" width="0.7170%" height="15" fill="rgb(247,225,23)" fg:x="7219" fg:w="540"/><text x="9.8788%" y="159.50"></text></g><g><title>candid::types::internal::env_add (760 instructions, 1.01%)</title><rect x="9.5699%" y="165" width="1.0092%" height="15" fill="rgb(235,216,42)" fg:x="7207" fg:w="760"/><text x="9.8629%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.11%)</title><rect x="10.5791%" y="165" width="0.1089%" height="15" fill="rgb(235,106,51)" fg:x="7967" fg:w="82"/><text x="10.8720%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.02%)</title><rect x="10.6880%" y="149" width="0.0159%" height="15" fill="rgb(236,132,4)" fg:x="8049" fg:w="12"/><text x="10.9809%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="10.7039%" y="133" width="0.0704%" height="15" fill="rgb(224,213,11)" fg:x="8061" fg:w="53"/><text x="10.9969%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.12%)</title><rect x="10.7743%" y="133" width="0.1169%" height="15" fill="rgb(236,52,4)" fg:x="8114" fg:w="88"/><text x="11.0672%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.22%)</title><rect x="10.8911%" y="133" width="0.2151%" height="15" fill="rgb(210,119,3)" fg:x="8202" fg:w="162"/><text x="11.1841%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.72%)</title><rect x="10.7039%" y="149" width="0.7170%" height="15" fill="rgb(223,213,39)" fg:x="8061" fg:w="540"/><text x="10.9969%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.09%)</title><rect x="11.4209%" y="149" width="0.0903%" height="15" fill="rgb(211,20,3)" fg:x="8601" fg:w="68"/><text x="11.7139%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="11.5112%" y="133" width="0.0730%" height="15" fill="rgb(249,181,37)" fg:x="8669" fg:w="55"/><text x="11.8042%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (82 instructions, 0.11%)</title><rect x="11.5112%" y="149" width="0.1089%" height="15" fill="rgb(225,105,47)" fg:x="8669" fg:w="82"/><text x="11.8042%" y="159.50"></text></g><g><title>candid::types::internal::env_add (869 instructions, 1.15%)</title><rect x="10.6880%" y="165" width="1.1539%" height="15" fill="rgb(244,83,27)" fg:x="8049" fg:w="869"/><text x="10.9809%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="11.8419%" y="117" width="0.0704%" height="15" fill="rgb(239,57,41)" fg:x="8918" fg:w="53"/><text x="12.1348%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (79 instructions, 0.10%)</title><rect x="11.8419%" y="133" width="0.1049%" height="15" fill="rgb(234,70,14)" fg:x="8918" fg:w="79"/><text x="12.1348%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (294 instructions, 0.39%)</title><rect x="11.8419%" y="149" width="0.3904%" height="15" fill="rgb(227,25,9)" fg:x="8918" fg:w="294"/><text x="12.1348%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.847 (15 instructions, 0.02%)</title><rect x="12.2323%" y="149" width="0.0199%" height="15" fill="rgb(235,67,37)" fg:x="9212" fg:w="15"/><text x="12.5252%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="12.2522%" y="149" width="0.0146%" height="15" fill="rgb(217,84,9)" fg:x="9227" fg:w="11"/><text x="12.5452%" y="159.50"></text></g><g><title>candid::types::internal::env_id (498 instructions, 0.66%)</title><rect x="11.8419%" y="165" width="0.6613%" height="15" fill="rgb(248,136,12)" fg:x="8918" fg:w="498"/><text x="12.1348%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (45 instructions, 0.06%)</title><rect x="12.5032%" y="165" width="0.0598%" height="15" fill="rgb(235,196,50)" fg:x="9416" fg:w="45"/><text x="12.7961%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="12.5629%" y="149" width="0.0730%" height="15" fill="rgb(236,182,1)" fg:x="9461" fg:w="55"/><text x="12.8559%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="12.6718%" y="149" width="0.0730%" height="15" fill="rgb(228,34,11)" fg:x="9543" fg:w="55"/><text x="12.9648%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (164 instructions, 0.22%)</title><rect x="12.5629%" y="165" width="0.2178%" height="15" fill="rgb(236,128,35)" fg:x="9461" fg:w="164"/><text x="12.8559%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.04%)</title><rect x="12.7807%" y="149" width="0.0372%" height="15" fill="rgb(254,83,6)" fg:x="9625" fg:w="28"/><text x="13.0736%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.02%)</title><rect x="12.8179%" y="149" width="0.0199%" height="15" fill="rgb(226,32,48)" fg:x="9653" fg:w="15"/><text x="13.1108%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.02%)</title><rect x="12.8378%" y="149" width="0.0199%" height="15" fill="rgb(251,15,8)" fg:x="9668" fg:w="15"/><text x="13.1307%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.18%)</title><rect x="12.7807%" y="165" width="0.1793%" height="15" fill="rgb(214,52,23)" fg:x="9625" fg:w="135"/><text x="13.0736%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="12.9599%" y="165" width="0.0146%" height="15" fill="rgb(228,43,22)" fg:x="9760" fg:w="11"/><text x="13.2529%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="12.9745%" y="165" width="0.0146%" height="15" fill="rgb(242,152,9)" fg:x="9771" fg:w="11"/><text x="13.2675%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="12.9892%" y="165" width="0.0146%" height="15" fill="rgb(219,167,51)" fg:x="9782" fg:w="11"/><text x="13.2821%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.54%)</title><rect x="13.0038%" y="165" width="0.5444%" height="15" fill="rgb(254,174,3)" fg:x="9793" fg:w="410"/><text x="13.2967%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (15 instructions, 0.02%)</title><rect x="13.5482%" y="133" width="0.0199%" height="15" fill="rgb(245,157,34)" fg:x="10203" fg:w="15"/><text x="13.8412%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.13%)</title><rect x="13.5681%" y="133" width="0.1328%" height="15" fill="rgb(231,189,51)" fg:x="10218" fg:w="100"/><text x="13.8611%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.11%)</title><rect x="13.7009%" y="117" width="0.1076%" height="15" fill="rgb(235,90,8)" fg:x="10318" fg:w="81"/><text x="13.9939%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.14%)</title><rect x="13.7009%" y="133" width="0.1434%" height="15" fill="rgb(242,200,16)" fg:x="10318" fg:w="108"/><text x="13.9939%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="13.8443%" y="133" width="0.0146%" height="15" fill="rgb(228,112,43)" fg:x="10426" fg:w="11"/><text x="14.1373%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (274 instructions, 0.36%)</title><rect x="13.5482%" y="149" width="0.3638%" height="15" fill="rgb(207,192,42)" fg:x="10203" fg:w="274"/><text x="13.8412%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (311 instructions, 0.41%)</title><rect x="13.5482%" y="165" width="0.4130%" height="15" fill="rgb(207,100,45)" fg:x="10203" fg:w="311"/><text x="13.8412%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.16%)</title><rect x="13.9611%" y="165" width="0.1633%" height="15" fill="rgb(239,23,43)" fg:x="10514" fg:w="123"/><text x="14.2541%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (10,848 instructions, 14.40%)</title><rect x="0.2271%" y="181" width="14.4047%" height="15" fill="rgb(244,108,32)" fg:x="171" fg:w="10848"/><text x="0.5200%" y="191.50">ic_cdk::api::call:..</text></g><g><title>memmove (298 instructions, 0.40%)</title><rect x="14.6317%" y="165" width="0.3957%" height="15" fill="rgb(224,169,20)" fg:x="11019" fg:w="298"/><text x="14.9247%" y="175.50"></text></g><g><title>memmove (298 instructions, 0.40%)</title><rect x="15.0274%" y="165" width="0.3957%" height="15" fill="rgb(240,50,22)" fg:x="11317" fg:w="298"/><text x="15.3204%" y="175.50"></text></g><g><title>memmove (298 instructions, 0.40%)</title><rect x="15.5493%" y="165" width="0.3957%" height="15" fill="rgb(217,49,36)" fg:x="11710" fg:w="298"/><text x="15.8422%" y="175.50"></text></g><g><title>memmove (298 instructions, 0.40%)</title><rect x="15.9450%" y="165" width="0.3957%" height="15" fill="rgb(248,101,21)" fg:x="12008" fg:w="298"/><text x="16.2379%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="16.4668%" y="165" width="0.0252%" height="15" fill="rgb(230,145,43)" fg:x="12401" fg:w="19"/><text x="16.7598%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="16.4921%" y="165" width="0.0252%" height="15" fill="rgb(239,14,44)" fg:x="12420" fg:w="19"/><text x="16.7850%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="16.5173%" y="149" width="0.0252%" height="15" fill="rgb(243,100,24)" fg:x="12439" fg:w="19"/><text x="16.8103%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.23%)</title><rect x="16.5425%" y="149" width="0.2257%" height="15" fill="rgb(211,159,54)" fg:x="12458" fg:w="170"/><text x="16.8355%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="16.7682%" y="149" width="0.0252%" height="15" fill="rgb(222,161,48)" fg:x="12628" fg:w="19"/><text x="17.0612%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.23%)</title><rect x="16.7935%" y="149" width="0.2257%" height="15" fill="rgb(237,220,52)" fg:x="12647" fg:w="170"/><text x="17.0864%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="17.0192%" y="149" width="0.0252%" height="15" fill="rgb(233,203,48)" fg:x="12817" fg:w="19"/><text x="17.3122%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.11%)</title><rect x="17.0444%" y="149" width="0.1076%" height="15" fill="rgb(221,16,54)" fg:x="12836" fg:w="81"/><text x="17.3374%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (659 instructions, 0.88%)</title><rect x="16.5173%" y="165" width="0.8751%" height="15" fill="rgb(210,126,19)" fg:x="12439" fg:w="659"/><text x="16.8103%" y="175.50"></text></g><g><title>memmove (148 instructions, 0.20%)</title><rect x="17.6353%" y="165" width="0.1965%" height="15" fill="rgb(219,170,26)" fg:x="13281" fg:w="148"/><text x="17.9283%" y="175.50"></text></g><g><title>memmove (148 instructions, 0.20%)</title><rect x="17.8319%" y="165" width="0.1965%" height="15" fill="rgb(227,161,48)" fg:x="13429" fg:w="148"/><text x="18.1248%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="18.1545%" y="165" width="0.0252%" height="15" fill="rgb(254,34,34)" fg:x="13672" fg:w="19"/><text x="18.4475%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="18.1798%" y="165" width="0.0252%" height="15" fill="rgb(213,151,44)" fg:x="13691" fg:w="19"/><text x="18.4727%" y="175.50"></text></g><g><title>memmove (190 instructions, 0.25%)</title><rect x="18.2050%" y="149" width="0.2523%" height="15" fill="rgb(243,100,4)" fg:x="13710" fg:w="190"/><text x="18.4980%" y="159.50"></text></g><g><title>memmove (190 instructions, 0.25%)</title><rect x="18.4573%" y="149" width="0.2523%" height="15" fill="rgb(246,75,37)" fg:x="13900" fg:w="190"/><text x="18.7503%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="18.7096%" y="149" width="0.0146%" height="15" fill="rgb(227,146,9)" fg:x="14090" fg:w="11"/><text x="19.0026%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="18.7242%" y="149" width="0.0146%" height="15" fill="rgb(231,187,47)" fg:x="14101" fg:w="11"/><text x="19.0172%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_left (546 instructions, 0.73%)</title><rect x="18.2050%" y="165" width="0.7250%" height="15" fill="rgb(208,42,5)" fg:x="13710" fg:w="546"/><text x="18.4980%" y="175.50"></text></g><g><title>memmove (118 instructions, 0.16%)</title><rect x="19.1796%" y="165" width="0.1567%" height="15" fill="rgb(225,10,53)" fg:x="14444" fg:w="118"/><text x="19.4726%" y="175.50"></text></g><g><title>memmove (118 instructions, 0.16%)</title><rect x="19.3363%" y="165" width="0.1567%" height="15" fill="rgb(254,49,22)" fg:x="14562" fg:w="118"/><text x="19.6293%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="19.6192%" y="165" width="0.0252%" height="15" fill="rgb(245,34,4)" fg:x="14775" fg:w="19"/><text x="19.9121%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="19.6444%" y="165" width="0.0252%" height="15" fill="rgb(252,54,9)" fg:x="14794" fg:w="19"/><text x="19.9374%" y="175.50"></text></g><g><title>memmove (148 instructions, 0.20%)</title><rect x="19.7958%" y="165" width="0.1965%" height="15" fill="rgb(217,92,28)" fg:x="14908" fg:w="148"/><text x="20.0887%" y="175.50"></text></g><g><title>memmove (148 instructions, 0.20%)</title><rect x="19.9923%" y="165" width="0.1965%" height="15" fill="rgb(234,8,54)" fg:x="15056" fg:w="148"/><text x="20.2853%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="20.3150%" y="165" width="0.0252%" height="15" fill="rgb(235,60,28)" fg:x="15299" fg:w="19"/><text x="20.6079%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="20.3402%" y="165" width="0.0252%" height="15" fill="rgb(237,206,45)" fg:x="15318" fg:w="19"/><text x="20.6332%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="20.4916%" y="165" width="0.0252%" height="15" fill="rgb(223,131,49)" fg:x="15432" fg:w="19"/><text x="20.7845%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="20.5168%" y="165" width="0.0252%" height="15" fill="rgb(215,176,2)" fg:x="15451" fg:w="19"/><text x="20.8098%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="20.6682%" y="165" width="0.0252%" height="15" fill="rgb(206,9,22)" fg:x="15565" fg:w="19"/><text x="20.9611%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="20.6934%" y="165" width="0.0252%" height="15" fill="rgb(249,60,42)" fg:x="15584" fg:w="19"/><text x="20.9864%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.24%)</title><rect x="20.8448%" y="165" width="0.2364%" height="15" fill="rgb(224,187,30)" fg:x="15698" fg:w="178"/><text x="21.1378%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.24%)</title><rect x="21.0811%" y="165" width="0.2364%" height="15" fill="rgb(215,19,23)" fg:x="15876" fg:w="178"/><text x="21.3741%" y="175.50"></text></g><g><title>memmove (238 instructions, 0.32%)</title><rect x="21.4437%" y="165" width="0.3160%" height="15" fill="rgb(252,176,9)" fg:x="16149" fg:w="238"/><text x="21.7366%" y="175.50"></text></g><g><title>memmove (238 instructions, 0.32%)</title><rect x="21.7597%" y="165" width="0.3160%" height="15" fill="rgb(249,164,12)" fg:x="16387" fg:w="238"/><text x="22.0527%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="22.2019%" y="165" width="0.0252%" height="15" fill="rgb(213,91,29)" fg:x="16720" fg:w="19"/><text x="22.4948%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="22.2271%" y="165" width="0.0252%" height="15" fill="rgb(217,123,16)" fg:x="16739" fg:w="19"/><text x="22.5201%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.19%)</title><rect x="22.3785%" y="165" width="0.1912%" height="15" fill="rgb(235,185,45)" fg:x="16853" fg:w="144"/><text x="22.6714%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.19%)</title><rect x="22.5697%" y="165" width="0.1912%" height="15" fill="rgb(221,214,10)" fg:x="16997" fg:w="144"/><text x="22.8626%" y="175.50"></text></g><g><title>memmove (148 instructions, 0.20%)</title><rect x="22.8870%" y="165" width="0.1965%" height="15" fill="rgb(229,67,37)" fg:x="17236" fg:w="148"/><text x="23.1800%" y="175.50"></text></g><g><title>memmove (148 instructions, 0.20%)</title><rect x="23.0836%" y="165" width="0.1965%" height="15" fill="rgb(242,50,19)" fg:x="17384" fg:w="148"/><text x="23.3765%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="23.4062%" y="165" width="0.0252%" height="15" fill="rgb(216,87,16)" fg:x="17627" fg:w="19"/><text x="23.6992%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="23.4315%" y="165" width="0.0252%" height="15" fill="rgb(225,56,3)" fg:x="17646" fg:w="19"/><text x="23.7244%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.24%)</title><rect x="23.5828%" y="165" width="0.2364%" height="15" fill="rgb(238,173,41)" fg:x="17760" fg:w="178"/><text x="23.8758%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.24%)</title><rect x="23.8192%" y="165" width="0.2364%" height="15" fill="rgb(227,22,34)" fg:x="17938" fg:w="178"/><text x="24.1122%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="24.1817%" y="165" width="0.0252%" height="15" fill="rgb(225,117,23)" fg:x="18211" fg:w="19"/><text x="24.4747%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="24.2069%" y="165" width="0.0252%" height="15" fill="rgb(229,86,11)" fg:x="18230" fg:w="19"/><text x="24.4999%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.28%)</title><rect x="24.3583%" y="165" width="0.2762%" height="15" fill="rgb(249,163,33)" fg:x="18344" fg:w="208"/><text x="24.6513%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.28%)</title><rect x="24.6345%" y="165" width="0.2762%" height="15" fill="rgb(226,212,43)" fg:x="18552" fg:w="208"/><text x="24.9275%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="25.0368%" y="165" width="0.0252%" height="15" fill="rgb(234,48,24)" fg:x="18855" fg:w="19"/><text x="25.3298%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="25.0621%" y="165" width="0.0252%" height="15" fill="rgb(244,26,16)" fg:x="18874" fg:w="19"/><text x="25.3550%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="25.2135%" y="165" width="0.0252%" height="15" fill="rgb(219,43,25)" fg:x="18988" fg:w="19"/><text x="25.5064%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="25.2387%" y="165" width="0.0252%" height="15" fill="rgb(229,164,44)" fg:x="19007" fg:w="19"/><text x="25.5317%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="25.3901%" y="165" width="0.0252%" height="15" fill="rgb(224,186,11)" fg:x="19121" fg:w="19"/><text x="25.6830%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="25.4153%" y="165" width="0.0252%" height="15" fill="rgb(250,73,16)" fg:x="19140" fg:w="19"/><text x="25.7083%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="25.5667%" y="165" width="0.0252%" height="15" fill="rgb(235,12,2)" fg:x="19254" fg:w="19"/><text x="25.8596%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="25.5919%" y="165" width="0.0252%" height="15" fill="rgb(252,115,27)" fg:x="19273" fg:w="19"/><text x="25.8849%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="25.7433%" y="165" width="0.0252%" height="15" fill="rgb(236,212,37)" fg:x="19387" fg:w="19"/><text x="26.0362%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="25.7685%" y="165" width="0.0252%" height="15" fill="rgb(218,3,25)" fg:x="19406" fg:w="19"/><text x="26.0615%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="25.9199%" y="165" width="0.0252%" height="15" fill="rgb(216,189,42)" fg:x="19520" fg:w="19"/><text x="26.2128%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="25.9451%" y="165" width="0.0252%" height="15" fill="rgb(235,207,33)" fg:x="19539" fg:w="19"/><text x="26.2381%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="26.0965%" y="165" width="0.0252%" height="15" fill="rgb(228,25,12)" fg:x="19653" fg:w="19"/><text x="26.3895%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="26.1217%" y="165" width="0.0252%" height="15" fill="rgb(253,57,44)" fg:x="19672" fg:w="19"/><text x="26.4147%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="26.1469%" y="149" width="0.0252%" height="15" fill="rgb(237,225,24)" fg:x="19691" fg:w="19"/><text x="26.4399%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.23%)</title><rect x="26.1722%" y="149" width="0.2257%" height="15" fill="rgb(225,26,4)" fg:x="19710" fg:w="170"/><text x="26.4651%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="26.3979%" y="149" width="0.0252%" height="15" fill="rgb(232,15,38)" fg:x="19880" fg:w="19"/><text x="26.6909%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.23%)</title><rect x="26.4231%" y="149" width="0.2257%" height="15" fill="rgb(220,83,53)" fg:x="19899" fg:w="170"/><text x="26.7161%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="26.6489%" y="149" width="0.0252%" height="15" fill="rgb(212,222,5)" fg:x="20069" fg:w="19"/><text x="26.9418%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (78 instructions, 0.10%)</title><rect x="26.6741%" y="149" width="0.1036%" height="15" fill="rgb(240,20,14)" fg:x="20088" fg:w="78"/><text x="26.9671%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (656 instructions, 0.87%)</title><rect x="26.1469%" y="165" width="0.8711%" height="15" fill="rgb(222,146,37)" fg:x="19691" fg:w="656"/><text x="26.4399%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="27.0180%" y="149" width="0.0252%" height="15" fill="rgb(247,191,53)" fg:x="20347" fg:w="19"/><text x="27.3110%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.23%)</title><rect x="27.0432%" y="149" width="0.2257%" height="15" fill="rgb(232,48,20)" fg:x="20366" fg:w="170"/><text x="27.3362%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="27.2690%" y="149" width="0.0252%" height="15" fill="rgb(209,0,5)" fg:x="20536" fg:w="19"/><text x="27.5620%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.23%)</title><rect x="27.2942%" y="149" width="0.2257%" height="15" fill="rgb(212,193,45)" fg:x="20555" fg:w="170"/><text x="27.5872%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="27.5200%" y="149" width="0.0252%" height="15" fill="rgb(218,112,7)" fg:x="20725" fg:w="19"/><text x="27.8129%" y="159.50"></text></g><g><title>memcpy (125 instructions, 0.17%)</title><rect x="27.5452%" y="149" width="0.1660%" height="15" fill="rgb(227,93,30)" fg:x="20744" fg:w="125"/><text x="27.8381%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.08%)</title><rect x="27.7112%" y="133" width="0.0837%" height="15" fill="rgb(224,204,51)" fg:x="20869" fg:w="63"/><text x="28.0041%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (163 instructions, 0.22%)</title><rect x="27.7112%" y="149" width="0.2164%" height="15" fill="rgb(227,150,18)" fg:x="20869" fg:w="163"/><text x="28.0041%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (975 instructions, 1.29%)</title><rect x="27.0180%" y="165" width="1.2947%" height="15" fill="rgb(253,41,3)" fg:x="20347" fg:w="975"/><text x="27.3110%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="28.6526%" y="165" width="0.0252%" height="15" fill="rgb(226,182,8)" fg:x="21578" fg:w="19"/><text x="28.9456%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="28.6778%" y="165" width="0.0252%" height="15" fill="rgb(249,219,50)" fg:x="21597" fg:w="19"/><text x="28.9708%" y="175.50"></text></g><g><title>memmove (268 instructions, 0.36%)</title><rect x="28.8292%" y="165" width="0.3559%" height="15" fill="rgb(232,141,2)" fg:x="21711" fg:w="268"/><text x="29.1222%" y="175.50"></text></g><g><title>memmove (268 instructions, 0.36%)</title><rect x="29.1851%" y="165" width="0.3559%" height="15" fill="rgb(238,95,48)" fg:x="21979" fg:w="268"/><text x="29.4781%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="29.6671%" y="165" width="0.0252%" height="15" fill="rgb(233,39,38)" fg:x="22342" fg:w="19"/><text x="29.9601%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="29.6923%" y="165" width="0.0252%" height="15" fill="rgb(246,86,26)" fg:x="22361" fg:w="19"/><text x="29.9853%" y="175.50"></text></g><g><title>memmove (148 instructions, 0.20%)</title><rect x="29.8437%" y="165" width="0.1965%" height="15" fill="rgb(225,195,24)" fg:x="22475" fg:w="148"/><text x="30.1367%" y="175.50"></text></g><g><title>memmove (148 instructions, 0.20%)</title><rect x="30.0402%" y="165" width="0.1965%" height="15" fill="rgb(244,25,8)" fg:x="22623" fg:w="148"/><text x="30.3332%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.24%)</title><rect x="30.2368%" y="149" width="0.2364%" height="15" fill="rgb(249,141,36)" fg:x="22771" fg:w="178"/><text x="30.5297%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.23%)</title><rect x="30.4731%" y="149" width="0.2257%" height="15" fill="rgb(213,110,42)" fg:x="22949" fg:w="170"/><text x="30.7661%" y="159.50"></text></g><g><title>memmove (178 instructions, 0.24%)</title><rect x="30.6989%" y="149" width="0.2364%" height="15" fill="rgb(213,225,0)" fg:x="23119" fg:w="178"/><text x="30.9918%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.23%)</title><rect x="30.9352%" y="149" width="0.2257%" height="15" fill="rgb(223,70,27)" fg:x="23297" fg:w="170"/><text x="31.2282%" y="159.50"></text></g><g><title>memmove (118 instructions, 0.16%)</title><rect x="31.1610%" y="149" width="0.1567%" height="15" fill="rgb(248,21,45)" fg:x="23467" fg:w="118"/><text x="31.4539%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (78 instructions, 0.10%)</title><rect x="31.3176%" y="149" width="0.1036%" height="15" fill="rgb(235,186,47)" fg:x="23585" fg:w="78"/><text x="31.6106%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,159 instructions, 1.54%)</title><rect x="30.2368%" y="165" width="1.5390%" height="15" fill="rgb(230,73,28)" fg:x="22771" fg:w="1159"/><text x="30.5297%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="32.0187%" y="165" width="0.0252%" height="15" fill="rgb(220,122,33)" fg:x="24113" fg:w="19"/><text x="32.3117%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="32.0440%" y="165" width="0.0252%" height="15" fill="rgb(209,10,43)" fg:x="24132" fg:w="19"/><text x="32.3369%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="32.1954%" y="165" width="0.0252%" height="15" fill="rgb(216,50,3)" fg:x="24246" fg:w="19"/><text x="32.4883%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="32.2206%" y="165" width="0.0252%" height="15" fill="rgb(250,152,33)" fg:x="24265" fg:w="19"/><text x="32.5136%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.28%)</title><rect x="32.3720%" y="165" width="0.2762%" height="15" fill="rgb(219,205,47)" fg:x="24379" fg:w="208"/><text x="32.6649%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.28%)</title><rect x="32.6482%" y="165" width="0.2762%" height="15" fill="rgb(227,73,18)" fg:x="24587" fg:w="208"/><text x="32.9411%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="33.0505%" y="165" width="0.0252%" height="15" fill="rgb(232,215,50)" fg:x="24890" fg:w="19"/><text x="33.3435%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="33.0757%" y="165" width="0.0252%" height="15" fill="rgb(251,33,19)" fg:x="24909" fg:w="19"/><text x="33.3687%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="33.2271%" y="165" width="0.0252%" height="15" fill="rgb(225,206,7)" fg:x="25023" fg:w="19"/><text x="33.5201%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="33.2523%" y="165" width="0.0252%" height="15" fill="rgb(252,200,22)" fg:x="25042" fg:w="19"/><text x="33.5453%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.28%)</title><rect x="33.4037%" y="165" width="0.2762%" height="15" fill="rgb(215,65,32)" fg:x="25156" fg:w="208"/><text x="33.6967%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.28%)</title><rect x="33.6799%" y="165" width="0.2762%" height="15" fill="rgb(205,24,23)" fg:x="25364" fg:w="208"/><text x="33.9729%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="34.0822%" y="165" width="0.0252%" height="15" fill="rgb(230,72,25)" fg:x="25667" fg:w="19"/><text x="34.3752%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="34.1075%" y="165" width="0.0252%" height="15" fill="rgb(242,180,49)" fg:x="25686" fg:w="19"/><text x="34.4004%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.24%)</title><rect x="34.2589%" y="165" width="0.2364%" height="15" fill="rgb(224,190,45)" fg:x="25800" fg:w="178"/><text x="34.5518%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.24%)</title><rect x="34.4952%" y="165" width="0.2364%" height="15" fill="rgb(206,159,50)" fg:x="25978" fg:w="178"/><text x="34.7882%" y="175.50"></text></g><g><title>memmove (238 instructions, 0.32%)</title><rect x="34.8577%" y="165" width="0.3160%" height="15" fill="rgb(241,160,49)" fg:x="26251" fg:w="238"/><text x="35.1507%" y="175.50"></text></g><g><title>memmove (238 instructions, 0.32%)</title><rect x="35.1738%" y="165" width="0.3160%" height="15" fill="rgb(235,206,40)" fg:x="26489" fg:w="238"/><text x="35.4667%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.24%)</title><rect x="35.6159%" y="165" width="0.2364%" height="15" fill="rgb(214,96,8)" fg:x="26822" fg:w="178"/><text x="35.9089%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.24%)</title><rect x="35.8523%" y="165" width="0.2364%" height="15" fill="rgb(240,98,7)" fg:x="27000" fg:w="178"/><text x="36.1453%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="36.2148%" y="165" width="0.0252%" height="15" fill="rgb(228,111,39)" fg:x="27273" fg:w="19"/><text x="36.5078%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="36.2400%" y="165" width="0.0252%" height="15" fill="rgb(234,185,36)" fg:x="27292" fg:w="19"/><text x="36.5330%" y="175.50"></text></g><g><title>memmove (118 instructions, 0.16%)</title><rect x="36.2653%" y="149" width="0.1567%" height="15" fill="rgb(250,175,11)" fg:x="27311" fg:w="118"/><text x="36.5582%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.23%)</title><rect x="36.4219%" y="149" width="0.2257%" height="15" fill="rgb(225,202,1)" fg:x="27429" fg:w="170"/><text x="36.7149%" y="159.50"></text></g><g><title>memmove (118 instructions, 0.16%)</title><rect x="36.6477%" y="149" width="0.1567%" height="15" fill="rgb(235,20,43)" fg:x="27599" fg:w="118"/><text x="36.9406%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.23%)</title><rect x="36.8044%" y="149" width="0.2257%" height="15" fill="rgb(232,26,24)" fg:x="27717" fg:w="170"/><text x="37.0973%" y="159.50"></text></g><g><title>memmove (144 instructions, 0.19%)</title><rect x="37.0301%" y="149" width="0.1912%" height="15" fill="rgb(224,26,32)" fg:x="27887" fg:w="144"/><text x="37.3231%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (78 instructions, 0.10%)</title><rect x="37.2213%" y="149" width="0.1036%" height="15" fill="rgb(214,165,40)" fg:x="28031" fg:w="78"/><text x="37.5143%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,042 instructions, 1.38%)</title><rect x="36.2653%" y="165" width="1.3836%" height="15" fill="rgb(236,173,27)" fg:x="27311" fg:w="1042"/><text x="36.5582%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="37.8919%" y="165" width="0.0252%" height="15" fill="rgb(249,66,42)" fg:x="28536" fg:w="19"/><text x="38.1849%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="37.9171%" y="165" width="0.0252%" height="15" fill="rgb(239,0,36)" fg:x="28555" fg:w="19"/><text x="38.2101%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="38.0685%" y="165" width="0.0252%" height="15" fill="rgb(225,68,3)" fg:x="28669" fg:w="19"/><text x="38.3615%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="38.0937%" y="165" width="0.0252%" height="15" fill="rgb(250,169,27)" fg:x="28688" fg:w="19"/><text x="38.3867%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.19%)</title><rect x="38.2451%" y="165" width="0.1912%" height="15" fill="rgb(205,138,52)" fg:x="28802" fg:w="144"/><text x="38.5381%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.19%)</title><rect x="38.4363%" y="165" width="0.1912%" height="15" fill="rgb(216,38,7)" fg:x="28946" fg:w="144"/><text x="38.7293%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="38.7537%" y="165" width="0.0252%" height="15" fill="rgb(218,197,22)" fg:x="29185" fg:w="19"/><text x="39.0466%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="38.7789%" y="165" width="0.0252%" height="15" fill="rgb(245,23,34)" fg:x="29204" fg:w="19"/><text x="39.0719%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="38.9303%" y="165" width="0.0252%" height="15" fill="rgb(212,220,19)" fg:x="29318" fg:w="19"/><text x="39.2232%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="38.9555%" y="165" width="0.0252%" height="15" fill="rgb(241,23,5)" fg:x="29337" fg:w="19"/><text x="39.2485%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.28%)</title><rect x="39.1069%" y="165" width="0.2762%" height="15" fill="rgb(250,201,2)" fg:x="29451" fg:w="208"/><text x="39.3998%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.28%)</title><rect x="39.3831%" y="165" width="0.2762%" height="15" fill="rgb(242,48,50)" fg:x="29659" fg:w="208"/><text x="39.6760%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="39.7854%" y="165" width="0.0252%" height="15" fill="rgb(243,51,38)" fg:x="29962" fg:w="19"/><text x="40.0784%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.03%)</title><rect x="39.8106%" y="165" width="0.0252%" height="15" fill="rgb(236,82,34)" fg:x="29981" fg:w="19"/><text x="40.1036%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.19%)</title><rect x="39.9620%" y="165" width="0.1912%" height="15" fill="rgb(207,166,2)" fg:x="30095" fg:w="144"/><text x="40.2550%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.19%)</title><rect x="40.1532%" y="165" width="0.1912%" height="15" fill="rgb(246,169,22)" fg:x="30239" fg:w="144"/><text x="40.4462%" y="175.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (19,459 instructions, 25.84%)</title><rect x="14.6317%" y="181" width="25.8389%" height="15" fill="rgb(252,65,29)" fg:x="11019" fg:w="19459"/><text x="14.9247%" y="191.50">alloc::collections::btree::remove::..</text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.02%)</title><rect x="40.4706%" y="149" width="0.0159%" height="15" fill="rgb(250,9,28)" fg:x="30478" fg:w="12"/><text x="40.7636%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.07%)</title><rect x="40.4865%" y="133" width="0.0744%" height="15" fill="rgb(238,87,40)" fg:x="30490" fg:w="56"/><text x="40.7795%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (83 instructions, 0.11%)</title><rect x="40.4865%" y="149" width="0.1102%" height="15" fill="rgb(252,132,48)" fg:x="30490" fg:w="83"/><text x="40.7795%" y="159.50"></text></g><g><title>memset (136 instructions, 0.18%)</title><rect x="40.5967%" y="149" width="0.1806%" height="15" fill="rgb(210,64,20)" fg:x="30573" fg:w="136"/><text x="40.8897%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (389 instructions, 0.52%)</title><rect x="40.4706%" y="165" width="0.5165%" height="15" fill="rgb(243,159,18)" fg:x="30478" fg:w="389"/><text x="40.7636%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.04%)</title><rect x="40.9871%" y="149" width="0.0425%" height="15" fill="rgb(223,129,45)" fg:x="30867" fg:w="32"/><text x="41.2801%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="41.0296%" y="101" width="0.1009%" height="15" fill="rgb(253,74,14)" fg:x="30899" fg:w="76"/><text x="41.3226%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.15%)</title><rect x="41.0296%" y="117" width="0.1461%" height="15" fill="rgb(231,208,5)" fg:x="30899" fg:w="110"/><text x="41.3226%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (177 instructions, 0.24%)</title><rect x="41.0296%" y="133" width="0.2350%" height="15" fill="rgb(221,177,40)" fg:x="30899" fg:w="177"/><text x="41.3226%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="41.2647%" y="133" width="0.0146%" height="15" fill="rgb(254,69,44)" fg:x="31076" fg:w="11"/><text x="41.5576%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="41.2793%" y="133" width="0.0146%" height="15" fill="rgb(223,194,41)" fg:x="31087" fg:w="11"/><text x="41.5722%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (361 instructions, 0.48%)</title><rect x="41.0296%" y="149" width="0.4794%" height="15" fill="rgb(205,103,40)" fg:x="30899" fg:w="361"/><text x="41.3226%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.04%)</title><rect x="41.5090%" y="149" width="0.0398%" height="15" fill="rgb(249,100,1)" fg:x="31260" fg:w="30"/><text x="41.8020%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (496 instructions, 0.66%)</title><rect x="40.9871%" y="165" width="0.6586%" height="15" fill="rgb(218,194,12)" fg:x="30867" fg:w="496"/><text x="41.2801%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="41.6511%" y="165" width="0.0730%" height="15" fill="rgb(251,201,33)" fg:x="31367" fg:w="55"/><text x="41.9440%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,018 instructions, 1.35%)</title><rect x="40.4706%" y="181" width="1.3518%" height="15" fill="rgb(206,22,46)" fg:x="30478" fg:w="1018"/><text x="40.7636%" y="191.50"></text></g><g><title>btreemap::batch_remove_7_::{{closure}} (74,779 instructions, 99.30%)</title><rect x="0.2271%" y="197" width="99.2962%" height="15" fill="rgb(223,166,15)" fg:x="171" fg:w="74779"/><text x="0.5200%" y="207.50">btreemap::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.02%)</title><rect x="99.5233%" y="197" width="0.0159%" height="15" fill="rgb(243,46,34)" fg:x="74950" fg:w="12"/><text x="99.8163%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.11%)</title><rect x="99.5392%" y="197" width="0.1076%" height="15" fill="rgb(210,54,40)" fg:x="74962" fg:w="81"/><text x="99.8322%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.22%)</title><rect x="99.6468%" y="197" width="0.2231%" height="15" fill="rgb(241,41,41)" fg:x="75043" fg:w="168"/><text x="99.9398%" y="207.50"></text></g><g><title>all (75,309 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,165,27)" fg:x="0" fg:w="75309"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (75,309 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,22,5)" fg:x="0" fg:w="75309"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>