<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="60911"><g><title>ic_cdk::setup (19 instructions, 0.03%)</title><rect x="0.0000%" y="197" width="0.0312%" height="15" fill="rgb(229,10,13)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.12%)</title><rect x="0.0312%" y="197" width="0.1248%" height="15" fill="rgb(221,55,48)" fg:x="19" fg:w="76"/><text x="0.3242%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.12%)</title><rect x="0.1560%" y="197" width="0.1198%" height="15" fill="rgb(214,88,22)" fg:x="95" fg:w="73"/><text x="0.4489%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.19%)</title><rect x="0.2758%" y="165" width="0.1937%" height="15" fill="rgb(219,54,42)" fg:x="168" fg:w="118"/><text x="0.5688%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.12%)</title><rect x="0.4695%" y="149" width="0.1166%" height="15" fill="rgb(222,146,25)" fg:x="286" fg:w="71"/><text x="0.7625%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.66%)</title><rect x="0.5861%" y="149" width="0.6567%" height="15" fill="rgb(233,198,11)" fg:x="357" fg:w="400"/><text x="0.8791%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.14%)</title><rect x="1.2428%" y="149" width="0.1395%" height="15" fill="rgb(215,46,8)" fg:x="757" fg:w="85"/><text x="1.5358%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.3823%" y="149" width="0.0887%" height="15" fill="rgb(245,145,49)" fg:x="842" fg:w="54"/><text x="1.6753%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.4710%" y="149" width="0.0887%" height="15" fill="rgb(238,148,20)" fg:x="896" fg:w="54"/><text x="1.7640%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.5597%" y="149" width="0.0887%" height="15" fill="rgb(245,46,41)" fg:x="950" fg:w="54"/><text x="1.8526%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.6483%" y="149" width="0.0887%" height="15" fill="rgb(228,15,39)" fg:x="1004" fg:w="54"/><text x="1.9413%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.12%)</title><rect x="1.7370%" y="149" width="0.1166%" height="15" fill="rgb(221,195,3)" fg:x="1058" fg:w="71"/><text x="2.0299%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.11%)</title><rect x="1.8535%" y="149" width="0.1067%" height="15" fill="rgb(235,154,52)" fg:x="1129" fg:w="65"/><text x="2.1465%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.66%)</title><rect x="1.9602%" y="149" width="0.6567%" height="15" fill="rgb(221,109,12)" fg:x="1194" fg:w="400"/><text x="2.2532%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="2.6169%" y="149" width="0.0263%" height="15" fill="rgb(207,173,14)" fg:x="1594" fg:w="16"/><text x="2.9099%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.12%)</title><rect x="2.6432%" y="133" width="0.1248%" height="15" fill="rgb(227,85,28)" fg:x="1610" fg:w="76"/><text x="2.9362%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.10%)</title><rect x="2.7680%" y="101" width="0.0985%" height="15" fill="rgb(253,9,48)" fg:x="1686" fg:w="60"/><text x="3.0609%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.14%)</title><rect x="2.7680%" y="117" width="0.1395%" height="15" fill="rgb(221,208,26)" fg:x="1686" fg:w="85"/><text x="3.0609%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="2.9075%" y="69" width="0.0148%" height="15" fill="rgb(232,170,20)" fg:x="1771" fg:w="9"/><text x="3.2005%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.05%)</title><rect x="2.9223%" y="53" width="0.0493%" height="15" fill="rgb(251,95,49)" fg:x="1780" fg:w="30"/><text x="3.2153%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.09%)</title><rect x="2.9223%" y="69" width="0.0903%" height="15" fill="rgb(210,221,10)" fg:x="1780" fg:w="55"/><text x="3.2153%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.19%)</title><rect x="2.9075%" y="85" width="0.1937%" height="15" fill="rgb(208,84,32)" fg:x="1771" fg:w="118"/><text x="3.2005%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.28%)</title><rect x="2.9075%" y="101" width="0.2807%" height="15" fill="rgb(205,81,43)" fg:x="1771" fg:w="171"/><text x="3.2005%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.29%)</title><rect x="2.9075%" y="117" width="0.2889%" height="15" fill="rgb(224,2,44)" fg:x="1771" fg:w="176"/><text x="3.2005%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.61%)</title><rect x="2.7680%" y="133" width="0.6107%" height="15" fill="rgb(254,118,7)" fg:x="1686" fg:w="372"/><text x="3.0609%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 0.98%)</title><rect x="2.6432%" y="149" width="0.9752%" height="15" fill="rgb(210,201,4)" fg:x="1610" fg:w="594"/><text x="2.9362%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.14%)</title><rect x="3.6184%" y="149" width="0.1395%" height="15" fill="rgb(240,4,17)" fg:x="2204" fg:w="85"/><text x="3.9114%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.09%)</title><rect x="3.7579%" y="149" width="0.0903%" height="15" fill="rgb(250,123,25)" fg:x="2289" fg:w="55"/><text x="4.0509%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.11%)</title><rect x="3.8482%" y="149" width="0.1084%" height="15" fill="rgb(229,156,15)" fg:x="2344" fg:w="66"/><text x="4.1412%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.11%)</title><rect x="3.9566%" y="149" width="0.1067%" height="15" fill="rgb(246,64,33)" fg:x="2410" fg:w="65"/><text x="4.2496%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.66%)</title><rect x="4.0633%" y="133" width="0.6567%" height="15" fill="rgb(215,7,52)" fg:x="2475" fg:w="400"/><text x="4.3563%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="4.7200%" y="133" width="0.0263%" height="15" fill="rgb(225,161,42)" fg:x="2875" fg:w="16"/><text x="5.0130%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.12%)</title><rect x="4.7463%" y="117" width="0.1248%" height="15" fill="rgb(248,93,28)" fg:x="2891" fg:w="76"/><text x="5.0392%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.10%)</title><rect x="4.8710%" y="85" width="0.0985%" height="15" fill="rgb(234,136,14)" fg:x="2967" fg:w="60"/><text x="5.1640%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.14%)</title><rect x="4.8710%" y="101" width="0.1395%" height="15" fill="rgb(209,163,30)" fg:x="2967" fg:w="85"/><text x="5.1640%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="5.0106%" y="53" width="0.0148%" height="15" fill="rgb(232,187,11)" fg:x="3052" fg:w="9"/><text x="5.3036%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.05%)</title><rect x="5.0254%" y="37" width="0.0493%" height="15" fill="rgb(253,175,28)" fg:x="3061" fg:w="30"/><text x="5.3183%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.09%)</title><rect x="5.0254%" y="53" width="0.0903%" height="15" fill="rgb(224,155,6)" fg:x="3061" fg:w="55"/><text x="5.3183%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.19%)</title><rect x="5.0106%" y="69" width="0.1937%" height="15" fill="rgb(240,0,20)" fg:x="3052" fg:w="118"/><text x="5.3036%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.28%)</title><rect x="5.0106%" y="85" width="0.2807%" height="15" fill="rgb(226,117,13)" fg:x="3052" fg:w="171"/><text x="5.3036%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.29%)</title><rect x="5.0106%" y="101" width="0.2889%" height="15" fill="rgb(249,61,14)" fg:x="3052" fg:w="176"/><text x="5.3036%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.61%)</title><rect x="4.8710%" y="117" width="0.6107%" height="15" fill="rgb(244,201,17)" fg:x="2967" fg:w="372"/><text x="5.1640%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 0.98%)</title><rect x="4.7463%" y="133" width="0.9752%" height="15" fill="rgb(250,226,39)" fg:x="2891" fg:w="594"/><text x="5.0392%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.14%)</title><rect x="5.7215%" y="133" width="0.1395%" height="15" fill="rgb(242,28,40)" fg:x="3485" fg:w="85"/><text x="6.0144%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.09%)</title><rect x="5.8610%" y="133" width="0.0903%" height="15" fill="rgb(226,158,35)" fg:x="3570" fg:w="55"/><text x="6.1540%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.12%)</title><rect x="5.9513%" y="117" width="0.1166%" height="15" fill="rgb(234,189,26)" fg:x="3625" fg:w="71"/><text x="6.2443%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.15%)</title><rect x="6.0679%" y="117" width="0.1494%" height="15" fill="rgb(235,33,42)" fg:x="3696" fg:w="91"/><text x="6.3608%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.11%)</title><rect x="6.2173%" y="117" width="0.1084%" height="15" fill="rgb(206,69,48)" fg:x="3787" fg:w="66"/><text x="6.5102%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 0.47%)</title><rect x="5.9513%" y="133" width="0.4712%" height="15" fill="rgb(231,163,52)" fg:x="3625" fg:w="287"/><text x="6.2443%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="6.4225%" y="133" width="0.1346%" height="15" fill="rgb(232,106,5)" fg:x="3912" fg:w="82"/><text x="6.7155%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,720 instructions, 2.82%)</title><rect x="4.0633%" y="149" width="2.8238%" height="15" fill="rgb(236,159,49)" fg:x="2475" fg:w="1720"/><text x="4.3563%" y="159.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.11%)</title><rect x="6.8871%" y="149" width="0.1084%" height="15" fill="rgb(247,81,7)" fg:x="4195" fg:w="66"/><text x="7.1801%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="6.9955%" y="149" width="0.0213%" height="15" fill="rgb(244,66,48)" fg:x="4261" fg:w="13"/><text x="7.2884%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.0168%" y="149" width="0.0213%" height="15" fill="rgb(224,16,36)" fg:x="4274" fg:w="13"/><text x="7.3098%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.01%)</title><rect x="7.0381%" y="149" width="0.0115%" height="15" fill="rgb(242,11,54)" fg:x="4287" fg:w="7"/><text x="7.3311%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.02%)</title><rect x="7.0496%" y="149" width="0.0246%" height="15" fill="rgb(253,54,45)" fg:x="4294" fg:w="15"/><text x="7.3426%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="7.0743%" y="133" width="0.1346%" height="15" fill="rgb(229,18,19)" fg:x="4309" fg:w="82"/><text x="7.3672%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (165 instructions, 0.27%)</title><rect x="7.0743%" y="149" width="0.2709%" height="15" fill="rgb(222,148,2)" fg:x="4309" fg:w="165"/><text x="7.3672%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.12%)</title><rect x="7.3451%" y="117" width="0.1198%" height="15" fill="rgb(211,154,26)" fg:x="4474" fg:w="73"/><text x="7.6381%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (108 instructions, 0.18%)</title><rect x="7.3451%" y="133" width="0.1773%" height="15" fill="rgb(221,177,39)" fg:x="4474" fg:w="108"/><text x="7.6381%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (176 instructions, 0.29%)</title><rect x="7.3451%" y="149" width="0.2889%" height="15" fill="rgb(219,84,7)" fg:x="4474" fg:w="176"/><text x="7.6381%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="7.6341%" y="149" width="0.1346%" height="15" fill="rgb(250,30,20)" fg:x="4650" fg:w="82"/><text x="7.9271%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.13%)</title><rect x="7.7687%" y="149" width="0.1330%" height="15" fill="rgb(217,97,36)" fg:x="4732" fg:w="81"/><text x="8.0617%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="7.9017%" y="149" width="0.1346%" height="15" fill="rgb(235,182,12)" fg:x="4813" fg:w="82"/><text x="8.1947%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="8.0363%" y="149" width="0.1346%" height="15" fill="rgb(219,20,53)" fg:x="4895" fg:w="82"/><text x="8.3293%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.13%)</title><rect x="8.1742%" y="149" width="0.1330%" height="15" fill="rgb(244,0,51)" fg:x="4979" fg:w="81"/><text x="8.4672%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.63%)</title><rect x="8.3072%" y="149" width="0.6255%" height="15" fill="rgb(211,12,20)" fg:x="5060" fg:w="381"/><text x="8.6002%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.63%)</title><rect x="8.9327%" y="149" width="0.6255%" height="15" fill="rgb(249,95,0)" fg:x="5441" fg:w="381"/><text x="9.2257%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,451 instructions, 10.59%)</title><rect x="0.4695%" y="165" width="10.5909%" height="15" fill="rgb(228,6,33)" fg:x="286" fg:w="6451"/><text x="0.7625%" y="175.50">candid::de::I..</text></g><g><title>memcpy (336 instructions, 0.55%)</title><rect x="11.0604%" y="165" width="0.5516%" height="15" fill="rgb(217,62,22)" fg:x="6737" fg:w="336"/><text x="11.3534%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.06%)</title><rect x="11.6120%" y="149" width="0.0640%" height="15" fill="rgb(213,60,33)" fg:x="7073" fg:w="39"/><text x="11.9050%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="11.6761%" y="149" width="0.1346%" height="15" fill="rgb(251,204,23)" fg:x="7112" fg:w="82"/><text x="11.9690%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="11.8189%" y="117" width="0.0870%" height="15" fill="rgb(243,97,47)" fg:x="7199" fg:w="53"/><text x="12.1119%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.15%)</title><rect x="11.9059%" y="117" width="0.1461%" height="15" fill="rgb(236,109,24)" fg:x="7252" fg:w="89"/><text x="12.1989%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.26%)</title><rect x="12.0520%" y="117" width="0.2643%" height="15" fill="rgb(226,25,32)" fg:x="7341" fg:w="161"/><text x="12.3450%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.89%)</title><rect x="11.8189%" y="133" width="0.8865%" height="15" fill="rgb(253,77,43)" fg:x="7199" fg:w="540"/><text x="12.1119%" y="143.50"></text></g><g><title>candid::types::internal::env_add (755 instructions, 1.24%)</title><rect x="11.8107%" y="149" width="1.2395%" height="15" fill="rgb(247,221,34)" fg:x="7194" fg:w="755"/><text x="12.1036%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="13.0502%" y="149" width="0.1346%" height="15" fill="rgb(228,22,2)" fg:x="7949" fg:w="82"/><text x="13.3432%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="13.1930%" y="117" width="0.0870%" height="15" fill="rgb(238,127,46)" fg:x="8036" fg:w="53"/><text x="13.4860%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.15%)</title><rect x="13.2800%" y="117" width="0.1461%" height="15" fill="rgb(244,134,50)" fg:x="8089" fg:w="89"/><text x="13.5730%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.26%)</title><rect x="13.4261%" y="117" width="0.2643%" height="15" fill="rgb(220,108,3)" fg:x="8178" fg:w="161"/><text x="13.7191%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.89%)</title><rect x="13.1930%" y="133" width="0.8865%" height="15" fill="rgb(235,70,38)" fg:x="8036" fg:w="540"/><text x="13.4860%" y="143.50"></text></g><g><title>memcmp (68 instructions, 0.11%)</title><rect x="14.0796%" y="133" width="0.1116%" height="15" fill="rgb(216,29,16)" fg:x="8576" fg:w="68"/><text x="14.3725%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.13%)</title><rect x="14.1912%" y="117" width="0.1330%" height="15" fill="rgb(222,114,12)" fg:x="8644" fg:w="81"/><text x="14.4842%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.18%)</title><rect x="14.1912%" y="133" width="0.1773%" height="15" fill="rgb(243,120,53)" fg:x="8644" fg:w="108"/><text x="14.4842%" y="143.50"></text></g><g><title>candid::types::internal::env_add (889 instructions, 1.46%)</title><rect x="13.1848%" y="149" width="1.4595%" height="15" fill="rgb(213,110,42)" fg:x="8031" fg:w="889"/><text x="13.4778%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="14.6443%" y="101" width="0.0870%" height="15" fill="rgb(223,209,51)" fg:x="8920" fg:w="53"/><text x="14.9373%" y="111.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.13%)</title><rect x="14.6443%" y="117" width="0.1297%" height="15" fill="rgb(251,175,44)" fg:x="8920" fg:w="79"/><text x="14.9373%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.48%)</title><rect x="14.6443%" y="133" width="0.4794%" height="15" fill="rgb(246,131,41)" fg:x="8920" fg:w="292"/><text x="14.9373%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.369 (15 instructions, 0.02%)</title><rect x="15.1237%" y="133" width="0.0246%" height="15" fill="rgb(221,226,48)" fg:x="9212" fg:w="15"/><text x="15.4167%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="15.1483%" y="133" width="0.0181%" height="15" fill="rgb(245,173,4)" fg:x="9227" fg:w="11"/><text x="15.4413%" y="143.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.78%)</title><rect x="14.6443%" y="149" width="0.7848%" height="15" fill="rgb(205,170,48)" fg:x="8920" fg:w="478"/><text x="14.9373%" y="159.50"></text></g><g><title>candid::types::CandidType::ty (2,432 instructions, 3.99%)</title><rect x="11.6120%" y="165" width="3.9927%" height="15" fill="rgb(249,34,4)" fg:x="7073" fg:w="2432"/><text x="11.9050%" y="175.50">can..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.05%)</title><rect x="15.6047%" y="149" width="0.0542%" height="15" fill="rgb(228,81,12)" fg:x="9505" fg:w="33"/><text x="15.8977%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.20%)</title><rect x="15.6589%" y="133" width="0.2019%" height="15" fill="rgb(224,151,35)" fg:x="9538" fg:w="123"/><text x="15.9519%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.20%)</title><rect x="15.9052%" y="133" width="0.2019%" height="15" fill="rgb(234,106,35)" fg:x="9688" fg:w="123"/><text x="16.1981%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.49%)</title><rect x="15.6589%" y="149" width="0.4925%" height="15" fill="rgb(232,184,40)" fg:x="9538" fg:w="300"/><text x="15.9519%" y="159.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="16.1514%" y="133" width="0.0460%" height="15" fill="rgb(250,131,26)" fg:x="9838" fg:w="28"/><text x="16.4444%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.02%)</title><rect x="16.1974%" y="133" width="0.0246%" height="15" fill="rgb(229,95,11)" fg:x="9866" fg:w="15"/><text x="16.4904%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.02%)</title><rect x="16.2220%" y="133" width="0.0246%" height="15" fill="rgb(254,224,49)" fg:x="9881" fg:w="15"/><text x="16.5150%" y="143.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (133 instructions, 0.22%)</title><rect x="16.1514%" y="149" width="0.2184%" height="15" fill="rgb(207,224,24)" fg:x="9838" fg:w="133"/><text x="16.4444%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="16.3698%" y="149" width="0.0181%" height="15" fill="rgb(243,49,27)" fg:x="9971" fg:w="11"/><text x="16.6628%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="16.3878%" y="149" width="0.0181%" height="15" fill="rgb(246,183,53)" fg:x="9982" fg:w="11"/><text x="16.6808%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="16.4059%" y="149" width="0.0181%" height="15" fill="rgb(225,143,23)" fg:x="9993" fg:w="11"/><text x="16.6989%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::deserialize_with_type (665 instructions, 1.09%)</title><rect x="15.6047%" y="165" width="1.0918%" height="15" fill="rgb(241,1,22)" fg:x="9505" fg:w="665"/><text x="15.8977%" y="175.50"></text></g><g><title>memcpy (411 instructions, 0.67%)</title><rect x="16.6965%" y="165" width="0.6748%" height="15" fill="rgb(206,217,53)" fg:x="10170" fg:w="411"/><text x="16.9895%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.02%)</title><rect x="17.3712%" y="133" width="0.0197%" height="15" fill="rgb(227,5,24)" fg:x="10581" fg:w="12"/><text x="17.6642%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.20%)</title><rect x="17.3909%" y="133" width="0.2019%" height="15" fill="rgb(211,194,2)" fg:x="10593" fg:w="123"/><text x="17.6839%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.10%)</title><rect x="17.5929%" y="101" width="0.1034%" height="15" fill="rgb(210,198,7)" fg:x="10716" fg:w="63"/><text x="17.8859%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (209 instructions, 0.34%)</title><rect x="17.5929%" y="117" width="0.3431%" height="15" fill="rgb(231,73,9)" fg:x="10716" fg:w="209"/><text x="17.8859%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (236 instructions, 0.39%)</title><rect x="17.5929%" y="133" width="0.3875%" height="15" fill="rgb(241,100,48)" fg:x="10716" fg:w="236"/><text x="17.8859%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="17.9803%" y="133" width="0.0181%" height="15" fill="rgb(239,45,14)" fg:x="10952" fg:w="11"/><text x="18.2733%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (424 instructions, 0.70%)</title><rect x="17.3712%" y="149" width="0.6961%" height="15" fill="rgb(243,99,39)" fg:x="10581" fg:w="424"/><text x="17.6642%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (458 instructions, 0.75%)</title><rect x="17.3712%" y="165" width="0.7519%" height="15" fill="rgb(227,180,36)" fg:x="10581" fg:w="458"/><text x="17.6642%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.20%)</title><rect x="18.1232%" y="165" width="0.2019%" height="15" fill="rgb(232,6,21)" fg:x="11039" fg:w="123"/><text x="18.4161%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,151 instructions, 18.31%)</title><rect x="0.2758%" y="181" width="18.3070%" height="15" fill="rgb(243,124,17)" fg:x="168" fg:w="11151"/><text x="0.5688%" y="191.50">ic_cdk::api::call::arg_d..</text></g><g><title>btreemap::MAP::__getit (9 instructions, 0.01%)</title><rect x="18.5829%" y="181" width="0.0148%" height="15" fill="rgb(212,140,12)" fg:x="11319" fg:w="9"/><text x="18.8758%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (799 instructions, 1.31%)</title><rect x="18.5976%" y="181" width="1.3117%" height="15" fill="rgb(229,184,22)" fg:x="11328" fg:w="799"/><text x="18.8906%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (961 instructions, 1.58%)</title><rect x="19.9094%" y="181" width="1.5777%" height="15" fill="rgb(237,49,8)" fg:x="12127" fg:w="961"/><text x="20.2023%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (833 instructions, 1.37%)</title><rect x="21.4871%" y="181" width="1.3676%" height="15" fill="rgb(232,210,29)" fg:x="13088" fg:w="833"/><text x="21.7801%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (929 instructions, 1.53%)</title><rect x="22.8547%" y="181" width="1.5252%" height="15" fill="rgb(254,96,38)" fg:x="13921" fg:w="929"/><text x="23.1476%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,023 instructions, 1.68%)</title><rect x="24.3798%" y="181" width="1.6795%" height="15" fill="rgb(207,52,11)" fg:x="14850" fg:w="1023"/><text x="24.6728%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,247 instructions, 2.05%)</title><rect x="26.0593%" y="181" width="2.0472%" height="15" fill="rgb(239,33,54)" fg:x="15873" fg:w="1247"/><text x="26.3523%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,155 instructions, 1.90%)</title><rect x="28.1066%" y="181" width="1.8962%" height="15" fill="rgb(226,75,5)" fg:x="17120" fg:w="1155"/><text x="28.3996%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (671 instructions, 1.10%)</title><rect x="30.0028%" y="181" width="1.1016%" height="15" fill="rgb(237,160,47)" fg:x="18275" fg:w="671"/><text x="30.2958%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (929 instructions, 1.53%)</title><rect x="31.1044%" y="181" width="1.5252%" height="15" fill="rgb(206,213,51)" fg:x="18946" fg:w="929"/><text x="31.3974%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (639 instructions, 1.05%)</title><rect x="32.6296%" y="181" width="1.0491%" height="15" fill="rgb(235,132,12)" fg:x="19875" fg:w="639"/><text x="32.9225%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (767 instructions, 1.26%)</title><rect x="33.6786%" y="181" width="1.2592%" height="15" fill="rgb(217,66,7)" fg:x="20514" fg:w="767"/><text x="33.9716%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (833 instructions, 1.37%)</title><rect x="34.9379%" y="181" width="1.3676%" height="15" fill="rgb(214,111,30)" fg:x="21281" fg:w="833"/><text x="35.2308%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,055 instructions, 1.73%)</title><rect x="36.3054%" y="181" width="1.7320%" height="15" fill="rgb(252,71,30)" fg:x="22114" fg:w="1055"/><text x="36.5984%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (703 instructions, 1.15%)</title><rect x="38.0375%" y="181" width="1.1541%" height="15" fill="rgb(222,68,20)" fg:x="23169" fg:w="703"/><text x="38.3304%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (863 instructions, 1.42%)</title><rect x="39.1916%" y="181" width="1.4168%" height="15" fill="rgb(244,142,29)" fg:x="23872" fg:w="863"/><text x="39.4846%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (961 instructions, 1.58%)</title><rect x="40.6084%" y="181" width="1.5777%" height="15" fill="rgb(207,196,5)" fg:x="24735" fg:w="961"/><text x="40.9014%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (831 instructions, 1.36%)</title><rect x="42.1861%" y="181" width="1.3643%" height="15" fill="rgb(217,154,11)" fg:x="25696" fg:w="831"/><text x="42.4791%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (961 instructions, 1.58%)</title><rect x="43.5504%" y="181" width="1.5777%" height="15" fill="rgb(235,51,29)" fg:x="26527" fg:w="961"/><text x="43.8434%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,377 instructions, 2.26%)</title><rect x="45.1281%" y="181" width="2.2607%" height="15" fill="rgb(235,120,37)" fg:x="27488" fg:w="1377"/><text x="45.4211%" y="191.50">a..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (575 instructions, 0.94%)</title><rect x="47.3888%" y="181" width="0.9440%" height="15" fill="rgb(251,66,38)" fg:x="28865" fg:w="575"/><text x="47.6818%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,121 instructions, 1.84%)</title><rect x="48.3328%" y="181" width="1.8404%" height="15" fill="rgb(253,159,40)" fg:x="29440" fg:w="1121"/><text x="48.6258%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,055 instructions, 1.73%)</title><rect x="50.1732%" y="181" width="1.7320%" height="15" fill="rgb(248,122,5)" fg:x="30561" fg:w="1055"/><text x="50.4662%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (865 instructions, 1.42%)</title><rect x="51.9052%" y="181" width="1.4201%" height="15" fill="rgb(236,99,24)" fg:x="31616" fg:w="865"/><text x="52.1982%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,279 instructions, 2.10%)</title><rect x="53.3253%" y="181" width="2.0998%" height="15" fill="rgb(209,0,42)" fg:x="32481" fg:w="1279"/><text x="53.6183%" y="191.50">a..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (767 instructions, 1.26%)</title><rect x="55.4251%" y="181" width="1.2592%" height="15" fill="rgb(253,222,2)" fg:x="33760" fg:w="767"/><text x="55.7181%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,247 instructions, 2.05%)</title><rect x="56.6843%" y="181" width="2.0472%" height="15" fill="rgb(205,28,51)" fg:x="34527" fg:w="1247"/><text x="56.9773%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (897 instructions, 1.47%)</title><rect x="58.7316%" y="181" width="1.4726%" height="15" fill="rgb(233,114,26)" fg:x="35774" fg:w="897"/><text x="59.0246%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (895 instructions, 1.47%)</title><rect x="60.2042%" y="181" width="1.4694%" height="15" fill="rgb(224,75,26)" fg:x="36671" fg:w="895"/><text x="60.4972%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (863 instructions, 1.42%)</title><rect x="61.6736%" y="181" width="1.4168%" height="15" fill="rgb(240,16,53)" fg:x="37566" fg:w="863"/><text x="61.9666%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (863 instructions, 1.42%)</title><rect x="63.0904%" y="181" width="1.4168%" height="15" fill="rgb(213,38,36)" fg:x="38429" fg:w="863"/><text x="63.3834%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (991 instructions, 1.63%)</title><rect x="64.5072%" y="181" width="1.6270%" height="15" fill="rgb(252,171,53)" fg:x="39292" fg:w="991"/><text x="64.8002%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (671 instructions, 1.10%)</title><rect x="66.1342%" y="181" width="1.1016%" height="15" fill="rgb(213,195,6)" fg:x="40283" fg:w="671"/><text x="66.4272%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,023 instructions, 1.68%)</title><rect x="67.2358%" y="181" width="1.6795%" height="15" fill="rgb(220,136,30)" fg:x="40954" fg:w="1023"/><text x="67.5288%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (897 instructions, 1.47%)</title><rect x="68.9153%" y="181" width="1.4726%" height="15" fill="rgb(241,96,20)" fg:x="41977" fg:w="897"/><text x="69.2083%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (767 instructions, 1.26%)</title><rect x="70.3879%" y="181" width="1.2592%" height="15" fill="rgb(223,86,50)" fg:x="42874" fg:w="767"/><text x="70.6809%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (705 instructions, 1.16%)</title><rect x="71.6472%" y="181" width="1.1574%" height="15" fill="rgb(221,194,21)" fg:x="43641" fg:w="705"/><text x="71.9401%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (703 instructions, 1.15%)</title><rect x="72.8046%" y="181" width="1.1541%" height="15" fill="rgb(232,89,15)" fg:x="44346" fg:w="703"/><text x="73.0976%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,027 instructions, 1.69%)</title><rect x="73.9587%" y="181" width="1.6861%" height="15" fill="rgb(234,182,38)" fg:x="45049" fg:w="1027"/><text x="74.2517%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (927 instructions, 1.52%)</title><rect x="75.6448%" y="181" width="1.5219%" height="15" fill="rgb(222,84,47)" fg:x="46076" fg:w="927"/><text x="75.9378%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (959 instructions, 1.57%)</title><rect x="77.1667%" y="181" width="1.5744%" height="15" fill="rgb(231,17,15)" fg:x="47003" fg:w="959"/><text x="77.4597%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,119 instructions, 1.84%)</title><rect x="78.7411%" y="181" width="1.8371%" height="15" fill="rgb(211,203,43)" fg:x="47962" fg:w="1119"/><text x="79.0341%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (927 instructions, 1.52%)</title><rect x="80.5782%" y="181" width="1.5219%" height="15" fill="rgb(219,46,49)" fg:x="49081" fg:w="927"/><text x="80.8712%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (767 instructions, 1.26%)</title><rect x="82.1001%" y="181" width="1.2592%" height="15" fill="rgb(254,65,12)" fg:x="50008" fg:w="767"/><text x="82.3931%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,151 instructions, 1.89%)</title><rect x="83.3593%" y="181" width="1.8896%" height="15" fill="rgb(213,163,23)" fg:x="50775" fg:w="1151"/><text x="83.6523%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (863 instructions, 1.42%)</title><rect x="85.2490%" y="181" width="1.4168%" height="15" fill="rgb(208,23,39)" fg:x="51926" fg:w="863"/><text x="85.5419%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (991 instructions, 1.63%)</title><rect x="86.6658%" y="181" width="1.6270%" height="15" fill="rgb(215,10,4)" fg:x="52789" fg:w="991"/><text x="86.9588%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,055 instructions, 1.73%)</title><rect x="88.2928%" y="181" width="1.7320%" height="15" fill="rgb(252,62,46)" fg:x="53780" fg:w="1055"/><text x="88.5857%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,089 instructions, 1.79%)</title><rect x="90.0248%" y="181" width="1.7879%" height="15" fill="rgb(215,66,48)" fg:x="54835" fg:w="1089"/><text x="90.3178%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (927 instructions, 1.52%)</title><rect x="91.8126%" y="181" width="1.5219%" height="15" fill="rgb(252,63,40)" fg:x="55924" fg:w="927"/><text x="92.1056%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,151 instructions, 1.89%)</title><rect x="93.3345%" y="181" width="1.8896%" height="15" fill="rgb(244,118,34)" fg:x="56851" fg:w="1151"/><text x="93.6275%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.09%)</title><rect x="95.2324%" y="117" width="0.0903%" height="15" fill="rgb(233,116,37)" fg:x="58007" fg:w="55"/><text x="95.5254%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.23%)</title><rect x="95.2324%" y="133" width="0.2266%" height="15" fill="rgb(254,184,19)" fg:x="58007" fg:w="138"/><text x="95.5254%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (165 instructions, 0.27%)</title><rect x="95.2324%" y="149" width="0.2709%" height="15" fill="rgb(216,196,46)" fg:x="58007" fg:w="165"/><text x="95.5254%" y="159.50"></text></g><g><title>memset (136 instructions, 0.22%)</title><rect x="95.5033%" y="149" width="0.2233%" height="15" fill="rgb(230,110,2)" fg:x="58172" fg:w="136"/><text x="95.7962%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (465 instructions, 0.76%)</title><rect x="95.2242%" y="165" width="0.7634%" height="15" fill="rgb(248,65,30)" fg:x="58002" fg:w="465"/><text x="95.5171%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.05%)</title><rect x="95.9876%" y="149" width="0.0525%" height="15" fill="rgb(253,199,54)" fg:x="58467" fg:w="32"/><text x="96.2806%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.19%)</title><rect x="96.0401%" y="117" width="0.1937%" height="15" fill="rgb(242,205,38)" fg:x="58499" fg:w="118"/><text x="96.3331%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (153 instructions, 0.25%)</title><rect x="96.0401%" y="133" width="0.2512%" height="15" fill="rgb(211,116,51)" fg:x="58499" fg:w="153"/><text x="96.3331%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (218 instructions, 0.36%)</title><rect x="96.0401%" y="149" width="0.3579%" height="15" fill="rgb(217,137,43)" fg:x="58499" fg:w="218"/><text x="96.3331%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="96.3980%" y="149" width="0.0181%" height="15" fill="rgb(208,138,43)" fg:x="58717" fg:w="11"/><text x="96.6910%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="96.4161%" y="149" width="0.0181%" height="15" fill="rgb(230,208,4)" fg:x="58728" fg:w="11"/><text x="96.7091%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.05%)</title><rect x="96.4341%" y="149" width="0.0493%" height="15" fill="rgb(245,99,29)" fg:x="58739" fg:w="30"/><text x="96.7271%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (514 instructions, 0.84%)</title><rect x="95.9876%" y="165" width="0.8439%" height="15" fill="rgb(216,11,8)" fg:x="58467" fg:w="514"/><text x="96.2806%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (24 instructions, 0.04%)</title><rect x="96.8314%" y="165" width="0.0394%" height="15" fill="rgb(222,169,50)" fg:x="58981" fg:w="24"/><text x="97.1244%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.09%)</title><rect x="96.8708%" y="165" width="0.0903%" height="15" fill="rgb(227,138,9)" fg:x="59005" fg:w="55"/><text x="97.1638%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,132 instructions, 1.86%)</title><rect x="95.2242%" y="181" width="1.8584%" height="15" fill="rgb(209,40,32)" fg:x="58002" fg:w="1132"/><text x="95.5171%" y="191.50"></text></g><g><title>btreemap::batch_remove_7_::{{closure}} (60,426 instructions, 99.20%)</title><rect x="0.2758%" y="197" width="99.2038%" height="15" fill="rgb(246,50,14)" fg:x="168" fg:w="60426"/><text x="0.5688%" y="207.50">btreemap::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.02%)</title><rect x="99.4796%" y="197" width="0.0197%" height="15" fill="rgb(240,107,50)" fg:x="60594" fg:w="12"/><text x="99.7725%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.13%)</title><rect x="99.4993%" y="197" width="0.1330%" height="15" fill="rgb(223,179,24)" fg:x="60606" fg:w="81"/><text x="99.7922%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.21%)</title><rect x="99.6323%" y="197" width="0.2069%" height="15" fill="rgb(215,124,3)" fg:x="60687" fg:w="126"/><text x="99.9252%" y="207.50"></text></g><g><title>all (60,911 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,210,25)" fg:x="0" fg:w="60911"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (60,911 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,54,7)" fg:x="0" fg:w="60911"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>