<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="81246"><g><title>ic_cdk::setup (19 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0234%" height="15" fill="rgb(223,185,53)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="0.0234%" y="197" width="0.0935%" height="15" fill="rgb(252,152,54)" fg:x="19" fg:w="76"/><text x="0.3164%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="0.1169%" y="197" width="0.0935%" height="15" fill="rgb(239,137,12)" fg:x="95" fg:w="76"/><text x="0.4099%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="0.2105%" y="165" width="0.0935%" height="15" fill="rgb(210,49,45)" fg:x="171" fg:w="76"/><text x="0.5034%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.08%)</title><rect x="0.3040%" y="149" width="0.0849%" height="15" fill="rgb(223,80,45)" fg:x="247" fg:w="69"/><text x="0.5970%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.50%)</title><rect x="0.3889%" y="149" width="0.4997%" height="15" fill="rgb(214,198,53)" fg:x="316" fg:w="406"/><text x="0.6819%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.10%)</title><rect x="0.8887%" y="149" width="0.1009%" height="15" fill="rgb(211,105,52)" fg:x="722" fg:w="82"/><text x="1.1816%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="0.9896%" y="149" width="0.0665%" height="15" fill="rgb(236,74,7)" fg:x="804" fg:w="54"/><text x="1.2826%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.0561%" y="149" width="0.0665%" height="15" fill="rgb(233,171,43)" fg:x="858" fg:w="54"/><text x="1.3490%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.1225%" y="149" width="0.0665%" height="15" fill="rgb(249,104,17)" fg:x="912" fg:w="54"/><text x="1.4155%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.1890%" y="149" width="0.0665%" height="15" fill="rgb(254,203,22)" fg:x="966" fg:w="54"/><text x="1.4820%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.08%)</title><rect x="1.2554%" y="149" width="0.0849%" height="15" fill="rgb(226,117,22)" fg:x="1020" fg:w="69"/><text x="1.5484%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.08%)</title><rect x="1.3404%" y="149" width="0.0800%" height="15" fill="rgb(208,180,41)" fg:x="1089" fg:w="65"/><text x="1.6333%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.50%)</title><rect x="1.4204%" y="149" width="0.4997%" height="15" fill="rgb(247,167,14)" fg:x="1154" fg:w="406"/><text x="1.7133%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="1.9201%" y="149" width="0.0197%" height="15" fill="rgb(246,194,10)" fg:x="1560" fg:w="16"/><text x="2.2131%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="1.9398%" y="133" width="0.0935%" height="15" fill="rgb(228,2,21)" fg:x="1576" fg:w="76"/><text x="2.2328%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.07%)</title><rect x="2.0333%" y="101" width="0.0738%" height="15" fill="rgb(221,17,1)" fg:x="1652" fg:w="60"/><text x="2.3263%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.10%)</title><rect x="2.0333%" y="117" width="0.1046%" height="15" fill="rgb(216,92,52)" fg:x="1652" fg:w="85"/><text x="2.3263%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="2.1380%" y="69" width="0.0111%" height="15" fill="rgb(226,49,52)" fg:x="1737" fg:w="9"/><text x="2.4309%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.04%)</title><rect x="2.1490%" y="53" width="0.0369%" height="15" fill="rgb(229,130,54)" fg:x="1746" fg:w="30"/><text x="2.4420%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.07%)</title><rect x="2.1490%" y="69" width="0.0677%" height="15" fill="rgb(239,153,35)" fg:x="1746" fg:w="55"/><text x="2.4420%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.15%)</title><rect x="2.1380%" y="85" width="0.1452%" height="15" fill="rgb(205,25,26)" fg:x="1737" fg:w="118"/><text x="2.4309%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.21%)</title><rect x="2.1380%" y="101" width="0.2105%" height="15" fill="rgb(247,225,4)" fg:x="1737" fg:w="171"/><text x="2.4309%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.22%)</title><rect x="2.1380%" y="117" width="0.2166%" height="15" fill="rgb(214,87,30)" fg:x="1737" fg:w="176"/><text x="2.4309%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.46%)</title><rect x="2.0333%" y="133" width="0.4579%" height="15" fill="rgb(220,18,47)" fg:x="1652" fg:w="372"/><text x="2.3263%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.72%)</title><rect x="1.9398%" y="149" width="0.7250%" height="15" fill="rgb(232,183,18)" fg:x="1576" fg:w="589"/><text x="2.2328%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.10%)</title><rect x="2.6647%" y="149" width="0.1009%" height="15" fill="rgb(253,77,30)" fg:x="2165" fg:w="82"/><text x="2.9577%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="2.7657%" y="149" width="0.0677%" height="15" fill="rgb(241,160,8)" fg:x="2247" fg:w="55"/><text x="3.0586%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.08%)</title><rect x="2.8334%" y="149" width="0.0775%" height="15" fill="rgb(217,84,42)" fg:x="2302" fg:w="63"/><text x="3.1263%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.08%)</title><rect x="2.9109%" y="149" width="0.0800%" height="15" fill="rgb(248,219,41)" fg:x="2365" fg:w="65"/><text x="3.2039%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.50%)</title><rect x="2.9909%" y="133" width="0.4997%" height="15" fill="rgb(235,95,45)" fg:x="2430" fg:w="406"/><text x="3.2839%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="3.4906%" y="133" width="0.0197%" height="15" fill="rgb(221,163,16)" fg:x="2836" fg:w="16"/><text x="3.7836%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="3.5103%" y="117" width="0.0935%" height="15" fill="rgb(206,5,42)" fg:x="2852" fg:w="76"/><text x="3.8033%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.07%)</title><rect x="3.6039%" y="85" width="0.0738%" height="15" fill="rgb(236,59,38)" fg:x="2928" fg:w="60"/><text x="3.8968%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.10%)</title><rect x="3.6039%" y="101" width="0.1046%" height="15" fill="rgb(214,160,10)" fg:x="2928" fg:w="85"/><text x="3.8968%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="3.7085%" y="53" width="0.0111%" height="15" fill="rgb(205,47,54)" fg:x="3013" fg:w="9"/><text x="4.0015%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.04%)</title><rect x="3.7196%" y="37" width="0.0369%" height="15" fill="rgb(238,214,33)" fg:x="3022" fg:w="30"/><text x="4.0125%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.07%)</title><rect x="3.7196%" y="53" width="0.0677%" height="15" fill="rgb(219,163,52)" fg:x="3022" fg:w="55"/><text x="4.0125%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.15%)</title><rect x="3.7085%" y="69" width="0.1452%" height="15" fill="rgb(216,129,23)" fg:x="3013" fg:w="118"/><text x="4.0015%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.21%)</title><rect x="3.7085%" y="85" width="0.2105%" height="15" fill="rgb(227,219,32)" fg:x="3013" fg:w="171"/><text x="4.0015%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.22%)</title><rect x="3.7085%" y="101" width="0.2166%" height="15" fill="rgb(207,59,8)" fg:x="3013" fg:w="176"/><text x="4.0015%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.46%)</title><rect x="3.6039%" y="117" width="0.4579%" height="15" fill="rgb(228,14,29)" fg:x="2928" fg:w="372"/><text x="3.8968%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.72%)</title><rect x="3.5103%" y="133" width="0.7250%" height="15" fill="rgb(223,146,46)" fg:x="2852" fg:w="589"/><text x="3.8033%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.10%)</title><rect x="4.2353%" y="133" width="0.1009%" height="15" fill="rgb(227,72,9)" fg:x="3441" fg:w="82"/><text x="4.5283%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="4.3362%" y="133" width="0.0677%" height="15" fill="rgb(205,97,54)" fg:x="3523" fg:w="55"/><text x="4.6292%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.08%)</title><rect x="4.4039%" y="117" width="0.0849%" height="15" fill="rgb(225,138,28)" fg:x="3578" fg:w="69"/><text x="4.6969%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.11%)</title><rect x="4.4888%" y="117" width="0.1120%" height="15" fill="rgb(218,127,2)" fg:x="3647" fg:w="91"/><text x="4.7818%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.08%)</title><rect x="4.6008%" y="117" width="0.0775%" height="15" fill="rgb(225,55,21)" fg:x="3738" fg:w="63"/><text x="4.8938%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.35%)</title><rect x="4.4039%" y="133" width="0.3471%" height="15" fill="rgb(243,20,53)" fg:x="3578" fg:w="282"/><text x="4.6969%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.10%)</title><rect x="4.7510%" y="133" width="0.0960%" height="15" fill="rgb(220,207,51)" fg:x="3860" fg:w="78"/><text x="5.0440%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,711 instructions, 2.11%)</title><rect x="2.9909%" y="149" width="2.1059%" height="15" fill="rgb(214,216,0)" fg:x="2430" fg:w="1711"/><text x="3.2839%" y="159.50">b..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.08%)</title><rect x="5.0969%" y="149" width="0.0775%" height="15" fill="rgb(223,3,12)" fg:x="4141" fg:w="63"/><text x="5.3898%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="5.1744%" y="149" width="0.0160%" height="15" fill="rgb(212,116,3)" fg:x="4204" fg:w="13"/><text x="5.4674%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="5.1904%" y="149" width="0.0160%" height="15" fill="rgb(205,62,11)" fg:x="4217" fg:w="13"/><text x="5.4834%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.02%)</title><rect x="5.2150%" y="149" width="0.0185%" height="15" fill="rgb(251,84,38)" fg:x="4237" fg:w="15"/><text x="5.5080%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.09%)</title><rect x="5.2335%" y="133" width="0.0874%" height="15" fill="rgb(247,168,34)" fg:x="4252" fg:w="71"/><text x="5.5265%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (154 instructions, 0.19%)</title><rect x="5.2335%" y="149" width="0.1895%" height="15" fill="rgb(208,32,10)" fg:x="4252" fg:w="154"/><text x="5.5265%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.15%)</title><rect x="5.4230%" y="117" width="0.1452%" height="15" fill="rgb(236,128,0)" fg:x="4406" fg:w="118"/><text x="5.7160%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (152 instructions, 0.19%)</title><rect x="5.4230%" y="133" width="0.1871%" height="15" fill="rgb(223,32,40)" fg:x="4406" fg:w="152"/><text x="5.7160%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (220 instructions, 0.27%)</title><rect x="5.4230%" y="149" width="0.2708%" height="15" fill="rgb(222,80,49)" fg:x="4406" fg:w="220"/><text x="5.7160%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="5.6938%" y="149" width="0.0935%" height="15" fill="rgb(238,191,5)" fg:x="4626" fg:w="76"/><text x="5.9868%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="5.7874%" y="149" width="0.0997%" height="15" fill="rgb(233,120,1)" fg:x="4702" fg:w="81"/><text x="6.0803%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="5.8871%" y="149" width="0.0935%" height="15" fill="rgb(245,69,44)" fg:x="4783" fg:w="76"/><text x="6.1800%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="5.9806%" y="149" width="0.0935%" height="15" fill="rgb(251,100,35)" fg:x="4859" fg:w="76"/><text x="6.2736%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="6.0766%" y="149" width="0.0997%" height="15" fill="rgb(247,128,39)" fg:x="4937" fg:w="81"/><text x="6.3696%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.47%)</title><rect x="6.1763%" y="149" width="0.4677%" height="15" fill="rgb(212,14,26)" fg:x="5018" fg:w="380"/><text x="6.4693%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.47%)</title><rect x="6.6440%" y="149" width="0.4677%" height="15" fill="rgb(248,17,46)" fg:x="5398" fg:w="380"/><text x="6.9370%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,475 instructions, 7.97%)</title><rect x="0.3040%" y="165" width="7.9696%" height="15" fill="rgb(247,18,49)" fg:x="247" fg:w="6475"/><text x="0.5970%" y="175.50">candid::d..</text></g><g><title>memcpy (335 instructions, 0.41%)</title><rect x="8.2736%" y="165" width="0.4123%" height="15" fill="rgb(250,49,38)" fg:x="6722" fg:w="335"/><text x="8.5666%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.05%)</title><rect x="8.6860%" y="165" width="0.0480%" height="15" fill="rgb(214,149,28)" fg:x="7057" fg:w="39"/><text x="8.9789%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="8.7340%" y="165" width="0.0935%" height="15" fill="rgb(254,95,3)" fg:x="7096" fg:w="76"/><text x="9.0269%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="8.8337%" y="133" width="0.0652%" height="15" fill="rgb(241,163,17)" fg:x="7177" fg:w="53"/><text x="9.1266%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.11%)</title><rect x="8.8989%" y="133" width="0.1083%" height="15" fill="rgb(209,132,18)" fg:x="7230" fg:w="88"/><text x="9.1919%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.20%)</title><rect x="9.0072%" y="133" width="0.1994%" height="15" fill="rgb(240,23,35)" fg:x="7318" fg:w="162"/><text x="9.3002%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.66%)</title><rect x="8.8337%" y="149" width="0.6646%" height="15" fill="rgb(243,67,17)" fg:x="7177" fg:w="540"/><text x="9.1266%" y="159.50"></text></g><g><title>candid::types::internal::env_add (749 instructions, 0.92%)</title><rect x="8.8275%" y="165" width="0.9219%" height="15" fill="rgb(211,64,1)" fg:x="7172" fg:w="749"/><text x="9.1205%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="9.7494%" y="165" width="0.1009%" height="15" fill="rgb(212,85,15)" fg:x="7921" fg:w="82"/><text x="10.0424%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="9.8565%" y="133" width="0.0652%" height="15" fill="rgb(236,35,41)" fg:x="8008" fg:w="53"/><text x="10.1495%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.11%)</title><rect x="9.9217%" y="133" width="0.1083%" height="15" fill="rgb(217,19,23)" fg:x="8061" fg:w="88"/><text x="10.2147%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.20%)</title><rect x="10.0300%" y="133" width="0.1994%" height="15" fill="rgb(206,54,12)" fg:x="8149" fg:w="162"/><text x="10.3230%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.66%)</title><rect x="9.8565%" y="149" width="0.6646%" height="15" fill="rgb(234,189,37)" fg:x="8008" fg:w="540"/><text x="10.1495%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.08%)</title><rect x="10.5211%" y="149" width="0.0837%" height="15" fill="rgb(208,192,6)" fg:x="8548" fg:w="68"/><text x="10.8141%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="10.6048%" y="133" width="0.0677%" height="15" fill="rgb(220,196,39)" fg:x="8616" fg:w="55"/><text x="10.8978%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 instructions, 0.10%)</title><rect x="10.6048%" y="149" width="0.1009%" height="15" fill="rgb(239,51,10)" fg:x="8616" fg:w="82"/><text x="10.8978%" y="159.50"></text></g><g><title>candid::types::internal::env_add (864 instructions, 1.06%)</title><rect x="9.8503%" y="165" width="1.0634%" height="15" fill="rgb(249,7,36)" fg:x="8003" fg:w="864"/><text x="10.1433%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="10.9138%" y="117" width="0.0652%" height="15" fill="rgb(242,7,24)" fg:x="8867" fg:w="53"/><text x="11.2067%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.10%)</title><rect x="10.9138%" y="133" width="0.0960%" height="15" fill="rgb(246,66,50)" fg:x="8867" fg:w="78"/><text x="11.2067%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 0.36%)</title><rect x="10.9138%" y="149" width="0.3606%" height="15" fill="rgb(238,225,29)" fg:x="8867" fg:w="293"/><text x="11.2067%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1428 (15 instructions, 0.02%)</title><rect x="11.2744%" y="149" width="0.0185%" height="15" fill="rgb(228,84,46)" fg:x="9160" fg:w="15"/><text x="11.5674%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.2929%" y="149" width="0.0135%" height="15" fill="rgb(225,147,29)" fg:x="9175" fg:w="11"/><text x="11.5858%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.59%)</title><rect x="10.9138%" y="165" width="0.5883%" height="15" fill="rgb(209,75,1)" fg:x="8867" fg:w="478"/><text x="11.2067%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.06%)</title><rect x="11.5021%" y="165" width="0.0578%" height="15" fill="rgb(253,1,2)" fg:x="9345" fg:w="47"/><text x="11.7951%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="11.5600%" y="149" width="0.0677%" height="15" fill="rgb(253,19,17)" fg:x="9392" fg:w="55"/><text x="11.8529%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="11.6609%" y="149" width="0.0677%" height="15" fill="rgb(252,126,34)" fg:x="9474" fg:w="55"/><text x="11.9539%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (164 instructions, 0.20%)</title><rect x="11.5600%" y="165" width="0.2019%" height="15" fill="rgb(250,137,10)" fg:x="9392" fg:w="164"/><text x="11.8529%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.03%)</title><rect x="11.7618%" y="149" width="0.0345%" height="15" fill="rgb(249,177,32)" fg:x="9556" fg:w="28"/><text x="12.0548%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.12%)</title><rect x="11.7618%" y="165" width="0.1194%" height="15" fill="rgb(223,44,13)" fg:x="9556" fg:w="97"/><text x="12.0548%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.8812%" y="165" width="0.0135%" height="15" fill="rgb(215,84,38)" fg:x="9653" fg:w="11"/><text x="12.1742%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.8947%" y="165" width="0.0135%" height="15" fill="rgb(223,34,3)" fg:x="9664" fg:w="11"/><text x="12.1877%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.9083%" y="165" width="0.0135%" height="15" fill="rgb(214,229,42)" fg:x="9675" fg:w="11"/><text x="12.2012%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.50%)</title><rect x="11.9218%" y="165" width="0.5046%" height="15" fill="rgb(220,151,48)" fg:x="9686" fg:w="410"/><text x="12.2148%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.01%)</title><rect x="12.4265%" y="133" width="0.0148%" height="15" fill="rgb(227,205,3)" fg:x="10096" fg:w="12"/><text x="12.7194%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.12%)</title><rect x="12.4412%" y="133" width="0.1231%" height="15" fill="rgb(209,54,29)" fg:x="10108" fg:w="100"/><text x="12.7342%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="12.5643%" y="117" width="0.0997%" height="15" fill="rgb(217,108,34)" fg:x="10208" fg:w="81"/><text x="12.8573%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.13%)</title><rect x="12.5643%" y="133" width="0.1329%" height="15" fill="rgb(228,125,2)" fg:x="10208" fg:w="108"/><text x="12.8573%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="12.6972%" y="133" width="0.0135%" height="15" fill="rgb(246,100,17)" fg:x="10316" fg:w="11"/><text x="12.9902%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (273 instructions, 0.34%)</title><rect x="12.4265%" y="149" width="0.3360%" height="15" fill="rgb(219,100,42)" fg:x="10096" fg:w="273"/><text x="12.7194%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (308 instructions, 0.38%)</title><rect x="12.4265%" y="165" width="0.3791%" height="15" fill="rgb(245,174,30)" fg:x="10096" fg:w="308"/><text x="12.7194%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.15%)</title><rect x="12.8056%" y="165" width="0.1514%" height="15" fill="rgb(223,11,14)" fg:x="10404" fg:w="123"/><text x="13.0985%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (10,747 instructions, 13.23%)</title><rect x="0.2105%" y="181" width="13.2277%" height="15" fill="rgb(254,214,33)" fg:x="171" fg:w="10747"/><text x="0.5034%" y="191.50">ic_cdk::api::call..</text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="13.4444%" y="165" width="0.1772%" height="15" fill="rgb(244,38,51)" fg:x="10923" fg:w="144"/><text x="13.7373%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="13.6216%" y="165" width="0.1772%" height="15" fill="rgb(225,58,14)" fg:x="11067" fg:w="144"/><text x="13.9146%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="13.9158%" y="165" width="0.0234%" height="15" fill="rgb(224,112,43)" fg:x="11306" fg:w="19"/><text x="14.2087%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="13.9391%" y="165" width="0.0234%" height="15" fill="rgb(241,4,46)" fg:x="11325" fg:w="19"/><text x="14.2321%" y="175.50"></text></g><g><title>memmove (298 instructions, 0.37%)</title><rect x="13.9625%" y="149" width="0.3668%" height="15" fill="rgb(217,194,14)" fg:x="11344" fg:w="298"/><text x="14.2555%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="14.3293%" y="149" width="0.2092%" height="15" fill="rgb(242,130,19)" fg:x="11642" fg:w="170"/><text x="14.6223%" y="159.50"></text></g><g><title>memmove (298 instructions, 0.37%)</title><rect x="14.5386%" y="149" width="0.3668%" height="15" fill="rgb(213,53,50)" fg:x="11812" fg:w="298"/><text x="14.8315%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="14.9053%" y="149" width="0.2092%" height="15" fill="rgb(242,157,28)" fg:x="12110" fg:w="170"/><text x="15.1983%" y="159.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="15.1146%" y="149" width="0.2191%" height="15" fill="rgb(207,73,7)" fg:x="12280" fg:w="178"/><text x="15.4076%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="15.3337%" y="149" width="0.0997%" height="15" fill="rgb(215,3,21)" fg:x="12458" fg:w="81"/><text x="15.6266%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,517 instructions, 1.87%)</title><rect x="13.9625%" y="165" width="1.8672%" height="15" fill="rgb(254,198,49)" fg:x="11344" fg:w="1517"/><text x="14.2555%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.0549%" y="165" width="0.0234%" height="15" fill="rgb(230,50,34)" fg:x="13044" fg:w="19"/><text x="16.3479%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.0783%" y="165" width="0.0234%" height="15" fill="rgb(231,106,8)" fg:x="13063" fg:w="19"/><text x="16.3713%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.2186%" y="165" width="0.0234%" height="15" fill="rgb(205,132,53)" fg:x="13177" fg:w="19"/><text x="16.5116%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.2420%" y="165" width="0.0234%" height="15" fill="rgb(239,103,45)" fg:x="13196" fg:w="19"/><text x="16.5350%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="16.2654%" y="149" width="0.0135%" height="15" fill="rgb(250,174,10)" fg:x="13215" fg:w="11"/><text x="16.5584%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="16.2790%" y="149" width="0.0135%" height="15" fill="rgb(224,170,0)" fg:x="13226" fg:w="11"/><text x="16.5719%" y="159.50"></text></g><g><title>memmove (268 instructions, 0.33%)</title><rect x="16.2925%" y="149" width="0.3299%" height="15" fill="rgb(233,135,49)" fg:x="13237" fg:w="268"/><text x="16.5855%" y="159.50"></text></g><g><title>memmove (268 instructions, 0.33%)</title><rect x="16.6224%" y="149" width="0.3299%" height="15" fill="rgb(211,140,27)" fg:x="13505" fg:w="268"/><text x="16.9153%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_right (701 instructions, 0.86%)</title><rect x="16.2654%" y="165" width="0.8628%" height="15" fill="rgb(237,103,4)" fg:x="13215" fg:w="701"/><text x="16.5584%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="17.3547%" y="165" width="0.0234%" height="15" fill="rgb(249,221,44)" fg:x="14100" fg:w="19"/><text x="17.6477%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="17.3781%" y="165" width="0.0234%" height="15" fill="rgb(225,175,24)" fg:x="14119" fg:w="19"/><text x="17.6711%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="17.5184%" y="165" width="0.2191%" height="15" fill="rgb(233,71,34)" fg:x="14233" fg:w="178"/><text x="17.8114%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="17.7375%" y="165" width="0.2191%" height="15" fill="rgb(249,4,15)" fg:x="14411" fg:w="178"/><text x="18.0305%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.0735%" y="165" width="0.0234%" height="15" fill="rgb(223,66,25)" fg:x="14684" fg:w="19"/><text x="18.3665%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.0969%" y="165" width="0.0234%" height="15" fill="rgb(205,65,31)" fg:x="14703" fg:w="19"/><text x="18.3899%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.2372%" y="165" width="0.0234%" height="15" fill="rgb(222,166,25)" fg:x="14817" fg:w="19"/><text x="18.5302%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.2606%" y="165" width="0.0234%" height="15" fill="rgb(224,6,40)" fg:x="14836" fg:w="19"/><text x="18.5536%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.4009%" y="165" width="0.0234%" height="15" fill="rgb(222,95,52)" fg:x="14950" fg:w="19"/><text x="18.6939%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.4243%" y="165" width="0.0234%" height="15" fill="rgb(226,47,51)" fg:x="14969" fg:w="19"/><text x="18.7173%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.5646%" y="165" width="0.0234%" height="15" fill="rgb(234,160,50)" fg:x="15083" fg:w="19"/><text x="18.8576%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.5880%" y="165" width="0.0234%" height="15" fill="rgb(244,109,0)" fg:x="15102" fg:w="19"/><text x="18.8810%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.7283%" y="165" width="0.0234%" height="15" fill="rgb(220,151,45)" fg:x="15216" fg:w="19"/><text x="19.0213%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.7517%" y="165" width="0.0234%" height="15" fill="rgb(208,38,30)" fg:x="15235" fg:w="19"/><text x="19.0447%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.8920%" y="165" width="0.0234%" height="15" fill="rgb(225,28,41)" fg:x="15349" fg:w="19"/><text x="19.1850%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.9154%" y="165" width="0.0234%" height="15" fill="rgb(251,48,12)" fg:x="15368" fg:w="19"/><text x="19.2084%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.0557%" y="165" width="0.0234%" height="15" fill="rgb(211,205,45)" fg:x="15482" fg:w="19"/><text x="19.3487%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.0791%" y="165" width="0.0234%" height="15" fill="rgb(245,99,35)" fg:x="15501" fg:w="19"/><text x="19.3721%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.2194%" y="165" width="0.0234%" height="15" fill="rgb(251,50,44)" fg:x="15615" fg:w="19"/><text x="19.5124%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.2428%" y="165" width="0.0234%" height="15" fill="rgb(218,145,50)" fg:x="15634" fg:w="19"/><text x="19.5358%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="19.3831%" y="165" width="0.2560%" height="15" fill="rgb(233,0,25)" fg:x="15748" fg:w="208"/><text x="19.6761%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="19.6391%" y="165" width="0.2560%" height="15" fill="rgb(217,51,40)" fg:x="15956" fg:w="208"/><text x="19.9321%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.0121%" y="165" width="0.0234%" height="15" fill="rgb(243,54,41)" fg:x="16259" fg:w="19"/><text x="20.3050%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.0354%" y="165" width="0.0234%" height="15" fill="rgb(233,115,25)" fg:x="16278" fg:w="19"/><text x="20.3284%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.1758%" y="165" width="0.0234%" height="15" fill="rgb(231,110,20)" fg:x="16392" fg:w="19"/><text x="20.4687%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.1991%" y="165" width="0.0234%" height="15" fill="rgb(245,228,47)" fg:x="16411" fg:w="19"/><text x="20.4921%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.3395%" y="165" width="0.0234%" height="15" fill="rgb(232,106,41)" fg:x="16525" fg:w="19"/><text x="20.6324%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.3628%" y="165" width="0.0234%" height="15" fill="rgb(242,35,39)" fg:x="16544" fg:w="19"/><text x="20.6558%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.5032%" y="165" width="0.0234%" height="15" fill="rgb(212,120,29)" fg:x="16658" fg:w="19"/><text x="20.7961%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.5265%" y="165" width="0.0234%" height="15" fill="rgb(251,26,2)" fg:x="16677" fg:w="19"/><text x="20.8195%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.6669%" y="165" width="0.0234%" height="15" fill="rgb(223,141,43)" fg:x="16791" fg:w="19"/><text x="20.9598%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.6902%" y="165" width="0.0234%" height="15" fill="rgb(253,219,29)" fg:x="16810" fg:w="19"/><text x="20.9832%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.8306%" y="165" width="0.0234%" height="15" fill="rgb(234,149,1)" fg:x="16924" fg:w="19"/><text x="21.1235%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.8539%" y="165" width="0.0234%" height="15" fill="rgb(233,130,12)" fg:x="16943" fg:w="19"/><text x="21.1469%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.9943%" y="165" width="0.0234%" height="15" fill="rgb(221,60,2)" fg:x="17057" fg:w="19"/><text x="21.2872%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.0177%" y="165" width="0.0234%" height="15" fill="rgb(251,29,21)" fg:x="17076" fg:w="19"/><text x="21.3106%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.1580%" y="165" width="0.0234%" height="15" fill="rgb(233,9,5)" fg:x="17190" fg:w="19"/><text x="21.4509%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.1814%" y="165" width="0.0234%" height="15" fill="rgb(239,28,52)" fg:x="17209" fg:w="19"/><text x="21.4743%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.3217%" y="165" width="0.0234%" height="15" fill="rgb(214,57,40)" fg:x="17323" fg:w="19"/><text x="21.6146%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.3451%" y="165" width="0.0234%" height="15" fill="rgb(241,23,10)" fg:x="17342" fg:w="19"/><text x="21.6380%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.4854%" y="165" width="0.0234%" height="15" fill="rgb(209,197,52)" fg:x="17456" fg:w="19"/><text x="21.7783%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.5088%" y="165" width="0.0234%" height="15" fill="rgb(207,199,34)" fg:x="17475" fg:w="19"/><text x="21.8017%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.6491%" y="165" width="0.0234%" height="15" fill="rgb(230,207,35)" fg:x="17589" fg:w="19"/><text x="21.9420%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.6725%" y="165" width="0.0234%" height="15" fill="rgb(234,82,19)" fg:x="17608" fg:w="19"/><text x="21.9654%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.8128%" y="165" width="0.0234%" height="15" fill="rgb(242,205,25)" fg:x="17722" fg:w="19"/><text x="22.1057%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.8362%" y="165" width="0.0234%" height="15" fill="rgb(226,197,31)" fg:x="17741" fg:w="19"/><text x="22.1291%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.9765%" y="165" width="0.0234%" height="15" fill="rgb(236,227,26)" fg:x="17855" fg:w="19"/><text x="22.2694%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.9999%" y="165" width="0.0234%" height="15" fill="rgb(241,119,39)" fg:x="17874" fg:w="19"/><text x="22.2928%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.1402%" y="165" width="0.0234%" height="15" fill="rgb(205,118,18)" fg:x="17988" fg:w="19"/><text x="22.4331%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.1636%" y="165" width="0.0234%" height="15" fill="rgb(210,147,7)" fg:x="18007" fg:w="19"/><text x="22.4565%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.3039%" y="165" width="0.0234%" height="15" fill="rgb(226,40,53)" fg:x="18121" fg:w="19"/><text x="22.5968%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.3273%" y="165" width="0.0234%" height="15" fill="rgb(250,139,10)" fg:x="18140" fg:w="19"/><text x="22.6202%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="22.4676%" y="165" width="0.2191%" height="15" fill="rgb(241,12,24)" fg:x="18254" fg:w="178"/><text x="22.7605%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="22.6867%" y="165" width="0.2191%" height="15" fill="rgb(228,177,44)" fg:x="18432" fg:w="178"/><text x="22.9796%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.0227%" y="165" width="0.0234%" height="15" fill="rgb(209,223,20)" fg:x="18705" fg:w="19"/><text x="23.3156%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.0461%" y="165" width="0.0234%" height="15" fill="rgb(216,68,2)" fg:x="18724" fg:w="19"/><text x="23.3390%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.1864%" y="165" width="0.0234%" height="15" fill="rgb(217,49,27)" fg:x="18838" fg:w="19"/><text x="23.4793%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.2098%" y="165" width="0.0234%" height="15" fill="rgb(205,19,49)" fg:x="18857" fg:w="19"/><text x="23.5027%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.3501%" y="165" width="0.0234%" height="15" fill="rgb(231,74,27)" fg:x="18971" fg:w="19"/><text x="23.6430%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.3735%" y="165" width="0.0234%" height="15" fill="rgb(218,119,9)" fg:x="18990" fg:w="19"/><text x="23.6664%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.5138%" y="165" width="0.0234%" height="15" fill="rgb(213,90,25)" fg:x="19104" fg:w="19"/><text x="23.8067%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.5372%" y="165" width="0.0234%" height="15" fill="rgb(210,76,22)" fg:x="19123" fg:w="19"/><text x="23.8301%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.6775%" y="165" width="0.0234%" height="15" fill="rgb(245,88,4)" fg:x="19237" fg:w="19"/><text x="23.9704%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.7009%" y="165" width="0.0234%" height="15" fill="rgb(254,38,54)" fg:x="19256" fg:w="19"/><text x="23.9938%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.24%)</title><rect x="23.7242%" y="149" width="0.2388%" height="15" fill="rgb(227,139,51)" fg:x="19275" fg:w="194"/><text x="24.0172%" y="159.50"></text></g><g><title>memmove (194 instructions, 0.24%)</title><rect x="23.9630%" y="149" width="0.2388%" height="15" fill="rgb(205,23,7)" fg:x="19469" fg:w="194"/><text x="24.2560%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="24.2018%" y="149" width="0.0135%" height="15" fill="rgb(207,92,29)" fg:x="19663" fg:w="11"/><text x="24.4948%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="24.2153%" y="149" width="0.0135%" height="15" fill="rgb(244,226,31)" fg:x="19674" fg:w="11"/><text x="24.5083%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_left (553 instructions, 0.68%)</title><rect x="23.7242%" y="165" width="0.6806%" height="15" fill="rgb(218,123,13)" fg:x="19275" fg:w="553"/><text x="24.0172%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="24.6363%" y="165" width="0.1772%" height="15" fill="rgb(236,153,0)" fg:x="20016" fg:w="144"/><text x="24.9293%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="24.8135%" y="165" width="0.1772%" height="15" fill="rgb(227,18,41)" fg:x="20160" fg:w="144"/><text x="25.1065%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.1077%" y="165" width="0.0234%" height="15" fill="rgb(207,39,19)" fg:x="20399" fg:w="19"/><text x="25.4007%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.1311%" y="165" width="0.0234%" height="15" fill="rgb(247,17,49)" fg:x="20418" fg:w="19"/><text x="25.4241%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.2714%" y="165" width="0.0234%" height="15" fill="rgb(231,91,37)" fg:x="20532" fg:w="19"/><text x="25.5644%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.2948%" y="165" width="0.0234%" height="15" fill="rgb(206,146,45)" fg:x="20551" fg:w="19"/><text x="25.5878%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="25.4351%" y="165" width="0.2560%" height="15" fill="rgb(248,7,0)" fg:x="20665" fg:w="208"/><text x="25.7281%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="25.6911%" y="165" width="0.2560%" height="15" fill="rgb(232,158,14)" fg:x="20873" fg:w="208"/><text x="25.9841%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.0641%" y="165" width="0.0234%" height="15" fill="rgb(210,32,29)" fg:x="21176" fg:w="19"/><text x="26.3570%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.0874%" y="165" width="0.0234%" height="15" fill="rgb(247,147,1)" fg:x="21195" fg:w="19"/><text x="26.3804%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.1108%" y="149" width="0.0234%" height="15" fill="rgb(240,124,24)" fg:x="21214" fg:w="19"/><text x="26.4038%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="26.1342%" y="149" width="0.2092%" height="15" fill="rgb(240,96,39)" fg:x="21233" fg:w="170"/><text x="26.4272%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.3435%" y="149" width="0.0234%" height="15" fill="rgb(238,80,22)" fg:x="21403" fg:w="19"/><text x="26.6364%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="26.3668%" y="149" width="0.2092%" height="15" fill="rgb(223,138,17)" fg:x="21422" fg:w="170"/><text x="26.6598%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.5761%" y="149" width="0.0234%" height="15" fill="rgb(245,4,23)" fg:x="21592" fg:w="19"/><text x="26.8690%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (78 instructions, 0.10%)</title><rect x="26.5995%" y="149" width="0.0960%" height="15" fill="rgb(218,26,9)" fg:x="21611" fg:w="78"/><text x="26.8924%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (654 instructions, 0.80%)</title><rect x="26.1108%" y="165" width="0.8050%" height="15" fill="rgb(231,172,45)" fg:x="21214" fg:w="654"/><text x="26.4038%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.1410%" y="165" width="0.0234%" height="15" fill="rgb(223,108,39)" fg:x="22051" fg:w="19"/><text x="27.4340%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.1644%" y="165" width="0.0234%" height="15" fill="rgb(248,23,26)" fg:x="22070" fg:w="19"/><text x="27.4574%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.3047%" y="165" width="0.0234%" height="15" fill="rgb(220,115,9)" fg:x="22184" fg:w="19"/><text x="27.5977%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.3281%" y="165" width="0.0234%" height="15" fill="rgb(234,141,10)" fg:x="22203" fg:w="19"/><text x="27.6211%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.4684%" y="165" width="0.0234%" height="15" fill="rgb(248,25,25)" fg:x="22317" fg:w="19"/><text x="27.7614%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.4918%" y="165" width="0.0234%" height="15" fill="rgb(216,207,31)" fg:x="22336" fg:w="19"/><text x="27.7848%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.6321%" y="165" width="0.0234%" height="15" fill="rgb(247,229,52)" fg:x="22450" fg:w="19"/><text x="27.9251%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.6555%" y="165" width="0.0234%" height="15" fill="rgb(249,80,14)" fg:x="22469" fg:w="19"/><text x="27.9485%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.7958%" y="165" width="0.0234%" height="15" fill="rgb(251,99,22)" fg:x="22583" fg:w="19"/><text x="28.0888%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.8192%" y="165" width="0.0234%" height="15" fill="rgb(214,104,9)" fg:x="22602" fg:w="19"/><text x="28.1122%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.9595%" y="165" width="0.0234%" height="15" fill="rgb(231,34,36)" fg:x="22716" fg:w="19"/><text x="28.2525%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.9829%" y="165" width="0.0234%" height="15" fill="rgb(207,190,36)" fg:x="22735" fg:w="19"/><text x="28.2759%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.1232%" y="165" width="0.0234%" height="15" fill="rgb(226,155,37)" fg:x="22849" fg:w="19"/><text x="28.4162%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.1466%" y="165" width="0.0234%" height="15" fill="rgb(228,144,47)" fg:x="22868" fg:w="19"/><text x="28.4396%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.2869%" y="165" width="0.0234%" height="15" fill="rgb(239,175,25)" fg:x="22982" fg:w="19"/><text x="28.5799%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.3103%" y="165" width="0.0234%" height="15" fill="rgb(228,118,37)" fg:x="23001" fg:w="19"/><text x="28.6033%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="28.4506%" y="165" width="0.2560%" height="15" fill="rgb(241,7,28)" fg:x="23115" fg:w="208"/><text x="28.7436%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="28.7066%" y="165" width="0.2560%" height="15" fill="rgb(229,37,10)" fg:x="23323" fg:w="208"/><text x="28.9996%" y="175.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (12,703 instructions, 15.64%)</title><rect x="13.4444%" y="181" width="15.6352%" height="15" fill="rgb(215,119,23)" fg:x="10923" fg:w="12703"/><text x="13.7373%" y="191.50">alloc::collections::..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.07%)</title><rect x="29.0857%" y="133" width="0.0689%" height="15" fill="rgb(228,171,40)" fg:x="23631" fg:w="56"/><text x="29.3787%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (83 instructions, 0.10%)</title><rect x="29.0857%" y="149" width="0.1022%" height="15" fill="rgb(227,75,53)" fg:x="23631" fg:w="83"/><text x="29.3787%" y="159.50"></text></g><g><title>memset (136 instructions, 0.17%)</title><rect x="29.1879%" y="149" width="0.1674%" height="15" fill="rgb(216,32,46)" fg:x="23714" fg:w="136"/><text x="29.4809%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (384 instructions, 0.47%)</title><rect x="29.0796%" y="165" width="0.4726%" height="15" fill="rgb(233,114,19)" fg:x="23626" fg:w="384"/><text x="29.3726%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.04%)</title><rect x="29.5522%" y="149" width="0.0394%" height="15" fill="rgb(213,191,34)" fg:x="24010" fg:w="32"/><text x="29.8452%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="29.5916%" y="117" width="0.0935%" height="15" fill="rgb(250,218,12)" fg:x="24042" fg:w="76"/><text x="29.8846%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.14%)</title><rect x="29.5916%" y="133" width="0.1354%" height="15" fill="rgb(228,18,22)" fg:x="24042" fg:w="110"/><text x="29.8846%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.22%)</title><rect x="29.5916%" y="149" width="0.2154%" height="15" fill="rgb(231,96,42)" fg:x="24042" fg:w="175"/><text x="29.8846%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="29.8070%" y="149" width="0.0135%" height="15" fill="rgb(253,33,22)" fg:x="24217" fg:w="11"/><text x="30.1000%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="29.8205%" y="149" width="0.0135%" height="15" fill="rgb(232,141,47)" fg:x="24228" fg:w="11"/><text x="30.1135%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.04%)</title><rect x="29.8341%" y="149" width="0.0369%" height="15" fill="rgb(234,153,16)" fg:x="24239" fg:w="30"/><text x="30.1271%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (470 instructions, 0.58%)</title><rect x="29.5522%" y="165" width="0.5785%" height="15" fill="rgb(245,206,8)" fg:x="24010" fg:w="470"/><text x="29.8452%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="30.1369%" y="165" width="0.0677%" height="15" fill="rgb(237,120,36)" fg:x="24485" fg:w="55"/><text x="30.4298%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (988 instructions, 1.22%)</title><rect x="29.0796%" y="181" width="1.2161%" height="15" fill="rgb(216,72,28)" fg:x="23626" fg:w="988"/><text x="29.3726%" y="191.50"></text></g><g><title>btreemap::batch_remove_4_::{{closure}} (80,716 instructions, 99.35%)</title><rect x="0.2105%" y="197" width="99.3477%" height="15" fill="rgb(253,104,36)" fg:x="171" fg:w="80716"/><text x="0.5034%" y="207.50">btreemap::batch_remove_4_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.01%)</title><rect x="99.5581%" y="197" width="0.0148%" height="15" fill="rgb(245,172,1)" fg:x="80887" fg:w="12"/><text x="99.8511%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="99.5729%" y="197" width="0.0997%" height="15" fill="rgb(227,119,49)" fg:x="80899" fg:w="81"/><text x="99.8659%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.21%)</title><rect x="99.6726%" y="197" width="0.2068%" height="15" fill="rgb(250,133,39)" fg:x="80980" fg:w="168"/><text x="99.9656%" y="207.50"></text></g><g><title>all (81,246 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(253,183,42)" fg:x="0" fg:w="81246"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (81,246 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,213,52)" fg:x="0" fg:w="81246"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>