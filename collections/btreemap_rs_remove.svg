<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="342" onload="init(evt)" viewBox="0 0 1024 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="325.00"> </text><svg id="frames" x="10" width="1004" total_samples="62087"><g><title>ic_cdk::setup (8 instructions, 0.01%)</title><rect x="0.0000%" y="261" width="0.0129%" height="15" fill="rgb(205,1,39)" fg:x="0" fg:w="8"/><text x="0.2930%" y="271.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.0129%" y="181" width="0.0145%" height="15" fill="rgb(231,170,24)" fg:x="8" fg:w="9"/><text x="0.3059%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.0274%" y="181" width="0.0145%" height="15" fill="rgb(237,68,44)" fg:x="17" fg:w="9"/><text x="0.3203%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.0419%" y="181" width="0.0145%" height="15" fill="rgb(230,18,16)" fg:x="26" fg:w="9"/><text x="0.3348%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.0612%" y="181" width="0.0161%" height="15" fill="rgb(251,204,9)" fg:x="38" fg:w="10"/><text x="0.3542%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.21%)</title><rect x="0.0129%" y="197" width="0.2126%" height="15" fill="rgb(236,171,23)" fg:x="8" fg:w="132"/><text x="0.3059%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.23%)</title><rect x="0.0129%" y="213" width="0.2287%" height="15" fill="rgb(217,112,45)" fg:x="8" fg:w="142"/><text x="0.3059%" y="223.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.23%)</title><rect x="0.0129%" y="229" width="0.2335%" height="15" fill="rgb(223,88,19)" fg:x="8" fg:w="145"/><text x="0.3059%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.2561%" y="181" width="0.0145%" height="15" fill="rgb(253,97,6)" fg:x="159" fg:w="9"/><text x="0.5491%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.2706%" y="181" width="0.0145%" height="15" fill="rgb(225,192,35)" fg:x="168" fg:w="9"/><text x="0.5636%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.2851%" y="181" width="0.0145%" height="15" fill="rgb(231,28,11)" fg:x="177" fg:w="9"/><text x="0.5781%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.3044%" y="181" width="0.0161%" height="15" fill="rgb(241,71,9)" fg:x="189" fg:w="10"/><text x="0.5974%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.21%)</title><rect x="0.2561%" y="197" width="0.2126%" height="15" fill="rgb(229,41,7)" fg:x="159" fg:w="132"/><text x="0.5491%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.23%)</title><rect x="0.2561%" y="213" width="0.2287%" height="15" fill="rgb(246,228,19)" fg:x="159" fg:w="142"/><text x="0.5491%" y="223.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.23%)</title><rect x="0.2561%" y="229" width="0.2335%" height="15" fill="rgb(240,5,6)" fg:x="159" fg:w="145"/><text x="0.5491%" y="239.50"></text></g><g><title>__rust_alloc (302 instructions, 0.49%)</title><rect x="0.0129%" y="245" width="0.4864%" height="15" fill="rgb(211,4,12)" fg:x="8" fg:w="302"/><text x="0.3059%" y="255.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.5090%" y="149" width="0.0145%" height="15" fill="rgb(221,228,38)" fg:x="316" fg:w="9"/><text x="0.8019%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.5235%" y="149" width="0.0145%" height="15" fill="rgb(243,151,1)" fg:x="325" fg:w="9"/><text x="0.8164%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.5380%" y="149" width="0.0145%" height="15" fill="rgb(207,93,29)" fg:x="334" fg:w="9"/><text x="0.8309%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_inuse_and_pinuse (14 instructions, 0.02%)</title><rect x="0.5525%" y="149" width="0.0225%" height="15" fill="rgb(216,141,36)" fg:x="343" fg:w="14"/><text x="0.8454%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (124 instructions, 0.20%)</title><rect x="0.5090%" y="165" width="0.1997%" height="15" fill="rgb(245,91,10)" fg:x="316" fg:w="124"/><text x="0.8019%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (134 instructions, 0.22%)</title><rect x="0.5090%" y="181" width="0.2158%" height="15" fill="rgb(214,224,52)" fg:x="316" fg:w="134"/><text x="0.8019%" y="191.50"></text></g><g><title>__rdl_alloc (137 instructions, 0.22%)</title><rect x="0.5090%" y="197" width="0.2207%" height="15" fill="rgb(248,59,29)" fg:x="316" fg:w="137"/><text x="0.8019%" y="207.50"></text></g><g><title>__rust_alloc (143 instructions, 0.23%)</title><rect x="0.5090%" y="213" width="0.2303%" height="15" fill="rgb(206,51,23)" fg:x="316" fg:w="143"/><text x="0.8019%" y="223.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (203 instructions, 0.33%)</title><rect x="0.5090%" y="229" width="0.3270%" height="15" fill="rgb(219,136,33)" fg:x="316" fg:w="203"/><text x="0.8019%" y="239.50"></text></g><g><title>binread::binary_template::write_start_struct (73 instructions, 0.12%)</title><rect x="0.8375%" y="181" width="0.1176%" height="15" fill="rgb(241,14,29)" fg:x="520" fg:w="73"/><text x="1.1305%" y="191.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="0.9551%" y="133" width="0.0161%" height="15" fill="rgb(210,216,26)" fg:x="593" fg:w="10"/><text x="1.2481%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.70%)</title><rect x="0.9551%" y="149" width="0.6974%" height="15" fill="rgb(235,175,3)" fg:x="593" fg:w="433"/><text x="1.2481%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (87 instructions, 0.14%)</title><rect x="1.6525%" y="149" width="0.1401%" height="15" fill="rgb(225,71,41)" fg:x="1026" fg:w="87"/><text x="1.9455%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.08%)</title><rect x="1.7926%" y="149" width="0.0838%" height="15" fill="rgb(229,197,24)" fg:x="1113" fg:w="52"/><text x="2.0856%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.08%)</title><rect x="1.8764%" y="149" width="0.0838%" height="15" fill="rgb(214,146,26)" fg:x="1165" fg:w="52"/><text x="2.1694%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.08%)</title><rect x="1.9602%" y="149" width="0.0838%" height="15" fill="rgb(214,31,9)" fg:x="1217" fg:w="52"/><text x="2.2531%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.08%)</title><rect x="2.0439%" y="149" width="0.0838%" height="15" fill="rgb(224,20,51)" fg:x="1269" fg:w="52"/><text x="2.3369%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for [B (880 instructions, 1.42%)</title><rect x="0.9551%" y="181" width="1.4174%" height="15" fill="rgb(220,209,15)" fg:x="593" fg:w="880"/><text x="1.2481%" y="191.50"></text></g><g><title> 4]&gt;::read_options (880 instructions, 1.42%)</title><rect x="0.9551%" y="165" width="1.4174%" height="15" fill="rgb(209,135,51)" fg:x="593" fg:w="880"/><text x="1.2481%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (73 instructions, 0.12%)</title><rect x="2.3725%" y="181" width="0.1176%" height="15" fill="rgb(219,64,4)" fg:x="1473" fg:w="73"/><text x="2.6654%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.12%)</title><rect x="2.4901%" y="165" width="0.1240%" height="15" fill="rgb(208,12,35)" fg:x="1546" fg:w="77"/><text x="2.7830%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 0.17%)</title><rect x="2.4901%" y="181" width="0.1675%" height="15" fill="rgb(246,1,18)" fg:x="1546" fg:w="104"/><text x="2.7830%" y="191.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="2.6576%" y="149" width="0.0161%" height="15" fill="rgb(234,205,51)" fg:x="1650" fg:w="10"/><text x="2.9505%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.70%)</title><rect x="2.6576%" y="165" width="0.6974%" height="15" fill="rgb(254,180,7)" fg:x="1650" fg:w="433"/><text x="2.9505%" y="175.50"></text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.03%)</title><rect x="3.3550%" y="149" width="0.0290%" height="15" fill="rgb(228,147,27)" fg:x="2083" fg:w="18"/><text x="3.6479%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.04%)</title><rect x="3.3550%" y="165" width="0.0354%" height="15" fill="rgb(238,12,12)" fg:x="2083" fg:w="22"/><text x="3.6479%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="3.3904%" y="69" width="0.0145%" height="15" fill="rgb(247,221,13)" fg:x="2105" fg:w="9"/><text x="3.6834%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="3.4049%" y="69" width="0.0145%" height="15" fill="rgb(224,194,23)" fg:x="2114" fg:w="9"/><text x="3.6979%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::left_bits (8 instructions, 0.01%)</title><rect x="3.4194%" y="69" width="0.0129%" height="15" fill="rgb(229,0,8)" fg:x="2123" fg:w="8"/><text x="3.7124%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="3.4532%" y="69" width="0.0161%" height="15" fill="rgb(216,2,30)" fg:x="2144" fg:w="10"/><text x="3.7462%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (168 instructions, 0.27%)</title><rect x="3.3904%" y="85" width="0.2706%" height="15" fill="rgb(227,15,46)" fg:x="2105" fg:w="168"/><text x="3.6834%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (178 instructions, 0.29%)</title><rect x="3.3904%" y="101" width="0.2867%" height="15" fill="rgb(214,113,28)" fg:x="2105" fg:w="178"/><text x="3.6834%" y="111.50"></text></g><g><title>__rdl_alloc (181 instructions, 0.29%)</title><rect x="3.3904%" y="117" width="0.2915%" height="15" fill="rgb(222,182,49)" fg:x="2105" fg:w="181"/><text x="3.6834%" y="127.50"></text></g><g><title>__rust_alloc (187 instructions, 0.30%)</title><rect x="3.3904%" y="133" width="0.3012%" height="15" fill="rgb(232,187,40)" fg:x="2105" fg:w="187"/><text x="3.6834%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.10%)</title><rect x="3.6916%" y="85" width="0.0966%" height="15" fill="rgb(241,83,20)" fg:x="2292" fg:w="60"/><text x="3.9846%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.10%)</title><rect x="3.6916%" y="101" width="0.1031%" height="15" fill="rgb(249,126,42)" fg:x="2292" fg:w="64"/><text x="3.9846%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.14%)</title><rect x="3.6916%" y="117" width="0.1433%" height="15" fill="rgb(220,227,13)" fg:x="2292" fg:w="89"/><text x="3.9846%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.02%)</title><rect x="3.8349%" y="69" width="0.0161%" height="15" fill="rgb(215,154,6)" fg:x="2381" fg:w="10"/><text x="4.1279%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.05%)</title><rect x="3.8510%" y="37" width="0.0483%" height="15" fill="rgb(233,180,37)" fg:x="2391" fg:w="30"/><text x="4.1440%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.05%)</title><rect x="3.8510%" y="53" width="0.0548%" height="15" fill="rgb(215,188,36)" fg:x="2391" fg:w="34"/><text x="4.1440%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.10%)</title><rect x="3.8510%" y="69" width="0.0950%" height="15" fill="rgb(225,71,9)" fg:x="2391" fg:w="59"/><text x="4.1440%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 0.19%)</title><rect x="3.8349%" y="85" width="0.1917%" height="15" fill="rgb(233,146,34)" fg:x="2381" fg:w="119"/><text x="4.1279%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 0.28%)</title><rect x="3.8349%" y="101" width="0.2803%" height="15" fill="rgb(215,94,50)" fg:x="2381" fg:w="174"/><text x="4.1279%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 0.29%)</title><rect x="3.8349%" y="117" width="0.2883%" height="15" fill="rgb(222,41,51)" fg:x="2381" fg:w="179"/><text x="4.1279%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 0.61%)</title><rect x="3.6916%" y="133" width="0.6104%" height="15" fill="rgb(241,16,18)" fg:x="2292" fg:w="379"/><text x="3.9846%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (709 instructions, 1.14%)</title><rect x="3.3904%" y="149" width="1.1419%" height="15" fill="rgb(216,106,4)" fg:x="2105" fg:w="709"/><text x="3.6834%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (87 instructions, 0.14%)</title><rect x="4.5323%" y="149" width="0.1401%" height="15" fill="rgb(230,81,12)" fg:x="2814" fg:w="87"/><text x="4.8253%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="4.7047%" y="101" width="0.0161%" height="15" fill="rgb(231,36,33)" fg:x="2921" fg:w="10"/><text x="4.9977%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.11%)</title><rect x="4.6725%" y="117" width="0.1127%" height="15" fill="rgb(253,208,1)" fg:x="2901" fg:w="70"/><text x="4.9654%" y="127.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.12%)</title><rect x="4.6725%" y="133" width="0.1160%" height="15" fill="rgb(252,111,46)" fg:x="2901" fg:w="72"/><text x="4.9654%" y="143.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.12%)</title><rect x="4.6725%" y="149" width="0.1240%" height="15" fill="rgb(208,142,38)" fg:x="2901" fg:w="77"/><text x="4.9654%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (944 instructions, 1.52%)</title><rect x="3.3904%" y="165" width="1.5204%" height="15" fill="rgb(214,59,38)" fg:x="2105" fg:w="944"/><text x="3.6834%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 instructions, 0.04%)</title><rect x="4.9109%" y="165" width="0.0403%" height="15" fill="rgb(224,29,13)" fg:x="3049" fg:w="25"/><text x="5.2038%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,572 instructions, 2.53%)</title><rect x="2.6576%" y="181" width="2.5319%" height="15" fill="rgb(228,153,9)" fg:x="1650" fg:w="1572"/><text x="2.9505%" y="191.50">b..</text></g><g><title>binread::binary_template::write_end_struct (68 instructions, 0.11%)</title><rect x="5.1895%" y="181" width="0.1095%" height="15" fill="rgb(253,24,39)" fg:x="3222" fg:w="68"/><text x="5.4825%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.12%)</title><rect x="5.2990%" y="165" width="0.1240%" height="15" fill="rgb(220,227,53)" fg:x="3290" fg:w="77"/><text x="5.5920%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 0.17%)</title><rect x="5.2990%" y="181" width="0.1675%" height="15" fill="rgb(211,113,11)" fg:x="3290" fg:w="104"/><text x="5.5920%" y="191.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="5.4665%" y="149" width="0.0161%" height="15" fill="rgb(224,10,3)" fg:x="3394" fg:w="10"/><text x="5.7595%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.70%)</title><rect x="5.4665%" y="165" width="0.6974%" height="15" fill="rgb(209,11,41)" fg:x="3394" fg:w="433"/><text x="5.7595%" y="175.50"></text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.03%)</title><rect x="6.1639%" y="149" width="0.0290%" height="15" fill="rgb(236,114,29)" fg:x="3827" fg:w="18"/><text x="6.4569%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.04%)</title><rect x="6.1639%" y="165" width="0.0354%" height="15" fill="rgb(215,23,43)" fg:x="3827" fg:w="22"/><text x="6.4569%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="6.1994%" y="69" width="0.0145%" height="15" fill="rgb(239,87,48)" fg:x="3849" fg:w="9"/><text x="6.4923%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="6.2139%" y="69" width="0.0145%" height="15" fill="rgb(220,112,25)" fg:x="3858" fg:w="9"/><text x="6.5068%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="6.2284%" y="69" width="0.0145%" height="15" fill="rgb(229,213,12)" fg:x="3867" fg:w="9"/><text x="6.5213%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="6.2477%" y="69" width="0.0161%" height="15" fill="rgb(225,40,34)" fg:x="3879" fg:w="10"/><text x="6.5407%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.21%)</title><rect x="6.1994%" y="85" width="0.2126%" height="15" fill="rgb(251,37,7)" fg:x="3849" fg:w="132"/><text x="6.4923%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.23%)</title><rect x="6.1994%" y="101" width="0.2287%" height="15" fill="rgb(211,152,53)" fg:x="3849" fg:w="142"/><text x="6.4923%" y="111.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.23%)</title><rect x="6.1994%" y="117" width="0.2335%" height="15" fill="rgb(223,112,45)" fg:x="3849" fg:w="145"/><text x="6.4923%" y="127.50"></text></g><g><title>__rust_alloc (151 instructions, 0.24%)</title><rect x="6.1994%" y="133" width="0.2432%" height="15" fill="rgb(240,221,51)" fg:x="3849" fg:w="151"/><text x="6.4923%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.10%)</title><rect x="6.4426%" y="85" width="0.0966%" height="15" fill="rgb(207,178,38)" fg:x="4000" fg:w="60"/><text x="6.7355%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.10%)</title><rect x="6.4426%" y="101" width="0.1031%" height="15" fill="rgb(210,195,0)" fg:x="4000" fg:w="64"/><text x="6.7355%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.14%)</title><rect x="6.4426%" y="117" width="0.1433%" height="15" fill="rgb(230,224,8)" fg:x="4000" fg:w="89"/><text x="6.7355%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.02%)</title><rect x="6.5859%" y="69" width="0.0161%" height="15" fill="rgb(211,194,24)" fg:x="4089" fg:w="10"/><text x="6.8789%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.05%)</title><rect x="6.6020%" y="37" width="0.0483%" height="15" fill="rgb(240,73,51)" fg:x="4099" fg:w="30"/><text x="6.8950%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.05%)</title><rect x="6.6020%" y="53" width="0.0548%" height="15" fill="rgb(215,1,6)" fg:x="4099" fg:w="34"/><text x="6.8950%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.10%)</title><rect x="6.6020%" y="69" width="0.0950%" height="15" fill="rgb(248,105,22)" fg:x="4099" fg:w="59"/><text x="6.8950%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 0.19%)</title><rect x="6.5859%" y="85" width="0.1917%" height="15" fill="rgb(227,94,35)" fg:x="4089" fg:w="119"/><text x="6.8789%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 0.28%)</title><rect x="6.5859%" y="101" width="0.2803%" height="15" fill="rgb(219,21,53)" fg:x="4089" fg:w="174"/><text x="6.8789%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 0.29%)</title><rect x="6.5859%" y="117" width="0.2883%" height="15" fill="rgb(244,223,34)" fg:x="4089" fg:w="179"/><text x="6.8789%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 0.61%)</title><rect x="6.4426%" y="133" width="0.6104%" height="15" fill="rgb(244,164,2)" fg:x="4000" fg:w="379"/><text x="6.7355%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (673 instructions, 1.08%)</title><rect x="6.1994%" y="149" width="1.0840%" height="15" fill="rgb(253,35,46)" fg:x="3849" fg:w="673"/><text x="6.4923%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (87 instructions, 0.14%)</title><rect x="7.2833%" y="149" width="0.1401%" height="15" fill="rgb(232,82,17)" fg:x="4522" fg:w="87"/><text x="7.5763%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="7.4557%" y="101" width="0.0161%" height="15" fill="rgb(233,93,18)" fg:x="4629" fg:w="10"/><text x="7.7486%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.11%)</title><rect x="7.4235%" y="117" width="0.1127%" height="15" fill="rgb(206,195,0)" fg:x="4609" fg:w="70"/><text x="7.7164%" y="127.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.12%)</title><rect x="7.4235%" y="133" width="0.1160%" height="15" fill="rgb(241,23,12)" fg:x="4609" fg:w="72"/><text x="7.7164%" y="143.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.12%)</title><rect x="7.4235%" y="149" width="0.1240%" height="15" fill="rgb(247,216,52)" fg:x="4609" fg:w="77"/><text x="7.7164%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (908 instructions, 1.46%)</title><rect x="6.1994%" y="165" width="1.4625%" height="15" fill="rgb(247,55,42)" fg:x="3849" fg:w="908"/><text x="6.4923%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (73 instructions, 0.12%)</title><rect x="7.6618%" y="133" width="0.1176%" height="15" fill="rgb(225,175,35)" fg:x="4757" fg:w="73"/><text x="7.9548%" y="143.50"></text></g><g><title>leb128::read::signed (110 instructions, 0.18%)</title><rect x="7.7794%" y="117" width="0.1772%" height="15" fill="rgb(223,98,27)" fg:x="4830" fg:w="110"/><text x="8.0724%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (137 instructions, 0.22%)</title><rect x="7.7794%" y="133" width="0.2207%" height="15" fill="rgb(216,176,8)" fg:x="4830" fg:w="137"/><text x="8.0724%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (68 instructions, 0.11%)</title><rect x="8.0001%" y="133" width="0.1095%" height="15" fill="rgb(235,181,11)" fg:x="4967" fg:w="68"/><text x="8.2930%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (337 instructions, 0.54%)</title><rect x="7.6618%" y="149" width="0.5428%" height="15" fill="rgb(209,46,38)" fg:x="4757" fg:w="337"/><text x="7.9548%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="8.2046%" y="85" width="0.0145%" height="15" fill="rgb(248,152,44)" fg:x="5094" fg:w="9"/><text x="8.4976%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="8.2191%" y="85" width="0.0145%" height="15" fill="rgb(222,185,52)" fg:x="5103" fg:w="9"/><text x="8.5121%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.19%)</title><rect x="8.2046%" y="101" width="0.1933%" height="15" fill="rgb(205,229,18)" fg:x="5094" fg:w="120"/><text x="8.4976%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.21%)</title><rect x="8.2046%" y="117" width="0.2094%" height="15" fill="rgb(245,80,14)" fg:x="5094" fg:w="130"/><text x="8.4976%" y="127.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.21%)</title><rect x="8.2046%" y="133" width="0.2142%" height="15" fill="rgb(250,167,3)" fg:x="5094" fg:w="133"/><text x="8.4976%" y="143.50"></text></g><g><title>__rust_alloc (139 instructions, 0.22%)</title><rect x="8.2046%" y="149" width="0.2239%" height="15" fill="rgb(236,57,6)" fg:x="5094" fg:w="139"/><text x="8.4976%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (555 instructions, 0.89%)</title><rect x="7.6618%" y="165" width="0.8939%" height="15" fill="rgb(244,139,49)" fg:x="4757" fg:w="555"/><text x="7.9548%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (2,066 instructions, 3.33%)</title><rect x="5.4665%" y="181" width="3.3276%" height="15" fill="rgb(230,187,53)" fg:x="3394" fg:w="2066"/><text x="5.7595%" y="191.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (68 instructions, 0.11%)</title><rect x="8.7941%" y="181" width="0.1095%" height="15" fill="rgb(230,138,16)" fg:x="5460" fg:w="68"/><text x="9.0871%" y="191.50"></text></g><g><title>binread::BinRead::read (5,226 instructions, 8.42%)</title><rect x="0.8359%" y="197" width="8.4172%" height="15" fill="rgb(249,21,46)" fg:x="519" fg:w="5226"/><text x="1.1289%" y="207.50">binread::B..</text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.02%)</title><rect x="9.2531%" y="181" width="0.0225%" height="15" fill="rgb(215,23,1)" fg:x="5745" fg:w="14"/><text x="9.5461%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.02%)</title><rect x="9.2757%" y="165" width="0.0225%" height="15" fill="rgb(213,183,14)" fg:x="5759" fg:w="14"/><text x="9.5687%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (65 instructions, 0.10%)</title><rect x="9.2982%" y="165" width="0.1047%" height="15" fill="rgb(220,73,12)" fg:x="5773" fg:w="65"/><text x="9.5912%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.03%)</title><rect x="9.4029%" y="165" width="0.0306%" height="15" fill="rgb(234,41,48)" fg:x="5838" fg:w="19"/><text x="9.6959%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::replace_empty (250 instructions, 0.40%)</title><rect x="9.2757%" y="181" width="0.4027%" height="15" fill="rgb(243,214,12)" fg:x="5759" fg:w="250"/><text x="9.5687%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="9.6784%" y="101" width="0.0145%" height="15" fill="rgb(240,203,30)" fg:x="6009" fg:w="9"/><text x="9.9713%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="9.6929%" y="101" width="0.0145%" height="15" fill="rgb(248,101,44)" fg:x="6018" fg:w="9"/><text x="9.9858%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.19%)</title><rect x="9.6784%" y="117" width="0.1933%" height="15" fill="rgb(215,79,20)" fg:x="6009" fg:w="120"/><text x="9.9713%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.21%)</title><rect x="9.6784%" y="133" width="0.2094%" height="15" fill="rgb(222,140,13)" fg:x="6009" fg:w="130"/><text x="9.9713%" y="143.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.21%)</title><rect x="9.6784%" y="149" width="0.2142%" height="15" fill="rgb(216,32,44)" fg:x="6009" fg:w="133"/><text x="9.9713%" y="159.50"></text></g><g><title>__rust_alloc (139 instructions, 0.22%)</title><rect x="9.6784%" y="165" width="0.2239%" height="15" fill="rgb(251,184,28)" fg:x="6009" fg:w="139"/><text x="9.9713%" y="175.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (220 instructions, 0.35%)</title><rect x="9.6784%" y="181" width="0.3543%" height="15" fill="rgb(251,124,17)" fg:x="6009" fg:w="220"/><text x="9.9713%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="10.0327%" y="85" width="0.0145%" height="15" fill="rgb(243,106,47)" fg:x="6229" fg:w="9"/><text x="10.3257%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="10.0472%" y="85" width="0.0145%" height="15" fill="rgb(252,132,44)" fg:x="6238" fg:w="9"/><text x="10.3402%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="10.0617%" y="85" width="0.0145%" height="15" fill="rgb(228,50,6)" fg:x="6247" fg:w="9"/><text x="10.3547%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_inuse_and_pinuse (14 instructions, 0.02%)</title><rect x="10.0762%" y="85" width="0.0225%" height="15" fill="rgb(207,118,22)" fg:x="6256" fg:w="14"/><text x="10.3692%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (124 instructions, 0.20%)</title><rect x="10.0327%" y="101" width="0.1997%" height="15" fill="rgb(236,229,14)" fg:x="6229" fg:w="124"/><text x="10.3257%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (134 instructions, 0.22%)</title><rect x="10.0327%" y="117" width="0.2158%" height="15" fill="rgb(252,179,52)" fg:x="6229" fg:w="134"/><text x="10.3257%" y="127.50"></text></g><g><title>__rdl_alloc (137 instructions, 0.22%)</title><rect x="10.0327%" y="133" width="0.2207%" height="15" fill="rgb(213,207,25)" fg:x="6229" fg:w="137"/><text x="10.3257%" y="143.50"></text></g><g><title>__rust_alloc (143 instructions, 0.23%)</title><rect x="10.0327%" y="149" width="0.2303%" height="15" fill="rgb(225,6,50)" fg:x="6229" fg:w="143"/><text x="10.3257%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (175 instructions, 0.28%)</title><rect x="10.0327%" y="165" width="0.2819%" height="15" fill="rgb(239,117,5)" fg:x="6229" fg:w="175"/><text x="10.3257%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (245 instructions, 0.39%)</title><rect x="10.0327%" y="181" width="0.3946%" height="15" fill="rgb(211,57,28)" fg:x="6229" fg:w="245"/><text x="10.3257%" y="191.50"></text></g><g><title>candid::binary_parser::Header::to_types (956 instructions, 1.54%)</title><rect x="9.2531%" y="197" width="1.5398%" height="15" fill="rgb(219,90,50)" fg:x="5745" fg:w="956"/><text x="9.5461%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="10.7929%" y="117" width="0.0145%" height="15" fill="rgb(233,106,17)" fg:x="6701" fg:w="9"/><text x="11.0859%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="10.8074%" y="117" width="0.0145%" height="15" fill="rgb(236,46,12)" fg:x="6710" fg:w="9"/><text x="11.1004%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.19%)</title><rect x="10.7929%" y="133" width="0.1933%" height="15" fill="rgb(232,172,36)" fg:x="6701" fg:w="120"/><text x="11.0859%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.21%)</title><rect x="10.7929%" y="149" width="0.2094%" height="15" fill="rgb(226,97,23)" fg:x="6701" fg:w="130"/><text x="11.0859%" y="159.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.21%)</title><rect x="10.7929%" y="165" width="0.2142%" height="15" fill="rgb(246,48,24)" fg:x="6701" fg:w="133"/><text x="11.0859%" y="175.50"></text></g><g><title>__rust_alloc (139 instructions, 0.22%)</title><rect x="10.7929%" y="181" width="0.2239%" height="15" fill="rgb(232,125,5)" fg:x="6701" fg:w="139"/><text x="11.0859%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="11.0490%" y="133" width="0.0258%" height="15" fill="rgb(225,37,18)" fg:x="6860" fg:w="16"/><text x="11.3420%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="11.0168%" y="149" width="0.1578%" height="15" fill="rgb(254,131,43)" fg:x="6840" fg:w="98"/><text x="11.3098%" y="159.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.16%)</title><rect x="11.0168%" y="165" width="0.1611%" height="15" fill="rgb(205,46,50)" fg:x="6840" fg:w="100"/><text x="11.3098%" y="175.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.17%)</title><rect x="11.0168%" y="181" width="0.1691%" height="15" fill="rgb(234,205,32)" fg:x="6840" fg:w="105"/><text x="11.3098%" y="191.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (358 instructions, 0.58%)</title><rect x="10.7929%" y="197" width="0.5766%" height="15" fill="rgb(218,208,13)" fg:x="6701" fg:w="358"/><text x="11.0859%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="11.3695%" y="133" width="0.0145%" height="15" fill="rgb(215,40,29)" fg:x="7059" fg:w="9"/><text x="11.6625%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="11.3840%" y="133" width="0.0145%" height="15" fill="rgb(233,168,15)" fg:x="7068" fg:w="9"/><text x="11.6770%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.19%)</title><rect x="11.3695%" y="149" width="0.1933%" height="15" fill="rgb(250,209,8)" fg:x="7059" fg:w="120"/><text x="11.6625%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.21%)</title><rect x="11.3695%" y="165" width="0.2094%" height="15" fill="rgb(227,98,2)" fg:x="7059" fg:w="130"/><text x="11.6625%" y="175.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.21%)</title><rect x="11.3695%" y="181" width="0.2142%" height="15" fill="rgb(227,44,44)" fg:x="7059" fg:w="133"/><text x="11.6625%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="11.5934%" y="133" width="0.0145%" height="15" fill="rgb(229,191,28)" fg:x="7198" fg:w="9"/><text x="11.8864%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="11.6079%" y="133" width="0.0145%" height="15" fill="rgb(215,216,15)" fg:x="7207" fg:w="9"/><text x="11.9009%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.19%)</title><rect x="11.5934%" y="149" width="0.1933%" height="15" fill="rgb(219,97,45)" fg:x="7198" fg:w="120"/><text x="11.8864%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.21%)</title><rect x="11.5934%" y="165" width="0.2094%" height="15" fill="rgb(245,193,35)" fg:x="7198" fg:w="130"/><text x="11.8864%" y="175.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.21%)</title><rect x="11.5934%" y="181" width="0.2142%" height="15" fill="rgb(219,164,31)" fg:x="7198" fg:w="133"/><text x="11.8864%" y="191.50"></text></g><g><title>__rust_alloc (278 instructions, 0.45%)</title><rect x="11.3695%" y="197" width="0.4478%" height="15" fill="rgb(216,125,5)" fg:x="7059" fg:w="278"/><text x="11.6625%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="11.8495%" y="149" width="0.0258%" height="15" fill="rgb(243,79,28)" fg:x="7357" fg:w="16"/><text x="12.1425%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="11.8173%" y="165" width="0.1578%" height="15" fill="rgb(211,217,30)" fg:x="7337" fg:w="98"/><text x="12.1103%" y="175.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.16%)</title><rect x="11.8173%" y="181" width="0.1611%" height="15" fill="rgb(226,117,42)" fg:x="7337" fg:w="100"/><text x="12.1103%" y="191.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.17%)</title><rect x="11.8173%" y="197" width="0.1691%" height="15" fill="rgb(224,63,53)" fg:x="7337" fg:w="105"/><text x="12.1103%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 0.67%)</title><rect x="11.9864%" y="165" width="0.6652%" height="15" fill="rgb(224,84,3)" fg:x="7442" fg:w="413"/><text x="12.2794%" y="175.50"></text></g><g><title>memcpy (417 instructions, 0.67%)</title><rect x="11.9864%" y="181" width="0.6716%" height="15" fill="rgb(205,50,35)" fg:x="7442" fg:w="417"/><text x="12.2794%" y="191.50"></text></g><g><title>anyhow::context::&lt;impl anyhow::Context&lt;T,E&gt; for core::result::Result&lt;T,E&gt;&gt;::with_context (437 instructions, 0.70%)</title><rect x="11.9864%" y="197" width="0.7039%" height="15" fill="rgb(254,208,44)" fg:x="7442" fg:w="437"/><text x="12.2794%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (368 instructions, 0.59%)</title><rect x="12.6903%" y="181" width="0.5927%" height="15" fill="rgb(207,126,28)" fg:x="7879" fg:w="368"/><text x="12.9832%" y="191.50"></text></g><g><title>memcpy (372 instructions, 0.60%)</title><rect x="12.6903%" y="197" width="0.5992%" height="15" fill="rgb(223,134,12)" fg:x="7879" fg:w="372"/><text x="12.9832%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::new (8,080 instructions, 13.01%)</title><rect x="0.8359%" y="213" width="13.0140%" height="15" fill="rgb(253,108,53)" fg:x="519" fg:w="8080"/><text x="1.1289%" y="223.50">candid::de::IDLD..</text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 0.62%)</title><rect x="13.8499%" y="197" width="0.6169%" height="15" fill="rgb(206,167,36)" fg:x="8599" fg:w="383"/><text x="14.1429%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 0.62%)</title><rect x="14.4732%" y="197" width="0.6169%" height="15" fill="rgb(242,45,32)" fg:x="8986" fg:w="383"/><text x="14.7662%" y="207.50"></text></g><g><title>memcpy (774 instructions, 1.25%)</title><rect x="13.8499%" y="213" width="1.2466%" height="15" fill="rgb(221,136,16)" fg:x="8599" fg:w="774"/><text x="14.1429%" y="223.50"></text></g><g><title>candid::types::internal::ENV::__getit (8 instructions, 0.01%)</title><rect x="15.0966%" y="149" width="0.0129%" height="15" fill="rgb(235,53,28)" fg:x="9373" fg:w="8"/><text x="15.3895%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (54 instructions, 0.09%)</title><rect x="15.0966%" y="165" width="0.0870%" height="15" fill="rgb(214,127,26)" fg:x="9373" fg:w="54"/><text x="15.3895%" y="175.50"></text></g><g><title>candid::types::internal::find_type (73 instructions, 0.12%)</title><rect x="15.0966%" y="181" width="0.1176%" height="15" fill="rgb(225,155,12)" fg:x="9373" fg:w="73"/><text x="15.3895%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="15.2141%" y="101" width="0.0145%" height="15" fill="rgb(245,206,40)" fg:x="9446" fg:w="9"/><text x="15.5071%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="15.2286%" y="101" width="0.0145%" height="15" fill="rgb(237,174,23)" fg:x="9455" fg:w="9"/><text x="15.5216%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.19%)</title><rect x="15.2141%" y="117" width="0.1933%" height="15" fill="rgb(232,131,21)" fg:x="9446" fg:w="120"/><text x="15.5071%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.21%)</title><rect x="15.2141%" y="133" width="0.2094%" height="15" fill="rgb(212,96,3)" fg:x="9446" fg:w="130"/><text x="15.5071%" y="143.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.21%)</title><rect x="15.2141%" y="149" width="0.2142%" height="15" fill="rgb(207,213,15)" fg:x="9446" fg:w="133"/><text x="15.5071%" y="159.50"></text></g><g><title>__rust_alloc (139 instructions, 0.22%)</title><rect x="15.2141%" y="165" width="0.2239%" height="15" fill="rgb(236,122,21)" fg:x="9446" fg:w="139"/><text x="15.5071%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (184 instructions, 0.30%)</title><rect x="15.2141%" y="181" width="0.2964%" height="15" fill="rgb(239,195,30)" fg:x="9446" fg:w="184"/><text x="15.5071%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (8 instructions, 0.01%)</title><rect x="15.5105%" y="149" width="0.0129%" height="15" fill="rgb(241,174,23)" fg:x="9630" fg:w="8"/><text x="15.8035%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.09%)</title><rect x="15.5234%" y="133" width="0.0870%" height="15" fill="rgb(209,165,52)" fg:x="9638" fg:w="54"/><text x="15.8163%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (90 instructions, 0.14%)</title><rect x="15.6104%" y="133" width="0.1450%" height="15" fill="rgb(224,151,21)" fg:x="9692" fg:w="90"/><text x="15.9033%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 instructions, 0.26%)</title><rect x="15.7553%" y="133" width="0.2625%" height="15" fill="rgb(232,112,44)" fg:x="9782" fg:w="163"/><text x="16.0483%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (556 instructions, 0.90%)</title><rect x="15.5234%" y="149" width="0.8955%" height="15" fill="rgb(220,72,37)" fg:x="9638" fg:w="556"/><text x="15.8163%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (99 instructions, 0.16%)</title><rect x="16.4189%" y="149" width="0.1595%" height="15" fill="rgb(210,131,44)" fg:x="10194" fg:w="99"/><text x="16.7119%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (826 instructions, 1.33%)</title><rect x="15.5105%" y="165" width="1.3304%" height="15" fill="rgb(207,29,46)" fg:x="9630" fg:w="826"/><text x="15.8035%" y="175.50"></text></g><g><title>candid::types::internal::env_add (853 instructions, 1.37%)</title><rect x="15.5105%" y="181" width="1.3739%" height="15" fill="rgb(215,17,32)" fg:x="9630" fg:w="853"/><text x="15.8035%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="16.8844%" y="101" width="0.0145%" height="15" fill="rgb(247,162,9)" fg:x="10483" fg:w="9"/><text x="17.1773%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="16.8989%" y="101" width="0.0145%" height="15" fill="rgb(223,102,1)" fg:x="10492" fg:w="9"/><text x="17.1918%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.19%)</title><rect x="16.8844%" y="117" width="0.1933%" height="15" fill="rgb(238,96,39)" fg:x="10483" fg:w="120"/><text x="17.1773%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.21%)</title><rect x="16.8844%" y="133" width="0.2094%" height="15" fill="rgb(244,24,45)" fg:x="10483" fg:w="130"/><text x="17.1773%" y="143.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.21%)</title><rect x="16.8844%" y="149" width="0.2142%" height="15" fill="rgb(246,147,47)" fg:x="10483" fg:w="133"/><text x="17.1773%" y="159.50"></text></g><g><title>__rust_alloc (139 instructions, 0.22%)</title><rect x="16.8844%" y="165" width="0.2239%" height="15" fill="rgb(208,147,12)" fg:x="10483" fg:w="139"/><text x="17.1773%" y="175.50"></text></g><g><title>candid::types::impls::&lt;impl candid::types::CandidType for u32&gt;::_ty (151 instructions, 0.24%)</title><rect x="16.8844%" y="181" width="0.2432%" height="15" fill="rgb(246,113,49)" fg:x="10483" fg:w="151"/><text x="17.1773%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (8 instructions, 0.01%)</title><rect x="17.1276%" y="149" width="0.0129%" height="15" fill="rgb(242,90,53)" fg:x="10634" fg:w="8"/><text x="17.4205%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.09%)</title><rect x="17.1405%" y="133" width="0.0870%" height="15" fill="rgb(252,160,40)" fg:x="10642" fg:w="54"/><text x="17.4334%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (90 instructions, 0.14%)</title><rect x="17.2274%" y="133" width="0.1450%" height="15" fill="rgb(237,182,38)" fg:x="10696" fg:w="90"/><text x="17.5204%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 instructions, 0.26%)</title><rect x="17.3724%" y="133" width="0.2625%" height="15" fill="rgb(246,26,47)" fg:x="10786" fg:w="163"/><text x="17.6654%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (556 instructions, 0.90%)</title><rect x="17.1405%" y="149" width="0.8955%" height="15" fill="rgb(240,203,51)" fg:x="10642" fg:w="556"/><text x="17.4334%" y="159.50"></text></g><g><title>compiler_builtins::mem::memcmp (74 instructions, 0.12%)</title><rect x="18.0360%" y="133" width="0.1192%" height="15" fill="rgb(235,193,16)" fg:x="11198" fg:w="74"/><text x="18.3290%" y="143.50"></text></g><g><title>memcmp (78 instructions, 0.13%)</title><rect x="18.0360%" y="149" width="0.1256%" height="15" fill="rgb(227,91,44)" fg:x="11198" fg:w="78"/><text x="18.3290%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="18.1938%" y="85" width="0.0258%" height="15" fill="rgb(251,138,15)" fg:x="11296" fg:w="16"/><text x="18.4868%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="18.1616%" y="101" width="0.1578%" height="15" fill="rgb(211,155,7)" fg:x="11276" fg:w="98"/><text x="18.4546%" y="111.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.16%)</title><rect x="18.1616%" y="117" width="0.1611%" height="15" fill="rgb(225,73,34)" fg:x="11276" fg:w="100"/><text x="18.4546%" y="127.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.17%)</title><rect x="18.1616%" y="133" width="0.1691%" height="15" fill="rgb(208,119,49)" fg:x="11276" fg:w="105"/><text x="18.4546%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (137 instructions, 0.22%)</title><rect x="18.1616%" y="149" width="0.2207%" height="15" fill="rgb(245,148,32)" fg:x="11276" fg:w="137"/><text x="18.4546%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (952 instructions, 1.53%)</title><rect x="17.1276%" y="165" width="1.5333%" height="15" fill="rgb(217,198,11)" fg:x="10634" fg:w="952"/><text x="17.4205%" y="175.50"></text></g><g><title>candid::types::internal::env_add (979 instructions, 1.58%)</title><rect x="17.1276%" y="181" width="1.5768%" height="15" fill="rgb(236,19,45)" fg:x="10634" fg:w="979"/><text x="17.4205%" y="191.50"></text></g><g><title>candid::types::internal::ID::__getit (8 instructions, 0.01%)</title><rect x="18.7044%" y="149" width="0.0129%" height="15" fill="rgb(219,57,53)" fg:x="11613" fg:w="8"/><text x="18.9974%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.09%)</title><rect x="18.7173%" y="117" width="0.0870%" height="15" fill="rgb(237,43,33)" fg:x="11621" fg:w="54"/><text x="19.0103%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (79 instructions, 0.13%)</title><rect x="18.7173%" y="133" width="0.1272%" height="15" fill="rgb(226,121,45)" fg:x="11621" fg:w="79"/><text x="19.0103%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (303 instructions, 0.49%)</title><rect x="18.7173%" y="149" width="0.4880%" height="15" fill="rgb(220,60,35)" fg:x="11621" fg:w="303"/><text x="19.0103%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as alloc::rc::RcEqIdent&lt;T&gt;&gt;::eq (18 instructions, 0.03%)</title><rect x="19.2053%" y="149" width="0.0290%" height="15" fill="rgb(232,194,3)" fg:x="11924" fg:w="18"/><text x="19.4983%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="19.2343%" y="149" width="0.0177%" height="15" fill="rgb(222,193,31)" fg:x="11942" fg:w="11"/><text x="19.5273%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (521 instructions, 0.84%)</title><rect x="18.7044%" y="165" width="0.8391%" height="15" fill="rgb(246,75,16)" fg:x="11613" fg:w="521"/><text x="18.9974%" y="175.50"></text></g><g><title>candid::types::internal::env_id (559 instructions, 0.90%)</title><rect x="18.7044%" y="181" width="0.9003%" height="15" fill="rgb(205,54,52)" fg:x="11613" fg:w="559"/><text x="18.9974%" y="191.50"></text></g><g><title>candid::types::CandidType::ty (2,907 instructions, 4.68%)</title><rect x="15.0966%" y="197" width="4.6821%" height="15" fill="rgb(228,102,19)" fg:x="9373" fg:w="2907"/><text x="15.3895%" y="207.50">cand..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (38 instructions, 0.06%)</title><rect x="19.7787%" y="197" width="0.0612%" height="15" fill="rgb(249,5,51)" fg:x="12280" fg:w="38"/><text x="20.0717%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="19.8786%" y="133" width="0.0161%" height="15" fill="rgb(219,11,23)" fg:x="12342" fg:w="10"/><text x="20.1715%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.23%)</title><rect x="19.8399%" y="149" width="0.2271%" height="15" fill="rgb(252,60,16)" fg:x="12318" fg:w="141"/><text x="20.1329%" y="159.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.23%)</title><rect x="19.8399%" y="165" width="0.2303%" height="15" fill="rgb(211,130,1)" fg:x="12318" fg:w="143"/><text x="20.1329%" y="175.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.24%)</title><rect x="19.8399%" y="181" width="0.2384%" height="15" fill="rgb(217,36,31)" fg:x="12318" fg:w="148"/><text x="20.1329%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="20.1685%" y="133" width="0.0161%" height="15" fill="rgb(234,70,22)" fg:x="12522" fg:w="10"/><text x="20.4614%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.23%)</title><rect x="20.1298%" y="149" width="0.2271%" height="15" fill="rgb(231,105,12)" fg:x="12498" fg:w="141"/><text x="20.4228%" y="159.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.23%)</title><rect x="20.1298%" y="165" width="0.2303%" height="15" fill="rgb(253,35,3)" fg:x="12498" fg:w="143"/><text x="20.4228%" y="175.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.24%)</title><rect x="20.1298%" y="181" width="0.2384%" height="15" fill="rgb(240,126,49)" fg:x="12498" fg:w="148"/><text x="20.4228%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (360 instructions, 0.58%)</title><rect x="19.8399%" y="197" width="0.5798%" height="15" fill="rgb(254,30,51)" fg:x="12318" fg:w="360"/><text x="20.1329%" y="207.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="20.4197%" y="181" width="0.0451%" height="15" fill="rgb(212,73,51)" fg:x="12678" fg:w="28"/><text x="20.7127%" y="191.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.03%)</title><rect x="20.4648%" y="181" width="0.0258%" height="15" fill="rgb(230,139,46)" fg:x="12706" fg:w="16"/><text x="20.7578%" y="191.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.03%)</title><rect x="20.4906%" y="181" width="0.0258%" height="15" fill="rgb(253,107,50)" fg:x="12722" fg:w="16"/><text x="20.7836%" y="191.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (141 instructions, 0.23%)</title><rect x="20.4197%" y="197" width="0.2271%" height="15" fill="rgb(226,174,19)" fg:x="12678" fg:w="141"/><text x="20.7127%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="20.6468%" y="197" width="0.0177%" height="15" fill="rgb(254,20,10)" fg:x="12819" fg:w="11"/><text x="20.9398%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="20.6646%" y="197" width="0.0177%" height="15" fill="rgb(208,191,8)" fg:x="12830" fg:w="11"/><text x="20.9575%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="20.6823%" y="197" width="0.0177%" height="15" fill="rgb(222,42,18)" fg:x="12841" fg:w="11"/><text x="20.9752%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::get_value (3,651 instructions, 5.88%)</title><rect x="15.0966%" y="213" width="5.8805%" height="15" fill="rgb(244,64,53)" fg:x="9373" fg:w="3651"/><text x="15.3895%" y="223.50">candid..</text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 0.67%)</title><rect x="20.9770%" y="197" width="0.6652%" height="15" fill="rgb(205,198,9)" fg:x="13024" fg:w="413"/><text x="21.2700%" y="207.50"></text></g><g><title>memcpy (417 instructions, 0.67%)</title><rect x="20.9770%" y="213" width="0.6716%" height="15" fill="rgb(217,165,0)" fg:x="13024" fg:w="417"/><text x="21.2700%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.03%)</title><rect x="21.6487%" y="197" width="0.0306%" height="15" fill="rgb(251,92,47)" fg:x="13441" fg:w="19"/><text x="21.9416%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="21.7179%" y="149" width="0.0161%" height="15" fill="rgb(253,174,31)" fg:x="13484" fg:w="10"/><text x="22.0109%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.23%)</title><rect x="21.6793%" y="165" width="0.2271%" height="15" fill="rgb(206,102,45)" fg:x="13460" fg:w="141"/><text x="21.9722%" y="175.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.23%)</title><rect x="21.6793%" y="181" width="0.2303%" height="15" fill="rgb(244,19,54)" fg:x="13460" fg:w="143"/><text x="21.9722%" y="191.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.24%)</title><rect x="21.6793%" y="197" width="0.2384%" height="15" fill="rgb(247,74,48)" fg:x="13460" fg:w="148"/><text x="21.9722%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="21.9692%" y="133" width="0.0161%" height="15" fill="rgb(227,152,51)" fg:x="13640" fg:w="10"/><text x="22.2621%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (74 instructions, 0.12%)</title><rect x="21.9853%" y="133" width="0.1192%" height="15" fill="rgb(213,72,42)" fg:x="13650" fg:w="74"/><text x="22.2782%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (243 instructions, 0.39%)</title><rect x="21.9176%" y="149" width="0.3914%" height="15" fill="rgb(244,60,9)" fg:x="13608" fg:w="243"/><text x="22.2106%" y="159.50"></text></g><g><title>__rdl_dealloc (245 instructions, 0.39%)</title><rect x="21.9176%" y="165" width="0.3946%" height="15" fill="rgb(246,165,44)" fg:x="13608" fg:w="245"/><text x="22.2106%" y="175.50"></text></g><g><title>__rust_dealloc (250 instructions, 0.40%)</title><rect x="21.9176%" y="181" width="0.4027%" height="15" fill="rgb(246,149,33)" fg:x="13608" fg:w="250"/><text x="22.2106%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (282 instructions, 0.45%)</title><rect x="21.9176%" y="197" width="0.4542%" height="15" fill="rgb(250,148,17)" fg:x="13608" fg:w="282"/><text x="22.2106%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="22.3718%" y="197" width="0.0177%" height="15" fill="rgb(223,148,38)" fg:x="13890" fg:w="11"/><text x="22.6648%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::done (562 instructions, 0.91%)</title><rect x="21.6487%" y="213" width="0.9052%" height="15" fill="rgb(226,94,5)" fg:x="13441" fg:w="562"/><text x="21.9416%" y="223.50"></text></g><g><title>candid::utils::decode_args (13,587 instructions, 21.88%)</title><rect x="0.8359%" y="229" width="21.8838%" height="15" fill="rgb(224,149,50)" fg:x="519" fg:w="13587"/><text x="1.1289%" y="239.50">candid::utils::decode_args</text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="22.7519%" y="181" width="0.0258%" height="15" fill="rgb(223,77,39)" fg:x="14126" fg:w="16"/><text x="23.0449%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="22.7197%" y="197" width="0.1578%" height="15" fill="rgb(231,91,14)" fg:x="14106" fg:w="98"/><text x="23.0127%" y="207.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.16%)</title><rect x="22.7197%" y="213" width="0.1611%" height="15" fill="rgb(214,119,21)" fg:x="14106" fg:w="100"/><text x="23.0127%" y="223.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.17%)</title><rect x="22.7197%" y="229" width="0.1691%" height="15" fill="rgb(206,65,46)" fg:x="14106" fg:w="105"/><text x="23.0127%" y="239.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,936 instructions, 22.45%)</title><rect x="0.5090%" y="245" width="22.4459%" height="15" fill="rgb(236,25,6)" fg:x="316" fg:w="13936"/><text x="0.8019%" y="255.50">ic_cdk::api::call::arg_data</text></g><g><title>btreemap::MAP::__getit (15 instructions, 0.02%)</title><rect x="22.9549%" y="229" width="0.0242%" height="15" fill="rgb(239,150,19)" fg:x="14252" fg:w="15"/><text x="23.2479%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (45,999 instructions, 74.09%)</title><rect x="22.9549%" y="245" width="74.0880%" height="15" fill="rgb(230,93,41)" fg:x="14252" fg:w="45999"/><text x="23.2479%" y="255.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>candid::types::internal::ENV::__getit (8 instructions, 0.01%)</title><rect x="97.0429%" y="213" width="0.0129%" height="15" fill="rgb(243,66,1)" fg:x="60251" fg:w="8"/><text x="97.3358%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (56 instructions, 0.09%)</title><rect x="97.0912%" y="133" width="0.0902%" height="15" fill="rgb(238,89,38)" fg:x="60281" fg:w="56"/><text x="97.3841%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (157 instructions, 0.25%)</title><rect x="97.0557%" y="149" width="0.2529%" height="15" fill="rgb(217,131,5)" fg:x="60259" fg:w="157"/><text x="97.3487%" y="159.50"></text></g><g><title>__rdl_dealloc (159 instructions, 0.26%)</title><rect x="97.0557%" y="165" width="0.2561%" height="15" fill="rgb(252,79,5)" fg:x="60259" fg:w="159"/><text x="97.3487%" y="175.50"></text></g><g><title>__rust_dealloc (164 instructions, 0.26%)</title><rect x="97.0557%" y="181" width="0.2641%" height="15" fill="rgb(238,8,22)" fg:x="60259" fg:w="164"/><text x="97.3487%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (196 instructions, 0.32%)</title><rect x="97.0557%" y="197" width="0.3157%" height="15" fill="rgb(231,135,40)" fg:x="60259" fg:w="196"/><text x="97.3487%" y="207.50"></text></g><g><title>compiler_builtins::mem::memset (135 instructions, 0.22%)</title><rect x="97.3714%" y="181" width="0.2174%" height="15" fill="rgb(234,8,42)" fg:x="60455" fg:w="135"/><text x="97.6644%" y="191.50"></text></g><g><title>memset (139 instructions, 0.22%)</title><rect x="97.3714%" y="197" width="0.2239%" height="15" fill="rgb(205,183,30)" fg:x="60455" fg:w="139"/><text x="97.6644%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clear (410 instructions, 0.66%)</title><rect x="97.0557%" y="213" width="0.6604%" height="15" fill="rgb(238,215,24)" fg:x="60259" fg:w="410"/><text x="97.3487%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::new (503 instructions, 0.81%)</title><rect x="97.0429%" y="229" width="0.8102%" height="15" fill="rgb(245,32,20)" fg:x="60251" fg:w="503"/><text x="97.3358%" y="239.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (33 instructions, 0.05%)</title><rect x="97.8578%" y="197" width="0.0532%" height="15" fill="rgb(234,149,53)" fg:x="60757" fg:w="33"/><text x="98.1508%" y="207.50"></text></g><g><title>std::io::Write::write_all (88 instructions, 0.14%)</title><rect x="97.8578%" y="213" width="0.1417%" height="15" fill="rgb(254,98,12)" fg:x="60757" fg:w="88"/><text x="98.1508%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="97.9996%" y="101" width="0.0145%" height="15" fill="rgb(252,222,0)" fg:x="60845" fg:w="9"/><text x="98.2925%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="98.0141%" y="101" width="0.0145%" height="15" fill="rgb(238,74,43)" fg:x="60854" fg:w="9"/><text x="98.3070%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_inuse_and_pinuse (14 instructions, 0.02%)</title><rect x="98.0286%" y="101" width="0.0225%" height="15" fill="rgb(221,213,8)" fg:x="60863" fg:w="14"/><text x="98.3215%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (117 instructions, 0.19%)</title><rect x="97.9996%" y="117" width="0.1884%" height="15" fill="rgb(244,158,34)" fg:x="60845" fg:w="117"/><text x="98.2925%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (127 instructions, 0.20%)</title><rect x="97.9996%" y="133" width="0.2046%" height="15" fill="rgb(251,136,28)" fg:x="60845" fg:w="127"/><text x="98.2925%" y="143.50"></text></g><g><title>__rdl_alloc (130 instructions, 0.21%)</title><rect x="97.9996%" y="149" width="0.2094%" height="15" fill="rgb(225,70,13)" fg:x="60845" fg:w="130"/><text x="98.2925%" y="159.50"></text></g><g><title>__rust_alloc (136 instructions, 0.22%)</title><rect x="97.9996%" y="165" width="0.2190%" height="15" fill="rgb(246,147,29)" fg:x="60845" fg:w="136"/><text x="98.2925%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (168 instructions, 0.27%)</title><rect x="97.9996%" y="181" width="0.2706%" height="15" fill="rgb(238,20,50)" fg:x="60845" fg:w="168"/><text x="98.2925%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (235 instructions, 0.38%)</title><rect x="97.9996%" y="197" width="0.3785%" height="15" fill="rgb(227,54,34)" fg:x="60845" fg:w="235"/><text x="98.2925%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (10 instructions, 0.02%)</title><rect x="98.3781%" y="197" width="0.0161%" height="15" fill="rgb(249,57,20)" fg:x="61080" fg:w="10"/><text x="98.6711%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.02%)</title><rect x="98.3942%" y="181" width="0.0177%" height="15" fill="rgb(240,14,9)" fg:x="61090" fg:w="11"/><text x="98.6872%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.02%)</title><rect x="98.4183%" y="181" width="0.0177%" height="15" fill="rgb(211,145,54)" fg:x="61105" fg:w="11"/><text x="98.7113%" y="191.50"></text></g><g><title>memcpy (30 instructions, 0.05%)</title><rect x="98.3942%" y="197" width="0.0483%" height="15" fill="rgb(247,73,45)" fg:x="61090" fg:w="30"/><text x="98.6872%" y="207.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (477 instructions, 0.77%)</title><rect x="97.9996%" y="213" width="0.7683%" height="15" fill="rgb(244,143,28)" fg:x="60845" fg:w="477"/><text x="98.2925%" y="223.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (31 instructions, 0.05%)</title><rect x="98.7775%" y="197" width="0.0499%" height="15" fill="rgb(213,96,7)" fg:x="61328" fg:w="31"/><text x="99.0705%" y="207.50"></text></g><g><title>std::io::Write::write_all (86 instructions, 0.14%)</title><rect x="98.7775%" y="213" width="0.1385%" height="15" fill="rgb(211,178,22)" fg:x="61328" fg:w="86"/><text x="99.0705%" y="223.50"></text></g><g><title>std::io::Write::write_all (15 instructions, 0.02%)</title><rect x="98.9257%" y="213" width="0.0242%" height="15" fill="rgb(235,118,54)" fg:x="61420" fg:w="15"/><text x="99.2187%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (757 instructions, 1.22%)</title><rect x="97.8578%" y="229" width="1.2193%" height="15" fill="rgb(220,83,27)" fg:x="60757" fg:w="757"/><text x="98.1508%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="99.1174%" y="181" width="0.0258%" height="15" fill="rgb(225,178,13)" fg:x="61539" fg:w="16"/><text x="99.4103%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="99.0852%" y="197" width="0.1578%" height="15" fill="rgb(229,121,38)" fg:x="61519" fg:w="98"/><text x="99.3781%" y="207.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.16%)</title><rect x="99.0852%" y="213" width="0.1611%" height="15" fill="rgb(212,158,37)" fg:x="61519" fg:w="100"/><text x="99.3781%" y="223.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.17%)</title><rect x="99.0852%" y="229" width="0.1691%" height="15" fill="rgb(249,156,1)" fg:x="61519" fg:w="105"/><text x="99.3781%" y="239.50"></text></g><g><title>candid::utils::write_args (1,449 instructions, 2.33%)</title><rect x="97.0429%" y="245" width="2.3338%" height="15" fill="rgb(229,124,34)" fg:x="60251" fg:w="1449"/><text x="97.3358%" y="255.50">c..</text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="99.4089%" y="197" width="0.0258%" height="15" fill="rgb(247,227,25)" fg:x="61720" fg:w="16"/><text x="99.7019%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="99.3767%" y="213" width="0.1578%" height="15" fill="rgb(230,211,11)" fg:x="61700" fg:w="98"/><text x="99.6696%" y="223.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.16%)</title><rect x="99.3767%" y="229" width="0.1611%" height="15" fill="rgb(250,191,5)" fg:x="61700" fg:w="100"/><text x="99.6696%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="99.5973%" y="197" width="0.0161%" height="15" fill="rgb(213,58,9)" fg:x="61837" fg:w="10"/><text x="99.8903%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (193 instructions, 0.31%)</title><rect x="99.5458%" y="213" width="0.3109%" height="15" fill="rgb(230,117,2)" fg:x="61805" fg:w="193"/><text x="99.8388%" y="223.50"></text></g><g><title>__rdl_dealloc (195 instructions, 0.31%)</title><rect x="99.5458%" y="229" width="0.3141%" height="15" fill="rgb(223,161,18)" fg:x="61805" fg:w="195"/><text x="99.8388%" y="239.50"></text></g><g><title>__rust_dealloc (305 instructions, 0.49%)</title><rect x="99.3767%" y="245" width="0.4912%" height="15" fill="rgb(243,172,23)" fg:x="61700" fg:w="305"/><text x="99.6696%" y="255.50"></text></g><g><title>ic_cdk::futures::spawn (62,076 instructions, 99.98%)</title><rect x="0.0129%" y="261" width="99.9823%" height="15" fill="rgb(243,33,13)" fg:x="8" fg:w="62076"/><text x="0.3059%" y="271.50">ic_cdk::futures::spawn</text></g><g><title>all (62,087 instructions, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(237,140,41)" fg:x="0" fg:w="62087"/><text x="0.2930%" y="303.50"></text></g><g><title>canister_update batch_remove (62,087 instructions, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(220,2,6)" fg:x="0" fg:w="62087"/><text x="0.2930%" y="287.50">canister_update batch_remove</text></g></svg></svg>