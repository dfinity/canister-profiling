<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="85766"><g><title>ic_cdk::setup (24 instructions, 0.03%)</title><rect x="0.0000%" y="197" width="0.0280%" height="15" fill="rgb(220,195,6)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="0.0280%" y="197" width="0.0956%" height="15" fill="rgb(252,85,8)" fg:x="24" fg:w="82"/><text x="0.3210%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="0.1236%" y="197" width="0.0956%" height="15" fill="rgb(233,101,3)" fg:x="106" fg:w="82"/><text x="0.4166%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="0.2192%" y="165" width="0.0956%" height="15" fill="rgb(234,96,35)" fg:x="188" fg:w="82"/><text x="0.5122%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.10%)</title><rect x="0.3148%" y="149" width="0.0956%" height="15" fill="rgb(234,204,23)" fg:x="270" fg:w="82"/><text x="0.6078%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.52%)</title><rect x="0.4104%" y="149" width="0.5165%" height="15" fill="rgb(227,101,12)" fg:x="352" fg:w="443"/><text x="0.7034%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.11%)</title><rect x="0.9269%" y="149" width="0.1108%" height="15" fill="rgb(219,212,1)" fg:x="795" fg:w="95"/><text x="1.2199%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.0377%" y="149" width="0.0700%" height="15" fill="rgb(230,182,52)" fg:x="890" fg:w="60"/><text x="1.3307%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.1077%" y="149" width="0.0700%" height="15" fill="rgb(213,181,9)" fg:x="950" fg:w="60"/><text x="1.4006%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.1776%" y="149" width="0.0700%" height="15" fill="rgb(249,110,5)" fg:x="1010" fg:w="60"/><text x="1.4706%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.2476%" y="149" width="0.0700%" height="15" fill="rgb(246,214,38)" fg:x="1070" fg:w="60"/><text x="1.5405%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.10%)</title><rect x="1.3175%" y="149" width="0.0956%" height="15" fill="rgb(234,19,13)" fg:x="1130" fg:w="82"/><text x="1.6105%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.08%)</title><rect x="1.4131%" y="149" width="0.0816%" height="15" fill="rgb(249,115,4)" fg:x="1212" fg:w="70"/><text x="1.7061%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.52%)</title><rect x="1.4948%" y="149" width="0.5165%" height="15" fill="rgb(216,80,1)" fg:x="1282" fg:w="443"/><text x="1.7877%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="2.0113%" y="149" width="0.0222%" height="15" fill="rgb(214,106,8)" fg:x="1725" fg:w="19"/><text x="2.3043%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="2.0334%" y="133" width="0.0956%" height="15" fill="rgb(227,109,42)" fg:x="1744" fg:w="82"/><text x="2.3264%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.08%)</title><rect x="2.1290%" y="101" width="0.0781%" height="15" fill="rgb(228,92,16)" fg:x="1826" fg:w="67"/><text x="2.4220%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.11%)</title><rect x="2.1290%" y="117" width="0.1119%" height="15" fill="rgb(226,149,6)" fg:x="1826" fg:w="96"/><text x="2.4220%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="2.2410%" y="69" width="0.0128%" height="15" fill="rgb(229,81,18)" fg:x="1922" fg:w="11"/><text x="2.5340%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="2.2538%" y="53" width="0.0408%" height="15" fill="rgb(243,71,38)" fg:x="1933" fg:w="35"/><text x="2.5468%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.07%)</title><rect x="2.2538%" y="69" width="0.0746%" height="15" fill="rgb(214,174,30)" fg:x="1933" fg:w="64"/><text x="2.5468%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.17%)</title><rect x="2.2410%" y="85" width="0.1679%" height="15" fill="rgb(228,204,34)" fg:x="1922" fg:w="144"/><text x="2.5340%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.24%)</title><rect x="2.2410%" y="101" width="0.2437%" height="15" fill="rgb(244,161,29)" fg:x="1922" fg:w="209"/><text x="2.5340%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.26%)</title><rect x="2.2410%" y="117" width="0.2553%" height="15" fill="rgb(243,88,43)" fg:x="1922" fg:w="219"/><text x="2.5340%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 0.53%)</title><rect x="2.1290%" y="133" width="0.5328%" height="15" fill="rgb(210,89,1)" fg:x="1826" fg:w="457"/><text x="2.4220%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 0.79%)</title><rect x="2.0334%" y="149" width="0.7894%" height="15" fill="rgb(252,117,6)" fg:x="1744" fg:w="677"/><text x="2.3264%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.11%)</title><rect x="2.8228%" y="149" width="0.1108%" height="15" fill="rgb(209,186,35)" fg:x="2421" fg:w="95"/><text x="3.1158%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="2.9336%" y="149" width="0.0700%" height="15" fill="rgb(238,33,11)" fg:x="2516" fg:w="60"/><text x="3.2265%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.09%)</title><rect x="3.0035%" y="149" width="0.0886%" height="15" fill="rgb(213,221,30)" fg:x="2576" fg:w="76"/><text x="3.2965%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.08%)</title><rect x="3.0921%" y="149" width="0.0816%" height="15" fill="rgb(218,140,36)" fg:x="2652" fg:w="70"/><text x="3.3851%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.52%)</title><rect x="3.1738%" y="133" width="0.5165%" height="15" fill="rgb(231,4,17)" fg:x="2722" fg:w="443"/><text x="3.4667%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="3.6903%" y="133" width="0.0222%" height="15" fill="rgb(248,228,33)" fg:x="3165" fg:w="19"/><text x="3.9832%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="3.7124%" y="117" width="0.0956%" height="15" fill="rgb(240,199,0)" fg:x="3184" fg:w="82"/><text x="4.0054%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.08%)</title><rect x="3.8080%" y="85" width="0.0781%" height="15" fill="rgb(230,13,39)" fg:x="3266" fg:w="67"/><text x="4.1010%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.11%)</title><rect x="3.8080%" y="101" width="0.1119%" height="15" fill="rgb(210,159,50)" fg:x="3266" fg:w="96"/><text x="4.1010%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="3.9200%" y="53" width="0.0128%" height="15" fill="rgb(240,22,11)" fg:x="3362" fg:w="11"/><text x="4.2129%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="3.9328%" y="37" width="0.0408%" height="15" fill="rgb(240,94,21)" fg:x="3373" fg:w="35"/><text x="4.2258%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.07%)</title><rect x="3.9328%" y="53" width="0.0746%" height="15" fill="rgb(218,209,45)" fg:x="3373" fg:w="64"/><text x="4.2258%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.17%)</title><rect x="3.9200%" y="69" width="0.1679%" height="15" fill="rgb(244,223,36)" fg:x="3362" fg:w="144"/><text x="4.2129%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.24%)</title><rect x="3.9200%" y="85" width="0.2437%" height="15" fill="rgb(215,20,45)" fg:x="3362" fg:w="209"/><text x="4.2129%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.26%)</title><rect x="3.9200%" y="101" width="0.2553%" height="15" fill="rgb(225,203,19)" fg:x="3362" fg:w="219"/><text x="4.2129%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 0.53%)</title><rect x="3.8080%" y="117" width="0.5328%" height="15" fill="rgb(238,131,22)" fg:x="3266" fg:w="457"/><text x="4.1010%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 0.79%)</title><rect x="3.7124%" y="133" width="0.7894%" height="15" fill="rgb(250,207,51)" fg:x="3184" fg:w="677"/><text x="4.0054%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.11%)</title><rect x="4.5018%" y="133" width="0.1108%" height="15" fill="rgb(230,43,16)" fg:x="3861" fg:w="95"/><text x="4.7948%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="4.6126%" y="133" width="0.0700%" height="15" fill="rgb(244,4,6)" fg:x="3956" fg:w="60"/><text x="4.9055%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.10%)</title><rect x="4.6825%" y="117" width="0.0956%" height="15" fill="rgb(251,41,9)" fg:x="4016" fg:w="82"/><text x="4.9755%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.11%)</title><rect x="4.7781%" y="117" width="0.1108%" height="15" fill="rgb(240,39,16)" fg:x="4098" fg:w="95"/><text x="5.0711%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.09%)</title><rect x="4.8889%" y="117" width="0.0886%" height="15" fill="rgb(254,142,26)" fg:x="4193" fg:w="76"/><text x="5.1819%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.38%)</title><rect x="4.6825%" y="133" width="0.3848%" height="15" fill="rgb(215,170,26)" fg:x="4016" fg:w="330"/><text x="4.9755%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="5.0673%" y="133" width="0.0956%" height="15" fill="rgb(225,130,18)" fg:x="4346" fg:w="82"/><text x="5.3602%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,946 instructions, 2.27%)</title><rect x="3.1738%" y="149" width="2.2690%" height="15" fill="rgb(254,112,28)" fg:x="2722" fg:w="1946"/><text x="3.4667%" y="159.50">b..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.09%)</title><rect x="5.4427%" y="149" width="0.0886%" height="15" fill="rgb(212,87,16)" fg:x="4668" fg:w="76"/><text x="5.7357%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="5.5313%" y="149" width="0.0175%" height="15" fill="rgb(236,188,30)" fg:x="4744" fg:w="15"/><text x="5.8243%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="5.5488%" y="149" width="0.0175%" height="15" fill="rgb(254,194,4)" fg:x="4759" fg:w="15"/><text x="5.8418%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="5.5663%" y="149" width="0.0175%" height="15" fill="rgb(240,134,7)" fg:x="4774" fg:w="15"/><text x="5.8593%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (158 instructions, 0.18%)</title><rect x="5.5920%" y="133" width="0.1842%" height="15" fill="rgb(207,72,11)" fg:x="4796" fg:w="158"/><text x="5.8849%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (254 instructions, 0.30%)</title><rect x="5.5920%" y="149" width="0.2962%" height="15" fill="rgb(253,190,49)" fg:x="4796" fg:w="254"/><text x="5.8849%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="5.8881%" y="117" width="0.0956%" height="15" fill="rgb(221,53,21)" fg:x="5050" fg:w="82"/><text x="6.1811%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.15%)</title><rect x="5.8881%" y="133" width="0.1516%" height="15" fill="rgb(239,138,15)" fg:x="5050" fg:w="130"/><text x="6.1811%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 0.25%)</title><rect x="5.8881%" y="149" width="0.2507%" height="15" fill="rgb(244,140,30)" fg:x="5050" fg:w="215"/><text x="6.1811%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="6.1388%" y="149" width="0.0956%" height="15" fill="rgb(244,208,1)" fg:x="5265" fg:w="82"/><text x="6.4318%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.10%)</title><rect x="6.2344%" y="149" width="0.1038%" height="15" fill="rgb(227,213,21)" fg:x="5347" fg:w="89"/><text x="6.5274%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="6.3382%" y="149" width="0.0956%" height="15" fill="rgb(252,96,8)" fg:x="5436" fg:w="82"/><text x="6.6311%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="6.4338%" y="149" width="0.0956%" height="15" fill="rgb(252,94,29)" fg:x="5518" fg:w="82"/><text x="6.7268%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.10%)</title><rect x="6.5341%" y="149" width="0.1038%" height="15" fill="rgb(227,167,32)" fg:x="5604" fg:w="89"/><text x="6.8270%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.46%)</title><rect x="6.6378%" y="149" width="0.4571%" height="15" fill="rgb(207,132,4)" fg:x="5693" fg:w="392"/><text x="6.9308%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.46%)</title><rect x="7.0949%" y="149" width="0.4571%" height="15" fill="rgb(220,64,17)" fg:x="6085" fg:w="392"/><text x="7.3879%" y="159.50"></text></g><g><title>memcpy (504 instructions, 0.59%)</title><rect x="7.5519%" y="149" width="0.5876%" height="15" fill="rgb(231,95,24)" fg:x="6477" fg:w="504"/><text x="7.8449%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,920 instructions, 9.23%)</title><rect x="0.3148%" y="165" width="9.2344%" height="15" fill="rgb(229,39,43)" fg:x="270" fg:w="7920"/><text x="0.6078%" y="175.50">candid::de:..</text></g><g><title>memcpy (344 instructions, 0.40%)</title><rect x="9.5492%" y="165" width="0.4011%" height="15" fill="rgb(228,65,51)" fg:x="8190" fg:w="344"/><text x="9.8422%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.05%)</title><rect x="9.9503%" y="165" width="0.0455%" height="15" fill="rgb(225,51,28)" fg:x="8534" fg:w="39"/><text x="10.2433%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="9.9958%" y="165" width="0.0956%" height="15" fill="rgb(249,155,10)" fg:x="8573" fg:w="82"/><text x="10.2888%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.07%)</title><rect x="10.0996%" y="133" width="0.0688%" height="15" fill="rgb(214,130,7)" fg:x="8662" fg:w="59"/><text x="10.3925%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.11%)</title><rect x="10.1684%" y="133" width="0.1096%" height="15" fill="rgb(233,8,10)" fg:x="8721" fg:w="94"/><text x="10.4613%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.20%)</title><rect x="10.2780%" y="133" width="0.2017%" height="15" fill="rgb(237,221,45)" fg:x="8815" fg:w="173"/><text x="10.5709%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.68%)</title><rect x="10.0996%" y="149" width="0.6751%" height="15" fill="rgb(248,54,37)" fg:x="8662" fg:w="579"/><text x="10.3925%" y="159.50"></text></g><g><title>candid::types::internal::env_add (797 instructions, 0.93%)</title><rect x="10.0914%" y="165" width="0.9293%" height="15" fill="rgb(247,100,48)" fg:x="8655" fg:w="797"/><text x="10.3844%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (80 instructions, 0.09%)</title><rect x="11.0207%" y="165" width="0.0933%" height="15" fill="rgb(248,89,9)" fg:x="9452" fg:w="80"/><text x="11.3137%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.07%)</title><rect x="11.1221%" y="133" width="0.0688%" height="15" fill="rgb(207,111,27)" fg:x="9539" fg:w="59"/><text x="11.4151%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.11%)</title><rect x="11.1909%" y="133" width="0.1096%" height="15" fill="rgb(230,43,10)" fg:x="9598" fg:w="94"/><text x="11.4839%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.20%)</title><rect x="11.3005%" y="133" width="0.2017%" height="15" fill="rgb(218,62,36)" fg:x="9692" fg:w="173"/><text x="11.5935%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.68%)</title><rect x="11.1221%" y="149" width="0.6751%" height="15" fill="rgb(248,104,39)" fg:x="9539" fg:w="579"/><text x="11.4151%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.09%)</title><rect x="11.7972%" y="149" width="0.0898%" height="15" fill="rgb(216,108,17)" fg:x="10118" fg:w="77"/><text x="12.0902%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.10%)</title><rect x="11.8870%" y="133" width="0.1038%" height="15" fill="rgb(231,132,36)" fg:x="10195" fg:w="89"/><text x="12.1800%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.16%)</title><rect x="11.8870%" y="149" width="0.1551%" height="15" fill="rgb(235,125,51)" fg:x="10195" fg:w="133"/><text x="12.1800%" y="159.50"></text></g><g><title>candid::types::internal::env_add (975 instructions, 1.14%)</title><rect x="11.1140%" y="165" width="1.1368%" height="15" fill="rgb(213,9,27)" fg:x="9532" fg:w="975"/><text x="11.4069%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.07%)</title><rect x="12.2508%" y="117" width="0.0688%" height="15" fill="rgb(243,119,9)" fg:x="10507" fg:w="59"/><text x="12.5437%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (102 instructions, 0.12%)</title><rect x="12.2508%" y="133" width="0.1189%" height="15" fill="rgb(254,118,1)" fg:x="10507" fg:w="102"/><text x="12.5437%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (323 instructions, 0.38%)</title><rect x="12.2508%" y="149" width="0.3766%" height="15" fill="rgb(227,13,42)" fg:x="10507" fg:w="323"/><text x="12.5437%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.618 (34 instructions, 0.04%)</title><rect x="12.6274%" y="149" width="0.0396%" height="15" fill="rgb(241,15,52)" fg:x="10830" fg:w="34"/><text x="12.9204%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.6670%" y="149" width="0.0152%" height="15" fill="rgb(235,67,24)" fg:x="10864" fg:w="13"/><text x="12.9600%" y="159.50"></text></g><g><title>candid::types::internal::env_id (555 instructions, 0.65%)</title><rect x="12.2508%" y="165" width="0.6471%" height="15" fill="rgb(236,11,15)" fg:x="10507" fg:w="555"/><text x="12.5437%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.06%)</title><rect x="12.8979%" y="165" width="0.0571%" height="15" fill="rgb(228,83,45)" fg:x="11062" fg:w="49"/><text x="13.1909%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.10%)</title><rect x="12.9550%" y="149" width="0.0968%" height="15" fill="rgb(214,178,40)" fg:x="11111" fg:w="83"/><text x="13.2480%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.03%)</title><rect x="13.1031%" y="133" width="0.0268%" height="15" fill="rgb(230,35,32)" fg:x="11238" fg:w="23"/><text x="13.3961%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.16%)</title><rect x="13.1031%" y="149" width="0.1609%" height="15" fill="rgb(228,48,45)" fg:x="11238" fg:w="138"/><text x="13.3961%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 instructions, 0.36%)</title><rect x="12.9550%" y="165" width="0.3603%" height="15" fill="rgb(208,217,29)" fg:x="11111" fg:w="309"/><text x="13.2480%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.04%)</title><rect x="13.3153%" y="149" width="0.0408%" height="15" fill="rgb(254,20,15)" fg:x="11420" fg:w="35"/><text x="13.6083%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (34 instructions, 0.04%)</title><rect x="13.3561%" y="149" width="0.0396%" height="15" fill="rgb(248,17,10)" fg:x="11455" fg:w="34"/><text x="13.6491%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (34 instructions, 0.04%)</title><rect x="13.3958%" y="149" width="0.0396%" height="15" fill="rgb(221,108,33)" fg:x="11489" fg:w="34"/><text x="13.6887%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.04%)</title><rect x="13.4354%" y="149" width="0.0385%" height="15" fill="rgb(244,189,32)" fg:x="11523" fg:w="33"/><text x="13.7284%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 0.29%)</title><rect x="13.3153%" y="165" width="0.2915%" height="15" fill="rgb(233,173,43)" fg:x="11420" fg:w="250"/><text x="13.6083%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="13.6068%" y="165" width="0.0152%" height="15" fill="rgb(212,88,24)" fg:x="11670" fg:w="13"/><text x="13.8998%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="13.6219%" y="165" width="0.0152%" height="15" fill="rgb(242,110,44)" fg:x="11683" fg:w="13"/><text x="13.9149%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="13.6371%" y="165" width="0.0152%" height="15" fill="rgb(233,205,47)" fg:x="11696" fg:w="13"/><text x="13.9301%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.05%)</title><rect x="13.6523%" y="165" width="0.0501%" height="15" fill="rgb(234,49,35)" fg:x="11709" fg:w="43"/><text x="13.9452%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="13.7106%" y="133" width="0.0315%" height="15" fill="rgb(207,73,30)" fg:x="11759" fg:w="27"/><text x="14.0035%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.17%)</title><rect x="13.7106%" y="149" width="0.1656%" height="15" fill="rgb(214,191,21)" fg:x="11759" fg:w="142"/><text x="14.0035%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="13.8761%" y="117" width="0.0315%" height="15" fill="rgb(227,12,24)" fg:x="11901" fg:w="27"/><text x="14.1691%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.17%)</title><rect x="13.8761%" y="133" width="0.1656%" height="15" fill="rgb(254,197,6)" fg:x="11901" fg:w="142"/><text x="14.1691%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 0.22%)</title><rect x="13.8761%" y="149" width="0.2169%" height="15" fill="rgb(208,221,49)" fg:x="11901" fg:w="186"/><text x="14.1691%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="14.0930%" y="149" width="0.0152%" height="15" fill="rgb(228,35,2)" fg:x="12087" fg:w="13"/><text x="14.3860%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (415 instructions, 0.48%)</title><rect x="13.7024%" y="165" width="0.4839%" height="15" fill="rgb(246,60,35)" fg:x="11752" fg:w="415"/><text x="13.9954%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="14.1863%" y="149" width="0.0315%" height="15" fill="rgb(230,21,8)" fg:x="12167" fg:w="27"/><text x="14.4792%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (136 instructions, 0.16%)</title><rect x="14.1863%" y="165" width="0.1586%" height="15" fill="rgb(242,56,26)" fg:x="12167" fg:w="136"/><text x="14.4792%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,684 instructions, 15.96%)</title><rect x="0.2192%" y="181" width="15.9550%" height="15" fill="rgb(216,20,27)" fg:x="188" fg:w="13684"/><text x="0.5122%" y="191.50">ic_cdk::api::call::ar..</text></g><g><title>memmove (320 instructions, 0.37%)</title><rect x="16.1742%" y="165" width="0.3731%" height="15" fill="rgb(214,65,20)" fg:x="13872" fg:w="320"/><text x="16.4672%" y="175.50"></text></g><g><title>memmove (320 instructions, 0.37%)</title><rect x="16.5473%" y="165" width="0.3731%" height="15" fill="rgb(234,179,42)" fg:x="14192" fg:w="320"/><text x="16.8403%" y="175.50"></text></g><g><title>memmove (320 instructions, 0.37%)</title><rect x="17.0464%" y="165" width="0.3731%" height="15" fill="rgb(222,24,3)" fg:x="14620" fg:w="320"/><text x="17.3394%" y="175.50"></text></g><g><title>memmove (320 instructions, 0.37%)</title><rect x="17.4195%" y="165" width="0.3731%" height="15" fill="rgb(209,17,37)" fg:x="14940" fg:w="320"/><text x="17.7125%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.9185%" y="165" width="0.0268%" height="15" fill="rgb(216,211,14)" fg:x="15368" fg:w="23"/><text x="18.2115%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.9453%" y="165" width="0.0268%" height="15" fill="rgb(213,117,9)" fg:x="15391" fg:w="23"/><text x="18.2383%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.9722%" y="149" width="0.0268%" height="15" fill="rgb(206,98,8)" fg:x="15414" fg:w="23"/><text x="18.2651%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.21%)</title><rect x="17.9990%" y="149" width="0.2145%" height="15" fill="rgb(209,24,13)" fg:x="15437" fg:w="184"/><text x="18.2919%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="18.2135%" y="149" width="0.0268%" height="15" fill="rgb(212,56,29)" fg:x="15621" fg:w="23"/><text x="18.5065%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.21%)</title><rect x="18.2403%" y="149" width="0.2145%" height="15" fill="rgb(240,107,1)" fg:x="15644" fg:w="184"/><text x="18.5333%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="18.4549%" y="149" width="0.0268%" height="15" fill="rgb(205,86,22)" fg:x="15828" fg:w="23"/><text x="18.7478%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.10%)</title><rect x="18.4817%" y="149" width="0.1038%" height="15" fill="rgb(237,139,22)" fg:x="15851" fg:w="89"/><text x="18.7747%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (737 instructions, 0.86%)</title><rect x="17.9722%" y="165" width="0.8593%" height="15" fill="rgb(212,95,25)" fg:x="15414" fg:w="737"/><text x="18.2651%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="19.0717%" y="165" width="0.1866%" height="15" fill="rgb(211,174,37)" fg:x="16357" fg:w="160"/><text x="19.3646%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="19.2582%" y="165" width="0.1866%" height="15" fill="rgb(211,170,45)" fg:x="16517" fg:w="160"/><text x="19.5512%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="19.5707%" y="165" width="0.0268%" height="15" fill="rgb(212,51,51)" fg:x="16785" fg:w="23"/><text x="19.8637%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="19.5975%" y="165" width="0.0268%" height="15" fill="rgb(226,169,24)" fg:x="16808" fg:w="23"/><text x="19.8905%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.24%)</title><rect x="19.6243%" y="149" width="0.2390%" height="15" fill="rgb(238,196,16)" fg:x="16831" fg:w="205"/><text x="19.9173%" y="159.50"></text></g><g><title>memmove (205 instructions, 0.24%)</title><rect x="19.8633%" y="149" width="0.2390%" height="15" fill="rgb(211,120,46)" fg:x="17036" fg:w="205"/><text x="20.1563%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="20.1024%" y="149" width="0.0175%" height="15" fill="rgb(228,207,2)" fg:x="17241" fg:w="15"/><text x="20.3953%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="20.1199%" y="149" width="0.0175%" height="15" fill="rgb(250,140,8)" fg:x="17256" fg:w="15"/><text x="20.4128%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_left (606 instructions, 0.71%)</title><rect x="19.6243%" y="165" width="0.7066%" height="15" fill="rgb(225,104,31)" fg:x="16831" fg:w="606"/><text x="19.9173%" y="175.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="20.5769%" y="165" width="0.1492%" height="15" fill="rgb(224,139,10)" fg:x="17648" fg:w="128"/><text x="20.8699%" y="175.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="20.7262%" y="165" width="0.1492%" height="15" fill="rgb(252,179,9)" fg:x="17776" fg:w="128"/><text x="21.0191%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.0013%" y="165" width="0.0268%" height="15" fill="rgb(207,124,42)" fg:x="18012" fg:w="23"/><text x="21.2943%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.0281%" y="165" width="0.0268%" height="15" fill="rgb(238,116,17)" fg:x="18035" fg:w="23"/><text x="21.3211%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="21.1809%" y="165" width="0.1866%" height="15" fill="rgb(244,148,39)" fg:x="18166" fg:w="160"/><text x="21.4739%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="21.3674%" y="165" width="0.1866%" height="15" fill="rgb(218,104,19)" fg:x="18326" fg:w="160"/><text x="21.6604%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.6799%" y="165" width="0.0268%" height="15" fill="rgb(213,111,6)" fg:x="18594" fg:w="23"/><text x="21.9729%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.7067%" y="165" width="0.0268%" height="15" fill="rgb(232,47,49)" fg:x="18617" fg:w="23"/><text x="21.9997%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.8595%" y="165" width="0.0268%" height="15" fill="rgb(244,8,13)" fg:x="18748" fg:w="23"/><text x="22.1524%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.8863%" y="165" width="0.0268%" height="15" fill="rgb(213,131,34)" fg:x="18771" fg:w="23"/><text x="22.1793%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="22.0390%" y="165" width="0.0268%" height="15" fill="rgb(248,73,5)" fg:x="18902" fg:w="23"/><text x="22.3320%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="22.0659%" y="165" width="0.0268%" height="15" fill="rgb(212,131,42)" fg:x="18925" fg:w="23"/><text x="22.3588%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.22%)</title><rect x="22.2186%" y="165" width="0.2239%" height="15" fill="rgb(222,60,48)" fg:x="19056" fg:w="192"/><text x="22.5116%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.22%)</title><rect x="22.4425%" y="165" width="0.2239%" height="15" fill="rgb(205,142,31)" fg:x="19248" fg:w="192"/><text x="22.7354%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="22.7922%" y="165" width="0.2985%" height="15" fill="rgb(251,121,48)" fg:x="19548" fg:w="256"/><text x="23.0852%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="23.0907%" y="165" width="0.2985%" height="15" fill="rgb(231,29,41)" fg:x="19804" fg:w="256"/><text x="23.3837%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="23.5151%" y="165" width="0.0268%" height="15" fill="rgb(226,219,38)" fg:x="20168" fg:w="23"/><text x="23.8081%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="23.5420%" y="165" width="0.0268%" height="15" fill="rgb(223,116,0)" fg:x="20191" fg:w="23"/><text x="23.8349%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="23.6947%" y="165" width="0.1831%" height="15" fill="rgb(253,48,30)" fg:x="20322" fg:w="157"/><text x="23.9877%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="23.8778%" y="165" width="0.1831%" height="15" fill="rgb(225,119,12)" fg:x="20479" fg:w="157"/><text x="24.1707%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="24.1867%" y="165" width="0.1866%" height="15" fill="rgb(216,216,15)" fg:x="20744" fg:w="160"/><text x="24.4797%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="24.3733%" y="165" width="0.1866%" height="15" fill="rgb(249,3,8)" fg:x="20904" fg:w="160"/><text x="24.6663%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="24.6858%" y="165" width="0.0268%" height="15" fill="rgb(234,108,31)" fg:x="21172" fg:w="23"/><text x="24.9787%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="24.7126%" y="165" width="0.0268%" height="15" fill="rgb(207,17,53)" fg:x="21195" fg:w="23"/><text x="25.0056%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.22%)</title><rect x="24.8653%" y="165" width="0.2239%" height="15" fill="rgb(234,91,40)" fg:x="21326" fg:w="192"/><text x="25.1583%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.22%)</title><rect x="25.0892%" y="165" width="0.2239%" height="15" fill="rgb(245,90,10)" fg:x="21518" fg:w="192"/><text x="25.3822%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.4390%" y="165" width="0.0268%" height="15" fill="rgb(249,105,0)" fg:x="21818" fg:w="23"/><text x="25.7320%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.4658%" y="165" width="0.0268%" height="15" fill="rgb(211,107,47)" fg:x="21841" fg:w="23"/><text x="25.7588%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="25.6185%" y="165" width="0.2612%" height="15" fill="rgb(216,0,54)" fg:x="21972" fg:w="224"/><text x="25.9115%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="25.8797%" y="165" width="0.2612%" height="15" fill="rgb(217,74,0)" fg:x="22196" fg:w="224"/><text x="26.1727%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.2668%" y="165" width="0.0268%" height="15" fill="rgb(231,55,14)" fg:x="22528" fg:w="23"/><text x="26.5598%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.2936%" y="165" width="0.0268%" height="15" fill="rgb(241,179,37)" fg:x="22551" fg:w="23"/><text x="26.5866%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.4464%" y="165" width="0.0268%" height="15" fill="rgb(231,160,20)" fg:x="22682" fg:w="23"/><text x="26.7393%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.4732%" y="165" width="0.0268%" height="15" fill="rgb(224,15,51)" fg:x="22705" fg:w="23"/><text x="26.7662%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.6259%" y="165" width="0.0268%" height="15" fill="rgb(238,58,2)" fg:x="22836" fg:w="23"/><text x="26.9189%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.6528%" y="165" width="0.0268%" height="15" fill="rgb(254,169,43)" fg:x="22859" fg:w="23"/><text x="26.9457%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.8055%" y="165" width="0.0268%" height="15" fill="rgb(228,96,52)" fg:x="22990" fg:w="23"/><text x="27.0985%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.8323%" y="165" width="0.0268%" height="15" fill="rgb(229,219,13)" fg:x="23013" fg:w="23"/><text x="27.1253%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.9851%" y="165" width="0.0268%" height="15" fill="rgb(227,17,21)" fg:x="23144" fg:w="23"/><text x="27.2780%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.0119%" y="165" width="0.0268%" height="15" fill="rgb(209,217,43)" fg:x="23167" fg:w="23"/><text x="27.3048%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.1646%" y="165" width="0.0268%" height="15" fill="rgb(242,126,15)" fg:x="23298" fg:w="23"/><text x="27.4576%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.1914%" y="165" width="0.0268%" height="15" fill="rgb(219,194,13)" fg:x="23321" fg:w="23"/><text x="27.4844%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.3442%" y="165" width="0.0268%" height="15" fill="rgb(210,115,38)" fg:x="23452" fg:w="23"/><text x="27.6371%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.3710%" y="165" width="0.0268%" height="15" fill="rgb(237,50,49)" fg:x="23475" fg:w="23"/><text x="27.6640%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.3978%" y="149" width="0.0268%" height="15" fill="rgb(219,52,52)" fg:x="23498" fg:w="23"/><text x="27.6908%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.21%)</title><rect x="27.4246%" y="149" width="0.2145%" height="15" fill="rgb(235,61,51)" fg:x="23521" fg:w="184"/><text x="27.7176%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.6392%" y="149" width="0.0268%" height="15" fill="rgb(206,36,34)" fg:x="23705" fg:w="23"/><text x="27.9321%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.21%)</title><rect x="27.6660%" y="149" width="0.2145%" height="15" fill="rgb(246,37,40)" fg:x="23728" fg:w="184"/><text x="27.9589%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.8805%" y="149" width="0.0268%" height="15" fill="rgb(242,11,32)" fg:x="23912" fg:w="23"/><text x="28.1735%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.10%)</title><rect x="27.9073%" y="149" width="0.0968%" height="15" fill="rgb(240,65,4)" fg:x="23935" fg:w="83"/><text x="28.2003%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (731 instructions, 0.85%)</title><rect x="27.3978%" y="165" width="0.8523%" height="15" fill="rgb(245,43,4)" fg:x="23498" fg:w="731"/><text x="27.6908%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="28.2501%" y="149" width="0.0268%" height="15" fill="rgb(232,28,48)" fg:x="24229" fg:w="23"/><text x="28.5431%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.21%)</title><rect x="28.2769%" y="149" width="0.2145%" height="15" fill="rgb(239,150,38)" fg:x="24252" fg:w="184"/><text x="28.5699%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="28.4915%" y="149" width="0.0268%" height="15" fill="rgb(230,146,26)" fg:x="24436" fg:w="23"/><text x="28.7844%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.21%)</title><rect x="28.5183%" y="149" width="0.2145%" height="15" fill="rgb(229,41,16)" fg:x="24459" fg:w="184"/><text x="28.8113%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="28.7328%" y="149" width="0.0268%" height="15" fill="rgb(209,99,50)" fg:x="24643" fg:w="23"/><text x="29.0258%" y="159.50"></text></g><g><title>memcpy (136 instructions, 0.16%)</title><rect x="28.7596%" y="149" width="0.1586%" height="15" fill="rgb(245,144,21)" fg:x="24666" fg:w="136"/><text x="29.0526%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.03%)</title><rect x="28.9182%" y="133" width="0.0268%" height="15" fill="rgb(233,106,6)" fg:x="24802" fg:w="23"/><text x="29.2112%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.08%)</title><rect x="28.9450%" y="133" width="0.0793%" height="15" fill="rgb(229,35,52)" fg:x="24825" fg:w="68"/><text x="29.2380%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (187 instructions, 0.22%)</title><rect x="28.9182%" y="149" width="0.2180%" height="15" fill="rgb(215,94,6)" fg:x="24802" fg:w="187"/><text x="29.2112%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (1,077 instructions, 1.26%)</title><rect x="28.2501%" y="165" width="1.2557%" height="15" fill="rgb(222,188,35)" fg:x="24229" fg:w="1077"/><text x="28.5431%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="29.8417%" y="165" width="0.0268%" height="15" fill="rgb(254,150,19)" fg:x="25594" fg:w="23"/><text x="30.1346%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="29.8685%" y="165" width="0.0268%" height="15" fill="rgb(226,5,2)" fg:x="25617" fg:w="23"/><text x="30.1614%" y="175.50"></text></g><g><title>memmove (288 instructions, 0.34%)</title><rect x="30.0212%" y="165" width="0.3358%" height="15" fill="rgb(209,71,49)" fg:x="25748" fg:w="288"/><text x="30.3142%" y="175.50"></text></g><g><title>memmove (288 instructions, 0.34%)</title><rect x="30.3570%" y="165" width="0.3358%" height="15" fill="rgb(220,195,34)" fg:x="26036" fg:w="288"/><text x="30.6500%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="30.8187%" y="165" width="0.0268%" height="15" fill="rgb(247,179,42)" fg:x="26432" fg:w="23"/><text x="31.1117%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="30.8456%" y="165" width="0.0268%" height="15" fill="rgb(223,46,42)" fg:x="26455" fg:w="23"/><text x="31.1385%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="30.9983%" y="165" width="0.1866%" height="15" fill="rgb(254,161,9)" fg:x="26586" fg:w="160"/><text x="31.2913%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="31.1849%" y="165" width="0.1866%" height="15" fill="rgb(225,90,25)" fg:x="26746" fg:w="160"/><text x="31.4778%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.22%)</title><rect x="31.3714%" y="149" width="0.2239%" height="15" fill="rgb(238,161,28)" fg:x="26906" fg:w="192"/><text x="31.6644%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.21%)</title><rect x="31.5953%" y="149" width="0.2145%" height="15" fill="rgb(253,177,20)" fg:x="27098" fg:w="184"/><text x="31.8882%" y="159.50"></text></g><g><title>memmove (192 instructions, 0.22%)</title><rect x="31.8098%" y="149" width="0.2239%" height="15" fill="rgb(230,223,15)" fg:x="27282" fg:w="192"/><text x="32.1028%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.21%)</title><rect x="32.0337%" y="149" width="0.2145%" height="15" fill="rgb(214,198,33)" fg:x="27474" fg:w="184"/><text x="32.3266%" y="159.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="32.2482%" y="149" width="0.1492%" height="15" fill="rgb(227,165,8)" fg:x="27658" fg:w="128"/><text x="32.5412%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.10%)</title><rect x="32.3975%" y="149" width="0.0968%" height="15" fill="rgb(207,188,4)" fg:x="27786" fg:w="83"/><text x="32.6904%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,253 instructions, 1.46%)</title><rect x="31.3714%" y="165" width="1.4610%" height="15" fill="rgb(226,37,8)" fg:x="26906" fg:w="1253"/><text x="31.6644%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.0725%" y="165" width="0.0268%" height="15" fill="rgb(239,120,25)" fg:x="28365" fg:w="23"/><text x="33.3655%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.0994%" y="165" width="0.0268%" height="15" fill="rgb(232,147,7)" fg:x="28388" fg:w="23"/><text x="33.3923%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.2521%" y="165" width="0.0268%" height="15" fill="rgb(213,185,36)" fg:x="28519" fg:w="23"/><text x="33.5451%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.2789%" y="165" width="0.0268%" height="15" fill="rgb(243,25,6)" fg:x="28542" fg:w="23"/><text x="33.5719%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="33.4317%" y="165" width="0.2612%" height="15" fill="rgb(236,149,49)" fg:x="28673" fg:w="224"/><text x="33.7246%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="33.6928%" y="165" width="0.2612%" height="15" fill="rgb(248,140,8)" fg:x="28897" fg:w="224"/><text x="33.9858%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="34.0799%" y="165" width="0.0268%" height="15" fill="rgb(223,133,15)" fg:x="29229" fg:w="23"/><text x="34.3729%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="34.1068%" y="165" width="0.0268%" height="15" fill="rgb(228,181,22)" fg:x="29252" fg:w="23"/><text x="34.3997%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="34.2595%" y="165" width="0.0268%" height="15" fill="rgb(210,196,25)" fg:x="29383" fg:w="23"/><text x="34.5525%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="34.2863%" y="165" width="0.0268%" height="15" fill="rgb(232,121,14)" fg:x="29406" fg:w="23"/><text x="34.5793%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="34.4391%" y="165" width="0.2612%" height="15" fill="rgb(208,15,7)" fg:x="29537" fg:w="224"/><text x="34.7320%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="34.7002%" y="165" width="0.2612%" height="15" fill="rgb(223,8,11)" fg:x="29761" fg:w="224"/><text x="34.9932%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="35.0873%" y="165" width="0.0268%" height="15" fill="rgb(232,81,44)" fg:x="30093" fg:w="23"/><text x="35.3803%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="35.1141%" y="165" width="0.0268%" height="15" fill="rgb(239,158,14)" fg:x="30116" fg:w="23"/><text x="35.4071%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.22%)</title><rect x="35.2669%" y="165" width="0.2239%" height="15" fill="rgb(254,211,54)" fg:x="30247" fg:w="192"/><text x="35.5599%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.22%)</title><rect x="35.4908%" y="165" width="0.2239%" height="15" fill="rgb(206,0,21)" fg:x="30439" fg:w="192"/><text x="35.7837%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="35.8405%" y="165" width="0.2985%" height="15" fill="rgb(231,216,7)" fg:x="30739" fg:w="256"/><text x="36.1335%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="36.1390%" y="165" width="0.2985%" height="15" fill="rgb(208,214,11)" fg:x="30995" fg:w="256"/><text x="36.4320%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.22%)</title><rect x="36.5634%" y="165" width="0.2239%" height="15" fill="rgb(220,177,33)" fg:x="31359" fg:w="192"/><text x="36.8564%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.22%)</title><rect x="36.7873%" y="165" width="0.2239%" height="15" fill="rgb(218,45,25)" fg:x="31551" fg:w="192"/><text x="37.0803%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="37.1371%" y="165" width="0.0268%" height="15" fill="rgb(206,1,18)" fg:x="31851" fg:w="23"/><text x="37.4301%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="37.1639%" y="165" width="0.0268%" height="15" fill="rgb(218,78,3)" fg:x="31874" fg:w="23"/><text x="37.4569%" y="175.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="37.1907%" y="149" width="0.1492%" height="15" fill="rgb(208,133,45)" fg:x="31897" fg:w="128"/><text x="37.4837%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.21%)</title><rect x="37.3400%" y="149" width="0.2145%" height="15" fill="rgb(236,105,13)" fg:x="32025" fg:w="184"/><text x="37.6329%" y="159.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="37.5545%" y="149" width="0.1492%" height="15" fill="rgb(212,48,12)" fg:x="32209" fg:w="128"/><text x="37.8475%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.21%)</title><rect x="37.7038%" y="149" width="0.2145%" height="15" fill="rgb(249,101,2)" fg:x="32337" fg:w="184"/><text x="37.9967%" y="159.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="37.9183%" y="149" width="0.1831%" height="15" fill="rgb(217,228,45)" fg:x="32521" fg:w="157"/><text x="38.2113%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.10%)</title><rect x="38.1013%" y="149" width="0.0968%" height="15" fill="rgb(236,8,22)" fg:x="32678" fg:w="83"/><text x="38.3943%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,142 instructions, 1.33%)</title><rect x="37.1907%" y="165" width="1.3315%" height="15" fill="rgb(219,174,11)" fg:x="31897" fg:w="1142"/><text x="37.4837%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.7624%" y="165" width="0.0268%" height="15" fill="rgb(250,192,24)" fg:x="33245" fg:w="23"/><text x="39.0554%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.7893%" y="165" width="0.0268%" height="15" fill="rgb(250,220,14)" fg:x="33268" fg:w="23"/><text x="39.0822%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.9420%" y="165" width="0.0268%" height="15" fill="rgb(231,43,24)" fg:x="33399" fg:w="23"/><text x="39.2350%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.9688%" y="165" width="0.0268%" height="15" fill="rgb(231,163,41)" fg:x="33422" fg:w="23"/><text x="39.2618%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="39.1216%" y="165" width="0.1831%" height="15" fill="rgb(242,134,34)" fg:x="33553" fg:w="157"/><text x="39.4145%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="39.3046%" y="165" width="0.1831%" height="15" fill="rgb(249,148,35)" fg:x="33710" fg:w="157"/><text x="39.5976%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.6136%" y="165" width="0.0268%" height="15" fill="rgb(238,35,5)" fg:x="33975" fg:w="23"/><text x="39.9066%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.6404%" y="165" width="0.0268%" height="15" fill="rgb(250,70,23)" fg:x="33998" fg:w="23"/><text x="39.9334%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.7932%" y="165" width="0.0268%" height="15" fill="rgb(251,194,36)" fg:x="34129" fg:w="23"/><text x="40.0861%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.8200%" y="165" width="0.0268%" height="15" fill="rgb(213,209,33)" fg:x="34152" fg:w="23"/><text x="40.1129%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="39.9727%" y="165" width="0.2612%" height="15" fill="rgb(216,224,17)" fg:x="34283" fg:w="224"/><text x="40.2657%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="40.2339%" y="165" width="0.2612%" height="15" fill="rgb(231,119,0)" fg:x="34507" fg:w="224"/><text x="40.5269%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="40.6210%" y="165" width="0.0268%" height="15" fill="rgb(238,147,28)" fg:x="34839" fg:w="23"/><text x="40.9140%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="40.6478%" y="165" width="0.0268%" height="15" fill="rgb(252,61,28)" fg:x="34862" fg:w="23"/><text x="40.9408%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="40.8006%" y="165" width="0.1831%" height="15" fill="rgb(214,63,12)" fg:x="34993" fg:w="157"/><text x="41.0935%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="40.9836%" y="165" width="0.1831%" height="15" fill="rgb(253,205,8)" fg:x="35150" fg:w="157"/><text x="41.2766%" y="175.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (21,543 instructions, 25.12%)</title><rect x="16.1742%" y="181" width="25.1183%" height="15" fill="rgb(210,112,16)" fg:x="13872" fg:w="21543"/><text x="16.4672%" y="191.50">alloc::collections::btree::remove:..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="41.3007%" y="133" width="0.0315%" height="15" fill="rgb(242,164,39)" fg:x="35422" fg:w="27"/><text x="41.5937%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (144 instructions, 0.17%)</title><rect x="41.3007%" y="149" width="0.1679%" height="15" fill="rgb(210,223,22)" fg:x="35422" fg:w="144"/><text x="41.5937%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (188 instructions, 0.22%)</title><rect x="41.3007%" y="165" width="0.2192%" height="15" fill="rgb(207,2,13)" fg:x="35422" fg:w="188"/><text x="41.5937%" y="175.50"></text></g><g><title>memset (152 instructions, 0.18%)</title><rect x="41.5199%" y="165" width="0.1772%" height="15" fill="rgb(216,196,12)" fg:x="35610" fg:w="152"/><text x="41.8129%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (521 instructions, 0.61%)</title><rect x="41.2926%" y="181" width="0.6075%" height="15" fill="rgb(241,20,6)" fg:x="35415" fg:w="521"/><text x="41.5856%" y="191.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 0.60%)</title><rect x="41.9001%" y="165" width="0.6040%" height="15" fill="rgb(231,106,23)" fg:x="35936" fg:w="518"/><text x="42.1930%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (116 instructions, 0.14%)</title><rect x="42.5040%" y="117" width="0.1353%" height="15" fill="rgb(225,171,24)" fg:x="36454" fg:w="116"/><text x="42.7970%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (164 instructions, 0.19%)</title><rect x="42.5040%" y="133" width="0.1912%" height="15" fill="rgb(217,191,46)" fg:x="36454" fg:w="164"/><text x="42.7970%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (246 instructions, 0.29%)</title><rect x="42.5040%" y="149" width="0.2868%" height="15" fill="rgb(222,195,30)" fg:x="36454" fg:w="246"/><text x="42.7970%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="42.7908%" y="149" width="0.0175%" height="15" fill="rgb(222,83,19)" fg:x="36700" fg:w="15"/><text x="43.0838%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="42.8083%" y="149" width="0.0175%" height="15" fill="rgb(228,59,20)" fg:x="36715" fg:w="15"/><text x="43.1013%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (464 instructions, 0.54%)</title><rect x="42.5040%" y="165" width="0.5410%" height="15" fill="rgb(222,138,5)" fg:x="36454" fg:w="464"/><text x="42.7970%" y="175.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 0.60%)</title><rect x="43.0450%" y="165" width="0.6016%" height="15" fill="rgb(233,10,37)" fg:x="36918" fg:w="516"/><text x="43.3380%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,602 instructions, 1.87%)</title><rect x="41.9001%" y="181" width="1.8679%" height="15" fill="rgb(207,165,28)" fg:x="35936" fg:w="1602"/><text x="42.1930%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="43.7761%" y="165" width="0.0700%" height="15" fill="rgb(225,112,7)" fg:x="37545" fg:w="60"/><text x="44.0691%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::ser::IDLBuilder&gt; (131 instructions, 0.15%)</title><rect x="43.7679%" y="181" width="0.1527%" height="15" fill="rgb(222,202,32)" fg:x="37538" fg:w="131"/><text x="44.0609%" y="191.50"></text></g><g><title>btreemap::__canister_method_batch_remove::{{closure}} (85,215 instructions, 99.36%)</title><rect x="0.2192%" y="197" width="99.3576%" height="15" fill="rgb(218,190,52)" fg:x="188" fg:w="85215"/><text x="0.5122%" y="207.50">btreemap::__canister_method_batch_remove::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.02%)</title><rect x="99.5768%" y="197" width="0.0163%" height="15" fill="rgb(211,12,39)" fg:x="85403" fg:w="14"/><text x="99.8697%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="99.6980%" y="181" width="0.0315%" height="15" fill="rgb(214,54,17)" fg:x="85507" fg:w="27"/><text x="99.9910%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 0.24%)</title><rect x="99.5942%" y="197" width="0.2379%" height="15" fill="rgb(207,22,26)" fg:x="85418" fg:w="204"/><text x="99.8872%" y="207.50"></text></g><g><title>all (85,766 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(244,170,7)" fg:x="0" fg:w="85766"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (85,766 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,188,3)" fg:x="0" fg:w="85766"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>