<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="60886"><g><title>ic_cdk::setup (19 instructions, 0.03%)</title><rect x="0.0000%" y="197" width="0.0312%" height="15" fill="rgb(220,140,11)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.12%)</title><rect x="0.0312%" y="197" width="0.1248%" height="15" fill="rgb(252,51,49)" fg:x="19" fg:w="76"/><text x="0.3242%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.12%)</title><rect x="0.1560%" y="197" width="0.1199%" height="15" fill="rgb(211,96,28)" fg:x="95" fg:w="73"/><text x="0.4490%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (117 instructions, 0.19%)</title><rect x="0.2759%" y="165" width="0.1922%" height="15" fill="rgb(228,75,15)" fg:x="168" fg:w="117"/><text x="0.5689%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.12%)</title><rect x="0.4681%" y="149" width="0.1166%" height="15" fill="rgb(229,210,36)" fg:x="285" fg:w="71"/><text x="0.7611%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.66%)</title><rect x="0.5847%" y="149" width="0.6570%" height="15" fill="rgb(228,160,48)" fg:x="356" fg:w="400"/><text x="0.8777%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.14%)</title><rect x="1.2417%" y="149" width="0.1396%" height="15" fill="rgb(229,121,21)" fg:x="756" fg:w="85"/><text x="1.5346%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.09%)</title><rect x="1.3813%" y="149" width="0.0920%" height="15" fill="rgb(247,154,45)" fg:x="841" fg:w="56"/><text x="1.6742%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.09%)</title><rect x="1.4732%" y="149" width="0.0920%" height="15" fill="rgb(222,119,22)" fg:x="897" fg:w="56"/><text x="1.7662%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.09%)</title><rect x="1.5652%" y="149" width="0.0920%" height="15" fill="rgb(212,22,32)" fg:x="953" fg:w="56"/><text x="1.8582%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.09%)</title><rect x="1.6572%" y="149" width="0.0920%" height="15" fill="rgb(229,10,13)" fg:x="1009" fg:w="56"/><text x="1.9502%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.12%)</title><rect x="1.7492%" y="149" width="0.1166%" height="15" fill="rgb(221,55,48)" fg:x="1065" fg:w="71"/><text x="2.0421%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (69 instructions, 0.11%)</title><rect x="1.8658%" y="149" width="0.1133%" height="15" fill="rgb(214,88,22)" fg:x="1136" fg:w="69"/><text x="2.1588%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.66%)</title><rect x="1.9791%" y="149" width="0.6570%" height="15" fill="rgb(219,54,42)" fg:x="1205" fg:w="400"/><text x="2.2721%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="2.6361%" y="149" width="0.0263%" height="15" fill="rgb(222,146,25)" fg:x="1605" fg:w="16"/><text x="2.9290%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.12%)</title><rect x="2.6624%" y="133" width="0.1248%" height="15" fill="rgb(233,198,11)" fg:x="1621" fg:w="76"/><text x="2.9553%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.10%)</title><rect x="2.7872%" y="101" width="0.0985%" height="15" fill="rgb(215,46,8)" fg:x="1697" fg:w="60"/><text x="3.0801%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.14%)</title><rect x="2.7872%" y="117" width="0.1396%" height="15" fill="rgb(245,145,49)" fg:x="1697" fg:w="85"/><text x="3.0801%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="2.9268%" y="69" width="0.0148%" height="15" fill="rgb(238,148,20)" fg:x="1782" fg:w="9"/><text x="3.2197%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.05%)</title><rect x="2.9416%" y="53" width="0.0493%" height="15" fill="rgb(245,46,41)" fg:x="1791" fg:w="30"/><text x="3.2345%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.09%)</title><rect x="2.9416%" y="69" width="0.0903%" height="15" fill="rgb(228,15,39)" fg:x="1791" fg:w="55"/><text x="3.2345%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.19%)</title><rect x="2.9268%" y="85" width="0.1938%" height="15" fill="rgb(221,195,3)" fg:x="1782" fg:w="118"/><text x="3.2197%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.28%)</title><rect x="2.9268%" y="101" width="0.2809%" height="15" fill="rgb(235,154,52)" fg:x="1782" fg:w="171"/><text x="3.2197%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.29%)</title><rect x="2.9268%" y="117" width="0.2891%" height="15" fill="rgb(221,109,12)" fg:x="1782" fg:w="176"/><text x="3.2197%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.61%)</title><rect x="2.7872%" y="133" width="0.6110%" height="15" fill="rgb(207,173,14)" fg:x="1697" fg:w="372"/><text x="3.0801%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 0.98%)</title><rect x="2.6624%" y="149" width="0.9756%" height="15" fill="rgb(227,85,28)" fg:x="1621" fg:w="594"/><text x="2.9553%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.14%)</title><rect x="3.6379%" y="149" width="0.1396%" height="15" fill="rgb(253,9,48)" fg:x="2215" fg:w="85"/><text x="3.9309%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.09%)</title><rect x="3.7776%" y="149" width="0.0903%" height="15" fill="rgb(221,208,26)" fg:x="2300" fg:w="55"/><text x="4.0705%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.11%)</title><rect x="3.8679%" y="149" width="0.1084%" height="15" fill="rgb(232,170,20)" fg:x="2355" fg:w="66"/><text x="4.1609%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (69 instructions, 0.11%)</title><rect x="3.9763%" y="149" width="0.1133%" height="15" fill="rgb(251,95,49)" fg:x="2421" fg:w="69"/><text x="4.2693%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 0.66%)</title><rect x="4.0896%" y="133" width="0.6570%" height="15" fill="rgb(210,221,10)" fg:x="2490" fg:w="400"/><text x="4.3826%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="4.7466%" y="133" width="0.0263%" height="15" fill="rgb(208,84,32)" fg:x="2890" fg:w="16"/><text x="5.0395%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.12%)</title><rect x="4.7729%" y="117" width="0.1248%" height="15" fill="rgb(205,81,43)" fg:x="2906" fg:w="76"/><text x="5.0658%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.10%)</title><rect x="4.8977%" y="85" width="0.0985%" height="15" fill="rgb(224,2,44)" fg:x="2982" fg:w="60"/><text x="5.1906%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.14%)</title><rect x="4.8977%" y="101" width="0.1396%" height="15" fill="rgb(254,118,7)" fg:x="2982" fg:w="85"/><text x="5.1906%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="5.0373%" y="53" width="0.0148%" height="15" fill="rgb(210,201,4)" fg:x="3067" fg:w="9"/><text x="5.3303%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.05%)</title><rect x="5.0521%" y="37" width="0.0493%" height="15" fill="rgb(240,4,17)" fg:x="3076" fg:w="30"/><text x="5.3450%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.09%)</title><rect x="5.0521%" y="53" width="0.0903%" height="15" fill="rgb(250,123,25)" fg:x="3076" fg:w="55"/><text x="5.3450%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.19%)</title><rect x="5.0373%" y="69" width="0.1938%" height="15" fill="rgb(229,156,15)" fg:x="3067" fg:w="118"/><text x="5.3303%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.28%)</title><rect x="5.0373%" y="85" width="0.2809%" height="15" fill="rgb(246,64,33)" fg:x="3067" fg:w="171"/><text x="5.3303%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.29%)</title><rect x="5.0373%" y="101" width="0.2891%" height="15" fill="rgb(215,7,52)" fg:x="3067" fg:w="176"/><text x="5.3303%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.61%)</title><rect x="4.8977%" y="117" width="0.6110%" height="15" fill="rgb(225,161,42)" fg:x="2982" fg:w="372"/><text x="5.1906%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 0.98%)</title><rect x="4.7729%" y="133" width="0.9756%" height="15" fill="rgb(248,93,28)" fg:x="2906" fg:w="594"/><text x="5.0658%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.14%)</title><rect x="5.7484%" y="133" width="0.1396%" height="15" fill="rgb(234,136,14)" fg:x="3500" fg:w="85"/><text x="6.0414%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.09%)</title><rect x="5.8881%" y="133" width="0.0903%" height="15" fill="rgb(209,163,30)" fg:x="3585" fg:w="55"/><text x="6.1810%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.12%)</title><rect x="5.9784%" y="117" width="0.1166%" height="15" fill="rgb(232,187,11)" fg:x="3640" fg:w="71"/><text x="6.2714%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.16%)</title><rect x="6.0950%" y="117" width="0.1560%" height="15" fill="rgb(253,175,28)" fg:x="3711" fg:w="95"/><text x="6.3880%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.11%)</title><rect x="6.2510%" y="117" width="0.1084%" height="15" fill="rgb(224,155,6)" fg:x="3806" fg:w="66"/><text x="6.5440%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 0.46%)</title><rect x="5.9784%" y="133" width="0.4648%" height="15" fill="rgb(240,0,20)" fg:x="3640" fg:w="283"/><text x="6.2714%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="6.4432%" y="133" width="0.1347%" height="15" fill="rgb(226,117,13)" fg:x="3923" fg:w="82"/><text x="6.7362%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,684 instructions, 2.77%)</title><rect x="4.0896%" y="149" width="2.7658%" height="15" fill="rgb(249,61,14)" fg:x="2490" fg:w="1684"/><text x="4.3826%" y="159.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.11%)</title><rect x="6.8554%" y="149" width="0.1084%" height="15" fill="rgb(244,201,17)" fg:x="4174" fg:w="66"/><text x="7.1484%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="6.9638%" y="149" width="0.0214%" height="15" fill="rgb(250,226,39)" fg:x="4240" fg:w="13"/><text x="7.2568%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="6.9852%" y="149" width="0.0214%" height="15" fill="rgb(242,28,40)" fg:x="4253" fg:w="13"/><text x="7.2782%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.01%)</title><rect x="7.0065%" y="149" width="0.0115%" height="15" fill="rgb(226,158,35)" fg:x="4266" fg:w="7"/><text x="7.2995%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.02%)</title><rect x="7.0180%" y="149" width="0.0197%" height="15" fill="rgb(234,189,26)" fg:x="4273" fg:w="12"/><text x="7.3110%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="7.0377%" y="133" width="0.1347%" height="15" fill="rgb(235,33,42)" fg:x="4285" fg:w="82"/><text x="7.3307%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (165 instructions, 0.27%)</title><rect x="7.0377%" y="149" width="0.2710%" height="15" fill="rgb(206,69,48)" fg:x="4285" fg:w="165"/><text x="7.3307%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.12%)</title><rect x="7.3087%" y="117" width="0.1199%" height="15" fill="rgb(231,163,52)" fg:x="4450" fg:w="73"/><text x="7.6017%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (108 instructions, 0.18%)</title><rect x="7.3087%" y="133" width="0.1774%" height="15" fill="rgb(232,106,5)" fg:x="4450" fg:w="108"/><text x="7.6017%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (180 instructions, 0.30%)</title><rect x="7.3087%" y="149" width="0.2956%" height="15" fill="rgb(236,159,49)" fg:x="4450" fg:w="180"/><text x="7.6017%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="7.6044%" y="149" width="0.1347%" height="15" fill="rgb(247,81,7)" fg:x="4630" fg:w="82"/><text x="7.8973%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.13%)</title><rect x="7.7391%" y="149" width="0.1330%" height="15" fill="rgb(244,66,48)" fg:x="4712" fg:w="81"/><text x="8.0320%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="7.8721%" y="149" width="0.1347%" height="15" fill="rgb(224,16,36)" fg:x="4793" fg:w="82"/><text x="8.1651%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="8.0068%" y="149" width="0.1347%" height="15" fill="rgb(242,11,54)" fg:x="4875" fg:w="82"/><text x="8.2997%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.13%)</title><rect x="8.1447%" y="149" width="0.1330%" height="15" fill="rgb(253,54,45)" fg:x="4959" fg:w="81"/><text x="8.4377%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.63%)</title><rect x="8.2778%" y="149" width="0.6258%" height="15" fill="rgb(229,18,19)" fg:x="5040" fg:w="381"/><text x="8.5707%" y="159.50"></text></g><g><title>memcpy (381 instructions, 0.63%)</title><rect x="8.9035%" y="149" width="0.6258%" height="15" fill="rgb(222,148,2)" fg:x="5421" fg:w="381"/><text x="9.1965%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,420 instructions, 10.54%)</title><rect x="0.4681%" y="165" width="10.5443%" height="15" fill="rgb(211,154,26)" fg:x="285" fg:w="6420"/><text x="0.7611%" y="175.50">candid::de::I..</text></g><g><title>memcpy (336 instructions, 0.55%)</title><rect x="11.0124%" y="165" width="0.5519%" height="15" fill="rgb(221,177,39)" fg:x="6705" fg:w="336"/><text x="11.3054%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.06%)</title><rect x="11.5642%" y="149" width="0.0641%" height="15" fill="rgb(219,84,7)" fg:x="7041" fg:w="39"/><text x="11.8572%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="11.6283%" y="149" width="0.1347%" height="15" fill="rgb(250,30,20)" fg:x="7080" fg:w="82"/><text x="11.9213%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="11.7712%" y="117" width="0.0870%" height="15" fill="rgb(217,97,36)" fg:x="7167" fg:w="53"/><text x="12.0641%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.15%)</title><rect x="11.8582%" y="117" width="0.1462%" height="15" fill="rgb(235,182,12)" fg:x="7220" fg:w="89"/><text x="12.1512%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.26%)</title><rect x="12.0044%" y="117" width="0.2644%" height="15" fill="rgb(219,20,53)" fg:x="7309" fg:w="161"/><text x="12.2974%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.89%)</title><rect x="11.7712%" y="133" width="0.8869%" height="15" fill="rgb(244,0,51)" fg:x="7167" fg:w="540"/><text x="12.0641%" y="143.50"></text></g><g><title>candid::types::internal::env_add (759 instructions, 1.25%)</title><rect x="11.7630%" y="149" width="1.2466%" height="15" fill="rgb(211,12,20)" fg:x="7162" fg:w="759"/><text x="12.0559%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.13%)</title><rect x="13.0096%" y="149" width="0.1347%" height="15" fill="rgb(249,95,0)" fg:x="7921" fg:w="82"/><text x="13.3025%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="13.1524%" y="117" width="0.0870%" height="15" fill="rgb(228,6,33)" fg:x="8008" fg:w="53"/><text x="13.4454%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.15%)</title><rect x="13.2395%" y="117" width="0.1462%" height="15" fill="rgb(217,62,22)" fg:x="8061" fg:w="89"/><text x="13.5325%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.26%)</title><rect x="13.3857%" y="117" width="0.2644%" height="15" fill="rgb(213,60,33)" fg:x="8150" fg:w="161"/><text x="13.6786%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.89%)</title><rect x="13.1524%" y="133" width="0.8869%" height="15" fill="rgb(251,204,23)" fg:x="8008" fg:w="540"/><text x="13.4454%" y="143.50"></text></g><g><title>memcmp (68 instructions, 0.11%)</title><rect x="14.0394%" y="133" width="0.1117%" height="15" fill="rgb(243,97,47)" fg:x="8548" fg:w="68"/><text x="14.3323%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.13%)</title><rect x="14.1510%" y="117" width="0.1330%" height="15" fill="rgb(236,109,24)" fg:x="8616" fg:w="81"/><text x="14.4440%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (111 instructions, 0.18%)</title><rect x="14.1510%" y="133" width="0.1823%" height="15" fill="rgb(226,25,32)" fg:x="8616" fg:w="111"/><text x="14.4440%" y="143.50"></text></g><g><title>candid::types::internal::env_add (893 instructions, 1.47%)</title><rect x="13.1442%" y="149" width="1.4667%" height="15" fill="rgb(253,77,43)" fg:x="8003" fg:w="893"/><text x="13.4372%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="14.6109%" y="101" width="0.0870%" height="15" fill="rgb(247,221,34)" fg:x="8896" fg:w="53"/><text x="14.9039%" y="111.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.13%)</title><rect x="14.6109%" y="117" width="0.1298%" height="15" fill="rgb(228,22,2)" fg:x="8896" fg:w="79"/><text x="14.9039%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.48%)</title><rect x="14.6109%" y="133" width="0.4796%" height="15" fill="rgb(238,127,46)" fg:x="8896" fg:w="292"/><text x="14.9039%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.405 (15 instructions, 0.02%)</title><rect x="15.0905%" y="133" width="0.0246%" height="15" fill="rgb(244,134,50)" fg:x="9188" fg:w="15"/><text x="15.3835%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="15.1151%" y="133" width="0.0181%" height="15" fill="rgb(220,108,3)" fg:x="9203" fg:w="11"/><text x="15.4081%" y="143.50"></text></g><g><title>candid::types::internal::env_id (479 instructions, 0.79%)</title><rect x="14.6109%" y="149" width="0.7867%" height="15" fill="rgb(235,70,38)" fg:x="8896" fg:w="479"/><text x="14.9039%" y="159.50"></text></g><g><title>candid::types::CandidType::ty (2,441 instructions, 4.01%)</title><rect x="11.5642%" y="165" width="4.0091%" height="15" fill="rgb(216,29,16)" fg:x="7041" fg:w="2441"/><text x="11.8572%" y="175.50">can..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.05%)</title><rect x="15.5734%" y="149" width="0.0542%" height="15" fill="rgb(222,114,12)" fg:x="9482" fg:w="33"/><text x="15.8663%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (124 instructions, 0.20%)</title><rect x="15.6276%" y="133" width="0.2037%" height="15" fill="rgb(243,120,53)" fg:x="9515" fg:w="124"/><text x="15.9205%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (124 instructions, 0.20%)</title><rect x="15.8805%" y="133" width="0.2037%" height="15" fill="rgb(213,110,42)" fg:x="9669" fg:w="124"/><text x="16.1735%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (308 instructions, 0.51%)</title><rect x="15.6276%" y="149" width="0.5059%" height="15" fill="rgb(223,209,51)" fg:x="9515" fg:w="308"/><text x="15.9205%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.234 (16 instructions, 0.03%)</title><rect x="16.1334%" y="133" width="0.0263%" height="15" fill="rgb(251,175,44)" fg:x="9823" fg:w="16"/><text x="16.4264%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.234 (16 instructions, 0.03%)</title><rect x="16.1597%" y="133" width="0.0263%" height="15" fill="rgb(246,131,41)" fg:x="9839" fg:w="16"/><text x="16.4527%" y="143.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (121 instructions, 0.20%)</title><rect x="16.1334%" y="149" width="0.1987%" height="15" fill="rgb(221,226,48)" fg:x="9823" fg:w="121"/><text x="16.4264%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="16.3322%" y="149" width="0.0181%" height="15" fill="rgb(245,173,4)" fg:x="9944" fg:w="11"/><text x="16.6251%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="16.3502%" y="149" width="0.0181%" height="15" fill="rgb(205,170,48)" fg:x="9955" fg:w="11"/><text x="16.6432%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="16.3683%" y="149" width="0.0181%" height="15" fill="rgb(249,34,4)" fg:x="9966" fg:w="11"/><text x="16.6613%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::deserialize_with_type (663 instructions, 1.09%)</title><rect x="15.5734%" y="165" width="1.0889%" height="15" fill="rgb(228,81,12)" fg:x="9482" fg:w="663"/><text x="15.8663%" y="175.50"></text></g><g><title>memcpy (411 instructions, 0.68%)</title><rect x="16.6623%" y="165" width="0.6750%" height="15" fill="rgb(224,151,35)" fg:x="10145" fg:w="411"/><text x="16.9553%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (124 instructions, 0.20%)</title><rect x="17.3455%" y="149" width="0.2037%" height="15" fill="rgb(234,106,35)" fg:x="10561" fg:w="124"/><text x="17.6385%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.10%)</title><rect x="17.5492%" y="117" width="0.1035%" height="15" fill="rgb(232,184,40)" fg:x="10685" fg:w="63"/><text x="17.8422%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (211 instructions, 0.35%)</title><rect x="17.5492%" y="133" width="0.3465%" height="15" fill="rgb(250,131,26)" fg:x="10685" fg:w="211"/><text x="17.8422%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (241 instructions, 0.40%)</title><rect x="17.5492%" y="149" width="0.3958%" height="15" fill="rgb(229,95,11)" fg:x="10685" fg:w="241"/><text x="17.8422%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="17.9450%" y="149" width="0.0181%" height="15" fill="rgb(254,224,49)" fg:x="10926" fg:w="11"/><text x="18.2380%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (448 instructions, 0.74%)</title><rect x="17.3373%" y="165" width="0.7358%" height="15" fill="rgb(207,224,24)" fg:x="10556" fg:w="448"/><text x="17.6303%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (124 instructions, 0.20%)</title><rect x="18.0731%" y="165" width="0.2037%" height="15" fill="rgb(243,49,27)" fg:x="11004" fg:w="124"/><text x="18.3661%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,117 instructions, 18.26%)</title><rect x="0.2759%" y="181" width="18.2587%" height="15" fill="rgb(246,183,53)" fg:x="168" fg:w="11117"/><text x="0.5689%" y="191.50">ic_cdk::api::call::arg_d..</text></g><g><title>btreemap::MAP::__getit (9 instructions, 0.01%)</title><rect x="18.5346%" y="181" width="0.0148%" height="15" fill="rgb(225,143,23)" fg:x="11285" fg:w="9"/><text x="18.8276%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (799 instructions, 1.31%)</title><rect x="18.5494%" y="181" width="1.3123%" height="15" fill="rgb(241,1,22)" fg:x="11294" fg:w="799"/><text x="18.8424%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (961 instructions, 1.58%)</title><rect x="19.8617%" y="181" width="1.5784%" height="15" fill="rgb(206,217,53)" fg:x="12093" fg:w="961"/><text x="20.1547%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (833 instructions, 1.37%)</title><rect x="21.4401%" y="181" width="1.3681%" height="15" fill="rgb(227,5,24)" fg:x="13054" fg:w="833"/><text x="21.7330%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (929 instructions, 1.53%)</title><rect x="22.8082%" y="181" width="1.5258%" height="15" fill="rgb(211,194,2)" fg:x="13887" fg:w="929"/><text x="23.1012%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,023 instructions, 1.68%)</title><rect x="24.3340%" y="181" width="1.6802%" height="15" fill="rgb(210,198,7)" fg:x="14816" fg:w="1023"/><text x="24.6270%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,247 instructions, 2.05%)</title><rect x="26.0142%" y="181" width="2.0481%" height="15" fill="rgb(231,73,9)" fg:x="15839" fg:w="1247"/><text x="26.3072%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,155 instructions, 1.90%)</title><rect x="28.0623%" y="181" width="1.8970%" height="15" fill="rgb(241,100,48)" fg:x="17086" fg:w="1155"/><text x="28.3552%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (671 instructions, 1.10%)</title><rect x="29.9593%" y="181" width="1.1021%" height="15" fill="rgb(239,45,14)" fg:x="18241" fg:w="671"/><text x="30.2522%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (929 instructions, 1.53%)</title><rect x="31.0613%" y="181" width="1.5258%" height="15" fill="rgb(243,99,39)" fg:x="18912" fg:w="929"/><text x="31.3543%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (639 instructions, 1.05%)</title><rect x="32.5871%" y="181" width="1.0495%" height="15" fill="rgb(227,180,36)" fg:x="19841" fg:w="639"/><text x="32.8801%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (767 instructions, 1.26%)</title><rect x="33.6366%" y="181" width="1.2597%" height="15" fill="rgb(232,6,21)" fg:x="20480" fg:w="767"/><text x="33.9296%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (833 instructions, 1.37%)</title><rect x="34.8964%" y="181" width="1.3681%" height="15" fill="rgb(243,124,17)" fg:x="21247" fg:w="833"/><text x="35.1893%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,055 instructions, 1.73%)</title><rect x="36.2645%" y="181" width="1.7327%" height="15" fill="rgb(212,140,12)" fg:x="22080" fg:w="1055"/><text x="36.5575%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (703 instructions, 1.15%)</title><rect x="37.9972%" y="181" width="1.1546%" height="15" fill="rgb(229,184,22)" fg:x="23135" fg:w="703"/><text x="38.2902%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (863 instructions, 1.42%)</title><rect x="39.1519%" y="181" width="1.4174%" height="15" fill="rgb(237,49,8)" fg:x="23838" fg:w="863"/><text x="39.4448%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (961 instructions, 1.58%)</title><rect x="40.5693%" y="181" width="1.5784%" height="15" fill="rgb(232,210,29)" fg:x="24701" fg:w="961"/><text x="40.8622%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (831 instructions, 1.36%)</title><rect x="42.1476%" y="181" width="1.3648%" height="15" fill="rgb(254,96,38)" fg:x="25662" fg:w="831"/><text x="42.4406%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (961 instructions, 1.58%)</title><rect x="43.5125%" y="181" width="1.5784%" height="15" fill="rgb(207,52,11)" fg:x="26493" fg:w="961"/><text x="43.8054%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,377 instructions, 2.26%)</title><rect x="45.0908%" y="181" width="2.2616%" height="15" fill="rgb(239,33,54)" fg:x="27454" fg:w="1377"/><text x="45.3838%" y="191.50">a..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (575 instructions, 0.94%)</title><rect x="47.3524%" y="181" width="0.9444%" height="15" fill="rgb(226,75,5)" fg:x="28831" fg:w="575"/><text x="47.6454%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,121 instructions, 1.84%)</title><rect x="48.2968%" y="181" width="1.8411%" height="15" fill="rgb(237,160,47)" fg:x="29406" fg:w="1121"/><text x="48.5898%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,055 instructions, 1.73%)</title><rect x="50.1380%" y="181" width="1.7327%" height="15" fill="rgb(206,213,51)" fg:x="30527" fg:w="1055"/><text x="50.4309%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (865 instructions, 1.42%)</title><rect x="51.8707%" y="181" width="1.4207%" height="15" fill="rgb(235,132,12)" fg:x="31582" fg:w="865"/><text x="52.1637%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,279 instructions, 2.10%)</title><rect x="53.2914%" y="181" width="2.1006%" height="15" fill="rgb(217,66,7)" fg:x="32447" fg:w="1279"/><text x="53.5844%" y="191.50">a..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (767 instructions, 1.26%)</title><rect x="55.3920%" y="181" width="1.2597%" height="15" fill="rgb(214,111,30)" fg:x="33726" fg:w="767"/><text x="55.6850%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,247 instructions, 2.05%)</title><rect x="56.6518%" y="181" width="2.0481%" height="15" fill="rgb(252,71,30)" fg:x="34493" fg:w="1247"/><text x="56.9447%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (897 instructions, 1.47%)</title><rect x="58.6999%" y="181" width="1.4732%" height="15" fill="rgb(222,68,20)" fg:x="35740" fg:w="897"/><text x="58.9928%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (895 instructions, 1.47%)</title><rect x="60.1731%" y="181" width="1.4700%" height="15" fill="rgb(244,142,29)" fg:x="36637" fg:w="895"/><text x="60.4661%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (863 instructions, 1.42%)</title><rect x="61.6431%" y="181" width="1.4174%" height="15" fill="rgb(207,196,5)" fg:x="37532" fg:w="863"/><text x="61.9360%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (863 instructions, 1.42%)</title><rect x="63.0605%" y="181" width="1.4174%" height="15" fill="rgb(217,154,11)" fg:x="38395" fg:w="863"/><text x="63.3534%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (991 instructions, 1.63%)</title><rect x="64.4779%" y="181" width="1.6276%" height="15" fill="rgb(235,51,29)" fg:x="39258" fg:w="991"/><text x="64.7708%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (671 instructions, 1.10%)</title><rect x="66.1055%" y="181" width="1.1021%" height="15" fill="rgb(235,120,37)" fg:x="40249" fg:w="671"/><text x="66.3985%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,023 instructions, 1.68%)</title><rect x="67.2076%" y="181" width="1.6802%" height="15" fill="rgb(251,66,38)" fg:x="40920" fg:w="1023"/><text x="67.5005%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (897 instructions, 1.47%)</title><rect x="68.8878%" y="181" width="1.4732%" height="15" fill="rgb(253,159,40)" fg:x="41943" fg:w="897"/><text x="69.1807%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (767 instructions, 1.26%)</title><rect x="70.3610%" y="181" width="1.2597%" height="15" fill="rgb(248,122,5)" fg:x="42840" fg:w="767"/><text x="70.6540%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (705 instructions, 1.16%)</title><rect x="71.6207%" y="181" width="1.1579%" height="15" fill="rgb(236,99,24)" fg:x="43607" fg:w="705"/><text x="71.9137%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (703 instructions, 1.15%)</title><rect x="72.7786%" y="181" width="1.1546%" height="15" fill="rgb(209,0,42)" fg:x="44312" fg:w="703"/><text x="73.0716%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,027 instructions, 1.69%)</title><rect x="73.9333%" y="181" width="1.6868%" height="15" fill="rgb(253,222,2)" fg:x="45015" fg:w="1027"/><text x="74.2262%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (927 instructions, 1.52%)</title><rect x="75.6200%" y="181" width="1.5225%" height="15" fill="rgb(205,28,51)" fg:x="46042" fg:w="927"/><text x="75.9130%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (959 instructions, 1.58%)</title><rect x="77.1425%" y="181" width="1.5751%" height="15" fill="rgb(233,114,26)" fg:x="46969" fg:w="959"/><text x="77.4355%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,119 instructions, 1.84%)</title><rect x="78.7176%" y="181" width="1.8379%" height="15" fill="rgb(224,75,26)" fg:x="47928" fg:w="1119"/><text x="79.0106%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (927 instructions, 1.52%)</title><rect x="80.5555%" y="181" width="1.5225%" height="15" fill="rgb(240,16,53)" fg:x="49047" fg:w="927"/><text x="80.8484%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (767 instructions, 1.26%)</title><rect x="82.0780%" y="181" width="1.2597%" height="15" fill="rgb(213,38,36)" fg:x="49974" fg:w="767"/><text x="82.3710%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,151 instructions, 1.89%)</title><rect x="83.3377%" y="181" width="1.8904%" height="15" fill="rgb(252,171,53)" fg:x="50741" fg:w="1151"/><text x="83.6307%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (863 instructions, 1.42%)</title><rect x="85.2281%" y="181" width="1.4174%" height="15" fill="rgb(213,195,6)" fg:x="51892" fg:w="863"/><text x="85.5211%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (991 instructions, 1.63%)</title><rect x="86.6455%" y="181" width="1.6276%" height="15" fill="rgb(220,136,30)" fg:x="52755" fg:w="991"/><text x="86.9385%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,055 instructions, 1.73%)</title><rect x="88.2732%" y="181" width="1.7327%" height="15" fill="rgb(241,96,20)" fg:x="53746" fg:w="1055"/><text x="88.5661%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,089 instructions, 1.79%)</title><rect x="90.0059%" y="181" width="1.7886%" height="15" fill="rgb(223,86,50)" fg:x="54801" fg:w="1089"/><text x="90.2989%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (927 instructions, 1.52%)</title><rect x="91.7945%" y="181" width="1.5225%" height="15" fill="rgb(221,194,21)" fg:x="55890" fg:w="927"/><text x="92.0875%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1,151 instructions, 1.89%)</title><rect x="93.3170%" y="181" width="1.8904%" height="15" fill="rgb(232,89,15)" fg:x="56817" fg:w="1151"/><text x="93.6100%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.22%)</title><rect x="95.2156%" y="133" width="0.2217%" height="15" fill="rgb(234,182,38)" fg:x="57973" fg:w="135"/><text x="95.5086%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (165 instructions, 0.27%)</title><rect x="95.2156%" y="149" width="0.2710%" height="15" fill="rgb(222,84,47)" fg:x="57973" fg:w="165"/><text x="95.5086%" y="159.50"></text></g><g><title>memset (136 instructions, 0.22%)</title><rect x="95.4866%" y="149" width="0.2234%" height="15" fill="rgb(231,17,15)" fg:x="58138" fg:w="136"/><text x="95.7796%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (465 instructions, 0.76%)</title><rect x="95.2074%" y="165" width="0.7637%" height="15" fill="rgb(211,203,43)" fg:x="57968" fg:w="465"/><text x="95.5004%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.05%)</title><rect x="95.9712%" y="149" width="0.0526%" height="15" fill="rgb(219,46,49)" fg:x="58433" fg:w="32"/><text x="96.2641%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (117 instructions, 0.19%)</title><rect x="96.0237%" y="117" width="0.1922%" height="15" fill="rgb(254,65,12)" fg:x="58465" fg:w="117"/><text x="96.3167%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (152 instructions, 0.25%)</title><rect x="96.0237%" y="133" width="0.2496%" height="15" fill="rgb(213,163,23)" fg:x="58465" fg:w="152"/><text x="96.3167%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (221 instructions, 0.36%)</title><rect x="96.0237%" y="149" width="0.3630%" height="15" fill="rgb(208,23,39)" fg:x="58465" fg:w="221"/><text x="96.3167%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="96.3867%" y="149" width="0.0181%" height="15" fill="rgb(215,10,4)" fg:x="58686" fg:w="11"/><text x="96.6797%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="96.4048%" y="149" width="0.0181%" height="15" fill="rgb(252,62,46)" fg:x="58697" fg:w="11"/><text x="96.6977%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.05%)</title><rect x="96.4228%" y="149" width="0.0493%" height="15" fill="rgb(215,66,48)" fg:x="58708" fg:w="30"/><text x="96.7158%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (517 instructions, 0.85%)</title><rect x="95.9712%" y="165" width="0.8491%" height="15" fill="rgb(252,63,40)" fg:x="58433" fg:w="517"/><text x="96.2641%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (24 instructions, 0.04%)</title><rect x="96.8203%" y="165" width="0.0394%" height="15" fill="rgb(244,118,34)" fg:x="58950" fg:w="24"/><text x="97.1133%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.09%)</title><rect x="96.8597%" y="165" width="0.0903%" height="15" fill="rgb(233,116,37)" fg:x="58974" fg:w="55"/><text x="97.1527%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,135 instructions, 1.86%)</title><rect x="95.2074%" y="181" width="1.8641%" height="15" fill="rgb(254,184,19)" fg:x="57968" fg:w="1135"/><text x="95.5004%" y="191.50"></text></g><g><title>btreemap::batch_remove_7_::{{closure}} (60,395 instructions, 99.19%)</title><rect x="0.2759%" y="197" width="99.1936%" height="15" fill="rgb(216,196,46)" fg:x="168" fg:w="60395"/><text x="0.5689%" y="207.50">btreemap::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.02%)</title><rect x="99.4695%" y="197" width="0.0197%" height="15" fill="rgb(230,110,2)" fg:x="60563" fg:w="12"/><text x="99.7625%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.13%)</title><rect x="99.4892%" y="197" width="0.1330%" height="15" fill="rgb(248,65,30)" fg:x="60575" fg:w="81"/><text x="99.7822%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (127 instructions, 0.21%)</title><rect x="99.6222%" y="197" width="0.2086%" height="15" fill="rgb(253,199,54)" fg:x="60656" fg:w="127"/><text x="99.9152%" y="207.50"></text></g><g><title>all (60,886 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,205,38)" fg:x="0" fg:w="60886"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (60,886 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,116,51)" fg:x="0" fg:w="60886"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>