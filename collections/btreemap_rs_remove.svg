<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="342" onload="init(evt)" viewBox="0 0 1024 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="325.00"> </text><svg id="frames" x="10" width="1004" total_samples="61795"><g><title>ic_cdk::setup (8 instructions, 0.01%)</title><rect x="0.0000%" y="261" width="0.0129%" height="15" fill="rgb(232,82,17)" fg:x="0" fg:w="8"/><text x="0.2930%" y="271.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.0129%" y="181" width="0.0146%" height="15" fill="rgb(233,93,18)" fg:x="8" fg:w="9"/><text x="0.3059%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.0275%" y="181" width="0.0146%" height="15" fill="rgb(206,195,0)" fg:x="17" fg:w="9"/><text x="0.3205%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.0421%" y="181" width="0.0146%" height="15" fill="rgb(241,23,12)" fg:x="26" fg:w="9"/><text x="0.3350%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.0615%" y="181" width="0.0162%" height="15" fill="rgb(247,216,52)" fg:x="38" fg:w="10"/><text x="0.3545%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.21%)</title><rect x="0.0129%" y="197" width="0.2136%" height="15" fill="rgb(247,55,42)" fg:x="8" fg:w="132"/><text x="0.3059%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.23%)</title><rect x="0.0129%" y="213" width="0.2298%" height="15" fill="rgb(225,175,35)" fg:x="8" fg:w="142"/><text x="0.3059%" y="223.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.23%)</title><rect x="0.0129%" y="229" width="0.2346%" height="15" fill="rgb(223,98,27)" fg:x="8" fg:w="145"/><text x="0.3059%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.2573%" y="181" width="0.0146%" height="15" fill="rgb(216,176,8)" fg:x="159" fg:w="9"/><text x="0.5503%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.2719%" y="181" width="0.0146%" height="15" fill="rgb(235,181,11)" fg:x="168" fg:w="9"/><text x="0.5648%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.2864%" y="181" width="0.0146%" height="15" fill="rgb(209,46,38)" fg:x="177" fg:w="9"/><text x="0.5794%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="0.3058%" y="181" width="0.0162%" height="15" fill="rgb(248,152,44)" fg:x="189" fg:w="10"/><text x="0.5988%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.21%)</title><rect x="0.2573%" y="197" width="0.2136%" height="15" fill="rgb(222,185,52)" fg:x="159" fg:w="132"/><text x="0.5503%" y="207.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.23%)</title><rect x="0.2573%" y="213" width="0.2298%" height="15" fill="rgb(205,229,18)" fg:x="159" fg:w="142"/><text x="0.5503%" y="223.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.23%)</title><rect x="0.2573%" y="229" width="0.2346%" height="15" fill="rgb(245,80,14)" fg:x="159" fg:w="145"/><text x="0.5503%" y="239.50"></text></g><g><title>__rust_alloc (302 instructions, 0.49%)</title><rect x="0.0129%" y="245" width="0.4887%" height="15" fill="rgb(250,167,3)" fg:x="8" fg:w="302"/><text x="0.3059%" y="255.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.5114%" y="149" width="0.0146%" height="15" fill="rgb(236,57,6)" fg:x="316" fg:w="9"/><text x="0.8043%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.5259%" y="149" width="0.0146%" height="15" fill="rgb(244,139,49)" fg:x="325" fg:w="9"/><text x="0.8189%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="0.5405%" y="149" width="0.0146%" height="15" fill="rgb(230,187,53)" fg:x="334" fg:w="9"/><text x="0.8335%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_inuse_and_pinuse (14 instructions, 0.02%)</title><rect x="0.5551%" y="149" width="0.0227%" height="15" fill="rgb(230,138,16)" fg:x="343" fg:w="14"/><text x="0.8480%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (124 instructions, 0.20%)</title><rect x="0.5114%" y="165" width="0.2007%" height="15" fill="rgb(249,21,46)" fg:x="316" fg:w="124"/><text x="0.8043%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (134 instructions, 0.22%)</title><rect x="0.5114%" y="181" width="0.2168%" height="15" fill="rgb(215,23,1)" fg:x="316" fg:w="134"/><text x="0.8043%" y="191.50"></text></g><g><title>__rdl_alloc (137 instructions, 0.22%)</title><rect x="0.5114%" y="197" width="0.2217%" height="15" fill="rgb(213,183,14)" fg:x="316" fg:w="137"/><text x="0.8043%" y="207.50"></text></g><g><title>__rust_alloc (143 instructions, 0.23%)</title><rect x="0.5114%" y="213" width="0.2314%" height="15" fill="rgb(220,73,12)" fg:x="316" fg:w="143"/><text x="0.8043%" y="223.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (201 instructions, 0.33%)</title><rect x="0.5114%" y="229" width="0.3253%" height="15" fill="rgb(234,41,48)" fg:x="316" fg:w="201"/><text x="0.8043%" y="239.50"></text></g><g><title>binread::binary_template::write_start_struct (63 instructions, 0.10%)</title><rect x="0.8383%" y="181" width="0.1019%" height="15" fill="rgb(243,214,12)" fg:x="518" fg:w="63"/><text x="1.1312%" y="191.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="0.9402%" y="133" width="0.0162%" height="15" fill="rgb(240,203,30)" fg:x="581" fg:w="10"/><text x="1.2332%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.70%)</title><rect x="0.9402%" y="149" width="0.7007%" height="15" fill="rgb(248,101,44)" fg:x="581" fg:w="433"/><text x="1.2332%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (76 instructions, 0.12%)</title><rect x="1.6409%" y="149" width="0.1230%" height="15" fill="rgb(215,79,20)" fg:x="1014" fg:w="76"/><text x="1.9339%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.08%)</title><rect x="1.7639%" y="149" width="0.0841%" height="15" fill="rgb(222,140,13)" fg:x="1090" fg:w="52"/><text x="2.0569%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.08%)</title><rect x="1.8480%" y="149" width="0.0841%" height="15" fill="rgb(216,32,44)" fg:x="1142" fg:w="52"/><text x="2.1410%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.08%)</title><rect x="1.9322%" y="149" width="0.0841%" height="15" fill="rgb(251,184,28)" fg:x="1194" fg:w="52"/><text x="2.2252%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (52 instructions, 0.08%)</title><rect x="2.0163%" y="149" width="0.0841%" height="15" fill="rgb(251,124,17)" fg:x="1246" fg:w="52"/><text x="2.3093%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for [B (859 instructions, 1.39%)</title><rect x="0.9402%" y="181" width="1.3901%" height="15" fill="rgb(243,106,47)" fg:x="581" fg:w="859"/><text x="1.2332%" y="191.50"></text></g><g><title> 4]&gt;::read_options (859 instructions, 1.39%)</title><rect x="0.9402%" y="165" width="1.3901%" height="15" fill="rgb(252,132,44)" fg:x="581" fg:w="859"/><text x="1.2332%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (63 instructions, 0.10%)</title><rect x="2.3303%" y="181" width="0.1019%" height="15" fill="rgb(228,50,6)" fg:x="1440" fg:w="63"/><text x="2.6233%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.12%)</title><rect x="2.4322%" y="165" width="0.1246%" height="15" fill="rgb(207,118,22)" fg:x="1503" fg:w="77"/><text x="2.7252%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 0.17%)</title><rect x="2.4322%" y="181" width="0.1683%" height="15" fill="rgb(236,229,14)" fg:x="1503" fg:w="104"/><text x="2.7252%" y="191.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="2.6005%" y="149" width="0.0162%" height="15" fill="rgb(252,179,52)" fg:x="1607" fg:w="10"/><text x="2.8935%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.70%)</title><rect x="2.6005%" y="165" width="0.7007%" height="15" fill="rgb(213,207,25)" fg:x="1607" fg:w="433"/><text x="2.8935%" y="175.50"></text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.03%)</title><rect x="3.3012%" y="149" width="0.0291%" height="15" fill="rgb(225,6,50)" fg:x="2040" fg:w="18"/><text x="3.5942%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.04%)</title><rect x="3.3012%" y="165" width="0.0356%" height="15" fill="rgb(239,117,5)" fg:x="2040" fg:w="22"/><text x="3.5942%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="3.3368%" y="69" width="0.0146%" height="15" fill="rgb(211,57,28)" fg:x="2062" fg:w="9"/><text x="3.6298%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="3.3514%" y="69" width="0.0146%" height="15" fill="rgb(219,90,50)" fg:x="2071" fg:w="9"/><text x="3.6444%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::left_bits (8 instructions, 0.01%)</title><rect x="3.3660%" y="69" width="0.0129%" height="15" fill="rgb(233,106,17)" fg:x="2080" fg:w="8"/><text x="3.6589%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="3.4000%" y="69" width="0.0162%" height="15" fill="rgb(236,46,12)" fg:x="2101" fg:w="10"/><text x="3.6929%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (168 instructions, 0.27%)</title><rect x="3.3368%" y="85" width="0.2719%" height="15" fill="rgb(232,172,36)" fg:x="2062" fg:w="168"/><text x="3.6298%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (178 instructions, 0.29%)</title><rect x="3.3368%" y="101" width="0.2880%" height="15" fill="rgb(226,97,23)" fg:x="2062" fg:w="178"/><text x="3.6298%" y="111.50"></text></g><g><title>__rdl_alloc (181 instructions, 0.29%)</title><rect x="3.3368%" y="117" width="0.2929%" height="15" fill="rgb(246,48,24)" fg:x="2062" fg:w="181"/><text x="3.6298%" y="127.50"></text></g><g><title>__rust_alloc (187 instructions, 0.30%)</title><rect x="3.3368%" y="133" width="0.3026%" height="15" fill="rgb(232,125,5)" fg:x="2062" fg:w="187"/><text x="3.6298%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.10%)</title><rect x="3.6395%" y="85" width="0.0971%" height="15" fill="rgb(225,37,18)" fg:x="2249" fg:w="60"/><text x="3.9324%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.10%)</title><rect x="3.6395%" y="101" width="0.1036%" height="15" fill="rgb(254,131,43)" fg:x="2249" fg:w="64"/><text x="3.9324%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.14%)</title><rect x="3.6395%" y="117" width="0.1440%" height="15" fill="rgb(205,46,50)" fg:x="2249" fg:w="89"/><text x="3.9324%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.02%)</title><rect x="3.7835%" y="69" width="0.0162%" height="15" fill="rgb(234,205,32)" fg:x="2338" fg:w="10"/><text x="4.0764%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.05%)</title><rect x="3.7997%" y="37" width="0.0485%" height="15" fill="rgb(218,208,13)" fg:x="2348" fg:w="30"/><text x="4.0926%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.06%)</title><rect x="3.7997%" y="53" width="0.0550%" height="15" fill="rgb(215,40,29)" fg:x="2348" fg:w="34"/><text x="4.0926%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.10%)</title><rect x="3.7997%" y="69" width="0.0955%" height="15" fill="rgb(233,168,15)" fg:x="2348" fg:w="59"/><text x="4.0926%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 0.19%)</title><rect x="3.7835%" y="85" width="0.1926%" height="15" fill="rgb(250,209,8)" fg:x="2338" fg:w="119"/><text x="4.0764%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 0.28%)</title><rect x="3.7835%" y="101" width="0.2816%" height="15" fill="rgb(227,98,2)" fg:x="2338" fg:w="174"/><text x="4.0764%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 0.29%)</title><rect x="3.7835%" y="117" width="0.2897%" height="15" fill="rgb(227,44,44)" fg:x="2338" fg:w="179"/><text x="4.0764%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 0.61%)</title><rect x="3.6395%" y="133" width="0.6133%" height="15" fill="rgb(229,191,28)" fg:x="2249" fg:w="379"/><text x="3.9324%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (709 instructions, 1.15%)</title><rect x="3.3368%" y="149" width="1.1473%" height="15" fill="rgb(215,216,15)" fg:x="2062" fg:w="709"/><text x="3.6298%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (76 instructions, 0.12%)</title><rect x="4.4842%" y="149" width="0.1230%" height="15" fill="rgb(219,97,45)" fg:x="2771" fg:w="76"/><text x="4.7772%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="4.6395%" y="101" width="0.0162%" height="15" fill="rgb(245,193,35)" fg:x="2867" fg:w="10"/><text x="4.9325%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.11%)</title><rect x="4.6072%" y="117" width="0.1133%" height="15" fill="rgb(219,164,31)" fg:x="2847" fg:w="70"/><text x="4.9001%" y="127.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.12%)</title><rect x="4.6072%" y="133" width="0.1165%" height="15" fill="rgb(216,125,5)" fg:x="2847" fg:w="72"/><text x="4.9001%" y="143.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.12%)</title><rect x="4.6072%" y="149" width="0.1246%" height="15" fill="rgb(243,79,28)" fg:x="2847" fg:w="77"/><text x="4.9001%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (933 instructions, 1.51%)</title><rect x="3.3368%" y="165" width="1.5098%" height="15" fill="rgb(211,217,30)" fg:x="2062" fg:w="933"/><text x="3.6298%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 instructions, 0.04%)</title><rect x="4.8467%" y="165" width="0.0405%" height="15" fill="rgb(226,117,42)" fg:x="2995" fg:w="25"/><text x="5.1396%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,561 instructions, 2.53%)</title><rect x="2.6005%" y="181" width="2.5261%" height="15" fill="rgb(224,63,53)" fg:x="1607" fg:w="1561"/><text x="2.8935%" y="191.50">b..</text></g><g><title>binread::binary_template::write_end_struct (58 instructions, 0.09%)</title><rect x="5.1266%" y="181" width="0.0939%" height="15" fill="rgb(224,84,3)" fg:x="3168" fg:w="58"/><text x="5.4196%" y="191.50"></text></g><g><title>leb128::read::unsigned (77 instructions, 0.12%)</title><rect x="5.2205%" y="165" width="0.1246%" height="15" fill="rgb(205,50,35)" fg:x="3226" fg:w="77"/><text x="5.5135%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (104 instructions, 0.17%)</title><rect x="5.2205%" y="181" width="0.1683%" height="15" fill="rgb(254,208,44)" fg:x="3226" fg:w="104"/><text x="5.5135%" y="191.50"></text></g><g><title>memcmp (10 instructions, 0.02%)</title><rect x="5.3888%" y="149" width="0.0162%" height="15" fill="rgb(207,126,28)" fg:x="3330" fg:w="10"/><text x="5.6818%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (433 instructions, 0.70%)</title><rect x="5.3888%" y="165" width="0.7007%" height="15" fill="rgb(223,134,12)" fg:x="3330" fg:w="433"/><text x="5.6818%" y="175.50"></text></g><g><title>compiler_builtins::mem::memcmp (18 instructions, 0.03%)</title><rect x="6.0895%" y="149" width="0.0291%" height="15" fill="rgb(253,108,53)" fg:x="3763" fg:w="18"/><text x="6.3825%" y="159.50"></text></g><g><title>memcmp (22 instructions, 0.04%)</title><rect x="6.0895%" y="165" width="0.0356%" height="15" fill="rgb(206,167,36)" fg:x="3763" fg:w="22"/><text x="6.3825%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="6.1251%" y="69" width="0.0146%" height="15" fill="rgb(242,45,32)" fg:x="3785" fg:w="9"/><text x="6.4181%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="6.1397%" y="69" width="0.0146%" height="15" fill="rgb(221,136,16)" fg:x="3794" fg:w="9"/><text x="6.4326%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="6.1542%" y="69" width="0.0146%" height="15" fill="rgb(235,53,28)" fg:x="3803" fg:w="9"/><text x="6.4472%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="6.1736%" y="69" width="0.0162%" height="15" fill="rgb(214,127,26)" fg:x="3815" fg:w="10"/><text x="6.4666%" y="79.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (132 instructions, 0.21%)</title><rect x="6.1251%" y="85" width="0.2136%" height="15" fill="rgb(225,155,12)" fg:x="3785" fg:w="132"/><text x="6.4181%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (142 instructions, 0.23%)</title><rect x="6.1251%" y="101" width="0.2298%" height="15" fill="rgb(245,206,40)" fg:x="3785" fg:w="142"/><text x="6.4181%" y="111.50"></text></g><g><title>__rdl_alloc (145 instructions, 0.23%)</title><rect x="6.1251%" y="117" width="0.2346%" height="15" fill="rgb(237,174,23)" fg:x="3785" fg:w="145"/><text x="6.4181%" y="127.50"></text></g><g><title>__rust_alloc (151 instructions, 0.24%)</title><rect x="6.1251%" y="133" width="0.2444%" height="15" fill="rgb(232,131,21)" fg:x="3785" fg:w="151"/><text x="6.4181%" y="143.50"></text></g><g><title>compiler_builtins::mem::memcpy (60 instructions, 0.10%)</title><rect x="6.3694%" y="85" width="0.0971%" height="15" fill="rgb(212,96,3)" fg:x="3936" fg:w="60"/><text x="6.6624%" y="95.50"></text></g><g><title>memcpy (64 instructions, 0.10%)</title><rect x="6.3694%" y="101" width="0.1036%" height="15" fill="rgb(207,213,15)" fg:x="3936" fg:w="64"/><text x="6.6624%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (89 instructions, 0.14%)</title><rect x="6.3694%" y="117" width="0.1440%" height="15" fill="rgb(236,122,21)" fg:x="3936" fg:w="89"/><text x="6.6624%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (10 instructions, 0.02%)</title><rect x="6.5135%" y="69" width="0.0162%" height="15" fill="rgb(239,195,30)" fg:x="4025" fg:w="10"/><text x="6.8064%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy (30 instructions, 0.05%)</title><rect x="6.5297%" y="37" width="0.0485%" height="15" fill="rgb(241,174,23)" fg:x="4035" fg:w="30"/><text x="6.8226%" y="47.50"></text></g><g><title>memcpy (34 instructions, 0.06%)</title><rect x="6.5297%" y="53" width="0.0550%" height="15" fill="rgb(209,165,52)" fg:x="4035" fg:w="34"/><text x="6.8226%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 instructions, 0.10%)</title><rect x="6.5297%" y="69" width="0.0955%" height="15" fill="rgb(224,151,21)" fg:x="4035" fg:w="59"/><text x="6.8226%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (119 instructions, 0.19%)</title><rect x="6.5135%" y="85" width="0.1926%" height="15" fill="rgb(232,112,44)" fg:x="4025" fg:w="119"/><text x="6.8064%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (174 instructions, 0.28%)</title><rect x="6.5135%" y="101" width="0.2816%" height="15" fill="rgb(220,72,37)" fg:x="4025" fg:w="174"/><text x="6.8064%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (179 instructions, 0.29%)</title><rect x="6.5135%" y="117" width="0.2897%" height="15" fill="rgb(210,131,44)" fg:x="4025" fg:w="179"/><text x="6.8064%" y="127.50"></text></g><g><title>core::fmt::write (379 instructions, 0.61%)</title><rect x="6.3694%" y="133" width="0.6133%" height="15" fill="rgb(207,29,46)" fg:x="3936" fg:w="379"/><text x="6.6624%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (673 instructions, 1.09%)</title><rect x="6.1251%" y="149" width="1.0891%" height="15" fill="rgb(215,17,32)" fg:x="3785" fg:w="673"/><text x="6.4181%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (76 instructions, 0.12%)</title><rect x="7.2142%" y="149" width="0.1230%" height="15" fill="rgb(247,162,9)" fg:x="4458" fg:w="76"/><text x="7.5071%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="7.3695%" y="101" width="0.0162%" height="15" fill="rgb(223,102,1)" fg:x="4554" fg:w="10"/><text x="7.6625%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (70 instructions, 0.11%)</title><rect x="7.3372%" y="117" width="0.1133%" height="15" fill="rgb(238,96,39)" fg:x="4534" fg:w="70"/><text x="7.6301%" y="127.50"></text></g><g><title>__rdl_dealloc (72 instructions, 0.12%)</title><rect x="7.3372%" y="133" width="0.1165%" height="15" fill="rgb(244,24,45)" fg:x="4534" fg:w="72"/><text x="7.6301%" y="143.50"></text></g><g><title>__rust_dealloc (77 instructions, 0.12%)</title><rect x="7.3372%" y="149" width="0.1246%" height="15" fill="rgb(246,147,47)" fg:x="4534" fg:w="77"/><text x="7.6301%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (897 instructions, 1.45%)</title><rect x="6.1251%" y="165" width="1.4516%" height="15" fill="rgb(208,147,12)" fg:x="3785" fg:w="897"/><text x="6.4181%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (63 instructions, 0.10%)</title><rect x="7.5767%" y="133" width="0.1019%" height="15" fill="rgb(246,113,49)" fg:x="4682" fg:w="63"/><text x="7.8696%" y="143.50"></text></g><g><title>leb128::read::signed (110 instructions, 0.18%)</title><rect x="7.6786%" y="117" width="0.1780%" height="15" fill="rgb(242,90,53)" fg:x="4745" fg:w="110"/><text x="7.9716%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (137 instructions, 0.22%)</title><rect x="7.6786%" y="133" width="0.2217%" height="15" fill="rgb(252,160,40)" fg:x="4745" fg:w="137"/><text x="7.9716%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (58 instructions, 0.09%)</title><rect x="7.9003%" y="133" width="0.0939%" height="15" fill="rgb(237,182,38)" fg:x="4882" fg:w="58"/><text x="8.1933%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (314 instructions, 0.51%)</title><rect x="7.5767%" y="149" width="0.5081%" height="15" fill="rgb(246,26,47)" fg:x="4682" fg:w="314"/><text x="7.8696%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="8.0848%" y="85" width="0.0146%" height="15" fill="rgb(240,203,51)" fg:x="4996" fg:w="9"/><text x="8.3778%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="8.0994%" y="85" width="0.0146%" height="15" fill="rgb(235,193,16)" fg:x="5005" fg:w="9"/><text x="8.3923%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.19%)</title><rect x="8.0848%" y="101" width="0.1942%" height="15" fill="rgb(227,91,44)" fg:x="4996" fg:w="120"/><text x="8.3778%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.21%)</title><rect x="8.0848%" y="117" width="0.2104%" height="15" fill="rgb(251,138,15)" fg:x="4996" fg:w="130"/><text x="8.3778%" y="127.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="8.0848%" y="133" width="0.2152%" height="15" fill="rgb(211,155,7)" fg:x="4996" fg:w="133"/><text x="8.3778%" y="143.50"></text></g><g><title>__rust_alloc (139 instructions, 0.22%)</title><rect x="8.0848%" y="149" width="0.2249%" height="15" fill="rgb(225,73,34)" fg:x="4996" fg:w="139"/><text x="8.3778%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (538 instructions, 0.87%)</title><rect x="7.5767%" y="165" width="0.8706%" height="15" fill="rgb(208,119,49)" fg:x="4682" fg:w="538"/><text x="7.8696%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (2,038 instructions, 3.30%)</title><rect x="5.3888%" y="181" width="3.2980%" height="15" fill="rgb(245,148,32)" fg:x="3330" fg:w="2038"/><text x="5.6818%" y="191.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (58 instructions, 0.09%)</title><rect x="8.6868%" y="181" width="0.0939%" height="15" fill="rgb(217,198,11)" fg:x="5368" fg:w="58"/><text x="8.9798%" y="191.50"></text></g><g><title>binread::BinRead::read (5,126 instructions, 8.30%)</title><rect x="0.8366%" y="197" width="8.2952%" height="15" fill="rgb(236,19,45)" fg:x="517" fg:w="5126"/><text x="1.1296%" y="207.50">binread::..</text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.02%)</title><rect x="9.1318%" y="181" width="0.0227%" height="15" fill="rgb(219,57,53)" fg:x="5643" fg:w="14"/><text x="9.4248%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 instructions, 0.02%)</title><rect x="9.1545%" y="165" width="0.0227%" height="15" fill="rgb(237,43,33)" fg:x="5657" fg:w="14"/><text x="9.4474%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 instructions, 0.04%)</title><rect x="9.1771%" y="165" width="0.0405%" height="15" fill="rgb(226,121,45)" fg:x="5671" fg:w="25"/><text x="9.4701%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.03%)</title><rect x="9.2176%" y="165" width="0.0307%" height="15" fill="rgb(220,60,35)" fg:x="5696" fg:w="19"/><text x="9.5105%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::replace_empty (210 instructions, 0.34%)</title><rect x="9.1545%" y="181" width="0.3398%" height="15" fill="rgb(232,194,3)" fg:x="5657" fg:w="210"/><text x="9.4474%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="9.4943%" y="101" width="0.0146%" height="15" fill="rgb(222,193,31)" fg:x="5867" fg:w="9"/><text x="9.7873%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="9.5089%" y="101" width="0.0146%" height="15" fill="rgb(246,75,16)" fg:x="5876" fg:w="9"/><text x="9.8018%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.19%)</title><rect x="9.4943%" y="117" width="0.1942%" height="15" fill="rgb(205,54,52)" fg:x="5867" fg:w="120"/><text x="9.7873%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.21%)</title><rect x="9.4943%" y="133" width="0.2104%" height="15" fill="rgb(228,102,19)" fg:x="5867" fg:w="130"/><text x="9.7873%" y="143.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="9.4943%" y="149" width="0.2152%" height="15" fill="rgb(249,5,51)" fg:x="5867" fg:w="133"/><text x="9.7873%" y="159.50"></text></g><g><title>__rust_alloc (139 instructions, 0.22%)</title><rect x="9.4943%" y="165" width="0.2249%" height="15" fill="rgb(219,11,23)" fg:x="5867" fg:w="139"/><text x="9.7873%" y="175.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (220 instructions, 0.36%)</title><rect x="9.4943%" y="181" width="0.3560%" height="15" fill="rgb(252,60,16)" fg:x="5867" fg:w="220"/><text x="9.7873%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="9.8503%" y="85" width="0.0146%" height="15" fill="rgb(211,130,1)" fg:x="6087" fg:w="9"/><text x="10.1433%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="9.8649%" y="85" width="0.0146%" height="15" fill="rgb(217,36,31)" fg:x="6096" fg:w="9"/><text x="10.1578%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="9.8794%" y="85" width="0.0146%" height="15" fill="rgb(234,70,22)" fg:x="6105" fg:w="9"/><text x="10.1724%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_inuse_and_pinuse (14 instructions, 0.02%)</title><rect x="9.8940%" y="85" width="0.0227%" height="15" fill="rgb(231,105,12)" fg:x="6114" fg:w="14"/><text x="10.1870%" y="95.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (124 instructions, 0.20%)</title><rect x="9.8503%" y="101" width="0.2007%" height="15" fill="rgb(253,35,3)" fg:x="6087" fg:w="124"/><text x="10.1433%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (134 instructions, 0.22%)</title><rect x="9.8503%" y="117" width="0.2168%" height="15" fill="rgb(240,126,49)" fg:x="6087" fg:w="134"/><text x="10.1433%" y="127.50"></text></g><g><title>__rdl_alloc (137 instructions, 0.22%)</title><rect x="9.8503%" y="133" width="0.2217%" height="15" fill="rgb(254,30,51)" fg:x="6087" fg:w="137"/><text x="10.1433%" y="143.50"></text></g><g><title>__rust_alloc (143 instructions, 0.23%)</title><rect x="9.8503%" y="149" width="0.2314%" height="15" fill="rgb(212,73,51)" fg:x="6087" fg:w="143"/><text x="10.1433%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (175 instructions, 0.28%)</title><rect x="9.8503%" y="165" width="0.2832%" height="15" fill="rgb(230,139,46)" fg:x="6087" fg:w="175"/><text x="10.1433%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (245 instructions, 0.40%)</title><rect x="9.8503%" y="181" width="0.3965%" height="15" fill="rgb(253,107,50)" fg:x="6087" fg:w="245"/><text x="10.1433%" y="191.50"></text></g><g><title>candid::binary_parser::Header::to_types (916 instructions, 1.48%)</title><rect x="9.1318%" y="197" width="1.4823%" height="15" fill="rgb(226,174,19)" fg:x="5643" fg:w="916"/><text x="9.4248%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="10.6141%" y="117" width="0.0146%" height="15" fill="rgb(254,20,10)" fg:x="6559" fg:w="9"/><text x="10.9071%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="10.6287%" y="117" width="0.0146%" height="15" fill="rgb(208,191,8)" fg:x="6568" fg:w="9"/><text x="10.9217%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.19%)</title><rect x="10.6141%" y="133" width="0.1942%" height="15" fill="rgb(222,42,18)" fg:x="6559" fg:w="120"/><text x="10.9071%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.21%)</title><rect x="10.6141%" y="149" width="0.2104%" height="15" fill="rgb(244,64,53)" fg:x="6559" fg:w="130"/><text x="10.9071%" y="159.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="10.6141%" y="165" width="0.2152%" height="15" fill="rgb(205,198,9)" fg:x="6559" fg:w="133"/><text x="10.9071%" y="175.50"></text></g><g><title>__rust_alloc (139 instructions, 0.22%)</title><rect x="10.6141%" y="181" width="0.2249%" height="15" fill="rgb(217,165,0)" fg:x="6559" fg:w="139"/><text x="10.9071%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="10.8714%" y="133" width="0.0259%" height="15" fill="rgb(251,92,47)" fg:x="6718" fg:w="16"/><text x="11.1644%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="10.8391%" y="149" width="0.1586%" height="15" fill="rgb(253,174,31)" fg:x="6698" fg:w="98"/><text x="11.1320%" y="159.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.16%)</title><rect x="10.8391%" y="165" width="0.1618%" height="15" fill="rgb(206,102,45)" fg:x="6698" fg:w="100"/><text x="11.1320%" y="175.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.17%)</title><rect x="10.8391%" y="181" width="0.1699%" height="15" fill="rgb(244,19,54)" fg:x="6698" fg:w="105"/><text x="11.1320%" y="191.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (358 instructions, 0.58%)</title><rect x="10.6141%" y="197" width="0.5793%" height="15" fill="rgb(247,74,48)" fg:x="6559" fg:w="358"/><text x="10.9071%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="11.1935%" y="133" width="0.0146%" height="15" fill="rgb(227,152,51)" fg:x="6917" fg:w="9"/><text x="11.4864%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="11.2080%" y="133" width="0.0146%" height="15" fill="rgb(213,72,42)" fg:x="6926" fg:w="9"/><text x="11.5010%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.19%)</title><rect x="11.1935%" y="149" width="0.1942%" height="15" fill="rgb(244,60,9)" fg:x="6917" fg:w="120"/><text x="11.4864%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.21%)</title><rect x="11.1935%" y="165" width="0.2104%" height="15" fill="rgb(246,165,44)" fg:x="6917" fg:w="130"/><text x="11.4864%" y="175.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="11.1935%" y="181" width="0.2152%" height="15" fill="rgb(246,149,33)" fg:x="6917" fg:w="133"/><text x="11.4864%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="11.4184%" y="133" width="0.0146%" height="15" fill="rgb(250,148,17)" fg:x="7056" fg:w="9"/><text x="11.7114%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="11.4330%" y="133" width="0.0146%" height="15" fill="rgb(223,148,38)" fg:x="7065" fg:w="9"/><text x="11.7259%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.19%)</title><rect x="11.4184%" y="149" width="0.1942%" height="15" fill="rgb(226,94,5)" fg:x="7056" fg:w="120"/><text x="11.7114%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.21%)</title><rect x="11.4184%" y="165" width="0.2104%" height="15" fill="rgb(224,149,50)" fg:x="7056" fg:w="130"/><text x="11.7114%" y="175.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="11.4184%" y="181" width="0.2152%" height="15" fill="rgb(223,77,39)" fg:x="7056" fg:w="133"/><text x="11.7114%" y="191.50"></text></g><g><title>__rust_alloc (278 instructions, 0.45%)</title><rect x="11.1935%" y="197" width="0.4499%" height="15" fill="rgb(231,91,14)" fg:x="6917" fg:w="278"/><text x="11.4864%" y="207.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (15 instructions, 0.02%)</title><rect x="11.6433%" y="197" width="0.0243%" height="15" fill="rgb(214,119,21)" fg:x="7195" fg:w="15"/><text x="11.9363%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="11.7000%" y="149" width="0.0259%" height="15" fill="rgb(206,65,46)" fg:x="7230" fg:w="16"/><text x="11.9929%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="11.6676%" y="165" width="0.1586%" height="15" fill="rgb(236,25,6)" fg:x="7210" fg:w="98"/><text x="11.9606%" y="175.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.16%)</title><rect x="11.6676%" y="181" width="0.1618%" height="15" fill="rgb(239,150,19)" fg:x="7210" fg:w="100"/><text x="11.9606%" y="191.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.17%)</title><rect x="11.6676%" y="197" width="0.1699%" height="15" fill="rgb(230,93,41)" fg:x="7210" fg:w="105"/><text x="11.9606%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 0.67%)</title><rect x="11.8375%" y="165" width="0.6683%" height="15" fill="rgb(243,66,1)" fg:x="7315" fg:w="413"/><text x="12.1305%" y="175.50"></text></g><g><title>memcpy (417 instructions, 0.67%)</title><rect x="11.8375%" y="181" width="0.6748%" height="15" fill="rgb(238,89,38)" fg:x="7315" fg:w="417"/><text x="12.1305%" y="191.50"></text></g><g><title>anyhow::context::&lt;impl anyhow::Context&lt;T,E&gt; for core::result::Result&lt;T,E&gt;&gt;::with_context (437 instructions, 0.71%)</title><rect x="11.8375%" y="197" width="0.7072%" height="15" fill="rgb(217,131,5)" fg:x="7315" fg:w="437"/><text x="12.1305%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (368 instructions, 0.60%)</title><rect x="12.5447%" y="181" width="0.5955%" height="15" fill="rgb(252,79,5)" fg:x="7752" fg:w="368"/><text x="12.8377%" y="191.50"></text></g><g><title>memcpy (372 instructions, 0.60%)</title><rect x="12.5447%" y="197" width="0.6020%" height="15" fill="rgb(238,8,22)" fg:x="7752" fg:w="372"/><text x="12.8377%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,952 instructions, 12.87%)</title><rect x="0.8366%" y="213" width="12.8684%" height="15" fill="rgb(231,135,40)" fg:x="517" fg:w="7952"/><text x="1.1296%" y="223.50">candid::de::IDLD..</text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 0.62%)</title><rect x="13.7050%" y="197" width="0.6198%" height="15" fill="rgb(234,8,42)" fg:x="8469" fg:w="383"/><text x="13.9980%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (383 instructions, 0.62%)</title><rect x="14.3313%" y="197" width="0.6198%" height="15" fill="rgb(205,183,30)" fg:x="8856" fg:w="383"/><text x="14.6242%" y="207.50"></text></g><g><title>memcpy (774 instructions, 1.25%)</title><rect x="13.7050%" y="213" width="1.2525%" height="15" fill="rgb(238,215,24)" fg:x="8469" fg:w="774"/><text x="13.9980%" y="223.50"></text></g><g><title>candid::types::internal::find_type (38 instructions, 0.06%)</title><rect x="14.9575%" y="181" width="0.0615%" height="15" fill="rgb(245,32,20)" fg:x="9243" fg:w="38"/><text x="15.2505%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="15.0190%" y="101" width="0.0146%" height="15" fill="rgb(234,149,53)" fg:x="9281" fg:w="9"/><text x="15.3120%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="15.0336%" y="101" width="0.0146%" height="15" fill="rgb(254,98,12)" fg:x="9290" fg:w="9"/><text x="15.3265%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.19%)</title><rect x="15.0190%" y="117" width="0.1942%" height="15" fill="rgb(252,222,0)" fg:x="9281" fg:w="120"/><text x="15.3120%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.21%)</title><rect x="15.0190%" y="133" width="0.2104%" height="15" fill="rgb(238,74,43)" fg:x="9281" fg:w="130"/><text x="15.3120%" y="143.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="15.0190%" y="149" width="0.2152%" height="15" fill="rgb(221,213,8)" fg:x="9281" fg:w="133"/><text x="15.3120%" y="159.50"></text></g><g><title>__rust_alloc (139 instructions, 0.22%)</title><rect x="15.0190%" y="165" width="0.2249%" height="15" fill="rgb(244,158,34)" fg:x="9281" fg:w="139"/><text x="15.3120%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (184 instructions, 0.30%)</title><rect x="15.0190%" y="181" width="0.2978%" height="15" fill="rgb(251,136,28)" fg:x="9281" fg:w="184"/><text x="15.3120%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.09%)</title><rect x="15.3168%" y="133" width="0.0874%" height="15" fill="rgb(225,70,13)" fg:x="9465" fg:w="54"/><text x="15.6097%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (90 instructions, 0.15%)</title><rect x="15.4042%" y="133" width="0.1456%" height="15" fill="rgb(246,147,29)" fg:x="9519" fg:w="90"/><text x="15.6971%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 instructions, 0.26%)</title><rect x="15.5498%" y="133" width="0.2638%" height="15" fill="rgb(238,20,50)" fg:x="9609" fg:w="163"/><text x="15.8428%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (556 instructions, 0.90%)</title><rect x="15.3168%" y="149" width="0.8997%" height="15" fill="rgb(227,54,34)" fg:x="9465" fg:w="556"/><text x="15.6097%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (99 instructions, 0.16%)</title><rect x="16.2165%" y="149" width="0.1602%" height="15" fill="rgb(249,57,20)" fg:x="10021" fg:w="99"/><text x="16.5095%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (760 instructions, 1.23%)</title><rect x="15.3168%" y="165" width="1.2299%" height="15" fill="rgb(240,14,9)" fg:x="9465" fg:w="760"/><text x="15.6097%" y="175.50"></text></g><g><title>candid::types::internal::env_add (813 instructions, 1.32%)</title><rect x="15.3168%" y="181" width="1.3156%" height="15" fill="rgb(211,145,54)" fg:x="9465" fg:w="813"/><text x="15.6097%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="16.6324%" y="101" width="0.0146%" height="15" fill="rgb(247,73,45)" fg:x="10278" fg:w="9"/><text x="16.9254%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="16.6470%" y="101" width="0.0146%" height="15" fill="rgb(244,143,28)" fg:x="10287" fg:w="9"/><text x="16.9399%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (120 instructions, 0.19%)</title><rect x="16.6324%" y="117" width="0.1942%" height="15" fill="rgb(213,96,7)" fg:x="10278" fg:w="120"/><text x="16.9254%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (130 instructions, 0.21%)</title><rect x="16.6324%" y="133" width="0.2104%" height="15" fill="rgb(211,178,22)" fg:x="10278" fg:w="130"/><text x="16.9254%" y="143.50"></text></g><g><title>__rdl_alloc (133 instructions, 0.22%)</title><rect x="16.6324%" y="149" width="0.2152%" height="15" fill="rgb(235,118,54)" fg:x="10278" fg:w="133"/><text x="16.9254%" y="159.50"></text></g><g><title>__rust_alloc (139 instructions, 0.22%)</title><rect x="16.6324%" y="165" width="0.2249%" height="15" fill="rgb(220,83,27)" fg:x="10278" fg:w="139"/><text x="16.9254%" y="175.50"></text></g><g><title>candid::types::impls::&lt;impl candid::types::CandidType for u32&gt;::_ty (151 instructions, 0.24%)</title><rect x="16.6324%" y="181" width="0.2444%" height="15" fill="rgb(225,178,13)" fg:x="10278" fg:w="151"/><text x="16.9254%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.09%)</title><rect x="16.8768%" y="133" width="0.0874%" height="15" fill="rgb(229,121,38)" fg:x="10429" fg:w="54"/><text x="17.1697%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (90 instructions, 0.15%)</title><rect x="16.9642%" y="133" width="0.1456%" height="15" fill="rgb(212,158,37)" fg:x="10483" fg:w="90"/><text x="17.2571%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 instructions, 0.26%)</title><rect x="17.1098%" y="133" width="0.2638%" height="15" fill="rgb(249,156,1)" fg:x="10573" fg:w="163"/><text x="17.4028%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (556 instructions, 0.90%)</title><rect x="16.8768%" y="149" width="0.8997%" height="15" fill="rgb(229,124,34)" fg:x="10429" fg:w="556"/><text x="17.1697%" y="159.50"></text></g><g><title>compiler_builtins::mem::memcmp (74 instructions, 0.12%)</title><rect x="17.7765%" y="133" width="0.1198%" height="15" fill="rgb(247,227,25)" fg:x="10985" fg:w="74"/><text x="18.0695%" y="143.50"></text></g><g><title>memcmp (78 instructions, 0.13%)</title><rect x="17.7765%" y="149" width="0.1262%" height="15" fill="rgb(230,211,11)" fg:x="10985" fg:w="78"/><text x="18.0695%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (743 instructions, 1.20%)</title><rect x="16.8768%" y="165" width="1.2024%" height="15" fill="rgb(250,191,5)" fg:x="10429" fg:w="743"/><text x="17.1697%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="18.1115%" y="101" width="0.0259%" height="15" fill="rgb(213,58,9)" fg:x="11192" fg:w="16"/><text x="18.4045%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="18.0791%" y="117" width="0.1586%" height="15" fill="rgb(230,117,2)" fg:x="11172" fg:w="98"/><text x="18.3721%" y="127.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.16%)</title><rect x="18.0791%" y="133" width="0.1618%" height="15" fill="rgb(223,161,18)" fg:x="11172" fg:w="100"/><text x="18.3721%" y="143.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.17%)</title><rect x="18.0791%" y="149" width="0.1699%" height="15" fill="rgb(243,172,23)" fg:x="11172" fg:w="105"/><text x="18.3721%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (137 instructions, 0.22%)</title><rect x="18.0791%" y="165" width="0.2217%" height="15" fill="rgb(243,33,13)" fg:x="11172" fg:w="137"/><text x="18.3721%" y="175.50"></text></g><g><title>candid::types::internal::env_add (937 instructions, 1.52%)</title><rect x="16.8768%" y="181" width="1.5163%" height="15" fill="rgb(237,140,41)" fg:x="10429" fg:w="937"/><text x="17.1697%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 instructions, 0.09%)</title><rect x="18.3931%" y="133" width="0.0874%" height="15" fill="rgb(220,2,6)" fg:x="11366" fg:w="54"/><text x="18.6860%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (79 instructions, 0.13%)</title><rect x="18.3931%" y="149" width="0.1278%" height="15" fill="rgb(234,165,53)" fg:x="11366" fg:w="79"/><text x="18.6860%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (303 instructions, 0.49%)</title><rect x="18.3931%" y="165" width="0.4903%" height="15" fill="rgb(221,105,2)" fg:x="11366" fg:w="303"/><text x="18.6860%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::PartialEq&gt;::eq (35 instructions, 0.06%)</title><rect x="18.8834%" y="165" width="0.0566%" height="15" fill="rgb(237,182,9)" fg:x="11669" fg:w="35"/><text x="19.1764%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="18.9400%" y="165" width="0.0178%" height="15" fill="rgb(244,198,4)" fg:x="11704" fg:w="11"/><text x="19.2330%" y="175.50"></text></g><g><title>candid::types::internal::env_id (506 instructions, 0.82%)</title><rect x="18.3931%" y="181" width="0.8188%" height="15" fill="rgb(226,40,1)" fg:x="11366" fg:w="506"/><text x="18.6860%" y="191.50"></text></g><g><title>candid::types::CandidType::ty (2,737 instructions, 4.43%)</title><rect x="14.9575%" y="197" width="4.4292%" height="15" fill="rgb(251,112,31)" fg:x="9243" fg:w="2737"/><text x="15.2505%" y="207.50">cand..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (38 instructions, 0.06%)</title><rect x="19.3867%" y="197" width="0.0615%" height="15" fill="rgb(214,3,47)" fg:x="11980" fg:w="38"/><text x="19.6797%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="19.4870%" y="133" width="0.0162%" height="15" fill="rgb(248,91,32)" fg:x="12042" fg:w="10"/><text x="19.7800%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.23%)</title><rect x="19.4482%" y="149" width="0.2282%" height="15" fill="rgb(235,141,41)" fg:x="12018" fg:w="141"/><text x="19.7411%" y="159.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.23%)</title><rect x="19.4482%" y="165" width="0.2314%" height="15" fill="rgb(229,19,10)" fg:x="12018" fg:w="143"/><text x="19.7411%" y="175.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.24%)</title><rect x="19.4482%" y="181" width="0.2395%" height="15" fill="rgb(205,17,42)" fg:x="12018" fg:w="148"/><text x="19.7411%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="19.7783%" y="133" width="0.0162%" height="15" fill="rgb(222,178,41)" fg:x="12222" fg:w="10"/><text x="20.0713%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.23%)</title><rect x="19.7395%" y="149" width="0.2282%" height="15" fill="rgb(244,223,34)" fg:x="12198" fg:w="141"/><text x="20.0324%" y="159.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.23%)</title><rect x="19.7395%" y="165" width="0.2314%" height="15" fill="rgb(205,160,31)" fg:x="12198" fg:w="143"/><text x="20.0324%" y="175.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.24%)</title><rect x="19.7395%" y="181" width="0.2395%" height="15" fill="rgb(218,156,36)" fg:x="12198" fg:w="148"/><text x="20.0324%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (360 instructions, 0.58%)</title><rect x="19.4482%" y="197" width="0.5826%" height="15" fill="rgb(251,150,11)" fg:x="12018" fg:w="360"/><text x="19.7411%" y="207.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="20.0307%" y="181" width="0.0453%" height="15" fill="rgb(220,132,20)" fg:x="12378" fg:w="28"/><text x="20.3237%" y="191.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (25 instructions, 0.04%)</title><rect x="20.0761%" y="181" width="0.0405%" height="15" fill="rgb(217,123,0)" fg:x="12406" fg:w="25"/><text x="20.3690%" y="191.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (25 instructions, 0.04%)</title><rect x="20.1165%" y="181" width="0.0405%" height="15" fill="rgb(240,124,17)" fg:x="12431" fg:w="25"/><text x="20.4095%" y="191.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (159 instructions, 0.26%)</title><rect x="20.0307%" y="197" width="0.2573%" height="15" fill="rgb(218,16,0)" fg:x="12378" fg:w="159"/><text x="20.3237%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="20.2880%" y="197" width="0.0178%" height="15" fill="rgb(210,1,40)" fg:x="12537" fg:w="11"/><text x="20.5810%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="20.3058%" y="197" width="0.0178%" height="15" fill="rgb(213,109,54)" fg:x="12548" fg:w="11"/><text x="20.5988%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="20.3237%" y="197" width="0.0178%" height="15" fill="rgb(228,192,52)" fg:x="12559" fg:w="11"/><text x="20.6166%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::get_value (3,495 instructions, 5.66%)</title><rect x="14.9575%" y="213" width="5.6558%" height="15" fill="rgb(224,116,38)" fg:x="9243" fg:w="3495"/><text x="15.2505%" y="223.50">candid..</text></g><g><title>compiler_builtins::mem::memcpy (413 instructions, 0.67%)</title><rect x="20.6133%" y="197" width="0.6683%" height="15" fill="rgb(251,77,53)" fg:x="12738" fg:w="413"/><text x="20.9063%" y="207.50"></text></g><g><title>memcpy (417 instructions, 0.67%)</title><rect x="20.6133%" y="213" width="0.6748%" height="15" fill="rgb(234,17,54)" fg:x="12738" fg:w="417"/><text x="20.9063%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.03%)</title><rect x="21.2881%" y="197" width="0.0307%" height="15" fill="rgb(243,164,46)" fg:x="13155" fg:w="19"/><text x="21.5811%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="21.3577%" y="149" width="0.0162%" height="15" fill="rgb(239,23,46)" fg:x="13198" fg:w="10"/><text x="21.6507%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (141 instructions, 0.23%)</title><rect x="21.3189%" y="165" width="0.2282%" height="15" fill="rgb(215,193,52)" fg:x="13174" fg:w="141"/><text x="21.6118%" y="175.50"></text></g><g><title>__rdl_dealloc (143 instructions, 0.23%)</title><rect x="21.3189%" y="181" width="0.2314%" height="15" fill="rgb(247,208,29)" fg:x="13174" fg:w="143"/><text x="21.6118%" y="191.50"></text></g><g><title>__rust_dealloc (148 instructions, 0.24%)</title><rect x="21.3189%" y="197" width="0.2395%" height="15" fill="rgb(211,220,54)" fg:x="13174" fg:w="148"/><text x="21.6118%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="21.6102%" y="133" width="0.0162%" height="15" fill="rgb(238,196,23)" fg:x="13354" fg:w="10"/><text x="21.9031%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (74 instructions, 0.12%)</title><rect x="21.6263%" y="133" width="0.1198%" height="15" fill="rgb(246,220,53)" fg:x="13364" fg:w="74"/><text x="21.9193%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (243 instructions, 0.39%)</title><rect x="21.5584%" y="149" width="0.3932%" height="15" fill="rgb(234,200,19)" fg:x="13322" fg:w="243"/><text x="21.8513%" y="159.50"></text></g><g><title>__rdl_dealloc (245 instructions, 0.40%)</title><rect x="21.5584%" y="165" width="0.3965%" height="15" fill="rgb(245,211,47)" fg:x="13322" fg:w="245"/><text x="21.8513%" y="175.50"></text></g><g><title>__rust_dealloc (250 instructions, 0.40%)</title><rect x="21.5584%" y="181" width="0.4046%" height="15" fill="rgb(219,28,9)" fg:x="13322" fg:w="250"/><text x="21.8513%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (282 instructions, 0.46%)</title><rect x="21.5584%" y="197" width="0.4563%" height="15" fill="rgb(227,52,9)" fg:x="13322" fg:w="282"/><text x="21.8513%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="22.0147%" y="197" width="0.0178%" height="15" fill="rgb(241,151,38)" fg:x="13604" fg:w="11"/><text x="22.3077%" y="207.50"></text></g><g><title>candid::de::IDLDeserialize::done (562 instructions, 0.91%)</title><rect x="21.2881%" y="213" width="0.9095%" height="15" fill="rgb(223,5,6)" fg:x="13155" fg:w="562"/><text x="21.5811%" y="223.50"></text></g><g><title>candid::utils::decode_args (13,303 instructions, 21.53%)</title><rect x="0.8366%" y="229" width="21.5276%" height="15" fill="rgb(211,13,6)" fg:x="517" fg:w="13303"/><text x="1.1296%" y="239.50">candid::utils::decode_args</text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="22.3966%" y="181" width="0.0259%" height="15" fill="rgb(232,5,47)" fg:x="13840" fg:w="16"/><text x="22.6896%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="22.3643%" y="197" width="0.1586%" height="15" fill="rgb(242,181,4)" fg:x="13820" fg:w="98"/><text x="22.6572%" y="207.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.16%)</title><rect x="22.3643%" y="213" width="0.1618%" height="15" fill="rgb(224,213,54)" fg:x="13820" fg:w="100"/><text x="22.6572%" y="223.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.17%)</title><rect x="22.3643%" y="229" width="0.1699%" height="15" fill="rgb(225,8,31)" fg:x="13820" fg:w="105"/><text x="22.6572%" y="239.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,650 instructions, 22.09%)</title><rect x="0.5114%" y="245" width="22.0892%" height="15" fill="rgb(232,134,54)" fg:x="316" fg:w="13650"/><text x="0.8043%" y="255.50">ic_cdk::api::call::arg_data</text></g><g><title>btreemap::MAP::__getit (15 instructions, 0.02%)</title><rect x="22.6005%" y="229" width="0.0243%" height="15" fill="rgb(252,139,26)" fg:x="13966" fg:w="15"/><text x="22.8935%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (45,995 instructions, 74.43%)</title><rect x="22.6005%" y="245" width="74.4316%" height="15" fill="rgb(252,60,2)" fg:x="13966" fg:w="45995"/><text x="22.8935%" y="255.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (56 instructions, 0.09%)</title><rect x="97.0677%" y="133" width="0.0906%" height="15" fill="rgb(247,62,16)" fg:x="59983" fg:w="56"/><text x="97.3607%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (157 instructions, 0.25%)</title><rect x="97.0321%" y="149" width="0.2541%" height="15" fill="rgb(216,189,52)" fg:x="59961" fg:w="157"/><text x="97.3251%" y="159.50"></text></g><g><title>__rdl_dealloc (159 instructions, 0.26%)</title><rect x="97.0321%" y="165" width="0.2573%" height="15" fill="rgb(216,144,24)" fg:x="59961" fg:w="159"/><text x="97.3251%" y="175.50"></text></g><g><title>__rust_dealloc (164 instructions, 0.27%)</title><rect x="97.0321%" y="181" width="0.2654%" height="15" fill="rgb(244,80,24)" fg:x="59961" fg:w="164"/><text x="97.3251%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (196 instructions, 0.32%)</title><rect x="97.0321%" y="197" width="0.3172%" height="15" fill="rgb(207,91,46)" fg:x="59961" fg:w="196"/><text x="97.3251%" y="207.50"></text></g><g><title>compiler_builtins::mem::memset (135 instructions, 0.22%)</title><rect x="97.3493%" y="181" width="0.2185%" height="15" fill="rgb(247,125,35)" fg:x="60157" fg:w="135"/><text x="97.6423%" y="191.50"></text></g><g><title>memset (139 instructions, 0.22%)</title><rect x="97.3493%" y="197" width="0.2249%" height="15" fill="rgb(236,154,43)" fg:x="60157" fg:w="139"/><text x="97.6423%" y="207.50"></text></g><g><title>candid::types::internal::env_clear (437 instructions, 0.71%)</title><rect x="97.0321%" y="213" width="0.7072%" height="15" fill="rgb(218,149,20)" fg:x="59961" fg:w="437"/><text x="97.3251%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::new (501 instructions, 0.81%)</title><rect x="97.0321%" y="229" width="0.8107%" height="15" fill="rgb(211,75,21)" fg:x="59961" fg:w="501"/><text x="97.3251%" y="239.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (33 instructions, 0.05%)</title><rect x="97.8477%" y="197" width="0.0534%" height="15" fill="rgb(219,122,25)" fg:x="60465" fg:w="33"/><text x="98.1407%" y="207.50"></text></g><g><title>std::io::Write::write_all (88 instructions, 0.14%)</title><rect x="97.8477%" y="213" width="0.1424%" height="15" fill="rgb(253,73,3)" fg:x="60465" fg:w="88"/><text x="98.1407%" y="223.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="97.9901%" y="101" width="0.0146%" height="15" fill="rgb(234,172,34)" fg:x="60553" fg:w="9"/><text x="98.2831%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::align_up (9 instructions, 0.01%)</title><rect x="98.0047%" y="101" width="0.0146%" height="15" fill="rgb(215,215,6)" fg:x="60562" fg:w="9"/><text x="98.2977%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_inuse_and_pinuse (14 instructions, 0.02%)</title><rect x="98.0193%" y="101" width="0.0227%" height="15" fill="rgb(238,102,9)" fg:x="60571" fg:w="14"/><text x="98.3122%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (117 instructions, 0.19%)</title><rect x="97.9901%" y="117" width="0.1893%" height="15" fill="rgb(248,153,40)" fg:x="60553" fg:w="117"/><text x="98.2831%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (127 instructions, 0.21%)</title><rect x="97.9901%" y="133" width="0.2055%" height="15" fill="rgb(219,9,54)" fg:x="60553" fg:w="127"/><text x="98.2831%" y="143.50"></text></g><g><title>__rdl_alloc (130 instructions, 0.21%)</title><rect x="97.9901%" y="149" width="0.2104%" height="15" fill="rgb(230,33,18)" fg:x="60553" fg:w="130"/><text x="98.2831%" y="159.50"></text></g><g><title>__rust_alloc (136 instructions, 0.22%)</title><rect x="97.9901%" y="165" width="0.2201%" height="15" fill="rgb(239,180,40)" fg:x="60553" fg:w="136"/><text x="98.2831%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (168 instructions, 0.27%)</title><rect x="97.9901%" y="181" width="0.2719%" height="15" fill="rgb(237,41,38)" fg:x="60553" fg:w="168"/><text x="98.2831%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (235 instructions, 0.38%)</title><rect x="97.9901%" y="197" width="0.3803%" height="15" fill="rgb(210,218,29)" fg:x="60553" fg:w="235"/><text x="98.2831%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (10 instructions, 0.02%)</title><rect x="98.3704%" y="197" width="0.0162%" height="15" fill="rgb(214,228,42)" fg:x="60788" fg:w="10"/><text x="98.6634%" y="207.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.02%)</title><rect x="98.3866%" y="181" width="0.0178%" height="15" fill="rgb(239,88,5)" fg:x="60798" fg:w="11"/><text x="98.6796%" y="191.50"></text></g><g><title>compiler_builtins::mem::memcpy (11 instructions, 0.02%)</title><rect x="98.4109%" y="181" width="0.0178%" height="15" fill="rgb(232,125,30)" fg:x="60813" fg:w="11"/><text x="98.7038%" y="191.50"></text></g><g><title>memcpy (30 instructions, 0.05%)</title><rect x="98.3866%" y="197" width="0.0485%" height="15" fill="rgb(213,141,27)" fg:x="60798" fg:w="30"/><text x="98.6796%" y="207.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (477 instructions, 0.77%)</title><rect x="97.9901%" y="213" width="0.7719%" height="15" fill="rgb(219,148,44)" fg:x="60553" fg:w="477"/><text x="98.2831%" y="223.50"></text></g><g><title>&lt;ic_cdk::api::call::CallReplyWriter as std::io::Write&gt;::write (31 instructions, 0.05%)</title><rect x="98.7717%" y="197" width="0.0502%" height="15" fill="rgb(228,215,50)" fg:x="61036" fg:w="31"/><text x="99.0647%" y="207.50"></text></g><g><title>std::io::Write::write_all (86 instructions, 0.14%)</title><rect x="98.7717%" y="213" width="0.1392%" height="15" fill="rgb(222,78,27)" fg:x="61036" fg:w="86"/><text x="99.0647%" y="223.50"></text></g><g><title>std::io::Write::write_all (15 instructions, 0.02%)</title><rect x="98.9206%" y="213" width="0.0243%" height="15" fill="rgb(242,81,28)" fg:x="61128" fg:w="15"/><text x="99.2136%" y="223.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (757 instructions, 1.23%)</title><rect x="97.8477%" y="229" width="1.2250%" height="15" fill="rgb(249,84,54)" fg:x="60465" fg:w="757"/><text x="98.1407%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="99.1132%" y="181" width="0.0259%" height="15" fill="rgb(215,153,0)" fg:x="61247" fg:w="16"/><text x="99.4062%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="99.0808%" y="197" width="0.1586%" height="15" fill="rgb(242,47,18)" fg:x="61227" fg:w="98"/><text x="99.3738%" y="207.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.16%)</title><rect x="99.0808%" y="213" width="0.1618%" height="15" fill="rgb(229,119,32)" fg:x="61227" fg:w="100"/><text x="99.3738%" y="223.50"></text></g><g><title>__rust_dealloc (105 instructions, 0.17%)</title><rect x="99.0808%" y="229" width="0.1699%" height="15" fill="rgb(218,71,27)" fg:x="61227" fg:w="105"/><text x="99.3738%" y="239.50"></text></g><g><title>candid::utils::write_args (1,447 instructions, 2.34%)</title><rect x="97.0321%" y="245" width="2.3416%" height="15" fill="rgb(228,170,17)" fg:x="59961" fg:w="1447"/><text x="97.3251%" y="255.50">c..</text></g><g><title>dlmalloc::dlmalloc::Chunk::set_free_with_pinuse (16 instructions, 0.03%)</title><rect x="99.4061%" y="197" width="0.0259%" height="15" fill="rgb(226,198,26)" fg:x="61428" fg:w="16"/><text x="99.6991%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (98 instructions, 0.16%)</title><rect x="99.3737%" y="213" width="0.1586%" height="15" fill="rgb(222,97,53)" fg:x="61408" fg:w="98"/><text x="99.6667%" y="223.50"></text></g><g><title>__rdl_dealloc (100 instructions, 0.16%)</title><rect x="99.3737%" y="229" width="0.1618%" height="15" fill="rgb(234,9,11)" fg:x="61408" fg:w="100"/><text x="99.6667%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Chunk::set_size_and_pinuse_of_free_chunk (10 instructions, 0.02%)</title><rect x="99.5954%" y="197" width="0.0162%" height="15" fill="rgb(250,162,30)" fg:x="61545" fg:w="10"/><text x="99.8884%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (193 instructions, 0.31%)</title><rect x="99.5437%" y="213" width="0.3123%" height="15" fill="rgb(235,1,6)" fg:x="61513" fg:w="193"/><text x="99.8366%" y="223.50"></text></g><g><title>__rdl_dealloc (195 instructions, 0.32%)</title><rect x="99.5437%" y="229" width="0.3156%" height="15" fill="rgb(206,156,31)" fg:x="61513" fg:w="195"/><text x="99.8366%" y="239.50"></text></g><g><title>__rust_dealloc (305 instructions, 0.49%)</title><rect x="99.3737%" y="245" width="0.4936%" height="15" fill="rgb(219,80,25)" fg:x="61408" fg:w="305"/><text x="99.6667%" y="255.50"></text></g><g><title>ic_cdk::futures::spawn (61,784 instructions, 99.98%)</title><rect x="0.0129%" y="261" width="99.9822%" height="15" fill="rgb(229,224,32)" fg:x="8" fg:w="61784"/><text x="0.3059%" y="271.50">ic_cdk::futures::spawn</text></g><g><title>all (61,795 instructions, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(231,140,38)" fg:x="0" fg:w="61795"/><text x="0.2930%" y="303.50"></text></g><g><title>canister_update batch_remove (61,795 instructions, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(232,60,35)" fg:x="0" fg:w="61795"/><text x="0.2930%" y="287.50">canister_update batch_remove</text></g></svg></svg>