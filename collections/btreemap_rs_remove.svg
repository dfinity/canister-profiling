<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="81249"><g><title>ic_cdk::setup (19 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0234%" height="15" fill="rgb(209,88,8)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="0.0234%" y="197" width="0.0935%" height="15" fill="rgb(226,180,0)" fg:x="19" fg:w="76"/><text x="0.3164%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="0.1169%" y="197" width="0.0935%" height="15" fill="rgb(209,56,16)" fg:x="95" fg:w="76"/><text x="0.4099%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="0.2105%" y="165" width="0.0935%" height="15" fill="rgb(227,148,27)" fg:x="171" fg:w="76"/><text x="0.5034%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.08%)</title><rect x="0.3040%" y="149" width="0.0849%" height="15" fill="rgb(221,218,20)" fg:x="247" fg:w="69"/><text x="0.5970%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.50%)</title><rect x="0.3889%" y="149" width="0.4997%" height="15" fill="rgb(246,63,14)" fg:x="316" fg:w="406"/><text x="0.6819%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.10%)</title><rect x="0.8886%" y="149" width="0.1009%" height="15" fill="rgb(207,6,43)" fg:x="722" fg:w="82"/><text x="1.1816%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="0.9896%" y="149" width="0.0665%" height="15" fill="rgb(220,31,5)" fg:x="804" fg:w="54"/><text x="1.2825%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.0560%" y="149" width="0.0665%" height="15" fill="rgb(223,106,22)" fg:x="858" fg:w="54"/><text x="1.3490%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.1225%" y="149" width="0.0665%" height="15" fill="rgb(220,76,8)" fg:x="912" fg:w="54"/><text x="1.4154%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.1889%" y="149" width="0.0665%" height="15" fill="rgb(222,211,9)" fg:x="966" fg:w="54"/><text x="1.4819%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.08%)</title><rect x="1.2554%" y="149" width="0.0849%" height="15" fill="rgb(218,106,35)" fg:x="1020" fg:w="69"/><text x="1.5484%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.08%)</title><rect x="1.3403%" y="149" width="0.0800%" height="15" fill="rgb(218,49,9)" fg:x="1089" fg:w="65"/><text x="1.6333%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.50%)</title><rect x="1.4203%" y="149" width="0.4997%" height="15" fill="rgb(245,132,21)" fg:x="1154" fg:w="406"/><text x="1.7133%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="1.9200%" y="149" width="0.0197%" height="15" fill="rgb(222,33,53)" fg:x="1560" fg:w="16"/><text x="2.2130%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="1.9397%" y="133" width="0.0935%" height="15" fill="rgb(237,43,29)" fg:x="1576" fg:w="76"/><text x="2.2327%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.07%)</title><rect x="2.0333%" y="101" width="0.0738%" height="15" fill="rgb(207,117,29)" fg:x="1652" fg:w="60"/><text x="2.3262%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.10%)</title><rect x="2.0333%" y="117" width="0.1046%" height="15" fill="rgb(214,225,21)" fg:x="1652" fg:w="85"/><text x="2.3262%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="2.1379%" y="69" width="0.0111%" height="15" fill="rgb(224,46,50)" fg:x="1737" fg:w="9"/><text x="2.4308%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.04%)</title><rect x="2.1489%" y="53" width="0.0369%" height="15" fill="rgb(232,19,25)" fg:x="1746" fg:w="30"/><text x="2.4419%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.07%)</title><rect x="2.1489%" y="69" width="0.0677%" height="15" fill="rgb(245,24,21)" fg:x="1746" fg:w="55"/><text x="2.4419%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.15%)</title><rect x="2.1379%" y="85" width="0.1452%" height="15" fill="rgb(206,178,21)" fg:x="1737" fg:w="118"/><text x="2.4308%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.21%)</title><rect x="2.1379%" y="101" width="0.2105%" height="15" fill="rgb(228,116,2)" fg:x="1737" fg:w="171"/><text x="2.4308%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.22%)</title><rect x="2.1379%" y="117" width="0.2166%" height="15" fill="rgb(251,227,12)" fg:x="1737" fg:w="176"/><text x="2.4308%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.46%)</title><rect x="2.0333%" y="133" width="0.4579%" height="15" fill="rgb(233,186,31)" fg:x="1652" fg:w="372"/><text x="2.3262%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.72%)</title><rect x="1.9397%" y="149" width="0.7249%" height="15" fill="rgb(236,6,48)" fg:x="1576" fg:w="589"/><text x="2.2327%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.10%)</title><rect x="2.6646%" y="149" width="0.1009%" height="15" fill="rgb(250,81,39)" fg:x="2165" fg:w="82"/><text x="2.9576%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="2.7656%" y="149" width="0.0677%" height="15" fill="rgb(252,212,48)" fg:x="2247" fg:w="55"/><text x="3.0585%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.08%)</title><rect x="2.8333%" y="149" width="0.0775%" height="15" fill="rgb(217,141,5)" fg:x="2302" fg:w="63"/><text x="3.1262%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.08%)</title><rect x="2.9108%" y="149" width="0.0800%" height="15" fill="rgb(214,75,15)" fg:x="2365" fg:w="65"/><text x="3.2038%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.50%)</title><rect x="2.9908%" y="133" width="0.4997%" height="15" fill="rgb(234,195,49)" fg:x="2430" fg:w="406"/><text x="3.2838%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="3.4905%" y="133" width="0.0197%" height="15" fill="rgb(227,1,17)" fg:x="2836" fg:w="16"/><text x="3.7835%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="3.5102%" y="117" width="0.0935%" height="15" fill="rgb(226,91,45)" fg:x="2852" fg:w="76"/><text x="3.8032%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.07%)</title><rect x="3.6037%" y="85" width="0.0738%" height="15" fill="rgb(219,91,54)" fg:x="2928" fg:w="60"/><text x="3.8967%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.10%)</title><rect x="3.6037%" y="101" width="0.1046%" height="15" fill="rgb(238,59,9)" fg:x="2928" fg:w="85"/><text x="3.8967%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="3.7084%" y="53" width="0.0111%" height="15" fill="rgb(226,175,51)" fg:x="3013" fg:w="9"/><text x="4.0013%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.04%)</title><rect x="3.7194%" y="37" width="0.0369%" height="15" fill="rgb(219,206,10)" fg:x="3022" fg:w="30"/><text x="4.0124%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.07%)</title><rect x="3.7194%" y="53" width="0.0677%" height="15" fill="rgb(225,186,16)" fg:x="3022" fg:w="55"/><text x="4.0124%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.15%)</title><rect x="3.7084%" y="69" width="0.1452%" height="15" fill="rgb(238,200,3)" fg:x="3013" fg:w="118"/><text x="4.0013%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.21%)</title><rect x="3.7084%" y="85" width="0.2105%" height="15" fill="rgb(251,216,5)" fg:x="3013" fg:w="171"/><text x="4.0013%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.22%)</title><rect x="3.7084%" y="101" width="0.2166%" height="15" fill="rgb(215,114,22)" fg:x="3013" fg:w="176"/><text x="4.0013%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.46%)</title><rect x="3.6037%" y="117" width="0.4579%" height="15" fill="rgb(205,137,51)" fg:x="2928" fg:w="372"/><text x="3.8967%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.72%)</title><rect x="3.5102%" y="133" width="0.7249%" height="15" fill="rgb(220,182,3)" fg:x="2852" fg:w="589"/><text x="3.8032%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.10%)</title><rect x="4.2351%" y="133" width="0.1009%" height="15" fill="rgb(250,99,8)" fg:x="3441" fg:w="82"/><text x="4.5281%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="4.3361%" y="133" width="0.0677%" height="15" fill="rgb(211,140,0)" fg:x="3523" fg:w="55"/><text x="4.6290%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.08%)</title><rect x="4.4037%" y="117" width="0.0849%" height="15" fill="rgb(218,53,36)" fg:x="3578" fg:w="69"/><text x="4.6967%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.11%)</title><rect x="4.4887%" y="117" width="0.1120%" height="15" fill="rgb(229,129,1)" fg:x="3647" fg:w="91"/><text x="4.7816%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.08%)</title><rect x="4.6007%" y="117" width="0.0775%" height="15" fill="rgb(215,37,30)" fg:x="3738" fg:w="63"/><text x="4.8936%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.35%)</title><rect x="4.4037%" y="133" width="0.3471%" height="15" fill="rgb(223,131,22)" fg:x="3578" fg:w="282"/><text x="4.6967%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.10%)</title><rect x="4.7508%" y="133" width="0.0960%" height="15" fill="rgb(243,156,10)" fg:x="3860" fg:w="78"/><text x="5.0438%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,711 instructions, 2.11%)</title><rect x="2.9908%" y="149" width="2.1059%" height="15" fill="rgb(242,207,39)" fg:x="2430" fg:w="1711"/><text x="3.2838%" y="159.50">b..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.08%)</title><rect x="5.0967%" y="149" width="0.0775%" height="15" fill="rgb(219,196,36)" fg:x="4141" fg:w="63"/><text x="5.3896%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="5.1742%" y="149" width="0.0160%" height="15" fill="rgb(241,129,39)" fg:x="4204" fg:w="13"/><text x="5.4672%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="5.1902%" y="149" width="0.0160%" height="15" fill="rgb(211,169,15)" fg:x="4217" fg:w="13"/><text x="5.4832%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.02%)</title><rect x="5.2148%" y="149" width="0.0185%" height="15" fill="rgb(235,148,16)" fg:x="4237" fg:w="15"/><text x="5.5078%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.09%)</title><rect x="5.2333%" y="133" width="0.0874%" height="15" fill="rgb(235,47,10)" fg:x="4252" fg:w="71"/><text x="5.5263%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (154 instructions, 0.19%)</title><rect x="5.2333%" y="149" width="0.1895%" height="15" fill="rgb(236,182,34)" fg:x="4252" fg:w="154"/><text x="5.5263%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.15%)</title><rect x="5.4228%" y="117" width="0.1452%" height="15" fill="rgb(253,50,11)" fg:x="4406" fg:w="118"/><text x="5.7158%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (152 instructions, 0.19%)</title><rect x="5.4228%" y="133" width="0.1871%" height="15" fill="rgb(246,149,47)" fg:x="4406" fg:w="152"/><text x="5.7158%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (220 instructions, 0.27%)</title><rect x="5.4228%" y="149" width="0.2708%" height="15" fill="rgb(244,169,45)" fg:x="4406" fg:w="220"/><text x="5.7158%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="5.6936%" y="149" width="0.0935%" height="15" fill="rgb(218,197,52)" fg:x="4626" fg:w="76"/><text x="5.9866%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="5.7871%" y="149" width="0.0997%" height="15" fill="rgb(214,45,54)" fg:x="4702" fg:w="81"/><text x="6.0801%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="5.8868%" y="149" width="0.0935%" height="15" fill="rgb(252,210,22)" fg:x="4783" fg:w="76"/><text x="6.1798%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="5.9804%" y="149" width="0.0935%" height="15" fill="rgb(243,158,37)" fg:x="4859" fg:w="76"/><text x="6.2734%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="6.0764%" y="149" width="0.0997%" height="15" fill="rgb(248,110,9)" fg:x="4937" fg:w="81"/><text x="6.3694%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.49%)</title><rect x="6.1761%" y="149" width="0.4911%" height="15" fill="rgb(205,129,2)" fg:x="5018" fg:w="399"/><text x="6.4690%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.49%)</title><rect x="6.6672%" y="149" width="0.4911%" height="15" fill="rgb(246,135,46)" fg:x="5417" fg:w="399"/><text x="6.9601%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,496 instructions, 8.00%)</title><rect x="0.3040%" y="165" width="7.9952%" height="15" fill="rgb(230,198,38)" fg:x="247" fg:w="6496"/><text x="0.5970%" y="175.50">candid::d..</text></g><g><title>memcpy (354 instructions, 0.44%)</title><rect x="8.2992%" y="165" width="0.4357%" height="15" fill="rgb(237,150,52)" fg:x="6743" fg:w="354"/><text x="8.5921%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.05%)</title><rect x="8.7349%" y="165" width="0.0480%" height="15" fill="rgb(241,229,52)" fg:x="7097" fg:w="39"/><text x="9.0278%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="8.7829%" y="165" width="0.0935%" height="15" fill="rgb(223,202,54)" fg:x="7136" fg:w="76"/><text x="9.0758%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="8.8826%" y="133" width="0.0652%" height="15" fill="rgb(209,25,7)" fg:x="7217" fg:w="53"/><text x="9.1755%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.11%)</title><rect x="8.9478%" y="133" width="0.1083%" height="15" fill="rgb(212,37,12)" fg:x="7270" fg:w="88"/><text x="9.2408%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.20%)</title><rect x="9.0561%" y="133" width="0.1994%" height="15" fill="rgb(230,105,45)" fg:x="7358" fg:w="162"/><text x="9.3491%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.66%)</title><rect x="8.8826%" y="149" width="0.6646%" height="15" fill="rgb(211,74,6)" fg:x="7217" fg:w="540"/><text x="9.1755%" y="159.50"></text></g><g><title>candid::types::internal::env_add (749 instructions, 0.92%)</title><rect x="8.8764%" y="165" width="0.9219%" height="15" fill="rgb(237,90,29)" fg:x="7212" fg:w="749"/><text x="9.1694%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="9.7983%" y="165" width="0.1009%" height="15" fill="rgb(229,199,50)" fg:x="7961" fg:w="82"/><text x="10.0912%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="9.9054%" y="133" width="0.0652%" height="15" fill="rgb(205,39,11)" fg:x="8048" fg:w="53"/><text x="10.1983%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.11%)</title><rect x="9.9706%" y="133" width="0.1083%" height="15" fill="rgb(239,219,26)" fg:x="8101" fg:w="88"/><text x="10.2636%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.20%)</title><rect x="10.0789%" y="133" width="0.1994%" height="15" fill="rgb(253,106,16)" fg:x="8189" fg:w="162"/><text x="10.3719%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.66%)</title><rect x="9.9054%" y="149" width="0.6646%" height="15" fill="rgb(209,1,49)" fg:x="8048" fg:w="540"/><text x="10.1983%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.08%)</title><rect x="10.5700%" y="149" width="0.0837%" height="15" fill="rgb(227,74,47)" fg:x="8588" fg:w="68"/><text x="10.8629%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="10.6537%" y="133" width="0.0677%" height="15" fill="rgb(212,146,11)" fg:x="8656" fg:w="55"/><text x="10.9466%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 instructions, 0.10%)</title><rect x="10.6537%" y="149" width="0.1009%" height="15" fill="rgb(246,21,4)" fg:x="8656" fg:w="82"/><text x="10.9466%" y="159.50"></text></g><g><title>candid::types::internal::env_add (864 instructions, 1.06%)</title><rect x="9.8992%" y="165" width="1.0634%" height="15" fill="rgb(208,205,23)" fg:x="8043" fg:w="864"/><text x="10.1922%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="10.9626%" y="117" width="0.0652%" height="15" fill="rgb(216,72,44)" fg:x="8907" fg:w="53"/><text x="11.2556%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.10%)</title><rect x="10.9626%" y="133" width="0.0960%" height="15" fill="rgb(229,73,49)" fg:x="8907" fg:w="78"/><text x="11.2556%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 0.36%)</title><rect x="10.9626%" y="149" width="0.3606%" height="15" fill="rgb(240,62,53)" fg:x="8907" fg:w="293"/><text x="11.2556%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1622 (15 instructions, 0.02%)</title><rect x="11.3232%" y="149" width="0.0185%" height="15" fill="rgb(222,141,19)" fg:x="9200" fg:w="15"/><text x="11.6162%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.3417%" y="149" width="0.0135%" height="15" fill="rgb(249,7,37)" fg:x="9215" fg:w="11"/><text x="11.6346%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.59%)</title><rect x="10.9626%" y="165" width="0.5883%" height="15" fill="rgb(244,60,46)" fg:x="8907" fg:w="478"/><text x="11.2556%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.06%)</title><rect x="11.5509%" y="165" width="0.0578%" height="15" fill="rgb(217,144,31)" fg:x="9385" fg:w="47"/><text x="11.8439%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="11.6088%" y="149" width="0.0677%" height="15" fill="rgb(205,150,35)" fg:x="9432" fg:w="55"/><text x="11.9017%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="11.7097%" y="149" width="0.0677%" height="15" fill="rgb(227,51,43)" fg:x="9514" fg:w="55"/><text x="12.0027%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (164 instructions, 0.20%)</title><rect x="11.6088%" y="165" width="0.2018%" height="15" fill="rgb(216,192,43)" fg:x="9432" fg:w="164"/><text x="11.9017%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.03%)</title><rect x="11.8106%" y="149" width="0.0345%" height="15" fill="rgb(246,106,14)" fg:x="9596" fg:w="28"/><text x="12.1036%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.02%)</title><rect x="11.8451%" y="149" width="0.0197%" height="15" fill="rgb(218,151,48)" fg:x="9624" fg:w="16"/><text x="12.1380%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.02%)</title><rect x="11.8648%" y="149" width="0.0197%" height="15" fill="rgb(222,118,50)" fg:x="9640" fg:w="16"/><text x="12.1577%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (137 instructions, 0.17%)</title><rect x="11.8106%" y="165" width="0.1686%" height="15" fill="rgb(253,43,4)" fg:x="9596" fg:w="137"/><text x="12.1036%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.9792%" y="165" width="0.0135%" height="15" fill="rgb(220,229,14)" fg:x="9733" fg:w="11"/><text x="12.2722%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.9928%" y="165" width="0.0135%" height="15" fill="rgb(216,17,47)" fg:x="9744" fg:w="11"/><text x="12.2857%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="12.0063%" y="165" width="0.0135%" height="15" fill="rgb(225,83,28)" fg:x="9755" fg:w="11"/><text x="12.2993%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.50%)</title><rect x="12.0198%" y="165" width="0.5046%" height="15" fill="rgb(246,117,38)" fg:x="9766" fg:w="410"/><text x="12.3128%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.01%)</title><rect x="12.5245%" y="133" width="0.0148%" height="15" fill="rgb(221,80,21)" fg:x="10176" fg:w="12"/><text x="12.8174%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.12%)</title><rect x="12.5392%" y="133" width="0.1231%" height="15" fill="rgb(251,96,17)" fg:x="10188" fg:w="100"/><text x="12.8322%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="12.6623%" y="117" width="0.0997%" height="15" fill="rgb(229,229,20)" fg:x="10288" fg:w="81"/><text x="12.9553%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.13%)</title><rect x="12.6623%" y="133" width="0.1329%" height="15" fill="rgb(237,179,19)" fg:x="10288" fg:w="108"/><text x="12.9553%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="12.7952%" y="133" width="0.0135%" height="15" fill="rgb(224,42,39)" fg:x="10396" fg:w="11"/><text x="13.0882%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (271 instructions, 0.33%)</title><rect x="12.5245%" y="149" width="0.3335%" height="15" fill="rgb(254,191,53)" fg:x="10176" fg:w="271"/><text x="12.8174%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (309 instructions, 0.38%)</title><rect x="12.5245%" y="165" width="0.3803%" height="15" fill="rgb(221,218,13)" fg:x="10176" fg:w="309"/><text x="12.8174%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.15%)</title><rect x="12.9048%" y="165" width="0.1514%" height="15" fill="rgb(239,190,23)" fg:x="10485" fg:w="123"/><text x="13.1977%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (10,831 instructions, 13.33%)</title><rect x="0.2105%" y="181" width="13.3306%" height="15" fill="rgb(219,3,25)" fg:x="171" fg:w="10831"/><text x="0.5034%" y="191.50">ic_cdk::api::call..</text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="13.5411%" y="165" width="0.1772%" height="15" fill="rgb(241,151,17)" fg:x="11002" fg:w="144"/><text x="13.8341%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="13.7183%" y="165" width="0.1772%" height="15" fill="rgb(210,229,20)" fg:x="11146" fg:w="144"/><text x="14.0113%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="14.0125%" y="165" width="0.0234%" height="15" fill="rgb(237,44,24)" fg:x="11385" fg:w="19"/><text x="14.3054%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="14.0359%" y="165" width="0.0234%" height="15" fill="rgb(251,211,8)" fg:x="11404" fg:w="19"/><text x="14.3288%" y="175.50"></text></g><g><title>memmove (298 instructions, 0.37%)</title><rect x="14.0592%" y="149" width="0.3668%" height="15" fill="rgb(231,76,30)" fg:x="11423" fg:w="298"/><text x="14.3522%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="14.4260%" y="149" width="0.2092%" height="15" fill="rgb(212,137,51)" fg:x="11721" fg:w="170"/><text x="14.7190%" y="159.50"></text></g><g><title>memmove (298 instructions, 0.37%)</title><rect x="14.6353%" y="149" width="0.3668%" height="15" fill="rgb(208,76,11)" fg:x="11891" fg:w="298"/><text x="14.9282%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="15.0020%" y="149" width="0.2092%" height="15" fill="rgb(205,104,39)" fg:x="12189" fg:w="170"/><text x="15.2950%" y="159.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="15.2113%" y="149" width="0.2191%" height="15" fill="rgb(229,203,43)" fg:x="12359" fg:w="178"/><text x="15.5042%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="15.4303%" y="149" width="0.0997%" height="15" fill="rgb(241,138,38)" fg:x="12537" fg:w="81"/><text x="15.7233%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,517 instructions, 1.87%)</title><rect x="14.0592%" y="165" width="1.8671%" height="15" fill="rgb(246,184,48)" fg:x="11423" fg:w="1517"/><text x="14.3522%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.1516%" y="165" width="0.0234%" height="15" fill="rgb(249,59,26)" fg:x="13123" fg:w="19"/><text x="16.4446%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.1750%" y="165" width="0.0234%" height="15" fill="rgb(230,135,28)" fg:x="13142" fg:w="19"/><text x="16.4679%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.3153%" y="165" width="0.0234%" height="15" fill="rgb(218,160,4)" fg:x="13256" fg:w="19"/><text x="16.6082%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.3387%" y="165" width="0.0234%" height="15" fill="rgb(228,179,25)" fg:x="13275" fg:w="19"/><text x="16.6316%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="16.3620%" y="149" width="0.0135%" height="15" fill="rgb(245,58,22)" fg:x="13294" fg:w="11"/><text x="16.6550%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="16.3756%" y="149" width="0.0135%" height="15" fill="rgb(211,110,17)" fg:x="13305" fg:w="11"/><text x="16.6686%" y="159.50"></text></g><g><title>memmove (268 instructions, 0.33%)</title><rect x="16.3891%" y="149" width="0.3299%" height="15" fill="rgb(205,52,10)" fg:x="13316" fg:w="268"/><text x="16.6821%" y="159.50"></text></g><g><title>memmove (268 instructions, 0.33%)</title><rect x="16.7190%" y="149" width="0.3299%" height="15" fill="rgb(242,17,28)" fg:x="13584" fg:w="268"/><text x="17.0119%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_right (701 instructions, 0.86%)</title><rect x="16.3620%" y="165" width="0.8628%" height="15" fill="rgb(218,219,6)" fg:x="13294" fg:w="701"/><text x="16.6550%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="17.4513%" y="165" width="0.0234%" height="15" fill="rgb(214,142,10)" fg:x="14179" fg:w="19"/><text x="17.7443%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="17.4747%" y="165" width="0.0234%" height="15" fill="rgb(246,155,49)" fg:x="14198" fg:w="19"/><text x="17.7676%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="17.6150%" y="165" width="0.2191%" height="15" fill="rgb(220,24,49)" fg:x="14312" fg:w="178"/><text x="17.9080%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="17.8341%" y="165" width="0.2191%" height="15" fill="rgb(209,70,45)" fg:x="14490" fg:w="178"/><text x="18.1270%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.1701%" y="165" width="0.0234%" height="15" fill="rgb(226,27,50)" fg:x="14763" fg:w="19"/><text x="18.4630%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.1935%" y="165" width="0.0234%" height="15" fill="rgb(236,111,33)" fg:x="14782" fg:w="19"/><text x="18.4864%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.3338%" y="165" width="0.0234%" height="15" fill="rgb(211,125,29)" fg:x="14896" fg:w="19"/><text x="18.6267%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.3571%" y="165" width="0.0234%" height="15" fill="rgb(235,47,35)" fg:x="14915" fg:w="19"/><text x="18.6501%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.4975%" y="165" width="0.0234%" height="15" fill="rgb(251,1,28)" fg:x="15029" fg:w="19"/><text x="18.7904%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.5208%" y="165" width="0.0234%" height="15" fill="rgb(229,192,39)" fg:x="15048" fg:w="19"/><text x="18.8138%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.6612%" y="165" width="0.0234%" height="15" fill="rgb(235,63,11)" fg:x="15162" fg:w="19"/><text x="18.9541%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.6845%" y="165" width="0.0234%" height="15" fill="rgb(254,213,44)" fg:x="15181" fg:w="19"/><text x="18.9775%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.8248%" y="165" width="0.0234%" height="15" fill="rgb(248,32,1)" fg:x="15295" fg:w="19"/><text x="19.1178%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.8482%" y="165" width="0.0234%" height="15" fill="rgb(214,143,32)" fg:x="15314" fg:w="19"/><text x="19.1412%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.9885%" y="165" width="0.0234%" height="15" fill="rgb(232,67,27)" fg:x="15428" fg:w="19"/><text x="19.2815%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.0119%" y="165" width="0.0234%" height="15" fill="rgb(223,187,2)" fg:x="15447" fg:w="19"/><text x="19.3049%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.1522%" y="165" width="0.0234%" height="15" fill="rgb(240,21,48)" fg:x="15561" fg:w="19"/><text x="19.4452%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.1756%" y="165" width="0.0234%" height="15" fill="rgb(248,216,0)" fg:x="15580" fg:w="19"/><text x="19.4686%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.3159%" y="165" width="0.0234%" height="15" fill="rgb(254,183,22)" fg:x="15694" fg:w="19"/><text x="19.6089%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.3393%" y="165" width="0.0234%" height="15" fill="rgb(239,70,27)" fg:x="15713" fg:w="19"/><text x="19.6323%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="19.4796%" y="165" width="0.2560%" height="15" fill="rgb(213,30,53)" fg:x="15827" fg:w="208"/><text x="19.7726%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="19.7356%" y="165" width="0.2560%" height="15" fill="rgb(227,206,47)" fg:x="16035" fg:w="208"/><text x="20.0286%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.1086%" y="165" width="0.0234%" height="15" fill="rgb(242,32,47)" fg:x="16338" fg:w="19"/><text x="20.4015%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.1319%" y="165" width="0.0234%" height="15" fill="rgb(246,198,0)" fg:x="16357" fg:w="19"/><text x="20.4249%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.2722%" y="165" width="0.0234%" height="15" fill="rgb(251,207,8)" fg:x="16471" fg:w="19"/><text x="20.5652%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.2956%" y="165" width="0.0234%" height="15" fill="rgb(253,183,31)" fg:x="16490" fg:w="19"/><text x="20.5886%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.4359%" y="165" width="0.0234%" height="15" fill="rgb(212,15,40)" fg:x="16604" fg:w="19"/><text x="20.7289%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.4593%" y="165" width="0.0234%" height="15" fill="rgb(233,140,38)" fg:x="16623" fg:w="19"/><text x="20.7523%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.5996%" y="165" width="0.0234%" height="15" fill="rgb(249,155,17)" fg:x="16737" fg:w="19"/><text x="20.8926%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.6230%" y="165" width="0.0234%" height="15" fill="rgb(250,66,3)" fg:x="16756" fg:w="19"/><text x="20.9160%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.7633%" y="165" width="0.0234%" height="15" fill="rgb(226,169,35)" fg:x="16870" fg:w="19"/><text x="21.0563%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.7867%" y="165" width="0.0234%" height="15" fill="rgb(206,218,13)" fg:x="16889" fg:w="19"/><text x="21.0797%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.9270%" y="165" width="0.0234%" height="15" fill="rgb(224,27,16)" fg:x="17003" fg:w="19"/><text x="21.2200%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.9504%" y="165" width="0.0234%" height="15" fill="rgb(216,124,32)" fg:x="17022" fg:w="19"/><text x="21.2434%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.0907%" y="165" width="0.0234%" height="15" fill="rgb(239,58,10)" fg:x="17136" fg:w="19"/><text x="21.3837%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.1141%" y="165" width="0.0234%" height="15" fill="rgb(212,212,48)" fg:x="17155" fg:w="19"/><text x="21.4071%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.2544%" y="165" width="0.0234%" height="15" fill="rgb(230,144,38)" fg:x="17269" fg:w="19"/><text x="21.5474%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.2778%" y="165" width="0.0234%" height="15" fill="rgb(233,120,30)" fg:x="17288" fg:w="19"/><text x="21.5708%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.4181%" y="165" width="0.0234%" height="15" fill="rgb(217,15,7)" fg:x="17402" fg:w="19"/><text x="21.7111%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.4415%" y="165" width="0.0234%" height="15" fill="rgb(235,170,22)" fg:x="17421" fg:w="19"/><text x="21.7345%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.5818%" y="165" width="0.0234%" height="15" fill="rgb(219,211,19)" fg:x="17535" fg:w="19"/><text x="21.8748%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.6052%" y="165" width="0.0234%" height="15" fill="rgb(224,137,11)" fg:x="17554" fg:w="19"/><text x="21.8982%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.7455%" y="165" width="0.0234%" height="15" fill="rgb(222,32,42)" fg:x="17668" fg:w="19"/><text x="22.0385%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.7689%" y="165" width="0.0234%" height="15" fill="rgb(206,223,8)" fg:x="17687" fg:w="19"/><text x="22.0619%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.9092%" y="165" width="0.0234%" height="15" fill="rgb(240,9,29)" fg:x="17801" fg:w="19"/><text x="22.2022%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.9326%" y="165" width="0.0234%" height="15" fill="rgb(212,118,33)" fg:x="17820" fg:w="19"/><text x="22.2255%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.0729%" y="165" width="0.0234%" height="15" fill="rgb(223,198,40)" fg:x="17934" fg:w="19"/><text x="22.3659%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.0963%" y="165" width="0.0234%" height="15" fill="rgb(216,125,9)" fg:x="17953" fg:w="19"/><text x="22.3892%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.2366%" y="165" width="0.0234%" height="15" fill="rgb(228,135,49)" fg:x="18067" fg:w="19"/><text x="22.5296%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.2600%" y="165" width="0.0234%" height="15" fill="rgb(218,84,17)" fg:x="18086" fg:w="19"/><text x="22.5529%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.4003%" y="165" width="0.0234%" height="15" fill="rgb(208,16,17)" fg:x="18200" fg:w="19"/><text x="22.6932%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.4237%" y="165" width="0.0234%" height="15" fill="rgb(233,163,14)" fg:x="18219" fg:w="19"/><text x="22.7166%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="22.5640%" y="165" width="0.2191%" height="15" fill="rgb(226,89,43)" fg:x="18333" fg:w="178"/><text x="22.8569%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="22.7830%" y="165" width="0.2191%" height="15" fill="rgb(205,1,39)" fg:x="18511" fg:w="178"/><text x="23.0760%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.1191%" y="165" width="0.0234%" height="15" fill="rgb(231,170,24)" fg:x="18784" fg:w="19"/><text x="23.4120%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.1424%" y="165" width="0.0234%" height="15" fill="rgb(237,68,44)" fg:x="18803" fg:w="19"/><text x="23.4354%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.2827%" y="165" width="0.0234%" height="15" fill="rgb(230,18,16)" fg:x="18917" fg:w="19"/><text x="23.5757%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.3061%" y="165" width="0.0234%" height="15" fill="rgb(251,204,9)" fg:x="18936" fg:w="19"/><text x="23.5991%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.4464%" y="165" width="0.0234%" height="15" fill="rgb(236,171,23)" fg:x="19050" fg:w="19"/><text x="23.7394%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.4698%" y="165" width="0.0234%" height="15" fill="rgb(217,112,45)" fg:x="19069" fg:w="19"/><text x="23.7628%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.6101%" y="165" width="0.0234%" height="15" fill="rgb(223,88,19)" fg:x="19183" fg:w="19"/><text x="23.9031%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.6335%" y="165" width="0.0234%" height="15" fill="rgb(253,97,6)" fg:x="19202" fg:w="19"/><text x="23.9265%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.7738%" y="165" width="0.0234%" height="15" fill="rgb(225,192,35)" fg:x="19316" fg:w="19"/><text x="24.0668%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.7972%" y="165" width="0.0234%" height="15" fill="rgb(231,28,11)" fg:x="19335" fg:w="19"/><text x="24.0902%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.24%)</title><rect x="23.8206%" y="149" width="0.2388%" height="15" fill="rgb(241,71,9)" fg:x="19354" fg:w="194"/><text x="24.1136%" y="159.50"></text></g><g><title>memmove (194 instructions, 0.24%)</title><rect x="24.0594%" y="149" width="0.2388%" height="15" fill="rgb(229,41,7)" fg:x="19548" fg:w="194"/><text x="24.3523%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="24.2981%" y="149" width="0.0135%" height="15" fill="rgb(246,228,19)" fg:x="19742" fg:w="11"/><text x="24.5911%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="24.3117%" y="149" width="0.0135%" height="15" fill="rgb(240,5,6)" fg:x="19753" fg:w="11"/><text x="24.6047%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_left (553 instructions, 0.68%)</title><rect x="23.8206%" y="165" width="0.6806%" height="15" fill="rgb(211,4,12)" fg:x="19354" fg:w="553"/><text x="24.1136%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="24.7326%" y="165" width="0.1772%" height="15" fill="rgb(221,228,38)" fg:x="20095" fg:w="144"/><text x="25.0256%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="24.9098%" y="165" width="0.1772%" height="15" fill="rgb(243,151,1)" fg:x="20239" fg:w="144"/><text x="25.2028%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.2040%" y="165" width="0.0234%" height="15" fill="rgb(207,93,29)" fg:x="20478" fg:w="19"/><text x="25.4970%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.2274%" y="165" width="0.0234%" height="15" fill="rgb(216,141,36)" fg:x="20497" fg:w="19"/><text x="25.5204%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.3677%" y="165" width="0.0234%" height="15" fill="rgb(245,91,10)" fg:x="20611" fg:w="19"/><text x="25.6607%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.3911%" y="165" width="0.0234%" height="15" fill="rgb(214,224,52)" fg:x="20630" fg:w="19"/><text x="25.6841%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="25.5314%" y="165" width="0.2560%" height="15" fill="rgb(248,59,29)" fg:x="20744" fg:w="208"/><text x="25.8244%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="25.7874%" y="165" width="0.2560%" height="15" fill="rgb(206,51,23)" fg:x="20952" fg:w="208"/><text x="26.0804%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.1603%" y="165" width="0.0234%" height="15" fill="rgb(219,136,33)" fg:x="21255" fg:w="19"/><text x="26.4533%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.1837%" y="165" width="0.0234%" height="15" fill="rgb(241,14,29)" fg:x="21274" fg:w="19"/><text x="26.4767%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.2071%" y="149" width="0.0234%" height="15" fill="rgb(210,216,26)" fg:x="21293" fg:w="19"/><text x="26.5001%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="26.2305%" y="149" width="0.2092%" height="15" fill="rgb(235,175,3)" fg:x="21312" fg:w="170"/><text x="26.5234%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.4397%" y="149" width="0.0234%" height="15" fill="rgb(225,71,41)" fg:x="21482" fg:w="19"/><text x="26.7327%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="26.4631%" y="149" width="0.2092%" height="15" fill="rgb(229,197,24)" fg:x="21501" fg:w="170"/><text x="26.7561%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.6723%" y="149" width="0.0234%" height="15" fill="rgb(214,146,26)" fg:x="21671" fg:w="19"/><text x="26.9653%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (78 instructions, 0.10%)</title><rect x="26.6957%" y="149" width="0.0960%" height="15" fill="rgb(214,31,9)" fg:x="21690" fg:w="78"/><text x="26.9887%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (654 instructions, 0.80%)</title><rect x="26.2071%" y="165" width="0.8049%" height="15" fill="rgb(224,20,51)" fg:x="21293" fg:w="654"/><text x="26.5001%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.2373%" y="165" width="0.0234%" height="15" fill="rgb(220,209,15)" fg:x="22130" fg:w="19"/><text x="27.5302%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.2606%" y="165" width="0.0234%" height="15" fill="rgb(209,135,51)" fg:x="22149" fg:w="19"/><text x="27.5536%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.4010%" y="165" width="0.0234%" height="15" fill="rgb(219,64,4)" fg:x="22263" fg:w="19"/><text x="27.6939%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.4243%" y="165" width="0.0234%" height="15" fill="rgb(208,12,35)" fg:x="22282" fg:w="19"/><text x="27.7173%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.5646%" y="165" width="0.0234%" height="15" fill="rgb(246,1,18)" fg:x="22396" fg:w="19"/><text x="27.8576%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.5880%" y="165" width="0.0234%" height="15" fill="rgb(234,205,51)" fg:x="22415" fg:w="19"/><text x="27.8810%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.7283%" y="165" width="0.0234%" height="15" fill="rgb(254,180,7)" fg:x="22529" fg:w="19"/><text x="28.0213%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.7517%" y="165" width="0.0234%" height="15" fill="rgb(228,147,27)" fg:x="22548" fg:w="19"/><text x="28.0447%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.8920%" y="165" width="0.0234%" height="15" fill="rgb(238,12,12)" fg:x="22662" fg:w="19"/><text x="28.1850%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.9154%" y="165" width="0.0234%" height="15" fill="rgb(247,221,13)" fg:x="22681" fg:w="19"/><text x="28.2084%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.0557%" y="165" width="0.0234%" height="15" fill="rgb(224,194,23)" fg:x="22795" fg:w="19"/><text x="28.3487%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.0791%" y="165" width="0.0234%" height="15" fill="rgb(229,0,8)" fg:x="22814" fg:w="19"/><text x="28.3721%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.2194%" y="165" width="0.0234%" height="15" fill="rgb(216,2,30)" fg:x="22928" fg:w="19"/><text x="28.5124%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.2428%" y="165" width="0.0234%" height="15" fill="rgb(227,15,46)" fg:x="22947" fg:w="19"/><text x="28.5358%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.3831%" y="165" width="0.0234%" height="15" fill="rgb(214,113,28)" fg:x="23061" fg:w="19"/><text x="28.6761%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.4065%" y="165" width="0.0234%" height="15" fill="rgb(222,182,49)" fg:x="23080" fg:w="19"/><text x="28.6995%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="28.5468%" y="165" width="0.2560%" height="15" fill="rgb(232,187,40)" fg:x="23194" fg:w="208"/><text x="28.8398%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="28.8028%" y="165" width="0.2560%" height="15" fill="rgb(241,83,20)" fg:x="23402" fg:w="208"/><text x="29.0958%" y="175.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (12,703 instructions, 15.63%)</title><rect x="13.5411%" y="181" width="15.6347%" height="15" fill="rgb(249,126,42)" fg:x="11002" fg:w="12703"/><text x="13.8341%" y="191.50">alloc::collections::..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.07%)</title><rect x="29.1819%" y="133" width="0.0689%" height="15" fill="rgb(220,227,13)" fg:x="23710" fg:w="56"/><text x="29.4749%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (83 instructions, 0.10%)</title><rect x="29.1819%" y="149" width="0.1022%" height="15" fill="rgb(215,154,6)" fg:x="23710" fg:w="83"/><text x="29.4749%" y="159.50"></text></g><g><title>memset (136 instructions, 0.17%)</title><rect x="29.2841%" y="149" width="0.1674%" height="15" fill="rgb(233,180,37)" fg:x="23793" fg:w="136"/><text x="29.5770%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (384 instructions, 0.47%)</title><rect x="29.1757%" y="165" width="0.4726%" height="15" fill="rgb(215,188,36)" fg:x="23705" fg:w="384"/><text x="29.4687%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.04%)</title><rect x="29.6484%" y="149" width="0.0394%" height="15" fill="rgb(225,71,9)" fg:x="24089" fg:w="32"/><text x="29.9413%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="29.6878%" y="101" width="0.0935%" height="15" fill="rgb(233,146,34)" fg:x="24121" fg:w="76"/><text x="29.9807%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.14%)</title><rect x="29.6878%" y="117" width="0.1354%" height="15" fill="rgb(215,94,50)" fg:x="24121" fg:w="110"/><text x="29.9807%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.22%)</title><rect x="29.6878%" y="133" width="0.2154%" height="15" fill="rgb(222,41,51)" fg:x="24121" fg:w="175"/><text x="29.9807%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="29.9031%" y="133" width="0.0135%" height="15" fill="rgb(241,16,18)" fg:x="24296" fg:w="11"/><text x="30.1961%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="29.9167%" y="133" width="0.0135%" height="15" fill="rgb(216,106,4)" fg:x="24307" fg:w="11"/><text x="30.2096%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (359 instructions, 0.44%)</title><rect x="29.6878%" y="149" width="0.4419%" height="15" fill="rgb(230,81,12)" fg:x="24121" fg:w="359"/><text x="29.9807%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.04%)</title><rect x="30.1296%" y="149" width="0.0369%" height="15" fill="rgb(231,36,33)" fg:x="24480" fg:w="30"/><text x="30.4226%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (494 instructions, 0.61%)</title><rect x="29.6484%" y="165" width="0.6080%" height="15" fill="rgb(253,208,1)" fg:x="24089" fg:w="494"/><text x="29.9413%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="30.2625%" y="165" width="0.0677%" height="15" fill="rgb(252,111,46)" fg:x="24588" fg:w="55"/><text x="30.5555%" y="175.50"></text></g><g><title>candid::utils::write_args (1,002 instructions, 1.23%)</title><rect x="29.1757%" y="181" width="1.2332%" height="15" fill="rgb(208,142,38)" fg:x="23705" fg:w="1002"/><text x="29.4687%" y="191.50"></text></g><g><title>btreemap::batch_remove_7_::{{closure}} (80,719 instructions, 99.35%)</title><rect x="0.2105%" y="197" width="99.3477%" height="15" fill="rgb(214,59,38)" fg:x="171" fg:w="80719"/><text x="0.5034%" y="207.50">btreemap::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.01%)</title><rect x="99.5581%" y="197" width="0.0148%" height="15" fill="rgb(224,29,13)" fg:x="80890" fg:w="12"/><text x="99.8511%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="99.5729%" y="197" width="0.0997%" height="15" fill="rgb(228,153,9)" fg:x="80902" fg:w="81"/><text x="99.8659%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.21%)</title><rect x="99.6726%" y="197" width="0.2068%" height="15" fill="rgb(253,24,39)" fg:x="80983" fg:w="168"/><text x="99.9656%" y="207.50"></text></g><g><title>all (81,249 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(220,227,53)" fg:x="0" fg:w="81249"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (81,249 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,113,11)" fg:x="0" fg:w="81249"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>