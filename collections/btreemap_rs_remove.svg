<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="85332"><g><title>ic_cdk::setup (24 instructions, 0.03%)</title><rect x="0.0000%" y="197" width="0.0281%" height="15" fill="rgb(205,63,6)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="0.0281%" y="197" width="0.0973%" height="15" fill="rgb(219,137,22)" fg:x="24" fg:w="83"/><text x="0.3211%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="0.1254%" y="197" width="0.0973%" height="15" fill="rgb(243,198,39)" fg:x="107" fg:w="83"/><text x="0.4184%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="0.2227%" y="165" width="0.0973%" height="15" fill="rgb(224,120,4)" fg:x="190" fg:w="83"/><text x="0.5156%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.10%)</title><rect x="0.3199%" y="149" width="0.0961%" height="15" fill="rgb(224,4,48)" fg:x="273" fg:w="82"/><text x="0.6129%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.52%)</title><rect x="0.4160%" y="149" width="0.5156%" height="15" fill="rgb(217,108,48)" fg:x="355" fg:w="440"/><text x="0.7090%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.11%)</title><rect x="0.9317%" y="149" width="0.1113%" height="15" fill="rgb(226,204,29)" fg:x="795" fg:w="95"/><text x="1.2246%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.0430%" y="149" width="0.0703%" height="15" fill="rgb(241,54,21)" fg:x="890" fg:w="60"/><text x="1.3360%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.1133%" y="149" width="0.0703%" height="15" fill="rgb(207,14,34)" fg:x="950" fg:w="60"/><text x="1.4063%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.1836%" y="149" width="0.0703%" height="15" fill="rgb(219,69,4)" fg:x="1010" fg:w="60"/><text x="1.4766%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.2539%" y="149" width="0.0703%" height="15" fill="rgb(238,91,0)" fg:x="1070" fg:w="60"/><text x="1.5469%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.10%)</title><rect x="1.3242%" y="149" width="0.0961%" height="15" fill="rgb(232,126,4)" fg:x="1130" fg:w="82"/><text x="1.6172%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.08%)</title><rect x="1.4203%" y="149" width="0.0820%" height="15" fill="rgb(240,113,12)" fg:x="1212" fg:w="70"/><text x="1.7133%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.52%)</title><rect x="1.5024%" y="149" width="0.5156%" height="15" fill="rgb(225,189,8)" fg:x="1282" fg:w="440"/><text x="1.7953%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="2.0180%" y="149" width="0.0223%" height="15" fill="rgb(211,107,48)" fg:x="1722" fg:w="19"/><text x="2.3110%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="2.0403%" y="133" width="0.0973%" height="15" fill="rgb(243,10,42)" fg:x="1741" fg:w="83"/><text x="2.3332%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.08%)</title><rect x="2.1375%" y="101" width="0.0785%" height="15" fill="rgb(253,36,6)" fg:x="1824" fg:w="67"/><text x="2.4305%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.11%)</title><rect x="2.1375%" y="117" width="0.1148%" height="15" fill="rgb(244,87,19)" fg:x="1824" fg:w="98"/><text x="2.4305%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="2.2524%" y="69" width="0.0129%" height="15" fill="rgb(226,19,33)" fg:x="1922" fg:w="11"/><text x="2.5453%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="2.2653%" y="53" width="0.0410%" height="15" fill="rgb(226,16,18)" fg:x="1933" fg:w="35"/><text x="2.5582%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.08%)</title><rect x="2.2653%" y="69" width="0.0773%" height="15" fill="rgb(254,8,36)" fg:x="1933" fg:w="66"/><text x="2.5582%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.17%)</title><rect x="2.2524%" y="85" width="0.1723%" height="15" fill="rgb(241,174,44)" fg:x="1922" fg:w="147"/><text x="2.5453%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.25%)</title><rect x="2.2524%" y="101" width="0.2484%" height="15" fill="rgb(213,55,20)" fg:x="1922" fg:w="212"/><text x="2.5453%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.26%)</title><rect x="2.2524%" y="117" width="0.2602%" height="15" fill="rgb(237,148,54)" fg:x="1922" fg:w="222"/><text x="2.5453%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 0.54%)</title><rect x="2.1375%" y="133" width="0.5402%" height="15" fill="rgb(236,88,40)" fg:x="1824" fg:w="461"/><text x="2.4305%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 0.81%)</title><rect x="2.0403%" y="149" width="0.8074%" height="15" fill="rgb(219,226,41)" fg:x="1741" fg:w="689"/><text x="2.3332%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.11%)</title><rect x="2.8477%" y="149" width="0.1113%" height="15" fill="rgb(209,221,34)" fg:x="2430" fg:w="95"/><text x="3.1407%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="2.9590%" y="149" width="0.0703%" height="15" fill="rgb(236,224,19)" fg:x="2525" fg:w="60"/><text x="3.2520%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.09%)</title><rect x="3.0293%" y="149" width="0.0891%" height="15" fill="rgb(228,214,0)" fg:x="2585" fg:w="76"/><text x="3.3223%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.08%)</title><rect x="3.1184%" y="149" width="0.0820%" height="15" fill="rgb(246,28,4)" fg:x="2661" fg:w="70"/><text x="3.4114%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.52%)</title><rect x="3.2004%" y="133" width="0.5156%" height="15" fill="rgb(206,212,14)" fg:x="2731" fg:w="440"/><text x="3.4934%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="3.7161%" y="133" width="0.0223%" height="15" fill="rgb(212,22,50)" fg:x="3171" fg:w="19"/><text x="4.0090%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="3.7383%" y="117" width="0.0973%" height="15" fill="rgb(243,6,27)" fg:x="3190" fg:w="83"/><text x="4.0313%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.08%)</title><rect x="3.8356%" y="85" width="0.0785%" height="15" fill="rgb(233,62,26)" fg:x="3273" fg:w="67"/><text x="4.1286%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.11%)</title><rect x="3.8356%" y="101" width="0.1148%" height="15" fill="rgb(206,64,29)" fg:x="3273" fg:w="98"/><text x="4.1286%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="3.9505%" y="53" width="0.0129%" height="15" fill="rgb(245,77,30)" fg:x="3371" fg:w="11"/><text x="4.2434%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="3.9633%" y="37" width="0.0410%" height="15" fill="rgb(228,148,4)" fg:x="3382" fg:w="35"/><text x="4.2563%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.08%)</title><rect x="3.9633%" y="53" width="0.0773%" height="15" fill="rgb(240,199,48)" fg:x="3382" fg:w="66"/><text x="4.2563%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.17%)</title><rect x="3.9505%" y="69" width="0.1723%" height="15" fill="rgb(223,27,23)" fg:x="3371" fg:w="147"/><text x="4.2434%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.25%)</title><rect x="3.9505%" y="85" width="0.2484%" height="15" fill="rgb(217,189,11)" fg:x="3371" fg:w="212"/><text x="4.2434%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.26%)</title><rect x="3.9505%" y="101" width="0.2602%" height="15" fill="rgb(248,123,52)" fg:x="3371" fg:w="222"/><text x="4.2434%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 0.54%)</title><rect x="3.8356%" y="117" width="0.5402%" height="15" fill="rgb(220,216,18)" fg:x="3273" fg:w="461"/><text x="4.1286%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 0.81%)</title><rect x="3.7383%" y="133" width="0.8074%" height="15" fill="rgb(239,106,45)" fg:x="3190" fg:w="689"/><text x="4.0313%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.11%)</title><rect x="4.5458%" y="133" width="0.1113%" height="15" fill="rgb(249,60,13)" fg:x="3879" fg:w="95"/><text x="4.8387%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="4.6571%" y="133" width="0.0703%" height="15" fill="rgb(241,146,18)" fg:x="3974" fg:w="60"/><text x="4.9501%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.10%)</title><rect x="4.7274%" y="117" width="0.0961%" height="15" fill="rgb(227,199,29)" fg:x="4034" fg:w="82"/><text x="5.0204%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.11%)</title><rect x="4.8235%" y="117" width="0.1113%" height="15" fill="rgb(209,192,34)" fg:x="4116" fg:w="95"/><text x="5.1165%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.09%)</title><rect x="4.9348%" y="117" width="0.0891%" height="15" fill="rgb(252,118,43)" fg:x="4211" fg:w="76"/><text x="5.2278%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.39%)</title><rect x="4.7274%" y="133" width="0.3867%" height="15" fill="rgb(222,33,9)" fg:x="4034" fg:w="330"/><text x="5.0204%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="5.1141%" y="133" width="0.0961%" height="15" fill="rgb(228,138,9)" fg:x="4364" fg:w="82"/><text x="5.4071%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,960 instructions, 2.30%)</title><rect x="3.2004%" y="149" width="2.2969%" height="15" fill="rgb(213,186,9)" fg:x="2731" fg:w="1960"/><text x="3.4934%" y="159.50">b..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.09%)</title><rect x="5.4974%" y="149" width="0.0891%" height="15" fill="rgb(213,179,14)" fg:x="4691" fg:w="76"/><text x="5.7903%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="5.5864%" y="149" width="0.0176%" height="15" fill="rgb(247,214,6)" fg:x="4767" fg:w="15"/><text x="5.8794%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="5.6040%" y="149" width="0.0176%" height="15" fill="rgb(248,121,40)" fg:x="4782" fg:w="15"/><text x="5.8970%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.01%)</title><rect x="5.6216%" y="149" width="0.0105%" height="15" fill="rgb(240,70,5)" fg:x="4797" fg:w="9"/><text x="5.9145%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.02%)</title><rect x="5.6321%" y="149" width="0.0211%" height="15" fill="rgb(227,18,52)" fg:x="4806" fg:w="18"/><text x="5.9251%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (77 instructions, 0.09%)</title><rect x="5.6532%" y="133" width="0.0902%" height="15" fill="rgb(215,12,35)" fg:x="4824" fg:w="77"/><text x="5.9462%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (173 instructions, 0.20%)</title><rect x="5.6532%" y="149" width="0.2027%" height="15" fill="rgb(240,92,36)" fg:x="4824" fg:w="173"/><text x="5.9462%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (121 instructions, 0.14%)</title><rect x="5.8560%" y="117" width="0.1418%" height="15" fill="rgb(208,170,20)" fg:x="4997" fg:w="121"/><text x="6.1489%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (164 instructions, 0.19%)</title><rect x="5.8560%" y="133" width="0.1922%" height="15" fill="rgb(211,152,48)" fg:x="4997" fg:w="164"/><text x="6.1489%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (246 instructions, 0.29%)</title><rect x="5.8560%" y="149" width="0.2883%" height="15" fill="rgb(229,201,26)" fg:x="4997" fg:w="246"/><text x="6.1489%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="6.1442%" y="149" width="0.0973%" height="15" fill="rgb(216,176,48)" fg:x="5243" fg:w="83"/><text x="6.4372%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.10%)</title><rect x="6.2415%" y="149" width="0.1008%" height="15" fill="rgb(242,77,5)" fg:x="5326" fg:w="86"/><text x="6.5345%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="6.3423%" y="149" width="0.0973%" height="15" fill="rgb(251,221,15)" fg:x="5412" fg:w="83"/><text x="6.6353%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="6.4396%" y="149" width="0.0973%" height="15" fill="rgb(240,28,1)" fg:x="5495" fg:w="83"/><text x="6.7325%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.10%)</title><rect x="6.5415%" y="149" width="0.1008%" height="15" fill="rgb(220,165,47)" fg:x="5582" fg:w="86"/><text x="6.8345%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.50%)</title><rect x="6.6423%" y="149" width="0.5016%" height="15" fill="rgb(207,26,52)" fg:x="5668" fg:w="428"/><text x="6.9353%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.50%)</title><rect x="7.1439%" y="149" width="0.5016%" height="15" fill="rgb(251,25,35)" fg:x="6096" fg:w="428"/><text x="7.4368%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,398 instructions, 8.67%)</title><rect x="0.3199%" y="165" width="8.6697%" height="15" fill="rgb(238,72,21)" fg:x="273" fg:w="7398"/><text x="0.6129%" y="175.50">candid::de..</text></g><g><title>memcpy (380 instructions, 0.45%)</title><rect x="8.9896%" y="165" width="0.4453%" height="15" fill="rgb(218,196,54)" fg:x="7671" fg:w="380"/><text x="9.2826%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.02%)</title><rect x="9.4349%" y="149" width="0.0164%" height="15" fill="rgb(210,140,6)" fg:x="8051" fg:w="14"/><text x="9.7279%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.07%)</title><rect x="9.4349%" y="165" width="0.0738%" height="15" fill="rgb(242,187,37)" fg:x="8051" fg:w="63"/><text x="9.7279%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="9.5087%" y="165" width="0.0973%" height="15" fill="rgb(222,185,31)" fg:x="8114" fg:w="83"/><text x="9.8017%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.02%)</title><rect x="9.6060%" y="149" width="0.0164%" height="15" fill="rgb(229,14,35)" fg:x="8197" fg:w="14"/><text x="9.8990%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.07%)</title><rect x="9.6224%" y="133" width="0.0691%" height="15" fill="rgb(205,165,3)" fg:x="8211" fg:w="59"/><text x="9.9154%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.11%)</title><rect x="9.6916%" y="133" width="0.1102%" height="15" fill="rgb(206,9,29)" fg:x="8270" fg:w="94"/><text x="9.9845%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.20%)</title><rect x="9.8017%" y="133" width="0.2027%" height="15" fill="rgb(220,36,37)" fg:x="8364" fg:w="173"/><text x="10.0947%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.68%)</title><rect x="9.6224%" y="149" width="0.6785%" height="15" fill="rgb(245,185,38)" fg:x="8211" fg:w="579"/><text x="9.9154%" y="159.50"></text></g><g><title>candid::types::internal::env_add (821 instructions, 0.96%)</title><rect x="9.6060%" y="165" width="0.9621%" height="15" fill="rgb(244,48,23)" fg:x="8197" fg:w="821"/><text x="9.8990%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.11%)</title><rect x="10.5681%" y="165" width="0.1066%" height="15" fill="rgb(254,78,26)" fg:x="9018" fg:w="91"/><text x="10.8611%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.02%)</title><rect x="10.6748%" y="149" width="0.0164%" height="15" fill="rgb(210,3,35)" fg:x="9109" fg:w="14"/><text x="10.9677%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.07%)</title><rect x="10.6912%" y="133" width="0.0691%" height="15" fill="rgb(214,39,21)" fg:x="9123" fg:w="59"/><text x="10.9842%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.11%)</title><rect x="10.7603%" y="133" width="0.1102%" height="15" fill="rgb(229,24,27)" fg:x="9182" fg:w="94"/><text x="11.0533%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.20%)</title><rect x="10.8705%" y="133" width="0.2027%" height="15" fill="rgb(254,201,47)" fg:x="9276" fg:w="173"/><text x="11.1635%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.68%)</title><rect x="10.6912%" y="149" width="0.6785%" height="15" fill="rgb(210,84,49)" fg:x="9123" fg:w="579"/><text x="10.9842%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.09%)</title><rect x="11.3697%" y="149" width="0.0902%" height="15" fill="rgb(248,165,40)" fg:x="9702" fg:w="77"/><text x="11.6627%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="11.4599%" y="133" width="0.0703%" height="15" fill="rgb(222,203,8)" fg:x="9779" fg:w="60"/><text x="11.7529%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (95 instructions, 0.11%)</title><rect x="11.4599%" y="149" width="0.1113%" height="15" fill="rgb(219,208,29)" fg:x="9779" fg:w="95"/><text x="11.7529%" y="159.50"></text></g><g><title>candid::types::internal::env_add (960 instructions, 1.13%)</title><rect x="10.6748%" y="165" width="1.1250%" height="15" fill="rgb(240,96,20)" fg:x="9109" fg:w="960"/><text x="10.9677%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.07%)</title><rect x="11.7998%" y="117" width="0.0691%" height="15" fill="rgb(209,125,3)" fg:x="10069" fg:w="59"/><text x="12.0928%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.11%)</title><rect x="11.7998%" y="133" width="0.1102%" height="15" fill="rgb(227,135,8)" fg:x="10069" fg:w="94"/><text x="12.0928%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 0.37%)</title><rect x="11.7998%" y="149" width="0.3691%" height="15" fill="rgb(222,220,33)" fg:x="10069" fg:w="315"/><text x="12.0928%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1116 (18 instructions, 0.02%)</title><rect x="12.1689%" y="149" width="0.0211%" height="15" fill="rgb(219,86,6)" fg:x="10384" fg:w="18"/><text x="12.4619%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.1900%" y="149" width="0.0152%" height="15" fill="rgb(235,25,2)" fg:x="10402" fg:w="13"/><text x="12.4830%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 0.65%)</title><rect x="11.7998%" y="165" width="0.6457%" height="15" fill="rgb(225,85,37)" fg:x="10069" fg:w="551"/><text x="12.0928%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.06%)</title><rect x="12.4455%" y="165" width="0.0621%" height="15" fill="rgb(231,106,28)" fg:x="10620" fg:w="53"/><text x="12.7385%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="12.5076%" y="149" width="0.0703%" height="15" fill="rgb(205,136,29)" fg:x="10673" fg:w="60"/><text x="12.8006%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="12.6189%" y="149" width="0.0703%" height="15" fill="rgb(224,59,5)" fg:x="10768" fg:w="60"/><text x="12.9119%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (190 instructions, 0.22%)</title><rect x="12.5076%" y="165" width="0.2227%" height="15" fill="rgb(221,220,5)" fg:x="10673" fg:w="190"/><text x="12.8006%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.04%)</title><rect x="12.7303%" y="149" width="0.0398%" height="15" fill="rgb(231,53,27)" fg:x="10863" fg:w="34"/><text x="13.0232%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (18 instructions, 0.02%)</title><rect x="12.7701%" y="149" width="0.0211%" height="15" fill="rgb(235,74,46)" fg:x="10897" fg:w="18"/><text x="13.0631%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (18 instructions, 0.02%)</title><rect x="12.7912%" y="149" width="0.0211%" height="15" fill="rgb(249,219,35)" fg:x="10915" fg:w="18"/><text x="13.0842%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.20%)</title><rect x="12.7303%" y="165" width="0.1980%" height="15" fill="rgb(215,144,39)" fg:x="10863" fg:w="169"/><text x="13.0232%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.9283%" y="165" width="0.0152%" height="15" fill="rgb(221,71,12)" fg:x="11032" fg:w="13"/><text x="13.2213%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.9436%" y="165" width="0.0152%" height="15" fill="rgb(206,71,38)" fg:x="11045" fg:w="13"/><text x="13.2365%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.9588%" y="165" width="0.0152%" height="15" fill="rgb(246,207,29)" fg:x="11058" fg:w="13"/><text x="13.2518%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.52%)</title><rect x="12.9740%" y="165" width="0.5156%" height="15" fill="rgb(228,186,43)" fg:x="11071" fg:w="440"/><text x="13.2670%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.02%)</title><rect x="13.4897%" y="133" width="0.0223%" height="15" fill="rgb(221,81,39)" fg:x="11511" fg:w="19"/><text x="13.7826%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (109 instructions, 0.13%)</title><rect x="13.5119%" y="133" width="0.1277%" height="15" fill="rgb(247,154,43)" fg:x="11530" fg:w="109"/><text x="13.8049%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.10%)</title><rect x="13.6397%" y="117" width="0.1008%" height="15" fill="rgb(207,212,22)" fg:x="11639" fg:w="86"/><text x="13.9326%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.14%)</title><rect x="13.6397%" y="133" width="0.1418%" height="15" fill="rgb(206,49,3)" fg:x="11639" fg:w="121"/><text x="13.9326%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="13.7815%" y="133" width="0.0152%" height="15" fill="rgb(226,130,47)" fg:x="11760" fg:w="13"/><text x="14.0744%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (324 instructions, 0.38%)</title><rect x="13.4897%" y="149" width="0.3797%" height="15" fill="rgb(241,67,24)" fg:x="11511" fg:w="324"/><text x="13.7826%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (373 instructions, 0.44%)</title><rect x="13.4897%" y="165" width="0.4371%" height="15" fill="rgb(230,117,47)" fg:x="11511" fg:w="373"/><text x="13.7826%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.15%)</title><rect x="13.9268%" y="165" width="0.1547%" height="15" fill="rgb(234,50,53)" fg:x="11884" fg:w="132"/><text x="14.2197%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,294 instructions, 15.58%)</title><rect x="0.2227%" y="181" width="15.5791%" height="15" fill="rgb(238,106,11)" fg:x="190" fg:w="13294"/><text x="0.5156%" y="191.50">ic_cdk::api::call::a..</text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="15.8018%" y="165" width="0.3750%" height="15" fill="rgb(211,36,30)" fg:x="13484" fg:w="320"/><text x="16.0948%" y="175.50"></text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="16.1768%" y="165" width="0.3750%" height="15" fill="rgb(207,203,15)" fg:x="13804" fg:w="320"/><text x="16.4698%" y="175.50"></text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="16.6784%" y="165" width="0.3750%" height="15" fill="rgb(223,90,43)" fg:x="14232" fg:w="320"/><text x="16.9714%" y="175.50"></text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="17.0534%" y="165" width="0.3750%" height="15" fill="rgb(243,64,5)" fg:x="14552" fg:w="320"/><text x="17.3464%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.5550%" y="165" width="0.0270%" height="15" fill="rgb(244,189,37)" fg:x="14980" fg:w="23"/><text x="17.8479%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.5819%" y="165" width="0.0270%" height="15" fill="rgb(236,30,53)" fg:x="15003" fg:w="23"/><text x="17.8749%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.6089%" y="149" width="0.0270%" height="15" fill="rgb(221,3,53)" fg:x="15026" fg:w="23"/><text x="17.9018%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="17.6358%" y="149" width="0.2156%" height="15" fill="rgb(207,15,4)" fg:x="15049" fg:w="184"/><text x="17.9288%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.8515%" y="149" width="0.0270%" height="15" fill="rgb(254,180,10)" fg:x="15233" fg:w="23"/><text x="18.1444%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="17.8784%" y="149" width="0.2156%" height="15" fill="rgb(220,48,2)" fg:x="15256" fg:w="184"/><text x="18.1714%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="18.0940%" y="149" width="0.0270%" height="15" fill="rgb(209,51,8)" fg:x="15440" fg:w="23"/><text x="18.3870%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.10%)</title><rect x="18.1210%" y="149" width="0.1008%" height="15" fill="rgb(216,224,53)" fg:x="15463" fg:w="86"/><text x="18.4140%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (734 instructions, 0.86%)</title><rect x="17.6089%" y="165" width="0.8602%" height="15" fill="rgb(225,200,50)" fg:x="15026" fg:w="734"/><text x="17.9018%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="18.7104%" y="165" width="0.1875%" height="15" fill="rgb(231,8,20)" fg:x="15966" fg:w="160"/><text x="19.0034%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="18.8980%" y="165" width="0.1875%" height="15" fill="rgb(253,111,6)" fg:x="16126" fg:w="160"/><text x="19.1909%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="19.2120%" y="165" width="0.0270%" height="15" fill="rgb(252,159,53)" fg:x="16394" fg:w="23"/><text x="19.5050%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="19.2390%" y="165" width="0.0270%" height="15" fill="rgb(211,193,26)" fg:x="16417" fg:w="23"/><text x="19.5319%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.24%)</title><rect x="19.2659%" y="149" width="0.2402%" height="15" fill="rgb(222,204,31)" fg:x="16440" fg:w="205"/><text x="19.5589%" y="159.50"></text></g><g><title>memmove (205 instructions, 0.24%)</title><rect x="19.5062%" y="149" width="0.2402%" height="15" fill="rgb(233,7,5)" fg:x="16645" fg:w="205"/><text x="19.7991%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="19.7464%" y="149" width="0.0176%" height="15" fill="rgb(222,98,42)" fg:x="16850" fg:w="15"/><text x="20.0394%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="19.7640%" y="149" width="0.0176%" height="15" fill="rgb(206,13,11)" fg:x="16865" fg:w="15"/><text x="20.0569%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_left (606 instructions, 0.71%)</title><rect x="19.2659%" y="165" width="0.7102%" height="15" fill="rgb(214,41,46)" fg:x="16440" fg:w="606"/><text x="19.5589%" y="175.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="20.2234%" y="165" width="0.1500%" height="15" fill="rgb(214,76,41)" fg:x="17257" fg:w="128"/><text x="20.5163%" y="175.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="20.3734%" y="165" width="0.1500%" height="15" fill="rgb(226,63,26)" fg:x="17385" fg:w="128"/><text x="20.6663%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.6499%" y="165" width="0.0270%" height="15" fill="rgb(241,184,23)" fg:x="17621" fg:w="23"/><text x="20.9429%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.6769%" y="165" width="0.0270%" height="15" fill="rgb(249,132,13)" fg:x="17644" fg:w="23"/><text x="20.9699%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="20.8304%" y="165" width="0.1875%" height="15" fill="rgb(225,196,43)" fg:x="17775" fg:w="160"/><text x="21.1234%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="21.0179%" y="165" width="0.1875%" height="15" fill="rgb(231,72,53)" fg:x="17935" fg:w="160"/><text x="21.3109%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.3320%" y="165" width="0.0270%" height="15" fill="rgb(216,38,25)" fg:x="18203" fg:w="23"/><text x="21.6249%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.3589%" y="165" width="0.0270%" height="15" fill="rgb(222,126,19)" fg:x="18226" fg:w="23"/><text x="21.6519%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.5124%" y="165" width="0.0270%" height="15" fill="rgb(206,70,13)" fg:x="18357" fg:w="23"/><text x="21.8054%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.5394%" y="165" width="0.0270%" height="15" fill="rgb(233,89,51)" fg:x="18380" fg:w="23"/><text x="21.8324%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.6929%" y="165" width="0.0270%" height="15" fill="rgb(209,155,9)" fg:x="18511" fg:w="23"/><text x="21.9859%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.7199%" y="165" width="0.0270%" height="15" fill="rgb(218,79,37)" fg:x="18534" fg:w="23"/><text x="22.0128%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="21.8734%" y="165" width="0.2250%" height="15" fill="rgb(243,70,0)" fg:x="18665" fg:w="192"/><text x="22.1664%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="22.0984%" y="165" width="0.2250%" height="15" fill="rgb(219,229,0)" fg:x="18857" fg:w="192"/><text x="22.3914%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="22.4500%" y="165" width="0.3000%" height="15" fill="rgb(205,93,39)" fg:x="19157" fg:w="256"/><text x="22.7429%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="22.7500%" y="165" width="0.3000%" height="15" fill="rgb(234,61,42)" fg:x="19413" fg:w="256"/><text x="23.0429%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="23.1765%" y="165" width="0.0270%" height="15" fill="rgb(209,87,6)" fg:x="19777" fg:w="23"/><text x="23.4695%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="23.2035%" y="165" width="0.0270%" height="15" fill="rgb(208,15,44)" fg:x="19800" fg:w="23"/><text x="23.4965%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="23.3570%" y="165" width="0.1840%" height="15" fill="rgb(233,184,37)" fg:x="19931" fg:w="157"/><text x="23.6500%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="23.5410%" y="165" width="0.1840%" height="15" fill="rgb(238,214,44)" fg:x="20088" fg:w="157"/><text x="23.8340%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="23.8515%" y="165" width="0.1875%" height="15" fill="rgb(237,196,43)" fg:x="20353" fg:w="160"/><text x="24.1445%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="24.0390%" y="165" width="0.1875%" height="15" fill="rgb(235,217,37)" fg:x="20513" fg:w="160"/><text x="24.3320%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="24.3531%" y="165" width="0.0270%" height="15" fill="rgb(234,23,54)" fg:x="20781" fg:w="23"/><text x="24.6461%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="24.3801%" y="165" width="0.0270%" height="15" fill="rgb(225,21,44)" fg:x="20804" fg:w="23"/><text x="24.6730%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="24.5336%" y="165" width="0.2250%" height="15" fill="rgb(242,195,27)" fg:x="20935" fg:w="192"/><text x="24.8266%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="24.7586%" y="165" width="0.2250%" height="15" fill="rgb(242,6,17)" fg:x="21127" fg:w="192"/><text x="25.0516%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.1102%" y="165" width="0.0270%" height="15" fill="rgb(245,140,19)" fg:x="21427" fg:w="23"/><text x="25.4031%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.1371%" y="165" width="0.0270%" height="15" fill="rgb(253,106,22)" fg:x="21450" fg:w="23"/><text x="25.4301%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="25.2906%" y="165" width="0.2625%" height="15" fill="rgb(230,53,36)" fg:x="21581" fg:w="224"/><text x="25.5836%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="25.5531%" y="165" width="0.2625%" height="15" fill="rgb(253,187,41)" fg:x="21805" fg:w="224"/><text x="25.8461%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.9422%" y="165" width="0.0270%" height="15" fill="rgb(223,151,27)" fg:x="22137" fg:w="23"/><text x="26.2352%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.9692%" y="165" width="0.0270%" height="15" fill="rgb(226,178,3)" fg:x="22160" fg:w="23"/><text x="26.2621%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.1227%" y="165" width="0.0270%" height="15" fill="rgb(223,11,21)" fg:x="22291" fg:w="23"/><text x="26.4156%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.1496%" y="165" width="0.0270%" height="15" fill="rgb(248,2,40)" fg:x="22314" fg:w="23"/><text x="26.4426%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.3031%" y="165" width="0.0270%" height="15" fill="rgb(225,7,42)" fg:x="22445" fg:w="23"/><text x="26.5961%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.3301%" y="165" width="0.0270%" height="15" fill="rgb(215,43,51)" fg:x="22468" fg:w="23"/><text x="26.6231%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.4836%" y="165" width="0.0270%" height="15" fill="rgb(244,212,20)" fg:x="22599" fg:w="23"/><text x="26.7766%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.5106%" y="165" width="0.0270%" height="15" fill="rgb(227,8,26)" fg:x="22622" fg:w="23"/><text x="26.8035%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.6641%" y="165" width="0.0270%" height="15" fill="rgb(242,203,52)" fg:x="22753" fg:w="23"/><text x="26.9571%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.6910%" y="165" width="0.0270%" height="15" fill="rgb(214,197,47)" fg:x="22776" fg:w="23"/><text x="26.9840%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.8446%" y="165" width="0.0270%" height="15" fill="rgb(223,125,7)" fg:x="22907" fg:w="23"/><text x="27.1375%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.8715%" y="165" width="0.0270%" height="15" fill="rgb(252,157,2)" fg:x="22930" fg:w="23"/><text x="27.1645%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.0250%" y="165" width="0.0270%" height="15" fill="rgb(226,100,23)" fg:x="23061" fg:w="23"/><text x="27.3180%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.0520%" y="165" width="0.0270%" height="15" fill="rgb(251,95,39)" fg:x="23084" fg:w="23"/><text x="27.3450%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.0789%" y="149" width="0.0270%" height="15" fill="rgb(213,179,52)" fg:x="23107" fg:w="23"/><text x="27.3719%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="27.1059%" y="149" width="0.2156%" height="15" fill="rgb(230,144,36)" fg:x="23130" fg:w="184"/><text x="27.3989%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.3215%" y="149" width="0.0270%" height="15" fill="rgb(220,196,43)" fg:x="23314" fg:w="23"/><text x="27.6145%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="27.3485%" y="149" width="0.2156%" height="15" fill="rgb(241,58,8)" fg:x="23337" fg:w="184"/><text x="27.6414%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.5641%" y="149" width="0.0270%" height="15" fill="rgb(253,208,2)" fg:x="23521" fg:w="23"/><text x="27.8571%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (84 instructions, 0.10%)</title><rect x="27.5911%" y="149" width="0.0984%" height="15" fill="rgb(206,102,14)" fg:x="23544" fg:w="84"/><text x="27.8840%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (732 instructions, 0.86%)</title><rect x="27.0789%" y="165" width="0.8578%" height="15" fill="rgb(223,198,47)" fg:x="23107" fg:w="732"/><text x="27.3719%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.9368%" y="149" width="0.0270%" height="15" fill="rgb(253,81,11)" fg:x="23839" fg:w="23"/><text x="28.2297%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="27.9637%" y="149" width="0.2156%" height="15" fill="rgb(251,187,14)" fg:x="23862" fg:w="184"/><text x="28.2567%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="28.1793%" y="149" width="0.0270%" height="15" fill="rgb(227,191,22)" fg:x="24046" fg:w="23"/><text x="28.4723%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="28.2063%" y="149" width="0.2156%" height="15" fill="rgb(217,167,46)" fg:x="24069" fg:w="184"/><text x="28.4993%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="28.4219%" y="149" width="0.0270%" height="15" fill="rgb(237,24,47)" fg:x="24253" fg:w="23"/><text x="28.7149%" y="159.50"></text></g><g><title>memcpy (136 instructions, 0.16%)</title><rect x="28.4489%" y="149" width="0.1594%" height="15" fill="rgb(206,115,17)" fg:x="24276" fg:w="136"/><text x="28.7419%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.08%)</title><rect x="28.6083%" y="133" width="0.0785%" height="15" fill="rgb(240,91,35)" fg:x="24412" fg:w="67"/><text x="28.9012%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (182 instructions, 0.21%)</title><rect x="28.6083%" y="149" width="0.2133%" height="15" fill="rgb(219,65,51)" fg:x="24412" fg:w="182"/><text x="28.9012%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (1,081 instructions, 1.27%)</title><rect x="27.9368%" y="165" width="1.2668%" height="15" fill="rgb(217,128,24)" fg:x="23839" fg:w="1081"/><text x="28.2297%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="29.5411%" y="165" width="0.0270%" height="15" fill="rgb(250,58,35)" fg:x="25208" fg:w="23"/><text x="29.8341%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="29.5680%" y="165" width="0.0270%" height="15" fill="rgb(218,122,22)" fg:x="25231" fg:w="23"/><text x="29.8610%" y="175.50"></text></g><g><title>memmove (288 instructions, 0.34%)</title><rect x="29.7216%" y="165" width="0.3375%" height="15" fill="rgb(211,151,4)" fg:x="25362" fg:w="288"/><text x="30.0145%" y="175.50"></text></g><g><title>memmove (288 instructions, 0.34%)</title><rect x="30.0591%" y="165" width="0.3375%" height="15" fill="rgb(228,194,8)" fg:x="25650" fg:w="288"/><text x="30.3520%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="30.5231%" y="165" width="0.0270%" height="15" fill="rgb(232,196,19)" fg:x="26046" fg:w="23"/><text x="30.8161%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="30.5501%" y="165" width="0.0270%" height="15" fill="rgb(223,5,20)" fg:x="26069" fg:w="23"/><text x="30.8431%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="30.7036%" y="165" width="0.1875%" height="15" fill="rgb(231,4,15)" fg:x="26200" fg:w="160"/><text x="30.9966%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="30.8911%" y="165" width="0.1875%" height="15" fill="rgb(252,54,53)" fg:x="26360" fg:w="160"/><text x="31.1841%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="31.0786%" y="149" width="0.2250%" height="15" fill="rgb(231,121,25)" fg:x="26520" fg:w="192"/><text x="31.3716%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="31.3036%" y="149" width="0.2156%" height="15" fill="rgb(209,71,1)" fg:x="26712" fg:w="184"/><text x="31.5966%" y="159.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="31.5192%" y="149" width="0.2250%" height="15" fill="rgb(253,66,54)" fg:x="26896" fg:w="192"/><text x="31.8122%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="31.7442%" y="149" width="0.2156%" height="15" fill="rgb(246,160,0)" fg:x="27088" fg:w="184"/><text x="32.0372%" y="159.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="31.9599%" y="149" width="0.1500%" height="15" fill="rgb(239,174,1)" fg:x="27272" fg:w="128"/><text x="32.2528%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (84 instructions, 0.10%)</title><rect x="32.1099%" y="149" width="0.0984%" height="15" fill="rgb(242,60,28)" fg:x="27400" fg:w="84"/><text x="32.4028%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,264 instructions, 1.48%)</title><rect x="31.0786%" y="165" width="1.4813%" height="15" fill="rgb(241,23,42)" fg:x="26520" fg:w="1264"/><text x="31.3716%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.8013%" y="165" width="0.0270%" height="15" fill="rgb(247,40,40)" fg:x="27990" fg:w="23"/><text x="33.0943%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.8282%" y="165" width="0.0270%" height="15" fill="rgb(211,165,27)" fg:x="28013" fg:w="23"/><text x="33.1212%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.9818%" y="165" width="0.0270%" height="15" fill="rgb(240,91,7)" fg:x="28144" fg:w="23"/><text x="33.2747%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.0087%" y="165" width="0.0270%" height="15" fill="rgb(231,77,13)" fg:x="28167" fg:w="23"/><text x="33.3017%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="33.1622%" y="165" width="0.2625%" height="15" fill="rgb(245,51,9)" fg:x="28298" fg:w="224"/><text x="33.4552%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="33.4247%" y="165" width="0.2625%" height="15" fill="rgb(245,56,1)" fg:x="28522" fg:w="224"/><text x="33.7177%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.8138%" y="165" width="0.0270%" height="15" fill="rgb(248,88,7)" fg:x="28854" fg:w="23"/><text x="34.1068%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.8408%" y="165" width="0.0270%" height="15" fill="rgb(246,143,18)" fg:x="28877" fg:w="23"/><text x="34.1337%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.9943%" y="165" width="0.0270%" height="15" fill="rgb(223,169,22)" fg:x="29008" fg:w="23"/><text x="34.2872%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="34.0212%" y="165" width="0.0270%" height="15" fill="rgb(241,61,6)" fg:x="29031" fg:w="23"/><text x="34.3142%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="34.1748%" y="165" width="0.2625%" height="15" fill="rgb(253,175,12)" fg:x="29162" fg:w="224"/><text x="34.4677%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="34.4373%" y="165" width="0.2625%" height="15" fill="rgb(235,219,9)" fg:x="29386" fg:w="224"/><text x="34.7302%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="34.8263%" y="165" width="0.0270%" height="15" fill="rgb(215,203,3)" fg:x="29718" fg:w="23"/><text x="35.1193%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="34.8533%" y="165" width="0.0270%" height="15" fill="rgb(209,135,24)" fg:x="29741" fg:w="23"/><text x="35.1462%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="35.0068%" y="165" width="0.2250%" height="15" fill="rgb(253,197,33)" fg:x="29872" fg:w="192"/><text x="35.2998%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="35.2318%" y="165" width="0.2250%" height="15" fill="rgb(249,117,35)" fg:x="30064" fg:w="192"/><text x="35.5248%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="35.5834%" y="165" width="0.3000%" height="15" fill="rgb(212,11,54)" fg:x="30364" fg:w="256"/><text x="35.8763%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="35.8834%" y="165" width="0.3000%" height="15" fill="rgb(230,165,3)" fg:x="30620" fg:w="256"/><text x="36.1763%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="36.3099%" y="165" width="0.2250%" height="15" fill="rgb(211,61,38)" fg:x="30984" fg:w="192"/><text x="36.6029%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="36.5349%" y="165" width="0.2250%" height="15" fill="rgb(254,207,2)" fg:x="31176" fg:w="192"/><text x="36.8279%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="36.8865%" y="165" width="0.0270%" height="15" fill="rgb(215,131,48)" fg:x="31476" fg:w="23"/><text x="37.1795%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="36.9135%" y="165" width="0.0270%" height="15" fill="rgb(246,53,42)" fg:x="31499" fg:w="23"/><text x="37.2064%" y="175.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="36.9404%" y="149" width="0.1500%" height="15" fill="rgb(244,39,45)" fg:x="31522" fg:w="128"/><text x="37.2334%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="37.0904%" y="149" width="0.2156%" height="15" fill="rgb(236,103,12)" fg:x="31650" fg:w="184"/><text x="37.3834%" y="159.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="37.3061%" y="149" width="0.1500%" height="15" fill="rgb(242,124,2)" fg:x="31834" fg:w="128"/><text x="37.5990%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="37.4561%" y="149" width="0.2156%" height="15" fill="rgb(224,40,36)" fg:x="31962" fg:w="184"/><text x="37.7490%" y="159.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="37.6717%" y="149" width="0.1840%" height="15" fill="rgb(243,27,18)" fg:x="32146" fg:w="157"/><text x="37.9647%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (84 instructions, 0.10%)</title><rect x="37.8557%" y="149" width="0.0984%" height="15" fill="rgb(233,180,30)" fg:x="32303" fg:w="84"/><text x="38.1486%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,143 instructions, 1.34%)</title><rect x="36.9404%" y="165" width="1.3395%" height="15" fill="rgb(216,182,1)" fg:x="31522" fg:w="1143"/><text x="37.2334%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.5213%" y="165" width="0.0270%" height="15" fill="rgb(230,8,28)" fg:x="32871" fg:w="23"/><text x="38.8143%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.5483%" y="165" width="0.0270%" height="15" fill="rgb(225,68,24)" fg:x="32894" fg:w="23"/><text x="38.8412%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.7018%" y="165" width="0.0270%" height="15" fill="rgb(238,205,13)" fg:x="33025" fg:w="23"/><text x="38.9947%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.7287%" y="165" width="0.0270%" height="15" fill="rgb(235,54,50)" fg:x="33048" fg:w="23"/><text x="39.0217%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="38.8822%" y="165" width="0.1840%" height="15" fill="rgb(215,102,32)" fg:x="33179" fg:w="157"/><text x="39.1752%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="39.0662%" y="165" width="0.1840%" height="15" fill="rgb(226,164,48)" fg:x="33336" fg:w="157"/><text x="39.3592%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.3768%" y="165" width="0.0270%" height="15" fill="rgb(210,105,42)" fg:x="33601" fg:w="23"/><text x="39.6698%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.4037%" y="165" width="0.0270%" height="15" fill="rgb(222,185,13)" fg:x="33624" fg:w="23"/><text x="39.6967%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.5573%" y="165" width="0.0270%" height="15" fill="rgb(248,224,51)" fg:x="33755" fg:w="23"/><text x="39.8502%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.5842%" y="165" width="0.0270%" height="15" fill="rgb(248,37,53)" fg:x="33778" fg:w="23"/><text x="39.8772%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="39.7377%" y="165" width="0.2625%" height="15" fill="rgb(251,2,14)" fg:x="33909" fg:w="224"/><text x="40.0307%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="40.0002%" y="165" width="0.2625%" height="15" fill="rgb(253,219,25)" fg:x="34133" fg:w="224"/><text x="40.2932%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="40.3893%" y="165" width="0.0270%" height="15" fill="rgb(210,217,10)" fg:x="34465" fg:w="23"/><text x="40.6823%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="40.4163%" y="165" width="0.0270%" height="15" fill="rgb(239,142,24)" fg:x="34488" fg:w="23"/><text x="40.7092%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="40.5698%" y="165" width="0.1840%" height="15" fill="rgb(217,129,13)" fg:x="34619" fg:w="157"/><text x="40.8627%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="40.7538%" y="165" width="0.1840%" height="15" fill="rgb(237,33,10)" fg:x="34776" fg:w="157"/><text x="41.0467%" y="175.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (21,557 instructions, 25.26%)</title><rect x="15.8018%" y="181" width="25.2625%" height="15" fill="rgb(226,19,47)" fg:x="13484" fg:w="21557"/><text x="16.0948%" y="191.50">alloc::collections::btree::remove:..</text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.02%)</title><rect x="41.0643%" y="149" width="0.0164%" height="15" fill="rgb(228,229,18)" fg:x="35041" fg:w="14"/><text x="41.3573%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.07%)</title><rect x="41.0807%" y="133" width="0.0738%" height="15" fill="rgb(232,43,9)" fg:x="35055" fg:w="63"/><text x="41.3737%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (98 instructions, 0.11%)</title><rect x="41.0807%" y="149" width="0.1148%" height="15" fill="rgb(224,226,4)" fg:x="35055" fg:w="98"/><text x="41.3737%" y="159.50"></text></g><g><title>memset (152 instructions, 0.18%)</title><rect x="41.1956%" y="149" width="0.1781%" height="15" fill="rgb(253,140,18)" fg:x="35153" fg:w="152"/><text x="41.4885%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (444 instructions, 0.52%)</title><rect x="41.0643%" y="165" width="0.5203%" height="15" fill="rgb(253,201,36)" fg:x="35041" fg:w="444"/><text x="41.3573%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 0.61%)</title><rect x="41.5846%" y="149" width="0.6070%" height="15" fill="rgb(205,227,34)" fg:x="35485" fg:w="518"/><text x="41.8776%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="42.1917%" y="101" width="0.0973%" height="15" fill="rgb(222,104,39)" fg:x="36003" fg:w="83"/><text x="42.4846%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.15%)</title><rect x="42.1917%" y="117" width="0.1477%" height="15" fill="rgb(230,195,31)" fg:x="36003" fg:w="126"/><text x="42.4846%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (205 instructions, 0.24%)</title><rect x="42.1917%" y="133" width="0.2402%" height="15" fill="rgb(228,106,35)" fg:x="36003" fg:w="205"/><text x="42.4846%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="42.4319%" y="133" width="0.0176%" height="15" fill="rgb(243,133,1)" fg:x="36208" fg:w="15"/><text x="42.7249%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="42.4495%" y="133" width="0.0176%" height="15" fill="rgb(230,94,0)" fg:x="36223" fg:w="15"/><text x="42.7425%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (423 instructions, 0.50%)</title><rect x="42.1917%" y="149" width="0.4957%" height="15" fill="rgb(243,65,27)" fg:x="36003" fg:w="423"/><text x="42.4846%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 0.60%)</title><rect x="42.6874%" y="149" width="0.6047%" height="15" fill="rgb(210,138,21)" fg:x="36426" fg:w="516"/><text x="42.9804%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,557 instructions, 1.82%)</title><rect x="41.5846%" y="165" width="1.8246%" height="15" fill="rgb(205,141,39)" fg:x="35485" fg:w="1557"/><text x="41.8776%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="43.4163%" y="165" width="0.0703%" height="15" fill="rgb(206,120,46)" fg:x="37048" fg:w="60"/><text x="43.7093%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,673 instructions, 3.13%)</title><rect x="41.0643%" y="181" width="3.1325%" height="15" fill="rgb(250,186,17)" fg:x="35041" fg:w="2673"/><text x="41.3573%" y="191.50">ic..</text></g><g><title>btreemap::batch_remove_7_::{{closure}} (84,716 instructions, 99.28%)</title><rect x="0.2227%" y="197" width="99.2781%" height="15" fill="rgb(214,124,52)" fg:x="190" fg:w="84716"/><text x="0.5156%" y="207.50">btreemap::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.02%)</title><rect x="99.5008%" y="197" width="0.0164%" height="15" fill="rgb(214,157,52)" fg:x="84906" fg:w="14"/><text x="99.7937%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.10%)</title><rect x="99.5184%" y="197" width="0.1008%" height="15" fill="rgb(222,49,6)" fg:x="84921" fg:w="86"/><text x="99.8113%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.21%)</title><rect x="99.6191%" y="197" width="0.2121%" height="15" fill="rgb(206,79,23)" fg:x="85007" fg:w="181"/><text x="99.9121%" y="207.50"></text></g><g><title>all (85,332 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(248,206,37)" fg:x="0" fg:w="85332"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (85,332 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(210,143,19)" fg:x="0" fg:w="85332"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>