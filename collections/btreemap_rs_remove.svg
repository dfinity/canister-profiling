<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="85272"><g><title>ic_cdk::setup (24 instructions, 0.03%)</title><rect x="0.0000%" y="197" width="0.0281%" height="15" fill="rgb(206,23,5)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="0.0281%" y="197" width="0.0973%" height="15" fill="rgb(246,93,7)" fg:x="24" fg:w="83"/><text x="0.3211%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="0.1255%" y="197" width="0.0973%" height="15" fill="rgb(248,39,47)" fg:x="107" fg:w="83"/><text x="0.4184%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="0.2228%" y="165" width="0.0973%" height="15" fill="rgb(205,73,19)" fg:x="190" fg:w="83"/><text x="0.5158%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.10%)</title><rect x="0.3202%" y="149" width="0.0962%" height="15" fill="rgb(250,53,20)" fg:x="273" fg:w="82"/><text x="0.6131%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.52%)</title><rect x="0.4163%" y="149" width="0.5195%" height="15" fill="rgb(222,179,40)" fg:x="355" fg:w="443"/><text x="0.7093%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.11%)</title><rect x="0.9358%" y="149" width="0.1114%" height="15" fill="rgb(229,66,8)" fg:x="798" fg:w="95"/><text x="1.2288%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.0472%" y="149" width="0.0704%" height="15" fill="rgb(224,208,19)" fg:x="893" fg:w="60"/><text x="1.3402%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.1176%" y="149" width="0.0704%" height="15" fill="rgb(225,133,6)" fg:x="953" fg:w="60"/><text x="1.4106%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.1880%" y="149" width="0.0704%" height="15" fill="rgb(231,55,27)" fg:x="1013" fg:w="60"/><text x="1.4809%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.2583%" y="149" width="0.0704%" height="15" fill="rgb(226,131,18)" fg:x="1073" fg:w="60"/><text x="1.5513%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.10%)</title><rect x="1.3287%" y="149" width="0.0962%" height="15" fill="rgb(242,94,37)" fg:x="1133" fg:w="82"/><text x="1.6217%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.08%)</title><rect x="1.4249%" y="149" width="0.0821%" height="15" fill="rgb(233,207,44)" fg:x="1215" fg:w="70"/><text x="1.7178%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.52%)</title><rect x="1.5069%" y="149" width="0.5195%" height="15" fill="rgb(234,27,23)" fg:x="1285" fg:w="443"/><text x="1.7999%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="2.0265%" y="149" width="0.0223%" height="15" fill="rgb(253,9,25)" fg:x="1728" fg:w="19"/><text x="2.3194%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="2.0487%" y="133" width="0.0973%" height="15" fill="rgb(218,30,43)" fg:x="1747" fg:w="83"/><text x="2.3417%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.08%)</title><rect x="2.1461%" y="101" width="0.0786%" height="15" fill="rgb(234,163,35)" fg:x="1830" fg:w="67"/><text x="2.4390%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.11%)</title><rect x="2.1461%" y="117" width="0.1126%" height="15" fill="rgb(224,224,29)" fg:x="1830" fg:w="96"/><text x="2.4390%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="2.2587%" y="69" width="0.0129%" height="15" fill="rgb(239,24,54)" fg:x="1926" fg:w="11"/><text x="2.5516%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="2.2716%" y="53" width="0.0410%" height="15" fill="rgb(210,137,0)" fg:x="1937" fg:w="35"/><text x="2.5645%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.08%)</title><rect x="2.2716%" y="69" width="0.0751%" height="15" fill="rgb(216,180,0)" fg:x="1937" fg:w="64"/><text x="2.5645%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.17%)</title><rect x="2.2587%" y="85" width="0.1689%" height="15" fill="rgb(244,130,18)" fg:x="1926" fg:w="144"/><text x="2.5516%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.25%)</title><rect x="2.2587%" y="101" width="0.2451%" height="15" fill="rgb(219,6,22)" fg:x="1926" fg:w="209"/><text x="2.5516%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.26%)</title><rect x="2.2587%" y="117" width="0.2568%" height="15" fill="rgb(216,205,49)" fg:x="1926" fg:w="219"/><text x="2.5516%" y="127.50"></text></g><g><title>core::fmt::write (453 instructions, 0.53%)</title><rect x="2.1461%" y="133" width="0.5312%" height="15" fill="rgb(241,25,26)" fg:x="1830" fg:w="453"/><text x="2.4390%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 0.79%)</title><rect x="2.0487%" y="149" width="0.7904%" height="15" fill="rgb(221,170,43)" fg:x="1747" fg:w="674"/><text x="2.3417%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.11%)</title><rect x="2.8392%" y="149" width="0.1114%" height="15" fill="rgb(228,162,24)" fg:x="2421" fg:w="95"/><text x="3.1321%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="2.9506%" y="149" width="0.0704%" height="15" fill="rgb(236,87,32)" fg:x="2516" fg:w="60"/><text x="3.2435%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.09%)</title><rect x="3.0209%" y="149" width="0.0891%" height="15" fill="rgb(251,132,26)" fg:x="2576" fg:w="76"/><text x="3.3139%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.08%)</title><rect x="3.1100%" y="149" width="0.0821%" height="15" fill="rgb(253,38,47)" fg:x="2652" fg:w="70"/><text x="3.4030%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.52%)</title><rect x="3.1921%" y="133" width="0.5195%" height="15" fill="rgb(211,25,25)" fg:x="2722" fg:w="443"/><text x="3.4851%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="3.7117%" y="133" width="0.0223%" height="15" fill="rgb(246,198,6)" fg:x="3165" fg:w="19"/><text x="4.0046%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="3.7339%" y="117" width="0.0973%" height="15" fill="rgb(251,119,37)" fg:x="3184" fg:w="83"/><text x="4.0269%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.08%)</title><rect x="3.8313%" y="85" width="0.0786%" height="15" fill="rgb(234,24,4)" fg:x="3267" fg:w="67"/><text x="4.1242%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.11%)</title><rect x="3.8313%" y="101" width="0.1126%" height="15" fill="rgb(228,79,10)" fg:x="3267" fg:w="96"/><text x="4.1242%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="3.9439%" y="53" width="0.0129%" height="15" fill="rgb(212,15,11)" fg:x="3363" fg:w="11"/><text x="4.2368%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="3.9568%" y="37" width="0.0410%" height="15" fill="rgb(234,178,13)" fg:x="3374" fg:w="35"/><text x="4.2497%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.08%)</title><rect x="3.9568%" y="53" width="0.0751%" height="15" fill="rgb(221,127,8)" fg:x="3374" fg:w="64"/><text x="4.2497%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.17%)</title><rect x="3.9439%" y="69" width="0.1689%" height="15" fill="rgb(208,32,36)" fg:x="3363" fg:w="144"/><text x="4.2368%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.25%)</title><rect x="3.9439%" y="85" width="0.2451%" height="15" fill="rgb(218,147,46)" fg:x="3363" fg:w="209"/><text x="4.2368%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.26%)</title><rect x="3.9439%" y="101" width="0.2568%" height="15" fill="rgb(217,189,34)" fg:x="3363" fg:w="219"/><text x="4.2368%" y="111.50"></text></g><g><title>core::fmt::write (453 instructions, 0.53%)</title><rect x="3.8313%" y="117" width="0.5312%" height="15" fill="rgb(254,187,30)" fg:x="3267" fg:w="453"/><text x="4.1242%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 0.79%)</title><rect x="3.7339%" y="133" width="0.7904%" height="15" fill="rgb(246,218,16)" fg:x="3184" fg:w="674"/><text x="4.0269%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.11%)</title><rect x="4.5243%" y="133" width="0.1114%" height="15" fill="rgb(247,205,35)" fg:x="3858" fg:w="95"/><text x="4.8173%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="4.6358%" y="133" width="0.0704%" height="15" fill="rgb(222,181,13)" fg:x="3953" fg:w="60"/><text x="4.9287%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.10%)</title><rect x="4.7061%" y="117" width="0.0962%" height="15" fill="rgb(235,198,2)" fg:x="4013" fg:w="82"/><text x="4.9991%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.11%)</title><rect x="4.8023%" y="117" width="0.1114%" height="15" fill="rgb(229,49,41)" fg:x="4095" fg:w="95"/><text x="5.0952%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.09%)</title><rect x="4.9137%" y="117" width="0.0891%" height="15" fill="rgb(209,68,51)" fg:x="4190" fg:w="76"/><text x="5.2067%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.39%)</title><rect x="4.7061%" y="133" width="0.3870%" height="15" fill="rgb(231,28,12)" fg:x="4013" fg:w="330"/><text x="4.9991%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="5.0931%" y="133" width="0.0973%" height="15" fill="rgb(249,214,22)" fg:x="4343" fg:w="83"/><text x="5.3861%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,947 instructions, 2.28%)</title><rect x="3.1921%" y="149" width="2.2833%" height="15" fill="rgb(254,140,40)" fg:x="2722" fg:w="1947"/><text x="3.4851%" y="159.50">b..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.09%)</title><rect x="5.4754%" y="149" width="0.0891%" height="15" fill="rgb(253,178,28)" fg:x="4669" fg:w="76"/><text x="5.7684%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="5.5645%" y="149" width="0.0176%" height="15" fill="rgb(247,93,23)" fg:x="4745" fg:w="15"/><text x="5.8575%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="5.5821%" y="149" width="0.0176%" height="15" fill="rgb(216,129,53)" fg:x="4760" fg:w="15"/><text x="5.8751%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.01%)</title><rect x="5.5997%" y="149" width="0.0106%" height="15" fill="rgb(250,30,48)" fg:x="4775" fg:w="9"/><text x="5.8927%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 instructions, 0.02%)</title><rect x="5.6103%" y="149" width="0.0188%" height="15" fill="rgb(244,100,37)" fg:x="4784" fg:w="16"/><text x="5.9033%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (81 instructions, 0.09%)</title><rect x="5.6290%" y="133" width="0.0950%" height="15" fill="rgb(238,122,20)" fg:x="4800" fg:w="81"/><text x="5.9220%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (177 instructions, 0.21%)</title><rect x="5.6290%" y="149" width="0.2076%" height="15" fill="rgb(253,173,31)" fg:x="4800" fg:w="177"/><text x="5.9220%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (114 instructions, 0.13%)</title><rect x="5.8366%" y="117" width="0.1337%" height="15" fill="rgb(224,59,5)" fg:x="4977" fg:w="114"/><text x="6.1296%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (157 instructions, 0.18%)</title><rect x="5.8366%" y="133" width="0.1841%" height="15" fill="rgb(253,112,24)" fg:x="4977" fg:w="157"/><text x="6.1296%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (242 instructions, 0.28%)</title><rect x="5.8366%" y="149" width="0.2838%" height="15" fill="rgb(244,96,50)" fg:x="4977" fg:w="242"/><text x="6.1296%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="6.1204%" y="149" width="0.0973%" height="15" fill="rgb(215,49,51)" fg:x="5219" fg:w="83"/><text x="6.4134%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.10%)</title><rect x="6.2178%" y="149" width="0.1044%" height="15" fill="rgb(206,163,43)" fg:x="5302" fg:w="89"/><text x="6.5107%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="6.3221%" y="149" width="0.0973%" height="15" fill="rgb(218,165,34)" fg:x="5391" fg:w="83"/><text x="6.6151%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="6.4195%" y="149" width="0.0973%" height="15" fill="rgb(236,77,15)" fg:x="5474" fg:w="83"/><text x="6.7124%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.10%)</title><rect x="6.5215%" y="149" width="0.1044%" height="15" fill="rgb(217,158,47)" fg:x="5561" fg:w="89"/><text x="6.8145%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.50%)</title><rect x="6.6259%" y="149" width="0.5019%" height="15" fill="rgb(224,57,31)" fg:x="5650" fg:w="428"/><text x="6.9188%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.50%)</title><rect x="7.1278%" y="149" width="0.5019%" height="15" fill="rgb(215,62,28)" fg:x="6078" fg:w="428"/><text x="7.4207%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,422 instructions, 8.70%)</title><rect x="0.3202%" y="165" width="8.7039%" height="15" fill="rgb(227,21,13)" fg:x="273" fg:w="7422"/><text x="0.6131%" y="175.50">candid::de..</text></g><g><title>memcpy (380 instructions, 0.45%)</title><rect x="9.0241%" y="165" width="0.4456%" height="15" fill="rgb(210,69,21)" fg:x="7695" fg:w="380"/><text x="9.3170%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.05%)</title><rect x="9.4697%" y="165" width="0.0457%" height="15" fill="rgb(213,11,48)" fg:x="8075" fg:w="39"/><text x="9.7627%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="9.5154%" y="165" width="0.0973%" height="15" fill="rgb(223,192,40)" fg:x="8114" fg:w="83"/><text x="9.8084%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.07%)</title><rect x="9.6210%" y="133" width="0.0692%" height="15" fill="rgb(238,32,39)" fg:x="8204" fg:w="59"/><text x="9.9139%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.11%)</title><rect x="9.6902%" y="133" width="0.1102%" height="15" fill="rgb(246,215,13)" fg:x="8263" fg:w="94"/><text x="9.9831%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.20%)</title><rect x="9.8004%" y="133" width="0.2029%" height="15" fill="rgb(237,203,50)" fg:x="8357" fg:w="173"/><text x="10.0934%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.68%)</title><rect x="9.6210%" y="149" width="0.6790%" height="15" fill="rgb(253,79,53)" fg:x="8204" fg:w="579"/><text x="9.9139%" y="159.50"></text></g><g><title>candid::types::internal::env_add (798 instructions, 0.94%)</title><rect x="9.6128%" y="165" width="0.9358%" height="15" fill="rgb(249,11,7)" fg:x="8197" fg:w="798"/><text x="9.9057%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.11%)</title><rect x="10.5486%" y="165" width="0.1067%" height="15" fill="rgb(215,76,42)" fg:x="8995" fg:w="91"/><text x="10.8416%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.07%)</title><rect x="10.6635%" y="133" width="0.0692%" height="15" fill="rgb(207,211,36)" fg:x="9093" fg:w="59"/><text x="10.9565%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.11%)</title><rect x="10.7327%" y="133" width="0.1102%" height="15" fill="rgb(226,201,25)" fg:x="9152" fg:w="94"/><text x="11.0257%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.20%)</title><rect x="10.8429%" y="133" width="0.2029%" height="15" fill="rgb(227,110,38)" fg:x="9246" fg:w="173"/><text x="11.1359%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.68%)</title><rect x="10.6635%" y="149" width="0.6790%" height="15" fill="rgb(238,70,54)" fg:x="9093" fg:w="579"/><text x="10.9565%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.09%)</title><rect x="11.3425%" y="149" width="0.0903%" height="15" fill="rgb(205,113,52)" fg:x="9672" fg:w="77"/><text x="11.6355%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="11.4328%" y="133" width="0.0704%" height="15" fill="rgb(215,30,37)" fg:x="9749" fg:w="60"/><text x="11.7258%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (95 instructions, 0.11%)</title><rect x="11.4328%" y="149" width="0.1114%" height="15" fill="rgb(252,168,17)" fg:x="9749" fg:w="95"/><text x="11.7258%" y="159.50"></text></g><g><title>candid::types::internal::env_add (936 instructions, 1.10%)</title><rect x="10.6553%" y="165" width="1.0977%" height="15" fill="rgb(230,179,35)" fg:x="9086" fg:w="936"/><text x="10.9483%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.07%)</title><rect x="11.7530%" y="117" width="0.0692%" height="15" fill="rgb(251,195,40)" fg:x="10022" fg:w="59"/><text x="12.0459%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (93 instructions, 0.11%)</title><rect x="11.7530%" y="133" width="0.1091%" height="15" fill="rgb(221,21,31)" fg:x="10022" fg:w="93"/><text x="12.0459%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (316 instructions, 0.37%)</title><rect x="11.7530%" y="149" width="0.3706%" height="15" fill="rgb(235,212,17)" fg:x="10022" fg:w="316"/><text x="12.0459%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.653 (18 instructions, 0.02%)</title><rect x="12.1236%" y="149" width="0.0211%" height="15" fill="rgb(247,165,4)" fg:x="10338" fg:w="18"/><text x="12.4165%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.1447%" y="149" width="0.0152%" height="15" fill="rgb(222,48,9)" fg:x="10356" fg:w="13"/><text x="12.4376%" y="159.50"></text></g><g><title>candid::types::internal::env_id (529 instructions, 0.62%)</title><rect x="11.7530%" y="165" width="0.6204%" height="15" fill="rgb(242,84,36)" fg:x="10022" fg:w="529"/><text x="12.0459%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.06%)</title><rect x="12.3733%" y="165" width="0.0622%" height="15" fill="rgb(209,12,51)" fg:x="10551" fg:w="53"/><text x="12.6663%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="12.4355%" y="149" width="0.0704%" height="15" fill="rgb(244,161,32)" fg:x="10604" fg:w="60"/><text x="12.7285%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="12.5469%" y="149" width="0.0704%" height="15" fill="rgb(243,182,16)" fg:x="10699" fg:w="60"/><text x="12.8399%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (190 instructions, 0.22%)</title><rect x="12.4355%" y="165" width="0.2228%" height="15" fill="rgb(247,45,4)" fg:x="10604" fg:w="190"/><text x="12.7285%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.04%)</title><rect x="12.6583%" y="149" width="0.0399%" height="15" fill="rgb(226,176,25)" fg:x="10794" fg:w="34"/><text x="12.9513%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (18 instructions, 0.02%)</title><rect x="12.6982%" y="149" width="0.0211%" height="15" fill="rgb(233,218,31)" fg:x="10828" fg:w="18"/><text x="12.9912%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (18 instructions, 0.02%)</title><rect x="12.7193%" y="149" width="0.0211%" height="15" fill="rgb(236,58,49)" fg:x="10846" fg:w="18"/><text x="13.0123%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (167 instructions, 0.20%)</title><rect x="12.6583%" y="165" width="0.1958%" height="15" fill="rgb(209,85,32)" fg:x="10794" fg:w="167"/><text x="12.9513%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.8542%" y="165" width="0.0152%" height="15" fill="rgb(248,123,2)" fg:x="10961" fg:w="13"/><text x="13.1471%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.8694%" y="165" width="0.0152%" height="15" fill="rgb(236,89,52)" fg:x="10974" fg:w="13"/><text x="13.1624%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.8847%" y="165" width="0.0152%" height="15" fill="rgb(235,103,42)" fg:x="10987" fg:w="13"/><text x="13.1776%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.52%)</title><rect x="12.8999%" y="165" width="0.5160%" height="15" fill="rgb(229,91,45)" fg:x="11000" fg:w="440"/><text x="13.1929%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="13.4241%" y="117" width="0.0317%" height="15" fill="rgb(210,45,21)" fg:x="11447" fg:w="27"/><text x="13.7171%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (115 instructions, 0.13%)</title><rect x="13.4241%" y="133" width="0.1349%" height="15" fill="rgb(235,168,5)" fg:x="11447" fg:w="115"/><text x="13.7171%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.10%)</title><rect x="13.5590%" y="117" width="0.1044%" height="15" fill="rgb(250,90,32)" fg:x="11562" fg:w="89"/><text x="13.8519%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (124 instructions, 0.15%)</title><rect x="13.5590%" y="133" width="0.1454%" height="15" fill="rgb(248,101,15)" fg:x="11562" fg:w="124"/><text x="13.8519%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="13.7044%" y="133" width="0.0152%" height="15" fill="rgb(234,199,15)" fg:x="11686" fg:w="13"/><text x="13.9974%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (321 instructions, 0.38%)</title><rect x="13.4159%" y="149" width="0.3764%" height="15" fill="rgb(252,121,28)" fg:x="11440" fg:w="321"/><text x="13.7089%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (370 instructions, 0.43%)</title><rect x="13.4159%" y="165" width="0.4339%" height="15" fill="rgb(207,203,33)" fg:x="11440" fg:w="370"/><text x="13.7089%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="13.8498%" y="149" width="0.0317%" height="15" fill="rgb(217,27,10)" fg:x="11810" fg:w="27"/><text x="14.1428%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.17%)</title><rect x="13.8498%" y="165" width="0.1665%" height="15" fill="rgb(239,214,12)" fg:x="11810" fg:w="142"/><text x="14.1428%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,232 instructions, 15.52%)</title><rect x="0.2228%" y="181" width="15.5174%" height="15" fill="rgb(245,84,21)" fg:x="190" fg:w="13232"/><text x="0.5158%" y="191.50">ic_cdk::api::call::a..</text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="15.7402%" y="165" width="0.3753%" height="15" fill="rgb(235,175,47)" fg:x="13422" fg:w="320"/><text x="16.0332%" y="175.50"></text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="16.1155%" y="165" width="0.3753%" height="15" fill="rgb(220,111,44)" fg:x="13742" fg:w="320"/><text x="16.4085%" y="175.50"></text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="16.6174%" y="165" width="0.3753%" height="15" fill="rgb(220,217,8)" fg:x="14170" fg:w="320"/><text x="16.9104%" y="175.50"></text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="16.9927%" y="165" width="0.3753%" height="15" fill="rgb(214,84,54)" fg:x="14490" fg:w="320"/><text x="17.2857%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.4946%" y="165" width="0.0270%" height="15" fill="rgb(252,28,9)" fg:x="14918" fg:w="23"/><text x="17.7876%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.5216%" y="165" width="0.0270%" height="15" fill="rgb(235,116,40)" fg:x="14941" fg:w="23"/><text x="17.8145%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.5486%" y="149" width="0.0270%" height="15" fill="rgb(223,179,34)" fg:x="14964" fg:w="23"/><text x="17.8415%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="17.5755%" y="149" width="0.2158%" height="15" fill="rgb(243,35,52)" fg:x="14987" fg:w="184"/><text x="17.8685%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.7913%" y="149" width="0.0270%" height="15" fill="rgb(218,20,36)" fg:x="15171" fg:w="23"/><text x="18.0843%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="17.8183%" y="149" width="0.2158%" height="15" fill="rgb(251,219,52)" fg:x="15194" fg:w="184"/><text x="18.1112%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="18.0341%" y="149" width="0.0270%" height="15" fill="rgb(216,89,24)" fg:x="15378" fg:w="23"/><text x="18.3270%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.10%)</title><rect x="18.0610%" y="149" width="0.1044%" height="15" fill="rgb(252,16,8)" fg:x="15401" fg:w="89"/><text x="18.3540%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (737 instructions, 0.86%)</title><rect x="17.5486%" y="165" width="0.8643%" height="15" fill="rgb(217,10,45)" fg:x="14964" fg:w="737"/><text x="17.8415%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="18.6544%" y="165" width="0.1876%" height="15" fill="rgb(231,13,33)" fg:x="15907" fg:w="160"/><text x="18.9474%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="18.8421%" y="165" width="0.1876%" height="15" fill="rgb(240,141,46)" fg:x="16067" fg:w="160"/><text x="19.1350%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="19.1563%" y="165" width="0.0270%" height="15" fill="rgb(244,216,24)" fg:x="16335" fg:w="23"/><text x="19.4493%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="19.1833%" y="165" width="0.0270%" height="15" fill="rgb(208,39,3)" fg:x="16358" fg:w="23"/><text x="19.4763%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.24%)</title><rect x="19.2103%" y="149" width="0.2404%" height="15" fill="rgb(250,216,13)" fg:x="16381" fg:w="205"/><text x="19.5033%" y="159.50"></text></g><g><title>memmove (205 instructions, 0.24%)</title><rect x="19.4507%" y="149" width="0.2404%" height="15" fill="rgb(228,202,46)" fg:x="16586" fg:w="205"/><text x="19.7437%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="19.6911%" y="149" width="0.0176%" height="15" fill="rgb(230,71,36)" fg:x="16791" fg:w="15"/><text x="19.9841%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="19.7087%" y="149" width="0.0176%" height="15" fill="rgb(211,39,38)" fg:x="16806" fg:w="15"/><text x="20.0017%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_left (606 instructions, 0.71%)</title><rect x="19.2103%" y="165" width="0.7107%" height="15" fill="rgb(252,167,29)" fg:x="16381" fg:w="606"/><text x="19.5033%" y="175.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="20.1684%" y="165" width="0.1501%" height="15" fill="rgb(247,125,41)" fg:x="17198" fg:w="128"/><text x="20.4614%" y="175.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="20.3185%" y="165" width="0.1501%" height="15" fill="rgb(211,115,18)" fg:x="17326" fg:w="128"/><text x="20.6115%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.5953%" y="165" width="0.0270%" height="15" fill="rgb(229,117,15)" fg:x="17562" fg:w="23"/><text x="20.8882%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.6222%" y="165" width="0.0270%" height="15" fill="rgb(216,14,0)" fg:x="17585" fg:w="23"/><text x="20.9152%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="20.7759%" y="165" width="0.1876%" height="15" fill="rgb(229,119,3)" fg:x="17716" fg:w="160"/><text x="21.0688%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="20.9635%" y="165" width="0.1876%" height="15" fill="rgb(226,8,42)" fg:x="17876" fg:w="160"/><text x="21.2565%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.2778%" y="165" width="0.0270%" height="15" fill="rgb(227,138,23)" fg:x="18144" fg:w="23"/><text x="21.5708%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.3048%" y="165" width="0.0270%" height="15" fill="rgb(226,104,4)" fg:x="18167" fg:w="23"/><text x="21.5977%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.4584%" y="165" width="0.0270%" height="15" fill="rgb(210,29,27)" fg:x="18298" fg:w="23"/><text x="21.7514%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.4854%" y="165" width="0.0270%" height="15" fill="rgb(237,87,48)" fg:x="18321" fg:w="23"/><text x="21.7783%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.6390%" y="165" width="0.0270%" height="15" fill="rgb(242,132,5)" fg:x="18452" fg:w="23"/><text x="21.9320%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.6660%" y="165" width="0.0270%" height="15" fill="rgb(254,0,33)" fg:x="18475" fg:w="23"/><text x="21.9589%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="21.8196%" y="165" width="0.2252%" height="15" fill="rgb(207,101,10)" fg:x="18606" fg:w="192"/><text x="22.1126%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="22.0448%" y="165" width="0.2252%" height="15" fill="rgb(252,15,36)" fg:x="18798" fg:w="192"/><text x="22.3377%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="22.3966%" y="165" width="0.3002%" height="15" fill="rgb(231,107,16)" fg:x="19098" fg:w="256"/><text x="22.6895%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="22.6968%" y="165" width="0.3002%" height="15" fill="rgb(208,26,42)" fg:x="19354" fg:w="256"/><text x="22.9898%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="23.1237%" y="165" width="0.0270%" height="15" fill="rgb(224,55,30)" fg:x="19718" fg:w="23"/><text x="23.4166%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="23.1506%" y="165" width="0.0270%" height="15" fill="rgb(210,203,3)" fg:x="19741" fg:w="23"/><text x="23.4436%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="23.3042%" y="165" width="0.1841%" height="15" fill="rgb(225,153,32)" fg:x="19872" fg:w="157"/><text x="23.5972%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="23.4884%" y="165" width="0.1841%" height="15" fill="rgb(208,105,0)" fg:x="20029" fg:w="157"/><text x="23.7813%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="23.7991%" y="165" width="0.1876%" height="15" fill="rgb(230,105,2)" fg:x="20294" fg:w="160"/><text x="24.0921%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="23.9868%" y="165" width="0.1876%" height="15" fill="rgb(243,128,6)" fg:x="20454" fg:w="160"/><text x="24.2797%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="24.3011%" y="165" width="0.0270%" height="15" fill="rgb(215,152,38)" fg:x="20722" fg:w="23"/><text x="24.5940%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="24.3280%" y="165" width="0.0270%" height="15" fill="rgb(235,108,8)" fg:x="20745" fg:w="23"/><text x="24.6210%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="24.4817%" y="165" width="0.2252%" height="15" fill="rgb(246,78,25)" fg:x="20876" fg:w="192"/><text x="24.7746%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="24.7068%" y="165" width="0.2252%" height="15" fill="rgb(227,146,53)" fg:x="21068" fg:w="192"/><text x="24.9998%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.0586%" y="165" width="0.0270%" height="15" fill="rgb(221,13,25)" fg:x="21368" fg:w="23"/><text x="25.3516%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.0856%" y="165" width="0.0270%" height="15" fill="rgb(233,206,9)" fg:x="21391" fg:w="23"/><text x="25.3786%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="25.2392%" y="165" width="0.2627%" height="15" fill="rgb(252,69,17)" fg:x="21522" fg:w="224"/><text x="25.5322%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="25.5019%" y="165" width="0.2627%" height="15" fill="rgb(233,167,22)" fg:x="21746" fg:w="224"/><text x="25.7949%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.8913%" y="165" width="0.0270%" height="15" fill="rgb(247,0,21)" fg:x="22078" fg:w="23"/><text x="26.1842%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.9182%" y="165" width="0.0270%" height="15" fill="rgb(253,145,14)" fg:x="22101" fg:w="23"/><text x="26.2112%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.0719%" y="165" width="0.0270%" height="15" fill="rgb(220,197,31)" fg:x="22232" fg:w="23"/><text x="26.3648%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.0988%" y="165" width="0.0270%" height="15" fill="rgb(221,96,42)" fg:x="22255" fg:w="23"/><text x="26.3918%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.2525%" y="165" width="0.0270%" height="15" fill="rgb(217,7,50)" fg:x="22386" fg:w="23"/><text x="26.5454%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.2794%" y="165" width="0.0270%" height="15" fill="rgb(229,171,37)" fg:x="22409" fg:w="23"/><text x="26.5724%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.4331%" y="165" width="0.0270%" height="15" fill="rgb(228,187,43)" fg:x="22540" fg:w="23"/><text x="26.7260%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.4600%" y="165" width="0.0270%" height="15" fill="rgb(239,175,29)" fg:x="22563" fg:w="23"/><text x="26.7530%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.6137%" y="165" width="0.0270%" height="15" fill="rgb(244,72,4)" fg:x="22694" fg:w="23"/><text x="26.9066%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.6406%" y="165" width="0.0270%" height="15" fill="rgb(211,220,4)" fg:x="22717" fg:w="23"/><text x="26.9336%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.7943%" y="165" width="0.0270%" height="15" fill="rgb(220,40,54)" fg:x="22848" fg:w="23"/><text x="27.0872%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.8212%" y="165" width="0.0270%" height="15" fill="rgb(227,110,18)" fg:x="22871" fg:w="23"/><text x="27.1142%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.9749%" y="165" width="0.0270%" height="15" fill="rgb(224,129,25)" fg:x="23002" fg:w="23"/><text x="27.2678%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.0018%" y="165" width="0.0270%" height="15" fill="rgb(238,182,28)" fg:x="23025" fg:w="23"/><text x="27.2948%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.0288%" y="149" width="0.0270%" height="15" fill="rgb(228,63,52)" fg:x="23048" fg:w="23"/><text x="27.3218%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="27.0558%" y="149" width="0.2158%" height="15" fill="rgb(210,86,37)" fg:x="23071" fg:w="184"/><text x="27.3487%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.2716%" y="149" width="0.0270%" height="15" fill="rgb(250,78,31)" fg:x="23255" fg:w="23"/><text x="27.5645%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="27.2985%" y="149" width="0.2158%" height="15" fill="rgb(224,149,43)" fg:x="23278" fg:w="184"/><text x="27.5915%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.5143%" y="149" width="0.0270%" height="15" fill="rgb(237,65,24)" fg:x="23462" fg:w="23"/><text x="27.8073%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.10%)</title><rect x="27.5413%" y="149" width="0.0973%" height="15" fill="rgb(215,29,33)" fg:x="23485" fg:w="83"/><text x="27.8342%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (731 instructions, 0.86%)</title><rect x="27.0288%" y="165" width="0.8573%" height="15" fill="rgb(212,204,26)" fg:x="23048" fg:w="731"/><text x="27.3218%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.8861%" y="149" width="0.0270%" height="15" fill="rgb(232,144,54)" fg:x="23779" fg:w="23"/><text x="28.1790%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="27.9130%" y="149" width="0.2158%" height="15" fill="rgb(225,158,29)" fg:x="23802" fg:w="184"/><text x="28.2060%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="28.1288%" y="149" width="0.0270%" height="15" fill="rgb(222,12,44)" fg:x="23986" fg:w="23"/><text x="28.4218%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="28.1558%" y="149" width="0.2158%" height="15" fill="rgb(231,23,0)" fg:x="24009" fg:w="184"/><text x="28.4488%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="28.3716%" y="149" width="0.0270%" height="15" fill="rgb(240,111,9)" fg:x="24193" fg:w="23"/><text x="28.6645%" y="159.50"></text></g><g><title>memcpy (136 instructions, 0.16%)</title><rect x="28.3985%" y="149" width="0.1595%" height="15" fill="rgb(228,160,43)" fg:x="24216" fg:w="136"/><text x="28.6915%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.03%)</title><rect x="28.5580%" y="133" width="0.0270%" height="15" fill="rgb(233,23,36)" fg:x="24352" fg:w="23"/><text x="28.8510%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.08%)</title><rect x="28.5850%" y="133" width="0.0797%" height="15" fill="rgb(254,201,9)" fg:x="24375" fg:w="68"/><text x="28.8780%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (187 instructions, 0.22%)</title><rect x="28.5580%" y="149" width="0.2193%" height="15" fill="rgb(227,92,3)" fg:x="24352" fg:w="187"/><text x="28.8510%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (1,086 instructions, 1.27%)</title><rect x="27.8861%" y="165" width="1.2736%" height="15" fill="rgb(228,202,26)" fg:x="23779" fg:w="1086"/><text x="28.1790%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="29.4974%" y="165" width="0.0270%" height="15" fill="rgb(232,12,16)" fg:x="25153" fg:w="23"/><text x="29.7903%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="29.5243%" y="165" width="0.0270%" height="15" fill="rgb(230,224,24)" fg:x="25176" fg:w="23"/><text x="29.8173%" y="175.50"></text></g><g><title>memmove (288 instructions, 0.34%)</title><rect x="29.6780%" y="165" width="0.3377%" height="15" fill="rgb(217,135,45)" fg:x="25307" fg:w="288"/><text x="29.9709%" y="175.50"></text></g><g><title>memmove (288 instructions, 0.34%)</title><rect x="30.0157%" y="165" width="0.3377%" height="15" fill="rgb(236,62,10)" fg:x="25595" fg:w="288"/><text x="30.3087%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="30.4801%" y="165" width="0.0270%" height="15" fill="rgb(246,170,13)" fg:x="25991" fg:w="23"/><text x="30.7731%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="30.5071%" y="165" width="0.0270%" height="15" fill="rgb(220,41,42)" fg:x="26014" fg:w="23"/><text x="30.8001%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="30.6607%" y="165" width="0.1876%" height="15" fill="rgb(245,74,34)" fg:x="26145" fg:w="160"/><text x="30.9537%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="30.8483%" y="165" width="0.1876%" height="15" fill="rgb(245,225,8)" fg:x="26305" fg:w="160"/><text x="31.1413%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="31.0360%" y="149" width="0.2252%" height="15" fill="rgb(236,176,30)" fg:x="26465" fg:w="192"/><text x="31.3289%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="31.2611%" y="149" width="0.2158%" height="15" fill="rgb(217,172,39)" fg:x="26657" fg:w="184"/><text x="31.5541%" y="159.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="31.4769%" y="149" width="0.2252%" height="15" fill="rgb(228,77,26)" fg:x="26841" fg:w="192"/><text x="31.7699%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="31.7021%" y="149" width="0.2158%" height="15" fill="rgb(233,7,10)" fg:x="27033" fg:w="184"/><text x="31.9951%" y="159.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="31.9179%" y="149" width="0.1501%" height="15" fill="rgb(224,207,44)" fg:x="27217" fg:w="128"/><text x="32.2108%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.10%)</title><rect x="32.0680%" y="149" width="0.0973%" height="15" fill="rgb(244,169,18)" fg:x="27345" fg:w="83"/><text x="32.3609%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,263 instructions, 1.48%)</title><rect x="31.0360%" y="165" width="1.4811%" height="15" fill="rgb(207,80,33)" fg:x="26465" fg:w="1263"/><text x="31.3289%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.7587%" y="165" width="0.0270%" height="15" fill="rgb(209,110,33)" fg:x="27934" fg:w="23"/><text x="33.0517%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.7857%" y="165" width="0.0270%" height="15" fill="rgb(231,209,16)" fg:x="27957" fg:w="23"/><text x="33.0786%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.9393%" y="165" width="0.0270%" height="15" fill="rgb(247,176,30)" fg:x="28088" fg:w="23"/><text x="33.2323%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.9663%" y="165" width="0.0270%" height="15" fill="rgb(238,168,24)" fg:x="28111" fg:w="23"/><text x="33.2592%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="33.1199%" y="165" width="0.2627%" height="15" fill="rgb(212,229,30)" fg:x="28242" fg:w="224"/><text x="33.4129%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="33.3826%" y="165" width="0.2627%" height="15" fill="rgb(230,120,21)" fg:x="28466" fg:w="224"/><text x="33.6756%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.7719%" y="165" width="0.0270%" height="15" fill="rgb(215,179,2)" fg:x="28798" fg:w="23"/><text x="34.0649%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.7989%" y="165" width="0.0270%" height="15" fill="rgb(237,98,38)" fg:x="28821" fg:w="23"/><text x="34.0919%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.9525%" y="165" width="0.0270%" height="15" fill="rgb(218,204,25)" fg:x="28952" fg:w="23"/><text x="34.2455%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.9795%" y="165" width="0.0270%" height="15" fill="rgb(218,182,10)" fg:x="28975" fg:w="23"/><text x="34.2725%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="34.1331%" y="165" width="0.2627%" height="15" fill="rgb(237,174,3)" fg:x="29106" fg:w="224"/><text x="34.4261%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="34.3958%" y="165" width="0.2627%" height="15" fill="rgb(242,71,19)" fg:x="29330" fg:w="224"/><text x="34.6888%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="34.7852%" y="165" width="0.0270%" height="15" fill="rgb(228,115,13)" fg:x="29662" fg:w="23"/><text x="35.0781%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="34.8121%" y="165" width="0.0270%" height="15" fill="rgb(214,57,13)" fg:x="29685" fg:w="23"/><text x="35.1051%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="34.9658%" y="165" width="0.2252%" height="15" fill="rgb(240,9,50)" fg:x="29816" fg:w="192"/><text x="35.2587%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="35.1909%" y="165" width="0.2252%" height="15" fill="rgb(210,202,33)" fg:x="30008" fg:w="192"/><text x="35.4839%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="35.5427%" y="165" width="0.3002%" height="15" fill="rgb(219,177,14)" fg:x="30308" fg:w="256"/><text x="35.8357%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="35.8429%" y="165" width="0.3002%" height="15" fill="rgb(229,106,23)" fg:x="30564" fg:w="256"/><text x="36.1359%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="36.2698%" y="165" width="0.2252%" height="15" fill="rgb(246,196,46)" fg:x="30928" fg:w="192"/><text x="36.5628%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="36.4950%" y="165" width="0.2252%" height="15" fill="rgb(235,84,42)" fg:x="31120" fg:w="192"/><text x="36.7879%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="36.8468%" y="165" width="0.0270%" height="15" fill="rgb(208,107,22)" fg:x="31420" fg:w="23"/><text x="37.1398%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="36.8738%" y="165" width="0.0270%" height="15" fill="rgb(225,126,3)" fg:x="31443" fg:w="23"/><text x="37.1667%" y="175.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="36.9007%" y="149" width="0.1501%" height="15" fill="rgb(214,167,20)" fg:x="31466" fg:w="128"/><text x="37.1937%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="37.0508%" y="149" width="0.2158%" height="15" fill="rgb(220,87,6)" fg:x="31594" fg:w="184"/><text x="37.3438%" y="159.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="37.2666%" y="149" width="0.1501%" height="15" fill="rgb(253,52,54)" fg:x="31778" fg:w="128"/><text x="37.5596%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="37.4167%" y="149" width="0.2158%" height="15" fill="rgb(210,106,34)" fg:x="31906" fg:w="184"/><text x="37.7097%" y="159.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="37.6325%" y="149" width="0.1841%" height="15" fill="rgb(217,195,25)" fg:x="32090" fg:w="157"/><text x="37.9255%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.10%)</title><rect x="37.8166%" y="149" width="0.0973%" height="15" fill="rgb(247,91,26)" fg:x="32247" fg:w="83"/><text x="38.1096%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,142 instructions, 1.34%)</title><rect x="36.9007%" y="165" width="1.3392%" height="15" fill="rgb(229,82,25)" fg:x="31466" fg:w="1142"/><text x="37.1937%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.4816%" y="165" width="0.0270%" height="15" fill="rgb(233,226,1)" fg:x="32814" fg:w="23"/><text x="38.7745%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.5085%" y="165" width="0.0270%" height="15" fill="rgb(252,29,9)" fg:x="32837" fg:w="23"/><text x="38.8015%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.6622%" y="165" width="0.0270%" height="15" fill="rgb(214,155,2)" fg:x="32968" fg:w="23"/><text x="38.9551%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.6891%" y="165" width="0.0270%" height="15" fill="rgb(238,7,54)" fg:x="32991" fg:w="23"/><text x="38.9821%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="38.8428%" y="165" width="0.1841%" height="15" fill="rgb(234,25,52)" fg:x="33122" fg:w="157"/><text x="39.1357%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="39.0269%" y="165" width="0.1841%" height="15" fill="rgb(232,229,37)" fg:x="33279" fg:w="157"/><text x="39.3198%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.3376%" y="165" width="0.0270%" height="15" fill="rgb(221,221,14)" fg:x="33544" fg:w="23"/><text x="39.6306%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.3646%" y="165" width="0.0270%" height="15" fill="rgb(231,13,29)" fg:x="33567" fg:w="23"/><text x="39.6576%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.5182%" y="165" width="0.0270%" height="15" fill="rgb(206,15,23)" fg:x="33698" fg:w="23"/><text x="39.8112%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.5452%" y="165" width="0.0270%" height="15" fill="rgb(241,68,9)" fg:x="33721" fg:w="23"/><text x="39.8382%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="39.6988%" y="165" width="0.2627%" height="15" fill="rgb(229,27,29)" fg:x="33852" fg:w="224"/><text x="39.9918%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="39.9615%" y="165" width="0.2627%" height="15" fill="rgb(215,215,33)" fg:x="34076" fg:w="224"/><text x="40.2545%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="40.3509%" y="165" width="0.0270%" height="15" fill="rgb(242,14,17)" fg:x="34408" fg:w="23"/><text x="40.6438%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="40.3778%" y="165" width="0.0270%" height="15" fill="rgb(213,30,15)" fg:x="34431" fg:w="23"/><text x="40.6708%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="40.5315%" y="165" width="0.1841%" height="15" fill="rgb(215,100,3)" fg:x="34562" fg:w="157"/><text x="40.8244%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="40.7156%" y="165" width="0.1841%" height="15" fill="rgb(232,9,50)" fg:x="34719" fg:w="157"/><text x="41.0086%" y="175.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (21,562 instructions, 25.29%)</title><rect x="15.7402%" y="181" width="25.2861%" height="15" fill="rgb(205,71,12)" fg:x="13422" fg:w="21562"/><text x="16.0332%" y="191.50">alloc::collections::btree::remove:..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.07%)</title><rect x="41.0346%" y="149" width="0.0739%" height="15" fill="rgb(239,69,50)" fg:x="34991" fg:w="63"/><text x="41.3275%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (98 instructions, 0.11%)</title><rect x="41.0346%" y="165" width="0.1149%" height="15" fill="rgb(230,173,33)" fg:x="34991" fg:w="98"/><text x="41.3275%" y="175.50"></text></g><g><title>memset (152 instructions, 0.18%)</title><rect x="41.1495%" y="165" width="0.1783%" height="15" fill="rgb(221,221,9)" fg:x="35089" fg:w="152"/><text x="41.4425%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (428 instructions, 0.50%)</title><rect x="41.0264%" y="181" width="0.5019%" height="15" fill="rgb(230,63,39)" fg:x="34984" fg:w="428"/><text x="41.3193%" y="191.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 0.61%)</title><rect x="41.5283%" y="165" width="0.6075%" height="15" fill="rgb(227,216,23)" fg:x="35412" fg:w="518"/><text x="41.8213%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="42.1358%" y="117" width="0.0973%" height="15" fill="rgb(247,220,39)" fg:x="35930" fg:w="83"/><text x="42.4287%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.15%)</title><rect x="42.1358%" y="133" width="0.1478%" height="15" fill="rgb(233,204,7)" fg:x="35930" fg:w="126"/><text x="42.4287%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (208 instructions, 0.24%)</title><rect x="42.1358%" y="149" width="0.2439%" height="15" fill="rgb(221,122,45)" fg:x="35930" fg:w="208"/><text x="42.4287%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="42.3797%" y="149" width="0.0176%" height="15" fill="rgb(217,60,22)" fg:x="36138" fg:w="15"/><text x="42.6726%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="42.3973%" y="149" width="0.0176%" height="15" fill="rgb(208,154,30)" fg:x="36153" fg:w="15"/><text x="42.6902%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (426 instructions, 0.50%)</title><rect x="42.1358%" y="165" width="0.4996%" height="15" fill="rgb(213,216,5)" fg:x="35930" fg:w="426"/><text x="42.4287%" y="175.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 0.61%)</title><rect x="42.6353%" y="165" width="0.6051%" height="15" fill="rgb(248,197,25)" fg:x="36356" fg:w="516"/><text x="42.9283%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,560 instructions, 1.83%)</title><rect x="41.5283%" y="181" width="1.8294%" height="15" fill="rgb(245,126,3)" fg:x="35412" fg:w="1560"/><text x="41.8213%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="43.3659%" y="165" width="0.0704%" height="15" fill="rgb(241,118,12)" fg:x="36979" fg:w="60"/><text x="43.6589%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::ser::IDLBuilder&gt; (133 instructions, 0.16%)</title><rect x="43.3577%" y="181" width="0.1560%" height="15" fill="rgb(243,100,39)" fg:x="36972" fg:w="133"/><text x="43.6507%" y="191.50"></text></g><g><title>btreemap::__canister_method_batch_remove::{{closure}} (84,637 instructions, 99.26%)</title><rect x="0.2228%" y="197" width="99.2553%" height="15" fill="rgb(253,180,12)" fg:x="190" fg:w="84637"/><text x="0.5158%" y="207.50">btreemap::__canister_method_batch_remove::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.02%)</title><rect x="99.4781%" y="197" width="0.0164%" height="15" fill="rgb(216,10,15)" fg:x="84827" fg:w="14"/><text x="99.7711%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="99.6001%" y="181" width="0.0317%" height="15" fill="rgb(218,83,30)" fg:x="84931" fg:w="27"/><text x="99.8931%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="99.6318%" y="181" width="0.0317%" height="15" fill="rgb(213,195,8)" fg:x="84958" fg:w="27"/><text x="99.9247%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (286 instructions, 0.34%)</title><rect x="99.4957%" y="197" width="0.3354%" height="15" fill="rgb(244,100,44)" fg:x="84842" fg:w="286"/><text x="99.7887%" y="207.50"></text></g><g><title>all (85,272 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,31,16)" fg:x="0" fg:w="85272"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (85,272 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(206,166,50)" fg:x="0" fg:w="85272"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>