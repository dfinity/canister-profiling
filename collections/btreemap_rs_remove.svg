<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="79740"><g><title>ic_cdk::setup (19 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0238%" height="15" fill="rgb(250,116,25)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="0.0238%" y="197" width="0.0953%" height="15" fill="rgb(236,28,52)" fg:x="19" fg:w="76"/><text x="0.3168%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="0.1191%" y="197" width="0.0953%" height="15" fill="rgb(222,42,36)" fg:x="95" fg:w="76"/><text x="0.4121%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="0.2144%" y="165" width="0.0953%" height="15" fill="rgb(228,141,25)" fg:x="171" fg:w="76"/><text x="0.5074%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.09%)</title><rect x="0.3098%" y="149" width="0.0865%" height="15" fill="rgb(254,191,16)" fg:x="247" fg:w="69"/><text x="0.6027%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.51%)</title><rect x="0.3963%" y="149" width="0.5092%" height="15" fill="rgb(240,85,20)" fg:x="316" fg:w="406"/><text x="0.6893%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.10%)</title><rect x="0.9054%" y="149" width="0.1028%" height="15" fill="rgb(248,220,54)" fg:x="722" fg:w="82"/><text x="1.1984%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.0083%" y="149" width="0.0677%" height="15" fill="rgb(244,28,36)" fg:x="804" fg:w="54"/><text x="1.3012%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.0760%" y="149" width="0.0677%" height="15" fill="rgb(240,18,50)" fg:x="858" fg:w="54"/><text x="1.3690%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.1437%" y="149" width="0.0677%" height="15" fill="rgb(243,209,54)" fg:x="912" fg:w="54"/><text x="1.4367%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.2114%" y="149" width="0.0677%" height="15" fill="rgb(254,85,5)" fg:x="966" fg:w="54"/><text x="1.5044%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.09%)</title><rect x="1.2792%" y="149" width="0.0865%" height="15" fill="rgb(230,154,38)" fg:x="1020" fg:w="69"/><text x="1.5721%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.08%)</title><rect x="1.3657%" y="149" width="0.0815%" height="15" fill="rgb(223,91,39)" fg:x="1089" fg:w="65"/><text x="1.6587%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.51%)</title><rect x="1.4472%" y="149" width="0.5092%" height="15" fill="rgb(220,152,34)" fg:x="1154" fg:w="406"/><text x="1.7402%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="1.9564%" y="149" width="0.0201%" height="15" fill="rgb(240,12,53)" fg:x="1560" fg:w="16"/><text x="2.2493%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="1.9764%" y="133" width="0.0953%" height="15" fill="rgb(254,64,30)" fg:x="1576" fg:w="76"/><text x="2.2694%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.08%)</title><rect x="2.0717%" y="101" width="0.0752%" height="15" fill="rgb(239,22,7)" fg:x="1652" fg:w="60"/><text x="2.3647%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.11%)</title><rect x="2.0717%" y="117" width="0.1066%" height="15" fill="rgb(237,28,52)" fg:x="1652" fg:w="85"/><text x="2.3647%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="2.1783%" y="69" width="0.0113%" height="15" fill="rgb(208,212,9)" fg:x="1737" fg:w="9"/><text x="2.4713%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.04%)</title><rect x="2.1896%" y="53" width="0.0376%" height="15" fill="rgb(245,134,40)" fg:x="1746" fg:w="30"/><text x="2.4826%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.07%)</title><rect x="2.1896%" y="69" width="0.0690%" height="15" fill="rgb(222,169,37)" fg:x="1746" fg:w="55"/><text x="2.4826%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.15%)</title><rect x="2.1783%" y="85" width="0.1480%" height="15" fill="rgb(207,10,51)" fg:x="1737" fg:w="118"/><text x="2.4713%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.21%)</title><rect x="2.1783%" y="101" width="0.2144%" height="15" fill="rgb(207,3,33)" fg:x="1737" fg:w="171"/><text x="2.4713%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.22%)</title><rect x="2.1783%" y="117" width="0.2207%" height="15" fill="rgb(213,228,43)" fg:x="1737" fg:w="176"/><text x="2.4713%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.47%)</title><rect x="2.0717%" y="133" width="0.4665%" height="15" fill="rgb(248,161,6)" fg:x="1652" fg:w="372"/><text x="2.3647%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.74%)</title><rect x="1.9764%" y="149" width="0.7387%" height="15" fill="rgb(232,193,47)" fg:x="1576" fg:w="589"/><text x="2.2694%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.10%)</title><rect x="2.7151%" y="149" width="0.1028%" height="15" fill="rgb(227,13,6)" fg:x="2165" fg:w="82"/><text x="3.0080%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="2.8179%" y="149" width="0.0690%" height="15" fill="rgb(207,76,15)" fg:x="2247" fg:w="55"/><text x="3.1109%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.08%)</title><rect x="2.8869%" y="149" width="0.0790%" height="15" fill="rgb(250,71,54)" fg:x="2302" fg:w="63"/><text x="3.1799%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.08%)</title><rect x="2.9659%" y="149" width="0.0815%" height="15" fill="rgb(231,13,16)" fg:x="2365" fg:w="65"/><text x="3.2589%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.51%)</title><rect x="3.0474%" y="133" width="0.5092%" height="15" fill="rgb(236,173,51)" fg:x="2430" fg:w="406"/><text x="3.3404%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="3.5566%" y="133" width="0.0201%" height="15" fill="rgb(221,112,29)" fg:x="2836" fg:w="16"/><text x="3.8495%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="3.5766%" y="117" width="0.0953%" height="15" fill="rgb(215,92,11)" fg:x="2852" fg:w="76"/><text x="3.8696%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.08%)</title><rect x="3.6719%" y="85" width="0.0752%" height="15" fill="rgb(251,136,37)" fg:x="2928" fg:w="60"/><text x="3.9649%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.11%)</title><rect x="3.6719%" y="101" width="0.1066%" height="15" fill="rgb(245,132,27)" fg:x="2928" fg:w="85"/><text x="3.9649%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="3.7785%" y="53" width="0.0113%" height="15" fill="rgb(229,228,20)" fg:x="3013" fg:w="9"/><text x="4.0715%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.04%)</title><rect x="3.7898%" y="37" width="0.0376%" height="15" fill="rgb(249,196,18)" fg:x="3022" fg:w="30"/><text x="4.0828%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.07%)</title><rect x="3.7898%" y="53" width="0.0690%" height="15" fill="rgb(249,190,10)" fg:x="3022" fg:w="55"/><text x="4.0828%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.15%)</title><rect x="3.7785%" y="69" width="0.1480%" height="15" fill="rgb(226,52,23)" fg:x="3013" fg:w="118"/><text x="4.0715%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.21%)</title><rect x="3.7785%" y="85" width="0.2144%" height="15" fill="rgb(242,214,39)" fg:x="3013" fg:w="171"/><text x="4.0715%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.22%)</title><rect x="3.7785%" y="101" width="0.2207%" height="15" fill="rgb(242,42,44)" fg:x="3013" fg:w="176"/><text x="4.0715%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.47%)</title><rect x="3.6719%" y="117" width="0.4665%" height="15" fill="rgb(234,116,1)" fg:x="2928" fg:w="372"/><text x="3.9649%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.74%)</title><rect x="3.5766%" y="133" width="0.7387%" height="15" fill="rgb(247,93,24)" fg:x="2852" fg:w="589"/><text x="3.8696%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.10%)</title><rect x="4.3153%" y="133" width="0.1028%" height="15" fill="rgb(246,20,2)" fg:x="3441" fg:w="82"/><text x="4.6082%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="4.4181%" y="133" width="0.0690%" height="15" fill="rgb(245,5,54)" fg:x="3523" fg:w="55"/><text x="4.7111%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.09%)</title><rect x="4.4871%" y="117" width="0.0865%" height="15" fill="rgb(240,37,6)" fg:x="3578" fg:w="69"/><text x="4.7801%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.11%)</title><rect x="4.5736%" y="117" width="0.1141%" height="15" fill="rgb(219,187,40)" fg:x="3647" fg:w="91"/><text x="4.8666%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.08%)</title><rect x="4.6877%" y="117" width="0.0790%" height="15" fill="rgb(231,158,1)" fg:x="3738" fg:w="63"/><text x="4.9807%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.35%)</title><rect x="4.4871%" y="133" width="0.3536%" height="15" fill="rgb(215,50,30)" fg:x="3578" fg:w="282"/><text x="4.7801%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.10%)</title><rect x="4.8407%" y="133" width="0.0978%" height="15" fill="rgb(226,189,49)" fg:x="3860" fg:w="78"/><text x="5.1337%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,711 instructions, 2.15%)</title><rect x="3.0474%" y="149" width="2.1457%" height="15" fill="rgb(241,212,54)" fg:x="2430" fg:w="1711"/><text x="3.3404%" y="159.50">b..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.08%)</title><rect x="5.1931%" y="149" width="0.0790%" height="15" fill="rgb(214,159,34)" fg:x="4141" fg:w="63"/><text x="5.4861%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="5.2721%" y="149" width="0.0163%" height="15" fill="rgb(222,59,2)" fg:x="4204" fg:w="13"/><text x="5.5651%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="5.2884%" y="149" width="0.0163%" height="15" fill="rgb(221,12,20)" fg:x="4217" fg:w="13"/><text x="5.5814%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.02%)</title><rect x="5.3135%" y="149" width="0.0188%" height="15" fill="rgb(220,64,18)" fg:x="4237" fg:w="15"/><text x="5.6065%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.09%)</title><rect x="5.3323%" y="133" width="0.0890%" height="15" fill="rgb(236,182,43)" fg:x="4252" fg:w="71"/><text x="5.6253%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (154 instructions, 0.19%)</title><rect x="5.3323%" y="149" width="0.1931%" height="15" fill="rgb(246,124,38)" fg:x="4252" fg:w="154"/><text x="5.6253%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.15%)</title><rect x="5.5255%" y="117" width="0.1480%" height="15" fill="rgb(231,68,14)" fg:x="4406" fg:w="118"/><text x="5.8184%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (152 instructions, 0.19%)</title><rect x="5.5255%" y="133" width="0.1906%" height="15" fill="rgb(238,98,19)" fg:x="4406" fg:w="152"/><text x="5.8184%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (220 instructions, 0.28%)</title><rect x="5.5255%" y="149" width="0.2759%" height="15" fill="rgb(254,62,29)" fg:x="4406" fg:w="220"/><text x="5.8184%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="5.8014%" y="149" width="0.0953%" height="15" fill="rgb(214,200,45)" fg:x="4626" fg:w="76"/><text x="6.0943%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="5.8967%" y="149" width="0.1016%" height="15" fill="rgb(225,70,51)" fg:x="4702" fg:w="81"/><text x="6.1896%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="5.9982%" y="149" width="0.0953%" height="15" fill="rgb(207,152,46)" fg:x="4783" fg:w="76"/><text x="6.2912%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="6.0936%" y="149" width="0.0953%" height="15" fill="rgb(229,15,30)" fg:x="4859" fg:w="76"/><text x="6.3865%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="6.1914%" y="149" width="0.1016%" height="15" fill="rgb(239,128,10)" fg:x="4937" fg:w="81"/><text x="6.4843%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.50%)</title><rect x="6.2930%" y="149" width="0.5004%" height="15" fill="rgb(224,160,33)" fg:x="5018" fg:w="399"/><text x="6.5859%" y="159.50"></text></g><g><title>memcpy (399 instructions, 0.50%)</title><rect x="6.7933%" y="149" width="0.5004%" height="15" fill="rgb(228,1,40)" fg:x="5417" fg:w="399"/><text x="7.0863%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,496 instructions, 8.15%)</title><rect x="0.3098%" y="165" width="8.1465%" height="15" fill="rgb(208,37,18)" fg:x="247" fg:w="6496"/><text x="0.6027%" y="175.50">candid::d..</text></g><g><title>memcpy (354 instructions, 0.44%)</title><rect x="8.4562%" y="165" width="0.4439%" height="15" fill="rgb(207,142,48)" fg:x="6743" fg:w="354"/><text x="8.7492%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.05%)</title><rect x="8.9002%" y="165" width="0.0489%" height="15" fill="rgb(205,107,32)" fg:x="7097" fg:w="39"/><text x="9.1931%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="8.9491%" y="165" width="0.0953%" height="15" fill="rgb(239,222,9)" fg:x="7136" fg:w="76"/><text x="9.2421%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="9.0507%" y="133" width="0.0665%" height="15" fill="rgb(242,100,36)" fg:x="7217" fg:w="53"/><text x="9.3436%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.11%)</title><rect x="9.1171%" y="133" width="0.1104%" height="15" fill="rgb(224,16,43)" fg:x="7270" fg:w="88"/><text x="9.4101%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.20%)</title><rect x="9.2275%" y="133" width="0.2032%" height="15" fill="rgb(215,37,35)" fg:x="7358" fg:w="162"/><text x="9.5205%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.68%)</title><rect x="9.0507%" y="149" width="0.6772%" height="15" fill="rgb(235,103,30)" fg:x="7217" fg:w="540"/><text x="9.3436%" y="159.50"></text></g><g><title>candid::types::internal::env_add (749 instructions, 0.94%)</title><rect x="9.0444%" y="165" width="0.9393%" height="15" fill="rgb(241,210,48)" fg:x="7212" fg:w="749"/><text x="9.3374%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="9.9837%" y="165" width="0.1028%" height="15" fill="rgb(245,0,3)" fg:x="7961" fg:w="82"/><text x="10.2767%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="10.0928%" y="133" width="0.0665%" height="15" fill="rgb(212,80,20)" fg:x="8048" fg:w="53"/><text x="10.3858%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.11%)</title><rect x="10.1593%" y="133" width="0.1104%" height="15" fill="rgb(238,28,21)" fg:x="8101" fg:w="88"/><text x="10.4522%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.20%)</title><rect x="10.2696%" y="133" width="0.2032%" height="15" fill="rgb(211,165,20)" fg:x="8189" fg:w="162"/><text x="10.5626%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.68%)</title><rect x="10.0928%" y="149" width="0.6772%" height="15" fill="rgb(224,66,35)" fg:x="8048" fg:w="540"/><text x="10.3858%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.09%)</title><rect x="10.7700%" y="149" width="0.0853%" height="15" fill="rgb(205,224,21)" fg:x="8588" fg:w="68"/><text x="11.0630%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="10.8553%" y="133" width="0.0690%" height="15" fill="rgb(231,208,40)" fg:x="8656" fg:w="55"/><text x="11.1482%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 instructions, 0.10%)</title><rect x="10.8553%" y="149" width="0.1028%" height="15" fill="rgb(236,176,50)" fg:x="8656" fg:w="82"/><text x="11.1482%" y="159.50"></text></g><g><title>candid::types::internal::env_add (864 instructions, 1.08%)</title><rect x="10.0865%" y="165" width="1.0835%" height="15" fill="rgb(226,121,10)" fg:x="8043" fg:w="864"/><text x="10.3795%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="11.1701%" y="117" width="0.0665%" height="15" fill="rgb(215,195,34)" fg:x="8907" fg:w="53"/><text x="11.4630%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.10%)</title><rect x="11.1701%" y="133" width="0.0978%" height="15" fill="rgb(246,118,31)" fg:x="8907" fg:w="78"/><text x="11.4630%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 0.37%)</title><rect x="11.1701%" y="149" width="0.3674%" height="15" fill="rgb(206,218,38)" fg:x="8907" fg:w="293"/><text x="11.4630%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1622 (15 instructions, 0.02%)</title><rect x="11.5375%" y="149" width="0.0188%" height="15" fill="rgb(208,202,17)" fg:x="9200" fg:w="15"/><text x="11.8305%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.5563%" y="149" width="0.0138%" height="15" fill="rgb(254,142,12)" fg:x="9215" fg:w="11"/><text x="11.8493%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 0.60%)</title><rect x="11.1701%" y="165" width="0.5994%" height="15" fill="rgb(254,114,15)" fg:x="8907" fg:w="478"/><text x="11.4630%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.06%)</title><rect x="11.7695%" y="165" width="0.0589%" height="15" fill="rgb(249,6,10)" fg:x="9385" fg:w="47"/><text x="12.0625%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="11.8284%" y="149" width="0.0690%" height="15" fill="rgb(212,212,19)" fg:x="9432" fg:w="55"/><text x="12.1214%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="11.9313%" y="149" width="0.0690%" height="15" fill="rgb(233,17,41)" fg:x="9514" fg:w="55"/><text x="12.2242%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (164 instructions, 0.21%)</title><rect x="11.8284%" y="165" width="0.2057%" height="15" fill="rgb(217,198,52)" fg:x="9432" fg:w="164"/><text x="12.1214%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.04%)</title><rect x="12.0341%" y="149" width="0.0351%" height="15" fill="rgb(253,38,22)" fg:x="9596" fg:w="28"/><text x="12.3271%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.02%)</title><rect x="12.0692%" y="149" width="0.0201%" height="15" fill="rgb(213,146,37)" fg:x="9624" fg:w="16"/><text x="12.3622%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.02%)</title><rect x="12.0893%" y="149" width="0.0201%" height="15" fill="rgb(218,195,17)" fg:x="9640" fg:w="16"/><text x="12.3823%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (137 instructions, 0.17%)</title><rect x="12.0341%" y="165" width="0.1718%" height="15" fill="rgb(224,133,37)" fg:x="9596" fg:w="137"/><text x="12.3271%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="12.2059%" y="165" width="0.0138%" height="15" fill="rgb(230,152,35)" fg:x="9733" fg:w="11"/><text x="12.4989%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="12.2197%" y="165" width="0.0138%" height="15" fill="rgb(249,132,24)" fg:x="9744" fg:w="11"/><text x="12.5127%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="12.2335%" y="165" width="0.0138%" height="15" fill="rgb(214,91,18)" fg:x="9755" fg:w="11"/><text x="12.5265%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.51%)</title><rect x="12.2473%" y="165" width="0.5142%" height="15" fill="rgb(207,12,1)" fg:x="9766" fg:w="410"/><text x="12.5403%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.02%)</title><rect x="12.7615%" y="133" width="0.0150%" height="15" fill="rgb(214,46,25)" fg:x="10176" fg:w="12"/><text x="13.0544%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.13%)</title><rect x="12.7765%" y="133" width="0.1254%" height="15" fill="rgb(232,193,8)" fg:x="10188" fg:w="100"/><text x="13.0695%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="12.9019%" y="117" width="0.1016%" height="15" fill="rgb(230,103,47)" fg:x="10288" fg:w="81"/><text x="13.1949%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.14%)</title><rect x="12.9019%" y="133" width="0.1354%" height="15" fill="rgb(214,179,26)" fg:x="10288" fg:w="108"/><text x="13.1949%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="13.0374%" y="133" width="0.0138%" height="15" fill="rgb(238,0,16)" fg:x="10396" fg:w="11"/><text x="13.3303%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (271 instructions, 0.34%)</title><rect x="12.7615%" y="149" width="0.3399%" height="15" fill="rgb(229,145,29)" fg:x="10176" fg:w="271"/><text x="13.0544%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (309 instructions, 0.39%)</title><rect x="12.7615%" y="165" width="0.3875%" height="15" fill="rgb(239,170,22)" fg:x="10176" fg:w="309"/><text x="13.0544%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.15%)</title><rect x="13.1490%" y="165" width="0.1543%" height="15" fill="rgb(211,82,30)" fg:x="10485" fg:w="123"/><text x="13.4420%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (10,831 instructions, 13.58%)</title><rect x="0.2144%" y="181" width="13.5829%" height="15" fill="rgb(217,92,40)" fg:x="171" fg:w="10831"/><text x="0.5074%" y="191.50">ic_cdk::api::call..</text></g><g><title>memmove (298 instructions, 0.37%)</title><rect x="13.7973%" y="165" width="0.3737%" height="15" fill="rgb(238,208,37)" fg:x="11002" fg:w="298"/><text x="14.0903%" y="175.50"></text></g><g><title>memmove (298 instructions, 0.37%)</title><rect x="14.1711%" y="165" width="0.3737%" height="15" fill="rgb(254,17,30)" fg:x="11300" fg:w="298"/><text x="14.4640%" y="175.50"></text></g><g><title>memmove (298 instructions, 0.37%)</title><rect x="14.6639%" y="165" width="0.3737%" height="15" fill="rgb(226,155,25)" fg:x="11693" fg:w="298"/><text x="14.9569%" y="175.50"></text></g><g><title>memmove (298 instructions, 0.37%)</title><rect x="15.0376%" y="165" width="0.3737%" height="15" fill="rgb(247,176,36)" fg:x="11991" fg:w="298"/><text x="15.3306%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="15.5305%" y="165" width="0.0238%" height="15" fill="rgb(244,12,52)" fg:x="12384" fg:w="19"/><text x="15.8234%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="15.5543%" y="165" width="0.0238%" height="15" fill="rgb(242,140,0)" fg:x="12403" fg:w="19"/><text x="15.8473%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="15.5781%" y="149" width="0.0238%" height="15" fill="rgb(233,38,4)" fg:x="12422" fg:w="19"/><text x="15.8711%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="15.6020%" y="149" width="0.2132%" height="15" fill="rgb(249,96,2)" fg:x="12441" fg:w="170"/><text x="15.8949%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="15.8151%" y="149" width="0.0238%" height="15" fill="rgb(239,66,15)" fg:x="12611" fg:w="19"/><text x="16.1081%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="15.8390%" y="149" width="0.2132%" height="15" fill="rgb(251,209,14)" fg:x="12630" fg:w="170"/><text x="16.1319%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.0522%" y="149" width="0.0238%" height="15" fill="rgb(208,168,7)" fg:x="12800" fg:w="19"/><text x="16.3451%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="16.0760%" y="149" width="0.1016%" height="15" fill="rgb(254,132,38)" fg:x="12819" fg:w="81"/><text x="16.3690%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (657 instructions, 0.82%)</title><rect x="15.5781%" y="165" width="0.8239%" height="15" fill="rgb(206,196,6)" fg:x="12422" fg:w="657"/><text x="15.8711%" y="175.50"></text></g><g><title>memmove (148 instructions, 0.19%)</title><rect x="16.6316%" y="165" width="0.1856%" height="15" fill="rgb(205,224,34)" fg:x="13262" fg:w="148"/><text x="16.9245%" y="175.50"></text></g><g><title>memmove (148 instructions, 0.19%)</title><rect x="16.8172%" y="165" width="0.1856%" height="15" fill="rgb(233,35,17)" fg:x="13410" fg:w="148"/><text x="17.1101%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="17.1219%" y="165" width="0.0238%" height="15" fill="rgb(236,0,41)" fg:x="13653" fg:w="19"/><text x="17.4149%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="17.1457%" y="165" width="0.0238%" height="15" fill="rgb(239,21,35)" fg:x="13672" fg:w="19"/><text x="17.4387%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.24%)</title><rect x="17.1696%" y="149" width="0.2433%" height="15" fill="rgb(249,17,15)" fg:x="13691" fg:w="194"/><text x="17.4625%" y="159.50"></text></g><g><title>memmove (194 instructions, 0.24%)</title><rect x="17.4128%" y="149" width="0.2433%" height="15" fill="rgb(229,39,1)" fg:x="13885" fg:w="194"/><text x="17.7058%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="17.6561%" y="149" width="0.0138%" height="15" fill="rgb(230,63,37)" fg:x="14079" fg:w="11"/><text x="17.9491%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="17.6699%" y="149" width="0.0138%" height="15" fill="rgb(219,147,21)" fg:x="14090" fg:w="11"/><text x="17.9629%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_left (553 instructions, 0.69%)</title><rect x="17.1696%" y="165" width="0.6935%" height="15" fill="rgb(208,229,35)" fg:x="13691" fg:w="553"/><text x="17.4625%" y="175.50"></text></g><g><title>memmove (118 instructions, 0.15%)</title><rect x="18.0988%" y="165" width="0.1480%" height="15" fill="rgb(239,18,33)" fg:x="14432" fg:w="118"/><text x="18.3918%" y="175.50"></text></g><g><title>memmove (118 instructions, 0.15%)</title><rect x="18.2468%" y="165" width="0.1480%" height="15" fill="rgb(225,134,17)" fg:x="14550" fg:w="118"/><text x="18.5398%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.5139%" y="165" width="0.0238%" height="15" fill="rgb(230,191,38)" fg:x="14763" fg:w="19"/><text x="18.8069%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.5377%" y="165" width="0.0238%" height="15" fill="rgb(243,63,2)" fg:x="14782" fg:w="19"/><text x="18.8307%" y="175.50"></text></g><g><title>memmove (148 instructions, 0.19%)</title><rect x="18.6807%" y="165" width="0.1856%" height="15" fill="rgb(213,166,2)" fg:x="14896" fg:w="148"/><text x="18.9737%" y="175.50"></text></g><g><title>memmove (148 instructions, 0.19%)</title><rect x="18.8663%" y="165" width="0.1856%" height="15" fill="rgb(226,180,54)" fg:x="15044" fg:w="148"/><text x="19.1593%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.1711%" y="165" width="0.0238%" height="15" fill="rgb(216,37,41)" fg:x="15287" fg:w="19"/><text x="19.4640%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.1949%" y="165" width="0.0238%" height="15" fill="rgb(234,222,21)" fg:x="15306" fg:w="19"/><text x="19.4879%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.3378%" y="165" width="0.0238%" height="15" fill="rgb(216,161,4)" fg:x="15420" fg:w="19"/><text x="19.6308%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.3617%" y="165" width="0.0238%" height="15" fill="rgb(215,213,51)" fg:x="15439" fg:w="19"/><text x="19.6546%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.5046%" y="165" width="0.0238%" height="15" fill="rgb(221,17,54)" fg:x="15553" fg:w="19"/><text x="19.7976%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.5285%" y="165" width="0.0238%" height="15" fill="rgb(214,28,29)" fg:x="15572" fg:w="19"/><text x="19.8214%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="19.6714%" y="165" width="0.2232%" height="15" fill="rgb(231,125,22)" fg:x="15686" fg:w="178"/><text x="19.9644%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="19.8947%" y="165" width="0.2232%" height="15" fill="rgb(208,74,14)" fg:x="15864" fg:w="178"/><text x="20.1876%" y="175.50"></text></g><g><title>memmove (238 instructions, 0.30%)</title><rect x="20.2370%" y="165" width="0.2985%" height="15" fill="rgb(226,45,30)" fg:x="16137" fg:w="238"/><text x="20.5300%" y="175.50"></text></g><g><title>memmove (238 instructions, 0.30%)</title><rect x="20.5355%" y="165" width="0.2985%" height="15" fill="rgb(212,30,2)" fg:x="16375" fg:w="238"/><text x="20.8285%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.9531%" y="165" width="0.0238%" height="15" fill="rgb(235,216,44)" fg:x="16708" fg:w="19"/><text x="21.2461%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.9769%" y="165" width="0.0238%" height="15" fill="rgb(246,198,6)" fg:x="16727" fg:w="19"/><text x="21.2699%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="21.1199%" y="165" width="0.1806%" height="15" fill="rgb(245,63,26)" fg:x="16841" fg:w="144"/><text x="21.4129%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="21.3005%" y="165" width="0.1806%" height="15" fill="rgb(223,105,8)" fg:x="16985" fg:w="144"/><text x="21.5934%" y="175.50"></text></g><g><title>memmove (148 instructions, 0.19%)</title><rect x="21.6002%" y="165" width="0.1856%" height="15" fill="rgb(226,186,35)" fg:x="17224" fg:w="148"/><text x="21.8932%" y="175.50"></text></g><g><title>memmove (148 instructions, 0.19%)</title><rect x="21.7858%" y="165" width="0.1856%" height="15" fill="rgb(217,100,12)" fg:x="17372" fg:w="148"/><text x="22.0788%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.0905%" y="165" width="0.0238%" height="15" fill="rgb(246,21,24)" fg:x="17615" fg:w="19"/><text x="22.3835%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.1144%" y="165" width="0.0238%" height="15" fill="rgb(234,217,27)" fg:x="17634" fg:w="19"/><text x="22.4073%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="22.2573%" y="165" width="0.2232%" height="15" fill="rgb(215,18,3)" fg:x="17748" fg:w="178"/><text x="22.5503%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="22.4806%" y="165" width="0.2232%" height="15" fill="rgb(249,200,29)" fg:x="17926" fg:w="178"/><text x="22.7735%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.8229%" y="165" width="0.0238%" height="15" fill="rgb(223,217,54)" fg:x="18199" fg:w="19"/><text x="23.1159%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.8468%" y="165" width="0.0238%" height="15" fill="rgb(208,129,25)" fg:x="18218" fg:w="19"/><text x="23.1397%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="22.9897%" y="165" width="0.2608%" height="15" fill="rgb(239,217,42)" fg:x="18332" fg:w="208"/><text x="23.2827%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="23.2506%" y="165" width="0.2608%" height="15" fill="rgb(252,128,37)" fg:x="18540" fg:w="208"/><text x="23.5435%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.6305%" y="165" width="0.0238%" height="15" fill="rgb(231,183,47)" fg:x="18843" fg:w="19"/><text x="23.9235%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.6544%" y="165" width="0.0238%" height="15" fill="rgb(212,52,6)" fg:x="18862" fg:w="19"/><text x="23.9473%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.7973%" y="165" width="0.0238%" height="15" fill="rgb(250,177,50)" fg:x="18976" fg:w="19"/><text x="24.0903%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.8212%" y="165" width="0.0238%" height="15" fill="rgb(249,38,18)" fg:x="18995" fg:w="19"/><text x="24.1141%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.9641%" y="165" width="0.0238%" height="15" fill="rgb(215,53,15)" fg:x="19109" fg:w="19"/><text x="24.2571%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.9880%" y="165" width="0.0238%" height="15" fill="rgb(223,86,51)" fg:x="19128" fg:w="19"/><text x="24.2809%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="24.1309%" y="165" width="0.0238%" height="15" fill="rgb(246,172,2)" fg:x="19242" fg:w="19"/><text x="24.4239%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="24.1548%" y="165" width="0.0238%" height="15" fill="rgb(237,216,26)" fg:x="19261" fg:w="19"/><text x="24.4477%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="24.2977%" y="165" width="0.0238%" height="15" fill="rgb(205,170,5)" fg:x="19375" fg:w="19"/><text x="24.5907%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="24.3215%" y="165" width="0.0238%" height="15" fill="rgb(246,88,2)" fg:x="19394" fg:w="19"/><text x="24.6145%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="24.4645%" y="165" width="0.0238%" height="15" fill="rgb(229,76,0)" fg:x="19508" fg:w="19"/><text x="24.7575%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="24.4883%" y="165" width="0.0238%" height="15" fill="rgb(222,29,0)" fg:x="19527" fg:w="19"/><text x="24.7813%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="24.6313%" y="165" width="0.0238%" height="15" fill="rgb(252,208,36)" fg:x="19641" fg:w="19"/><text x="24.9243%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="24.6551%" y="165" width="0.0238%" height="15" fill="rgb(217,66,31)" fg:x="19660" fg:w="19"/><text x="24.9481%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="24.6790%" y="149" width="0.0238%" height="15" fill="rgb(230,43,12)" fg:x="19679" fg:w="19"/><text x="24.9719%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="24.7028%" y="149" width="0.2132%" height="15" fill="rgb(231,41,44)" fg:x="19698" fg:w="170"/><text x="24.9958%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="24.9160%" y="149" width="0.0238%" height="15" fill="rgb(226,220,25)" fg:x="19868" fg:w="19"/><text x="25.2089%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="24.9398%" y="149" width="0.2132%" height="15" fill="rgb(243,15,13)" fg:x="19887" fg:w="170"/><text x="25.2328%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.1530%" y="149" width="0.0238%" height="15" fill="rgb(239,188,35)" fg:x="20057" fg:w="19"/><text x="25.4460%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (78 instructions, 0.10%)</title><rect x="25.1768%" y="149" width="0.0978%" height="15" fill="rgb(242,105,53)" fg:x="20076" fg:w="78"/><text x="25.4698%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (654 instructions, 0.82%)</title><rect x="24.6790%" y="165" width="0.8202%" height="15" fill="rgb(233,118,34)" fg:x="19679" fg:w="654"/><text x="24.9719%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.4991%" y="149" width="0.0238%" height="15" fill="rgb(207,205,11)" fg:x="20333" fg:w="19"/><text x="25.7921%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="25.5229%" y="149" width="0.2132%" height="15" fill="rgb(211,225,22)" fg:x="20352" fg:w="170"/><text x="25.8159%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.7361%" y="149" width="0.0238%" height="15" fill="rgb(239,215,0)" fg:x="20522" fg:w="19"/><text x="26.0291%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="25.7600%" y="149" width="0.2132%" height="15" fill="rgb(253,39,42)" fg:x="20541" fg:w="170"/><text x="26.0529%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.9732%" y="149" width="0.0238%" height="15" fill="rgb(247,106,28)" fg:x="20711" fg:w="19"/><text x="26.2661%" y="159.50"></text></g><g><title>memcpy (125 instructions, 0.16%)</title><rect x="25.9970%" y="149" width="0.1568%" height="15" fill="rgb(207,84,21)" fg:x="20730" fg:w="125"/><text x="26.2900%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.08%)</title><rect x="26.1537%" y="133" width="0.0790%" height="15" fill="rgb(235,210,16)" fg:x="20855" fg:w="63"/><text x="26.4467%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (163 instructions, 0.20%)</title><rect x="26.1537%" y="149" width="0.2044%" height="15" fill="rgb(209,35,43)" fg:x="20855" fg:w="163"/><text x="26.4467%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (979 instructions, 1.23%)</title><rect x="25.4991%" y="165" width="1.2277%" height="15" fill="rgb(243,89,15)" fg:x="20333" fg:w="979"/><text x="25.7921%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.0830%" y="165" width="0.0238%" height="15" fill="rgb(215,201,54)" fg:x="21596" fg:w="19"/><text x="27.3760%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.1068%" y="165" width="0.0238%" height="15" fill="rgb(216,102,16)" fg:x="21615" fg:w="19"/><text x="27.3998%" y="175.50"></text></g><g><title>memmove (268 instructions, 0.34%)</title><rect x="27.2498%" y="165" width="0.3361%" height="15" fill="rgb(235,215,46)" fg:x="21729" fg:w="268"/><text x="27.5428%" y="175.50"></text></g><g><title>memmove (268 instructions, 0.34%)</title><rect x="27.5859%" y="165" width="0.3361%" height="15" fill="rgb(248,48,38)" fg:x="21997" fg:w="268"/><text x="27.8789%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.0411%" y="165" width="0.0238%" height="15" fill="rgb(239,71,0)" fg:x="22360" fg:w="19"/><text x="28.3341%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.0650%" y="165" width="0.0238%" height="15" fill="rgb(207,97,1)" fg:x="22379" fg:w="19"/><text x="28.3579%" y="175.50"></text></g><g><title>memmove (148 instructions, 0.19%)</title><rect x="28.2079%" y="165" width="0.1856%" height="15" fill="rgb(227,174,52)" fg:x="22493" fg:w="148"/><text x="28.5009%" y="175.50"></text></g><g><title>memmove (148 instructions, 0.19%)</title><rect x="28.3935%" y="165" width="0.1856%" height="15" fill="rgb(209,166,54)" fg:x="22641" fg:w="148"/><text x="28.6865%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="28.5791%" y="149" width="0.2232%" height="15" fill="rgb(240,43,13)" fg:x="22789" fg:w="178"/><text x="28.8721%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="28.8024%" y="149" width="0.2132%" height="15" fill="rgb(247,96,16)" fg:x="22967" fg:w="170"/><text x="29.0953%" y="159.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="29.0156%" y="149" width="0.2232%" height="15" fill="rgb(251,15,20)" fg:x="23137" fg:w="178"/><text x="29.3085%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="29.2388%" y="149" width="0.2132%" height="15" fill="rgb(214,174,26)" fg:x="23315" fg:w="170"/><text x="29.5317%" y="159.50"></text></g><g><title>memmove (118 instructions, 0.15%)</title><rect x="29.4520%" y="149" width="0.1480%" height="15" fill="rgb(218,109,53)" fg:x="23485" fg:w="118"/><text x="29.7449%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (78 instructions, 0.10%)</title><rect x="29.5999%" y="149" width="0.0978%" height="15" fill="rgb(249,132,49)" fg:x="23603" fg:w="78"/><text x="29.8929%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,157 instructions, 1.45%)</title><rect x="28.5791%" y="165" width="1.4510%" height="15" fill="rgb(231,154,25)" fg:x="22789" fg:w="1157"/><text x="28.8721%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="30.2596%" y="165" width="0.0238%" height="15" fill="rgb(232,99,23)" fg:x="24129" fg:w="19"/><text x="30.5526%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="30.2834%" y="165" width="0.0238%" height="15" fill="rgb(215,117,13)" fg:x="24148" fg:w="19"/><text x="30.5764%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="30.4264%" y="165" width="0.0238%" height="15" fill="rgb(208,218,2)" fg:x="24262" fg:w="19"/><text x="30.7194%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="30.4502%" y="165" width="0.0238%" height="15" fill="rgb(211,24,52)" fg:x="24281" fg:w="19"/><text x="30.7432%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="30.5932%" y="165" width="0.2608%" height="15" fill="rgb(232,76,3)" fg:x="24395" fg:w="208"/><text x="30.8861%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="30.8540%" y="165" width="0.2608%" height="15" fill="rgb(226,213,17)" fg:x="24603" fg:w="208"/><text x="31.1470%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="31.2340%" y="165" width="0.0238%" height="15" fill="rgb(209,97,52)" fg:x="24906" fg:w="19"/><text x="31.5270%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="31.2578%" y="165" width="0.0238%" height="15" fill="rgb(248,26,26)" fg:x="24925" fg:w="19"/><text x="31.5508%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="31.4008%" y="165" width="0.0238%" height="15" fill="rgb(245,227,52)" fg:x="25039" fg:w="19"/><text x="31.6938%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="31.4246%" y="165" width="0.0238%" height="15" fill="rgb(245,229,25)" fg:x="25058" fg:w="19"/><text x="31.7176%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="31.5676%" y="165" width="0.2608%" height="15" fill="rgb(235,13,11)" fg:x="25172" fg:w="208"/><text x="31.8606%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="31.8284%" y="165" width="0.2608%" height="15" fill="rgb(221,168,36)" fg:x="25380" fg:w="208"/><text x="32.1214%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="32.2084%" y="165" width="0.0238%" height="15" fill="rgb(234,7,10)" fg:x="25683" fg:w="19"/><text x="32.5014%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="32.2323%" y="165" width="0.0238%" height="15" fill="rgb(253,26,25)" fg:x="25702" fg:w="19"/><text x="32.5252%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="32.3752%" y="165" width="0.2232%" height="15" fill="rgb(237,25,33)" fg:x="25816" fg:w="178"/><text x="32.6682%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="32.5984%" y="165" width="0.2232%" height="15" fill="rgb(221,38,27)" fg:x="25994" fg:w="178"/><text x="32.8914%" y="175.50"></text></g><g><title>memmove (238 instructions, 0.30%)</title><rect x="32.9408%" y="165" width="0.2985%" height="15" fill="rgb(242,90,5)" fg:x="26267" fg:w="238"/><text x="33.2338%" y="175.50"></text></g><g><title>memmove (238 instructions, 0.30%)</title><rect x="33.2393%" y="165" width="0.2985%" height="15" fill="rgb(229,214,8)" fg:x="26505" fg:w="238"/><text x="33.5322%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="33.6569%" y="165" width="0.2232%" height="15" fill="rgb(232,66,4)" fg:x="26838" fg:w="178"/><text x="33.9499%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="33.8801%" y="165" width="0.2232%" height="15" fill="rgb(206,77,8)" fg:x="27016" fg:w="178"/><text x="34.1731%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="34.2225%" y="165" width="0.0238%" height="15" fill="rgb(253,155,24)" fg:x="27289" fg:w="19"/><text x="34.5154%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="34.2463%" y="165" width="0.0238%" height="15" fill="rgb(209,18,17)" fg:x="27308" fg:w="19"/><text x="34.5393%" y="175.50"></text></g><g><title>memmove (118 instructions, 0.15%)</title><rect x="34.2701%" y="149" width="0.1480%" height="15" fill="rgb(219,8,2)" fg:x="27327" fg:w="118"/><text x="34.5631%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="34.4181%" y="149" width="0.2132%" height="15" fill="rgb(225,21,9)" fg:x="27445" fg:w="170"/><text x="34.7111%" y="159.50"></text></g><g><title>memmove (118 instructions, 0.15%)</title><rect x="34.6313%" y="149" width="0.1480%" height="15" fill="rgb(222,150,24)" fg:x="27615" fg:w="118"/><text x="34.9243%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="34.7793%" y="149" width="0.2132%" height="15" fill="rgb(244,211,28)" fg:x="27733" fg:w="170"/><text x="35.0723%" y="159.50"></text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="34.9925%" y="149" width="0.1806%" height="15" fill="rgb(219,15,9)" fg:x="27903" fg:w="144"/><text x="35.2854%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (78 instructions, 0.10%)</title><rect x="35.1731%" y="149" width="0.0978%" height="15" fill="rgb(206,112,23)" fg:x="28047" fg:w="78"/><text x="35.4660%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,040 instructions, 1.30%)</title><rect x="34.2701%" y="165" width="1.3042%" height="15" fill="rgb(248,59,3)" fg:x="27327" fg:w="1040"/><text x="34.5631%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="35.8039%" y="165" width="0.0238%" height="15" fill="rgb(236,141,0)" fg:x="28550" fg:w="19"/><text x="36.0968%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="35.8277%" y="165" width="0.0238%" height="15" fill="rgb(212,150,0)" fg:x="28569" fg:w="19"/><text x="36.1207%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="35.9707%" y="165" width="0.0238%" height="15" fill="rgb(216,155,23)" fg:x="28683" fg:w="19"/><text x="36.2636%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="35.9945%" y="165" width="0.0238%" height="15" fill="rgb(207,92,23)" fg:x="28702" fg:w="19"/><text x="36.2875%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="36.1374%" y="165" width="0.1806%" height="15" fill="rgb(228,155,39)" fg:x="28816" fg:w="144"/><text x="36.4304%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="36.3180%" y="165" width="0.1806%" height="15" fill="rgb(250,95,32)" fg:x="28960" fg:w="144"/><text x="36.6110%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="36.6178%" y="165" width="0.0238%" height="15" fill="rgb(253,126,43)" fg:x="29199" fg:w="19"/><text x="36.9107%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="36.6416%" y="165" width="0.0238%" height="15" fill="rgb(251,100,53)" fg:x="29218" fg:w="19"/><text x="36.9346%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="36.7845%" y="165" width="0.0238%" height="15" fill="rgb(242,27,26)" fg:x="29332" fg:w="19"/><text x="37.0775%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="36.8084%" y="165" width="0.0238%" height="15" fill="rgb(249,137,17)" fg:x="29351" fg:w="19"/><text x="37.1013%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="36.9513%" y="165" width="0.2608%" height="15" fill="rgb(248,225,45)" fg:x="29465" fg:w="208"/><text x="37.2443%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="37.2122%" y="165" width="0.2608%" height="15" fill="rgb(243,63,17)" fg:x="29673" fg:w="208"/><text x="37.5052%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="37.5922%" y="165" width="0.0238%" height="15" fill="rgb(242,63,12)" fg:x="29976" fg:w="19"/><text x="37.8851%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="37.6160%" y="165" width="0.0238%" height="15" fill="rgb(218,187,32)" fg:x="29995" fg:w="19"/><text x="37.9090%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="37.7590%" y="165" width="0.1806%" height="15" fill="rgb(227,132,15)" fg:x="30109" fg:w="144"/><text x="38.0519%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="37.9396%" y="165" width="0.1806%" height="15" fill="rgb(254,127,45)" fg:x="30253" fg:w="144"/><text x="38.2325%" y="175.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (19,490 instructions, 24.44%)</title><rect x="13.7973%" y="181" width="24.4419%" height="15" fill="rgb(207,30,23)" fg:x="11002" fg:w="19490"/><text x="14.0903%" y="191.50">alloc::collections::btree::remove..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.07%)</title><rect x="38.2455%" y="133" width="0.0702%" height="15" fill="rgb(235,53,12)" fg:x="30497" fg:w="56"/><text x="38.5385%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (83 instructions, 0.10%)</title><rect x="38.2455%" y="149" width="0.1041%" height="15" fill="rgb(212,85,36)" fg:x="30497" fg:w="83"/><text x="38.5385%" y="159.50"></text></g><g><title>memset (136 instructions, 0.17%)</title><rect x="38.3496%" y="149" width="0.1706%" height="15" fill="rgb(210,193,21)" fg:x="30580" fg:w="136"/><text x="38.6426%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (384 instructions, 0.48%)</title><rect x="38.2393%" y="165" width="0.4816%" height="15" fill="rgb(236,181,51)" fg:x="30492" fg:w="384"/><text x="38.5322%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.04%)</title><rect x="38.7208%" y="149" width="0.0401%" height="15" fill="rgb(207,136,9)" fg:x="30876" fg:w="32"/><text x="39.0138%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.10%)</title><rect x="38.7610%" y="101" width="0.0953%" height="15" fill="rgb(206,144,29)" fg:x="30908" fg:w="76"/><text x="39.0539%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.14%)</title><rect x="38.7610%" y="117" width="0.1379%" height="15" fill="rgb(220,52,51)" fg:x="30908" fg:w="110"/><text x="39.0539%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.22%)</title><rect x="38.7610%" y="133" width="0.2195%" height="15" fill="rgb(251,68,19)" fg:x="30908" fg:w="175"/><text x="39.0539%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="38.9804%" y="133" width="0.0138%" height="15" fill="rgb(253,74,15)" fg:x="31083" fg:w="11"/><text x="39.2734%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="38.9942%" y="133" width="0.0138%" height="15" fill="rgb(226,87,23)" fg:x="31094" fg:w="11"/><text x="39.2872%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (359 instructions, 0.45%)</title><rect x="38.7610%" y="149" width="0.4502%" height="15" fill="rgb(222,36,17)" fg:x="30908" fg:w="359"/><text x="39.0539%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.04%)</title><rect x="39.2112%" y="149" width="0.0376%" height="15" fill="rgb(205,226,7)" fg:x="31267" fg:w="30"/><text x="39.5042%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (494 instructions, 0.62%)</title><rect x="38.7208%" y="165" width="0.6195%" height="15" fill="rgb(243,84,45)" fg:x="30876" fg:w="494"/><text x="39.0138%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="39.3466%" y="165" width="0.0690%" height="15" fill="rgb(247,113,5)" fg:x="31375" fg:w="55"/><text x="39.6396%" y="175.50"></text></g><g><title>candid::utils::write_args (1,002 instructions, 1.26%)</title><rect x="38.2393%" y="181" width="1.2566%" height="15" fill="rgb(221,30,15)" fg:x="30492" fg:w="1002"/><text x="38.5322%" y="191.50"></text></g><g><title>btreemap::batch_remove_7_::{{closure}} (79,210 instructions, 99.34%)</title><rect x="0.2144%" y="197" width="99.3353%" height="15" fill="rgb(209,71,19)" fg:x="171" fg:w="79210"/><text x="0.5074%" y="207.50">btreemap::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.02%)</title><rect x="99.5498%" y="197" width="0.0150%" height="15" fill="rgb(212,14,4)" fg:x="79381" fg:w="12"/><text x="99.8428%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="99.5648%" y="197" width="0.1016%" height="15" fill="rgb(214,227,14)" fg:x="79393" fg:w="81"/><text x="99.8578%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.21%)</title><rect x="99.6664%" y="197" width="0.2107%" height="15" fill="rgb(227,34,41)" fg:x="79474" fg:w="168"/><text x="99.9594%" y="207.50"></text></g><g><title>all (79,740 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(225,188,33)" fg:x="0" fg:w="79740"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (79,740 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,161,1)" fg:x="0" fg:w="79740"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>