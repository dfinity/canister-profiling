<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="60509"><g><title>ic_cdk::setup (7 instructions, 0.01%)</title><rect x="0.0000%" y="197" width="0.0116%" height="15" fill="rgb(247,60,30)" fg:x="0" fg:w="7"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.15%)</title><rect x="0.0116%" y="165" width="0.1487%" height="15" fill="rgb(217,101,12)" fg:x="7" fg:w="90"/><text x="0.3045%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.17%)</title><rect x="0.0116%" y="181" width="0.1653%" height="15" fill="rgb(218,121,21)" fg:x="7" fg:w="100"/><text x="0.3045%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.15%)</title><rect x="0.1818%" y="165" width="0.1487%" height="15" fill="rgb(221,156,26)" fg:x="110" fg:w="90"/><text x="0.4748%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.17%)</title><rect x="0.1818%" y="181" width="0.1653%" height="15" fill="rgb(217,204,34)" fg:x="110" fg:w="100"/><text x="0.4748%" y="191.50"></text></g><g><title>__rust_alloc (206 instructions, 0.34%)</title><rect x="0.0116%" y="197" width="0.3404%" height="15" fill="rgb(237,153,48)" fg:x="7" fg:w="206"/><text x="0.3045%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (89 instructions, 0.15%)</title><rect x="0.3520%" y="133" width="0.1471%" height="15" fill="rgb(208,102,36)" fg:x="213" fg:w="89"/><text x="0.6450%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (99 instructions, 0.16%)</title><rect x="0.3520%" y="149" width="0.1636%" height="15" fill="rgb(249,227,35)" fg:x="213" fg:w="99"/><text x="0.6450%" y="159.50"></text></g><g><title>__rust_alloc (102 instructions, 0.17%)</title><rect x="0.3520%" y="165" width="0.1686%" height="15" fill="rgb(235,73,15)" fg:x="213" fg:w="102"/><text x="0.6450%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (161 instructions, 0.27%)</title><rect x="0.3520%" y="181" width="0.2661%" height="15" fill="rgb(238,56,30)" fg:x="213" fg:w="161"/><text x="0.6450%" y="191.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.10%)</title><rect x="0.6181%" y="165" width="0.1008%" height="15" fill="rgb(241,83,17)" fg:x="374" fg:w="61"/><text x="0.9111%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 0.67%)</title><rect x="0.7189%" y="165" width="0.6726%" height="15" fill="rgb(238,60,16)" fg:x="435" fg:w="407"/><text x="1.0119%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.12%)</title><rect x="1.3915%" y="165" width="0.1223%" height="15" fill="rgb(205,175,17)" fg:x="842" fg:w="74"/><text x="1.6845%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.5138%" y="165" width="0.0892%" height="15" fill="rgb(219,50,10)" fg:x="916" fg:w="54"/><text x="1.8068%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.6031%" y="165" width="0.0892%" height="15" fill="rgb(219,145,12)" fg:x="970" fg:w="54"/><text x="1.8960%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.6923%" y="165" width="0.0892%" height="15" fill="rgb(212,52,12)" fg:x="1024" fg:w="54"/><text x="1.9853%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.09%)</title><rect x="1.7816%" y="165" width="0.0892%" height="15" fill="rgb(206,158,41)" fg:x="1078" fg:w="54"/><text x="2.0745%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.10%)</title><rect x="1.8708%" y="165" width="0.1008%" height="15" fill="rgb(246,146,35)" fg:x="1132" fg:w="61"/><text x="2.1638%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.16%)</title><rect x="1.9716%" y="165" width="0.1603%" height="15" fill="rgb(238,129,33)" fg:x="1193" fg:w="97"/><text x="2.2646%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 0.67%)</title><rect x="2.1319%" y="165" width="0.6726%" height="15" fill="rgb(233,5,12)" fg:x="1290" fg:w="407"/><text x="2.4249%" y="175.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="2.8045%" y="165" width="0.0264%" height="15" fill="rgb(205,123,50)" fg:x="1697" fg:w="16"/><text x="3.0975%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (136 instructions, 0.22%)</title><rect x="2.8310%" y="101" width="0.2248%" height="15" fill="rgb(247,88,41)" fg:x="1713" fg:w="136"/><text x="3.1240%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (146 instructions, 0.24%)</title><rect x="2.8310%" y="117" width="0.2413%" height="15" fill="rgb(208,158,11)" fg:x="1713" fg:w="146"/><text x="3.1240%" y="127.50"></text></g><g><title>__rust_alloc (149 instructions, 0.25%)</title><rect x="2.8310%" y="133" width="0.2462%" height="15" fill="rgb(240,133,43)" fg:x="1713" fg:w="149"/><text x="3.1240%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.10%)</title><rect x="3.0772%" y="101" width="0.0992%" height="15" fill="rgb(239,61,15)" fg:x="1862" fg:w="60"/><text x="3.3702%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.14%)</title><rect x="3.0772%" y="117" width="0.1405%" height="15" fill="rgb(232,117,13)" fg:x="1862" fg:w="85"/><text x="3.3702%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="3.2177%" y="69" width="0.0149%" height="15" fill="rgb(253,58,31)" fg:x="1947" fg:w="9"/><text x="3.5107%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.05%)</title><rect x="3.2326%" y="53" width="0.0496%" height="15" fill="rgb(229,89,15)" fg:x="1956" fg:w="30"/><text x="3.5255%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.09%)</title><rect x="3.2326%" y="69" width="0.0909%" height="15" fill="rgb(244,96,1)" fg:x="1956" fg:w="55"/><text x="3.5255%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.19%)</title><rect x="3.2177%" y="85" width="0.1917%" height="15" fill="rgb(229,130,53)" fg:x="1947" fg:w="116"/><text x="3.5107%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.28%)</title><rect x="3.2177%" y="101" width="0.2793%" height="15" fill="rgb(224,149,39)" fg:x="1947" fg:w="169"/><text x="3.5107%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.29%)</title><rect x="3.2177%" y="117" width="0.2876%" height="15" fill="rgb(205,75,37)" fg:x="1947" fg:w="174"/><text x="3.5107%" y="127.50"></text></g><g><title>core::fmt::write (367 instructions, 0.61%)</title><rect x="3.0772%" y="133" width="0.6065%" height="15" fill="rgb(239,159,11)" fg:x="1862" fg:w="367"/><text x="3.3702%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (659 instructions, 1.09%)</title><rect x="2.8310%" y="149" width="1.0891%" height="15" fill="rgb(244,78,0)" fg:x="1713" fg:w="659"/><text x="3.1240%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.12%)</title><rect x="3.9201%" y="149" width="0.1223%" height="15" fill="rgb(236,165,16)" fg:x="2372" fg:w="74"/><text x="4.2130%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.09%)</title><rect x="4.0424%" y="149" width="0.0892%" height="15" fill="rgb(235,118,31)" fg:x="2446" fg:w="54"/><text x="4.3353%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (858 instructions, 1.42%)</title><rect x="2.8310%" y="165" width="1.4180%" height="15" fill="rgb(233,216,34)" fg:x="1713" fg:w="858"/><text x="3.1240%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.09%)</title><rect x="4.2490%" y="165" width="0.0925%" height="15" fill="rgb(207,105,30)" fg:x="2571" fg:w="56"/><text x="4.5419%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.16%)</title><rect x="4.3415%" y="165" width="0.1603%" height="15" fill="rgb(228,137,54)" fg:x="2627" fg:w="97"/><text x="4.6345%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 0.67%)</title><rect x="4.5018%" y="149" width="0.6726%" height="15" fill="rgb(221,59,17)" fg:x="2724" fg:w="407"/><text x="4.7948%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.03%)</title><rect x="5.1744%" y="149" width="0.0264%" height="15" fill="rgb(245,98,19)" fg:x="3131" fg:w="16"/><text x="5.4674%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.15%)</title><rect x="5.2009%" y="85" width="0.1487%" height="15" fill="rgb(213,137,48)" fg:x="3147" fg:w="90"/><text x="5.4938%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.17%)</title><rect x="5.2009%" y="101" width="0.1653%" height="15" fill="rgb(253,145,21)" fg:x="3147" fg:w="100"/><text x="5.4938%" y="111.50"></text></g><g><title>__rust_alloc (103 instructions, 0.17%)</title><rect x="5.2009%" y="117" width="0.1702%" height="15" fill="rgb(214,28,34)" fg:x="3147" fg:w="103"/><text x="5.4938%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.10%)</title><rect x="5.3711%" y="85" width="0.0992%" height="15" fill="rgb(236,10,3)" fg:x="3250" fg:w="60"/><text x="5.6641%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.14%)</title><rect x="5.3711%" y="101" width="0.1405%" height="15" fill="rgb(225,114,3)" fg:x="3250" fg:w="85"/><text x="5.6641%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="5.5116%" y="53" width="0.0149%" height="15" fill="rgb(251,25,45)" fg:x="3335" fg:w="9"/><text x="5.8045%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.05%)</title><rect x="5.5265%" y="37" width="0.0496%" height="15" fill="rgb(219,62,19)" fg:x="3344" fg:w="30"/><text x="5.8194%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.09%)</title><rect x="5.5265%" y="53" width="0.0909%" height="15" fill="rgb(218,97,37)" fg:x="3344" fg:w="55"/><text x="5.8194%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.19%)</title><rect x="5.5116%" y="69" width="0.1917%" height="15" fill="rgb(225,38,38)" fg:x="3335" fg:w="116"/><text x="5.8045%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.28%)</title><rect x="5.5116%" y="85" width="0.2793%" height="15" fill="rgb(236,24,51)" fg:x="3335" fg:w="169"/><text x="5.8045%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.29%)</title><rect x="5.5116%" y="101" width="0.2876%" height="15" fill="rgb(232,96,34)" fg:x="3335" fg:w="174"/><text x="5.8045%" y="111.50"></text></g><g><title>core::fmt::write (367 instructions, 0.61%)</title><rect x="5.3711%" y="117" width="0.6065%" height="15" fill="rgb(227,80,16)" fg:x="3250" fg:w="367"/><text x="5.6641%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (613 instructions, 1.01%)</title><rect x="5.2009%" y="133" width="1.0131%" height="15" fill="rgb(219,27,43)" fg:x="3147" fg:w="613"/><text x="5.4938%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.12%)</title><rect x="6.2140%" y="133" width="0.1223%" height="15" fill="rgb(220,57,7)" fg:x="3760" fg:w="74"/><text x="6.5069%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.09%)</title><rect x="6.3362%" y="133" width="0.0892%" height="15" fill="rgb(209,20,16)" fg:x="3834" fg:w="54"/><text x="6.6292%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (812 instructions, 1.34%)</title><rect x="5.2009%" y="149" width="1.3419%" height="15" fill="rgb(218,13,36)" fg:x="3147" fg:w="812"/><text x="5.4938%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.10%)</title><rect x="6.5428%" y="133" width="0.1008%" height="15" fill="rgb(253,183,31)" fg:x="3959" fg:w="61"/><text x="6.8358%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (126 instructions, 0.21%)</title><rect x="6.6436%" y="133" width="0.2082%" height="15" fill="rgb(219,182,53)" fg:x="4020" fg:w="126"/><text x="6.9366%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.09%)</title><rect x="6.8519%" y="133" width="0.0925%" height="15" fill="rgb(224,46,46)" fg:x="4146" fg:w="56"/><text x="7.1448%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (305 instructions, 0.50%)</title><rect x="6.5428%" y="149" width="0.5041%" height="15" fill="rgb(212,131,54)" fg:x="3959" fg:w="305"/><text x="6.8358%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.15%)</title><rect x="7.0469%" y="117" width="0.1537%" height="15" fill="rgb(220,89,33)" fg:x="4264" fg:w="93"/><text x="7.3399%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="7.0469%" y="133" width="0.1702%" height="15" fill="rgb(219,140,22)" fg:x="4264" fg:w="103"/><text x="7.3399%" y="143.50"></text></g><g><title>__rust_alloc (106 instructions, 0.18%)</title><rect x="7.0469%" y="149" width="0.1752%" height="15" fill="rgb(250,58,33)" fg:x="4264" fg:w="106"/><text x="7.3399%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,871 instructions, 3.09%)</title><rect x="4.5018%" y="165" width="3.0921%" height="15" fill="rgb(241,161,2)" fg:x="2724" fg:w="1871"/><text x="4.7948%" y="175.50">bi..</text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.09%)</title><rect x="7.5939%" y="165" width="0.0925%" height="15" fill="rgb(239,155,40)" fg:x="4595" fg:w="56"/><text x="7.8869%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.6865%" y="165" width="0.0215%" height="15" fill="rgb(205,95,35)" fg:x="4651" fg:w="13"/><text x="7.9794%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="7.7079%" y="165" width="0.0215%" height="15" fill="rgb(251,126,29)" fg:x="4664" fg:w="13"/><text x="8.0009%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.04%)</title><rect x="7.7294%" y="165" width="0.0364%" height="15" fill="rgb(217,214,2)" fg:x="4677" fg:w="22"/><text x="8.0224%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.15%)</title><rect x="7.7658%" y="117" width="0.1537%" height="15" fill="rgb(216,101,13)" fg:x="4699" fg:w="93"/><text x="8.0588%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="7.7658%" y="133" width="0.1702%" height="15" fill="rgb(253,111,1)" fg:x="4699" fg:w="103"/><text x="8.0588%" y="143.50"></text></g><g><title>__rust_alloc (106 instructions, 0.18%)</title><rect x="7.7658%" y="149" width="0.1752%" height="15" fill="rgb(215,27,31)" fg:x="4699" fg:w="106"/><text x="8.0588%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (186 instructions, 0.31%)</title><rect x="7.7658%" y="165" width="0.3074%" height="15" fill="rgb(213,212,42)" fg:x="4699" fg:w="186"/><text x="8.0588%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (89 instructions, 0.15%)</title><rect x="8.0732%" y="101" width="0.1471%" height="15" fill="rgb(247,133,7)" fg:x="4885" fg:w="89"/><text x="8.3661%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (99 instructions, 0.16%)</title><rect x="8.0732%" y="117" width="0.1636%" height="15" fill="rgb(236,99,8)" fg:x="4885" fg:w="99"/><text x="8.3661%" y="127.50"></text></g><g><title>__rust_alloc (102 instructions, 0.17%)</title><rect x="8.0732%" y="133" width="0.1686%" height="15" fill="rgb(229,61,49)" fg:x="4885" fg:w="102"/><text x="8.3661%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (132 instructions, 0.22%)</title><rect x="8.0732%" y="149" width="0.2181%" height="15" fill="rgb(245,209,40)" fg:x="4885" fg:w="132"/><text x="8.3661%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (200 instructions, 0.33%)</title><rect x="8.0732%" y="165" width="0.3305%" height="15" fill="rgb(206,156,51)" fg:x="4885" fg:w="200"/><text x="8.3661%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.15%)</title><rect x="8.4037%" y="133" width="0.1537%" height="15" fill="rgb(217,3,16)" fg:x="5085" fg:w="93"/><text x="8.6967%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="8.4037%" y="149" width="0.1702%" height="15" fill="rgb(232,212,39)" fg:x="5085" fg:w="103"/><text x="8.6967%" y="159.50"></text></g><g><title>__rust_alloc (106 instructions, 0.18%)</title><rect x="8.4037%" y="165" width="0.1752%" height="15" fill="rgb(253,136,39)" fg:x="5085" fg:w="106"/><text x="8.6967%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.13%)</title><rect x="8.5789%" y="165" width="0.1339%" height="15" fill="rgb(227,9,49)" fg:x="5191" fg:w="81"/><text x="8.8719%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.15%)</title><rect x="8.7128%" y="133" width="0.1537%" height="15" fill="rgb(241,177,5)" fg:x="5272" fg:w="93"/><text x="9.0057%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="8.7128%" y="149" width="0.1702%" height="15" fill="rgb(211,93,20)" fg:x="5272" fg:w="103"/><text x="9.0057%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.15%)</title><rect x="8.8879%" y="133" width="0.1537%" height="15" fill="rgb(249,116,45)" fg:x="5378" fg:w="93"/><text x="9.1809%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="8.8879%" y="149" width="0.1702%" height="15" fill="rgb(213,228,23)" fg:x="5378" fg:w="103"/><text x="9.1809%" y="159.50"></text></g><g><title>__rust_alloc (212 instructions, 0.35%)</title><rect x="8.7128%" y="165" width="0.3504%" height="15" fill="rgb(209,152,45)" fg:x="5272" fg:w="212"/><text x="9.0057%" y="175.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (14 instructions, 0.02%)</title><rect x="9.0631%" y="165" width="0.0231%" height="15" fill="rgb(236,146,3)" fg:x="5484" fg:w="14"/><text x="9.3561%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.13%)</title><rect x="9.0863%" y="165" width="0.1339%" height="15" fill="rgb(244,52,4)" fg:x="5498" fg:w="81"/><text x="9.3792%" y="175.50"></text></g><g><title>memcpy (411 instructions, 0.68%)</title><rect x="9.2201%" y="165" width="0.6792%" height="15" fill="rgb(222,53,47)" fg:x="5579" fg:w="411"/><text x="9.5131%" y="175.50"></text></g><g><title>memcpy (366 instructions, 0.60%)</title><rect x="9.8994%" y="165" width="0.6049%" height="15" fill="rgb(229,137,50)" fg:x="5990" fg:w="366"/><text x="10.1923%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,297 instructions, 12.06%)</title><rect x="0.6181%" y="181" width="12.0594%" height="15" fill="rgb(220,45,53)" fg:x="374" fg:w="7297"/><text x="0.9111%" y="191.50">candid::de::IDL..</text></g><g><title>memcpy (381 instructions, 0.63%)</title><rect x="12.6775%" y="181" width="0.6297%" height="15" fill="rgb(213,133,25)" fg:x="7671" fg:w="381"/><text x="12.9704%" y="191.50"></text></g><g><title>memcpy (381 instructions, 0.63%)</title><rect x="13.3071%" y="181" width="0.6297%" height="15" fill="rgb(214,166,6)" fg:x="8052" fg:w="381"/><text x="13.6001%" y="191.50"></text></g><g><title>candid::types::internal::find_type (45 instructions, 0.07%)</title><rect x="13.9368%" y="165" width="0.0744%" height="15" fill="rgb(248,158,49)" fg:x="8433" fg:w="45"/><text x="14.2297%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.15%)</title><rect x="14.0111%" y="117" width="0.1537%" height="15" fill="rgb(238,7,12)" fg:x="8478" fg:w="93"/><text x="14.3041%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="14.0111%" y="133" width="0.1702%" height="15" fill="rgb(244,76,45)" fg:x="8478" fg:w="103"/><text x="14.3041%" y="143.50"></text></g><g><title>__rust_alloc (106 instructions, 0.18%)</title><rect x="14.0111%" y="149" width="0.1752%" height="15" fill="rgb(251,130,30)" fg:x="8478" fg:w="106"/><text x="14.3041%" y="159.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (152 instructions, 0.25%)</title><rect x="14.0111%" y="165" width="0.2512%" height="15" fill="rgb(220,47,6)" fg:x="8478" fg:w="152"/><text x="14.3041%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="14.2706%" y="117" width="0.0876%" height="15" fill="rgb(222,76,1)" fg:x="8635" fg:w="53"/><text x="14.5636%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.15%)</title><rect x="14.3582%" y="117" width="0.1471%" height="15" fill="rgb(224,135,45)" fg:x="8688" fg:w="89"/><text x="14.6512%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.27%)</title><rect x="14.5053%" y="117" width="0.2661%" height="15" fill="rgb(239,145,46)" fg:x="8777" fg:w="161"/><text x="14.7982%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 0.90%)</title><rect x="14.2706%" y="133" width="0.9023%" height="15" fill="rgb(220,95,21)" fg:x="8635" fg:w="546"/><text x="14.5636%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (796 instructions, 1.32%)</title><rect x="14.2623%" y="149" width="1.3155%" height="15" fill="rgb(243,192,9)" fg:x="8630" fg:w="796"/><text x="14.5553%" y="159.50"></text></g><g><title>candid::types::internal::env_add (822 instructions, 1.36%)</title><rect x="14.2623%" y="165" width="1.3585%" height="15" fill="rgb(213,147,2)" fg:x="8630" fg:w="822"/><text x="14.5553%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.15%)</title><rect x="15.6208%" y="133" width="0.1537%" height="15" fill="rgb(246,51,24)" fg:x="9452" fg:w="93"/><text x="15.9138%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.17%)</title><rect x="15.6208%" y="149" width="0.1702%" height="15" fill="rgb(208,205,49)" fg:x="9452" fg:w="103"/><text x="15.9138%" y="159.50"></text></g><g><title>__rust_alloc (106 instructions, 0.18%)</title><rect x="15.6208%" y="165" width="0.1752%" height="15" fill="rgb(232,52,48)" fg:x="9452" fg:w="106"/><text x="15.9138%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="15.8043%" y="117" width="0.0876%" height="15" fill="rgb(223,94,39)" fg:x="9563" fg:w="53"/><text x="16.0972%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.15%)</title><rect x="15.8919%" y="117" width="0.1471%" height="15" fill="rgb(249,95,40)" fg:x="9616" fg:w="89"/><text x="16.1848%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.27%)</title><rect x="16.0389%" y="117" width="0.2661%" height="15" fill="rgb(219,19,28)" fg:x="9705" fg:w="161"/><text x="16.3319%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 0.90%)</title><rect x="15.8043%" y="133" width="0.9023%" height="15" fill="rgb(214,171,10)" fg:x="9563" fg:w="546"/><text x="16.0972%" y="143.50"></text></g><g><title>memcmp (68 instructions, 0.11%)</title><rect x="16.7066%" y="133" width="0.1124%" height="15" fill="rgb(220,177,19)" fg:x="10109" fg:w="68"/><text x="16.9996%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.13%)</title><rect x="16.8190%" y="117" width="0.1339%" height="15" fill="rgb(211,46,4)" fg:x="10177" fg:w="81"/><text x="17.1120%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (111 instructions, 0.18%)</title><rect x="16.8190%" y="133" width="0.1834%" height="15" fill="rgb(233,48,6)" fg:x="10177" fg:w="111"/><text x="17.1120%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (904 instructions, 1.49%)</title><rect x="15.7960%" y="149" width="1.4940%" height="15" fill="rgb(250,22,5)" fg:x="9558" fg:w="904"/><text x="16.0890%" y="159.50"></text></g><g><title>candid::types::internal::env_add (930 instructions, 1.54%)</title><rect x="15.7960%" y="165" width="1.5370%" height="15" fill="rgb(228,20,53)" fg:x="9558" fg:w="930"/><text x="16.0890%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.09%)</title><rect x="17.3412%" y="101" width="0.0876%" height="15" fill="rgb(219,184,28)" fg:x="10493" fg:w="53"/><text x="17.6342%" y="111.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.13%)</title><rect x="17.3412%" y="117" width="0.1289%" height="15" fill="rgb(228,50,25)" fg:x="10493" fg:w="78"/><text x="17.6342%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (300 instructions, 0.50%)</title><rect x="17.3412%" y="133" width="0.4958%" height="15" fill="rgb(226,203,23)" fg:x="10493" fg:w="300"/><text x="17.6342%" y="143.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::PartialEq&gt;::eq (27 instructions, 0.04%)</title><rect x="17.8370%" y="133" width="0.0446%" height="15" fill="rgb(252,192,2)" fg:x="10793" fg:w="27"/><text x="18.1300%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="17.8816%" y="133" width="0.0182%" height="15" fill="rgb(207,91,53)" fg:x="10820" fg:w="11"/><text x="18.1746%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (515 instructions, 0.85%)</title><rect x="17.3330%" y="149" width="0.8511%" height="15" fill="rgb(242,193,26)" fg:x="10488" fg:w="515"/><text x="17.6259%" y="159.50"></text></g><g><title>candid::types::internal::env_id (552 instructions, 0.91%)</title><rect x="17.3330%" y="165" width="0.9123%" height="15" fill="rgb(233,2,34)" fg:x="10488" fg:w="552"/><text x="17.6259%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (37 instructions, 0.06%)</title><rect x="18.2452%" y="165" width="0.0611%" height="15" fill="rgb(234,204,43)" fg:x="11040" fg:w="37"/><text x="18.5382%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.20%)</title><rect x="18.3064%" y="149" width="0.2033%" height="15" fill="rgb(254,28,45)" fg:x="11077" fg:w="123"/><text x="18.5993%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.20%)</title><rect x="18.5592%" y="149" width="0.2033%" height="15" fill="rgb(244,61,21)" fg:x="11230" fg:w="123"/><text x="18.8522%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (306 instructions, 0.51%)</title><rect x="18.3064%" y="165" width="0.5057%" height="15" fill="rgb(227,178,41)" fg:x="11077" fg:w="306"/><text x="18.5993%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.05%)</title><rect x="18.8121%" y="149" width="0.0463%" height="15" fill="rgb(239,102,2)" fg:x="11383" fg:w="28"/><text x="19.1050%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.02%)</title><rect x="18.8584%" y="149" width="0.0248%" height="15" fill="rgb(234,29,3)" fg:x="11411" fg:w="15"/><text x="19.1513%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.02%)</title><rect x="18.8831%" y="149" width="0.0248%" height="15" fill="rgb(206,92,20)" fg:x="11426" fg:w="15"/><text x="19.1761%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (139 instructions, 0.23%)</title><rect x="18.8121%" y="165" width="0.2297%" height="15" fill="rgb(212,215,43)" fg:x="11383" fg:w="139"/><text x="19.1050%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="19.0418%" y="165" width="0.0182%" height="15" fill="rgb(254,46,33)" fg:x="11522" fg:w="11"/><text x="19.3348%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="19.0600%" y="165" width="0.0182%" height="15" fill="rgb(252,125,34)" fg:x="11533" fg:w="11"/><text x="19.3529%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="19.0782%" y="165" width="0.0182%" height="15" fill="rgb(229,202,18)" fg:x="11544" fg:w="11"/><text x="19.3711%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::get_value (3,400 instructions, 5.62%)</title><rect x="13.9368%" y="181" width="5.6190%" height="15" fill="rgb(217,113,30)" fg:x="8433" fg:w="3400"/><text x="14.2297%" y="191.50">candid..</text></g><g><title>memcpy (411 instructions, 0.68%)</title><rect x="19.5558%" y="181" width="0.6792%" height="15" fill="rgb(205,198,40)" fg:x="11833" fg:w="411"/><text x="19.8487%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.04%)</title><rect x="20.2350%" y="165" width="0.0364%" height="15" fill="rgb(214,57,20)" fg:x="12244" fg:w="22"/><text x="20.5280%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.20%)</title><rect x="20.2714%" y="165" width="0.2033%" height="15" fill="rgb(243,139,8)" fg:x="12266" fg:w="123"/><text x="20.5643%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (71 instructions, 0.12%)</title><rect x="20.4746%" y="133" width="0.1173%" height="15" fill="rgb(238,202,13)" fg:x="12389" fg:w="71"/><text x="20.7676%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (216 instructions, 0.36%)</title><rect x="20.4746%" y="149" width="0.3570%" height="15" fill="rgb(233,90,50)" fg:x="12389" fg:w="216"/><text x="20.7676%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (246 instructions, 0.41%)</title><rect x="20.4746%" y="165" width="0.4066%" height="15" fill="rgb(250,128,4)" fg:x="12389" fg:w="246"/><text x="20.7676%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.02%)</title><rect x="20.8812%" y="165" width="0.0182%" height="15" fill="rgb(248,82,22)" fg:x="12635" fg:w="11"/><text x="21.1742%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (501 instructions, 0.83%)</title><rect x="20.2350%" y="181" width="0.8280%" height="15" fill="rgb(240,80,32)" fg:x="12244" fg:w="501"/><text x="20.5280%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.13%)</title><rect x="21.0630%" y="181" width="0.1339%" height="15" fill="rgb(217,116,13)" fg:x="12745" fg:w="81"/><text x="21.3560%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,745 instructions, 21.06%)</title><rect x="0.3520%" y="197" width="21.0630%" height="15" fill="rgb(243,166,23)" fg:x="213" fg:w="12745"/><text x="0.6450%" y="207.50">ic_cdk::api::call::arg_data</text></g><g><title>btreemap::MAP::__getit (13 instructions, 0.02%)</title><rect x="21.4150%" y="181" width="0.0215%" height="15" fill="rgb(237,50,41)" fg:x="12958" fg:w="13"/><text x="21.7080%" y="191.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (45,941 instructions, 75.92%)</title><rect x="21.4150%" y="197" width="75.9242%" height="15" fill="rgb(232,40,44)" fg:x="12958" fg:w="45941"/><text x="21.7080%" y="207.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.09%)</title><rect x="97.3475%" y="133" width="0.0892%" height="15" fill="rgb(215,194,50)" fg:x="58904" fg:w="54"/><text x="97.6405%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (136 instructions, 0.22%)</title><rect x="97.3475%" y="149" width="0.2248%" height="15" fill="rgb(248,119,25)" fg:x="58904" fg:w="136"/><text x="97.6405%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (166 instructions, 0.27%)</title><rect x="97.3475%" y="165" width="0.2743%" height="15" fill="rgb(213,86,19)" fg:x="58904" fg:w="166"/><text x="97.6405%" y="175.50"></text></g><g><title>memset (136 instructions, 0.22%)</title><rect x="97.6218%" y="165" width="0.2248%" height="15" fill="rgb(213,143,14)" fg:x="59070" fg:w="136"/><text x="97.9148%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (464 instructions, 0.77%)</title><rect x="97.3392%" y="181" width="0.7668%" height="15" fill="rgb(221,143,37)" fg:x="58899" fg:w="464"/><text x="97.6322%" y="191.50"></text></g><g><title>std::io::Write::write_all (78 instructions, 0.13%)</title><rect x="98.1061%" y="165" width="0.1289%" height="15" fill="rgb(222,35,44)" fg:x="59363" fg:w="78"/><text x="98.3990%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (94 instructions, 0.16%)</title><rect x="98.2350%" y="101" width="0.1553%" height="15" fill="rgb(234,148,35)" fg:x="59441" fg:w="94"/><text x="98.5279%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (104 instructions, 0.17%)</title><rect x="98.2350%" y="117" width="0.1719%" height="15" fill="rgb(235,48,53)" fg:x="59441" fg:w="104"/><text x="98.5279%" y="127.50"></text></g><g><title>__rust_alloc (107 instructions, 0.18%)</title><rect x="98.2350%" y="133" width="0.1768%" height="15" fill="rgb(211,19,22)" fg:x="59441" fg:w="107"/><text x="98.5279%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (137 instructions, 0.23%)</title><rect x="98.2350%" y="149" width="0.2264%" height="15" fill="rgb(207,169,13)" fg:x="59441" fg:w="137"/><text x="98.5279%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (202 instructions, 0.33%)</title><rect x="98.2350%" y="165" width="0.3338%" height="15" fill="rgb(246,18,9)" fg:x="59441" fg:w="202"/><text x="98.5279%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="98.5688%" y="165" width="0.0182%" height="15" fill="rgb(232,192,0)" fg:x="59643" fg:w="11"/><text x="98.8618%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.02%)</title><rect x="98.5870%" y="165" width="0.0182%" height="15" fill="rgb(249,108,28)" fg:x="59654" fg:w="11"/><text x="98.8800%" y="175.50"></text></g><g><title>std::io::Write::write_all (76 instructions, 0.13%)</title><rect x="98.6052%" y="165" width="0.1256%" height="15" fill="rgb(230,224,5)" fg:x="59665" fg:w="76"/><text x="98.8981%" y="175.50"></text></g><g><title>std::io::Write::write_all (14 instructions, 0.02%)</title><rect x="98.7308%" y="165" width="0.0231%" height="15" fill="rgb(231,145,23)" fg:x="59741" fg:w="14"/><text x="99.0237%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (674 instructions, 1.11%)</title><rect x="98.1061%" y="181" width="1.1139%" height="15" fill="rgb(232,45,54)" fg:x="59363" fg:w="674"/><text x="98.3990%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.13%)</title><rect x="99.2282%" y="181" width="0.1339%" height="15" fill="rgb(247,20,47)" fg:x="60042" fg:w="81"/><text x="99.5212%" y="191.50"></text></g><g><title>candid::utils::write_args (1,288 instructions, 2.13%)</title><rect x="97.3392%" y="197" width="2.1286%" height="15" fill="rgb(213,133,3)" fg:x="58899" fg:w="1288"/><text x="97.6322%" y="207.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.13%)</title><rect x="99.4678%" y="197" width="0.1339%" height="15" fill="rgb(238,68,15)" fg:x="60187" fg:w="81"/><text x="99.7608%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (169 instructions, 0.28%)</title><rect x="99.6017%" y="197" width="0.2793%" height="15" fill="rgb(211,160,1)" fg:x="60268" fg:w="169"/><text x="99.8947%" y="207.50"></text></g><g><title>all (60,509 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(214,98,37)" fg:x="0" fg:w="60509"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (60,509 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,83,2)" fg:x="0" fg:w="60509"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>