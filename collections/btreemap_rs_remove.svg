<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="85331"><g><title>ic_cdk::setup (24 instructions, 0.03%)</title><rect x="0.0000%" y="197" width="0.0281%" height="15" fill="rgb(229,141,18)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="0.0281%" y="197" width="0.0973%" height="15" fill="rgb(244,112,39)" fg:x="24" fg:w="83"/><text x="0.3211%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="0.1254%" y="197" width="0.0973%" height="15" fill="rgb(236,174,16)" fg:x="107" fg:w="83"/><text x="0.4184%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="0.2227%" y="165" width="0.0973%" height="15" fill="rgb(231,46,33)" fg:x="190" fg:w="83"/><text x="0.5156%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.10%)</title><rect x="0.3199%" y="149" width="0.0961%" height="15" fill="rgb(236,192,25)" fg:x="273" fg:w="82"/><text x="0.6129%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.52%)</title><rect x="0.4160%" y="149" width="0.5156%" height="15" fill="rgb(244,17,0)" fg:x="355" fg:w="440"/><text x="0.7090%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.11%)</title><rect x="0.9317%" y="149" width="0.1113%" height="15" fill="rgb(245,79,27)" fg:x="795" fg:w="95"/><text x="1.2246%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.0430%" y="149" width="0.0703%" height="15" fill="rgb(249,169,51)" fg:x="890" fg:w="60"/><text x="1.3360%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.1133%" y="149" width="0.0703%" height="15" fill="rgb(225,112,33)" fg:x="950" fg:w="60"/><text x="1.4063%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.1836%" y="149" width="0.0703%" height="15" fill="rgb(226,46,31)" fg:x="1010" fg:w="60"/><text x="1.4766%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.2539%" y="149" width="0.0703%" height="15" fill="rgb(205,107,31)" fg:x="1070" fg:w="60"/><text x="1.5469%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.10%)</title><rect x="1.3243%" y="149" width="0.0961%" height="15" fill="rgb(253,203,54)" fg:x="1130" fg:w="82"/><text x="1.6172%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.08%)</title><rect x="1.4204%" y="149" width="0.0820%" height="15" fill="rgb(227,119,41)" fg:x="1212" fg:w="70"/><text x="1.7133%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.52%)</title><rect x="1.5024%" y="149" width="0.5156%" height="15" fill="rgb(215,9,46)" fg:x="1282" fg:w="440"/><text x="1.7954%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="2.0180%" y="149" width="0.0223%" height="15" fill="rgb(249,33,44)" fg:x="1722" fg:w="19"/><text x="2.3110%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="2.0403%" y="133" width="0.0973%" height="15" fill="rgb(242,47,9)" fg:x="1741" fg:w="83"/><text x="2.3333%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.08%)</title><rect x="2.1376%" y="101" width="0.0785%" height="15" fill="rgb(205,120,28)" fg:x="1824" fg:w="67"/><text x="2.4305%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.11%)</title><rect x="2.1376%" y="117" width="0.1148%" height="15" fill="rgb(243,6,32)" fg:x="1824" fg:w="98"/><text x="2.4305%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="2.2524%" y="69" width="0.0129%" height="15" fill="rgb(235,30,4)" fg:x="1922" fg:w="11"/><text x="2.5454%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="2.2653%" y="53" width="0.0410%" height="15" fill="rgb(238,222,2)" fg:x="1933" fg:w="35"/><text x="2.5583%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.08%)</title><rect x="2.2653%" y="69" width="0.0773%" height="15" fill="rgb(233,46,19)" fg:x="1933" fg:w="66"/><text x="2.5583%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.17%)</title><rect x="2.2524%" y="85" width="0.1723%" height="15" fill="rgb(252,95,35)" fg:x="1922" fg:w="147"/><text x="2.5454%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.25%)</title><rect x="2.2524%" y="101" width="0.2484%" height="15" fill="rgb(217,218,50)" fg:x="1922" fg:w="212"/><text x="2.5454%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.26%)</title><rect x="2.2524%" y="117" width="0.2602%" height="15" fill="rgb(226,223,34)" fg:x="1922" fg:w="222"/><text x="2.5454%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 0.54%)</title><rect x="2.1376%" y="133" width="0.5402%" height="15" fill="rgb(243,73,46)" fg:x="1824" fg:w="461"/><text x="2.4305%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 0.81%)</title><rect x="2.0403%" y="149" width="0.8074%" height="15" fill="rgb(208,133,52)" fg:x="1741" fg:w="689"/><text x="2.3333%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.11%)</title><rect x="2.8477%" y="149" width="0.1113%" height="15" fill="rgb(248,181,3)" fg:x="2430" fg:w="95"/><text x="3.1407%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="2.9591%" y="149" width="0.0703%" height="15" fill="rgb(229,159,42)" fg:x="2525" fg:w="60"/><text x="3.2520%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.09%)</title><rect x="3.0294%" y="149" width="0.0891%" height="15" fill="rgb(218,174,28)" fg:x="2585" fg:w="76"/><text x="3.3223%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.08%)</title><rect x="3.1184%" y="149" width="0.0820%" height="15" fill="rgb(212,178,0)" fg:x="2661" fg:w="70"/><text x="3.4114%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 0.52%)</title><rect x="3.2005%" y="133" width="0.5156%" height="15" fill="rgb(251,23,17)" fg:x="2731" fg:w="440"/><text x="3.4934%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="3.7161%" y="133" width="0.0223%" height="15" fill="rgb(209,131,30)" fg:x="3171" fg:w="19"/><text x="4.0091%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="3.7384%" y="117" width="0.0973%" height="15" fill="rgb(210,133,7)" fg:x="3190" fg:w="83"/><text x="4.0314%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.08%)</title><rect x="3.8357%" y="85" width="0.0785%" height="15" fill="rgb(240,132,28)" fg:x="3273" fg:w="67"/><text x="4.1286%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.11%)</title><rect x="3.8357%" y="101" width="0.1148%" height="15" fill="rgb(225,157,15)" fg:x="3273" fg:w="98"/><text x="4.1286%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="3.9505%" y="53" width="0.0129%" height="15" fill="rgb(209,115,39)" fg:x="3371" fg:w="11"/><text x="4.2435%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="3.9634%" y="37" width="0.0410%" height="15" fill="rgb(215,180,0)" fg:x="3382" fg:w="35"/><text x="4.2564%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.08%)</title><rect x="3.9634%" y="53" width="0.0773%" height="15" fill="rgb(207,95,38)" fg:x="3382" fg:w="66"/><text x="4.2564%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.17%)</title><rect x="3.9505%" y="69" width="0.1723%" height="15" fill="rgb(249,167,21)" fg:x="3371" fg:w="147"/><text x="4.2435%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.25%)</title><rect x="3.9505%" y="85" width="0.2484%" height="15" fill="rgb(252,25,25)" fg:x="3371" fg:w="212"/><text x="4.2435%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.26%)</title><rect x="3.9505%" y="101" width="0.2602%" height="15" fill="rgb(252,25,40)" fg:x="3371" fg:w="222"/><text x="4.2435%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 0.54%)</title><rect x="3.8357%" y="117" width="0.5402%" height="15" fill="rgb(206,134,19)" fg:x="3273" fg:w="461"/><text x="4.1286%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 0.81%)</title><rect x="3.7384%" y="133" width="0.8074%" height="15" fill="rgb(207,43,42)" fg:x="3190" fg:w="689"/><text x="4.0314%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.11%)</title><rect x="4.5458%" y="133" width="0.1113%" height="15" fill="rgb(210,91,24)" fg:x="3879" fg:w="95"/><text x="4.8388%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="4.6572%" y="133" width="0.0703%" height="15" fill="rgb(218,115,24)" fg:x="3974" fg:w="60"/><text x="4.9501%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.10%)</title><rect x="4.7275%" y="117" width="0.0961%" height="15" fill="rgb(244,124,12)" fg:x="4034" fg:w="82"/><text x="5.0204%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.11%)</title><rect x="4.8236%" y="117" width="0.1113%" height="15" fill="rgb(235,61,24)" fg:x="4116" fg:w="95"/><text x="5.1165%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.09%)</title><rect x="4.9349%" y="117" width="0.0891%" height="15" fill="rgb(226,200,33)" fg:x="4211" fg:w="76"/><text x="5.2279%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.39%)</title><rect x="4.7275%" y="133" width="0.3867%" height="15" fill="rgb(221,183,26)" fg:x="4034" fg:w="330"/><text x="5.0204%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="5.1142%" y="133" width="0.0961%" height="15" fill="rgb(219,209,9)" fg:x="4364" fg:w="82"/><text x="5.4072%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,960 instructions, 2.30%)</title><rect x="3.2005%" y="149" width="2.2969%" height="15" fill="rgb(205,189,4)" fg:x="2731" fg:w="1960"/><text x="3.4934%" y="159.50">b..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.09%)</title><rect x="5.4974%" y="149" width="0.0891%" height="15" fill="rgb(219,35,52)" fg:x="4691" fg:w="76"/><text x="5.7904%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="5.5865%" y="149" width="0.0176%" height="15" fill="rgb(253,98,49)" fg:x="4767" fg:w="15"/><text x="5.8794%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="5.6041%" y="149" width="0.0176%" height="15" fill="rgb(228,111,33)" fg:x="4782" fg:w="15"/><text x="5.8970%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.01%)</title><rect x="5.6216%" y="149" width="0.0105%" height="15" fill="rgb(230,43,51)" fg:x="4797" fg:w="9"/><text x="5.9146%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.02%)</title><rect x="5.6322%" y="149" width="0.0211%" height="15" fill="rgb(205,106,51)" fg:x="4806" fg:w="18"/><text x="5.9252%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (77 instructions, 0.09%)</title><rect x="5.6533%" y="133" width="0.0902%" height="15" fill="rgb(229,169,15)" fg:x="4824" fg:w="77"/><text x="5.9462%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (173 instructions, 0.20%)</title><rect x="5.6533%" y="149" width="0.2027%" height="15" fill="rgb(220,162,26)" fg:x="4824" fg:w="173"/><text x="5.9462%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (121 instructions, 0.14%)</title><rect x="5.8560%" y="117" width="0.1418%" height="15" fill="rgb(215,12,20)" fg:x="4997" fg:w="121"/><text x="6.1490%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (164 instructions, 0.19%)</title><rect x="5.8560%" y="133" width="0.1922%" height="15" fill="rgb(222,224,47)" fg:x="4997" fg:w="164"/><text x="6.1490%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (246 instructions, 0.29%)</title><rect x="5.8560%" y="149" width="0.2883%" height="15" fill="rgb(206,23,5)" fg:x="4997" fg:w="246"/><text x="6.1490%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="6.1443%" y="149" width="0.0973%" height="15" fill="rgb(246,93,7)" fg:x="5243" fg:w="83"/><text x="6.4373%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.10%)</title><rect x="6.2416%" y="149" width="0.1008%" height="15" fill="rgb(248,39,47)" fg:x="5326" fg:w="86"/><text x="6.5345%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="6.3424%" y="149" width="0.0973%" height="15" fill="rgb(205,73,19)" fg:x="5412" fg:w="83"/><text x="6.6353%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="6.4396%" y="149" width="0.0973%" height="15" fill="rgb(250,53,20)" fg:x="5495" fg:w="83"/><text x="6.7326%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.10%)</title><rect x="6.5416%" y="149" width="0.1008%" height="15" fill="rgb(222,179,40)" fg:x="5582" fg:w="86"/><text x="6.8346%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.50%)</title><rect x="6.6424%" y="149" width="0.5016%" height="15" fill="rgb(229,66,8)" fg:x="5668" fg:w="428"/><text x="6.9353%" y="159.50"></text></g><g><title>memcpy (428 instructions, 0.50%)</title><rect x="7.1439%" y="149" width="0.5016%" height="15" fill="rgb(224,208,19)" fg:x="6096" fg:w="428"/><text x="7.4369%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,397 instructions, 8.67%)</title><rect x="0.3199%" y="165" width="8.6686%" height="15" fill="rgb(225,133,6)" fg:x="273" fg:w="7397"/><text x="0.6129%" y="175.50">candid::de..</text></g><g><title>memcpy (380 instructions, 0.45%)</title><rect x="8.9885%" y="165" width="0.4453%" height="15" fill="rgb(231,55,27)" fg:x="7670" fg:w="380"/><text x="9.2815%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.02%)</title><rect x="9.4339%" y="149" width="0.0164%" height="15" fill="rgb(226,131,18)" fg:x="8050" fg:w="14"/><text x="9.7268%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.07%)</title><rect x="9.4339%" y="165" width="0.0738%" height="15" fill="rgb(242,94,37)" fg:x="8050" fg:w="63"/><text x="9.7268%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="9.5077%" y="165" width="0.0973%" height="15" fill="rgb(233,207,44)" fg:x="8113" fg:w="83"/><text x="9.8007%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.02%)</title><rect x="9.6050%" y="149" width="0.0164%" height="15" fill="rgb(234,27,23)" fg:x="8196" fg:w="14"/><text x="9.8979%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.07%)</title><rect x="9.6214%" y="133" width="0.0691%" height="15" fill="rgb(253,9,25)" fg:x="8210" fg:w="59"/><text x="9.9143%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.11%)</title><rect x="9.6905%" y="133" width="0.1102%" height="15" fill="rgb(218,30,43)" fg:x="8269" fg:w="94"/><text x="9.9835%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.20%)</title><rect x="9.8007%" y="133" width="0.2027%" height="15" fill="rgb(234,163,35)" fg:x="8363" fg:w="173"/><text x="10.0936%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.68%)</title><rect x="9.6214%" y="149" width="0.6785%" height="15" fill="rgb(224,224,29)" fg:x="8210" fg:w="579"/><text x="9.9143%" y="159.50"></text></g><g><title>candid::types::internal::env_add (821 instructions, 0.96%)</title><rect x="9.6050%" y="165" width="0.9621%" height="15" fill="rgb(239,24,54)" fg:x="8196" fg:w="821"/><text x="9.8979%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.11%)</title><rect x="10.5671%" y="165" width="0.1066%" height="15" fill="rgb(210,137,0)" fg:x="9017" fg:w="91"/><text x="10.8601%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.02%)</title><rect x="10.6737%" y="149" width="0.0164%" height="15" fill="rgb(216,180,0)" fg:x="9108" fg:w="14"/><text x="10.9667%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.07%)</title><rect x="10.6901%" y="133" width="0.0691%" height="15" fill="rgb(244,130,18)" fg:x="9122" fg:w="59"/><text x="10.9831%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.11%)</title><rect x="10.7593%" y="133" width="0.1102%" height="15" fill="rgb(219,6,22)" fg:x="9181" fg:w="94"/><text x="11.0522%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.20%)</title><rect x="10.8694%" y="133" width="0.2027%" height="15" fill="rgb(216,205,49)" fg:x="9275" fg:w="173"/><text x="11.1624%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 0.68%)</title><rect x="10.6901%" y="149" width="0.6785%" height="15" fill="rgb(241,25,26)" fg:x="9122" fg:w="579"/><text x="10.9831%" y="159.50"></text></g><g><title>memcmp (77 instructions, 0.09%)</title><rect x="11.3687%" y="149" width="0.0902%" height="15" fill="rgb(221,170,43)" fg:x="9701" fg:w="77"/><text x="11.6616%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="11.4589%" y="133" width="0.0703%" height="15" fill="rgb(228,162,24)" fg:x="9778" fg:w="60"/><text x="11.7519%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (95 instructions, 0.11%)</title><rect x="11.4589%" y="149" width="0.1113%" height="15" fill="rgb(236,87,32)" fg:x="9778" fg:w="95"/><text x="11.7519%" y="159.50"></text></g><g><title>candid::types::internal::env_add (960 instructions, 1.13%)</title><rect x="10.6737%" y="165" width="1.1250%" height="15" fill="rgb(251,132,26)" fg:x="9108" fg:w="960"/><text x="10.9667%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.07%)</title><rect x="11.7988%" y="117" width="0.0691%" height="15" fill="rgb(253,38,47)" fg:x="10068" fg:w="59"/><text x="12.0917%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.11%)</title><rect x="11.7988%" y="133" width="0.1102%" height="15" fill="rgb(211,25,25)" fg:x="10068" fg:w="94"/><text x="12.0917%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 0.37%)</title><rect x="11.7988%" y="149" width="0.3692%" height="15" fill="rgb(246,198,6)" fg:x="10068" fg:w="315"/><text x="12.0917%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.587 (18 instructions, 0.02%)</title><rect x="12.1679%" y="149" width="0.0211%" height="15" fill="rgb(251,119,37)" fg:x="10383" fg:w="18"/><text x="12.4609%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.1890%" y="149" width="0.0152%" height="15" fill="rgb(234,24,4)" fg:x="10401" fg:w="13"/><text x="12.4820%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 0.65%)</title><rect x="11.7988%" y="165" width="0.6457%" height="15" fill="rgb(228,79,10)" fg:x="10068" fg:w="551"/><text x="12.0917%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.06%)</title><rect x="12.4445%" y="165" width="0.0621%" height="15" fill="rgb(212,15,11)" fg:x="10619" fg:w="53"/><text x="12.7374%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="12.5066%" y="149" width="0.0703%" height="15" fill="rgb(234,178,13)" fg:x="10672" fg:w="60"/><text x="12.7996%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="12.6179%" y="149" width="0.0703%" height="15" fill="rgb(221,127,8)" fg:x="10767" fg:w="60"/><text x="12.9109%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (190 instructions, 0.22%)</title><rect x="12.5066%" y="165" width="0.2227%" height="15" fill="rgb(208,32,36)" fg:x="10672" fg:w="190"/><text x="12.7996%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.04%)</title><rect x="12.7293%" y="149" width="0.0398%" height="15" fill="rgb(218,147,46)" fg:x="10862" fg:w="34"/><text x="13.0222%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (18 instructions, 0.02%)</title><rect x="12.7691%" y="149" width="0.0211%" height="15" fill="rgb(217,189,34)" fg:x="10896" fg:w="18"/><text x="13.0621%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (18 instructions, 0.02%)</title><rect x="12.7902%" y="149" width="0.0211%" height="15" fill="rgb(254,187,30)" fg:x="10914" fg:w="18"/><text x="13.0832%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.20%)</title><rect x="12.7293%" y="165" width="0.1981%" height="15" fill="rgb(246,218,16)" fg:x="10862" fg:w="169"/><text x="13.0222%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.9273%" y="165" width="0.0152%" height="15" fill="rgb(247,205,35)" fg:x="11031" fg:w="13"/><text x="13.2203%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.9425%" y="165" width="0.0152%" height="15" fill="rgb(222,181,13)" fg:x="11044" fg:w="13"/><text x="13.2355%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.9578%" y="165" width="0.0152%" height="15" fill="rgb(235,198,2)" fg:x="11057" fg:w="13"/><text x="13.2507%" y="175.50"></text></g><g><title>memcpy (440 instructions, 0.52%)</title><rect x="12.9730%" y="165" width="0.5156%" height="15" fill="rgb(229,49,41)" fg:x="11070" fg:w="440"/><text x="13.2660%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.02%)</title><rect x="13.4887%" y="133" width="0.0223%" height="15" fill="rgb(209,68,51)" fg:x="11510" fg:w="19"/><text x="13.7816%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (109 instructions, 0.13%)</title><rect x="13.5109%" y="133" width="0.1277%" height="15" fill="rgb(231,28,12)" fg:x="11529" fg:w="109"/><text x="13.8039%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.10%)</title><rect x="13.6387%" y="117" width="0.1008%" height="15" fill="rgb(249,214,22)" fg:x="11638" fg:w="86"/><text x="13.9316%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.14%)</title><rect x="13.6387%" y="133" width="0.1418%" height="15" fill="rgb(254,140,40)" fg:x="11638" fg:w="121"/><text x="13.9316%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="13.7805%" y="133" width="0.0152%" height="15" fill="rgb(253,178,28)" fg:x="11759" fg:w="13"/><text x="14.0734%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (324 instructions, 0.38%)</title><rect x="13.4887%" y="149" width="0.3797%" height="15" fill="rgb(247,93,23)" fg:x="11510" fg:w="324"/><text x="13.7816%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (373 instructions, 0.44%)</title><rect x="13.4887%" y="165" width="0.4371%" height="15" fill="rgb(216,129,53)" fg:x="11510" fg:w="373"/><text x="13.7816%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.15%)</title><rect x="13.9258%" y="165" width="0.1547%" height="15" fill="rgb(250,30,48)" fg:x="11883" fg:w="132"/><text x="14.2187%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,293 instructions, 15.58%)</title><rect x="0.2227%" y="181" width="15.5782%" height="15" fill="rgb(244,100,37)" fg:x="190" fg:w="13293"/><text x="0.5156%" y="191.50">ic_cdk::api::call::a..</text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="15.8008%" y="165" width="0.3750%" height="15" fill="rgb(238,122,20)" fg:x="13483" fg:w="320"/><text x="16.0938%" y="175.50"></text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="16.1758%" y="165" width="0.3750%" height="15" fill="rgb(253,173,31)" fg:x="13803" fg:w="320"/><text x="16.4688%" y="175.50"></text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="16.6774%" y="165" width="0.3750%" height="15" fill="rgb(224,59,5)" fg:x="14231" fg:w="320"/><text x="16.9704%" y="175.50"></text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="17.0524%" y="165" width="0.3750%" height="15" fill="rgb(253,112,24)" fg:x="14551" fg:w="320"/><text x="17.3454%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.5540%" y="165" width="0.0270%" height="15" fill="rgb(244,96,50)" fg:x="14979" fg:w="23"/><text x="17.8470%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.5809%" y="165" width="0.0270%" height="15" fill="rgb(215,49,51)" fg:x="15002" fg:w="23"/><text x="17.8739%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.6079%" y="149" width="0.0270%" height="15" fill="rgb(206,163,43)" fg:x="15025" fg:w="23"/><text x="17.9009%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="17.6349%" y="149" width="0.2156%" height="15" fill="rgb(218,165,34)" fg:x="15048" fg:w="184"/><text x="17.9278%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.8505%" y="149" width="0.0270%" height="15" fill="rgb(236,77,15)" fg:x="15232" fg:w="23"/><text x="18.1435%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="17.8774%" y="149" width="0.2156%" height="15" fill="rgb(217,158,47)" fg:x="15255" fg:w="184"/><text x="18.1704%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="18.0931%" y="149" width="0.0270%" height="15" fill="rgb(224,57,31)" fg:x="15439" fg:w="23"/><text x="18.3860%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.10%)</title><rect x="18.1200%" y="149" width="0.1008%" height="15" fill="rgb(215,62,28)" fg:x="15462" fg:w="86"/><text x="18.4130%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (734 instructions, 0.86%)</title><rect x="17.6079%" y="165" width="0.8602%" height="15" fill="rgb(227,21,13)" fg:x="15025" fg:w="734"/><text x="17.9009%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="18.7095%" y="165" width="0.1875%" height="15" fill="rgb(210,69,21)" fg:x="15965" fg:w="160"/><text x="19.0025%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="18.8970%" y="165" width="0.1875%" height="15" fill="rgb(213,11,48)" fg:x="16125" fg:w="160"/><text x="19.1900%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="19.2111%" y="165" width="0.0270%" height="15" fill="rgb(223,192,40)" fg:x="16393" fg:w="23"/><text x="19.5040%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="19.2380%" y="165" width="0.0270%" height="15" fill="rgb(238,32,39)" fg:x="16416" fg:w="23"/><text x="19.5310%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.24%)</title><rect x="19.2650%" y="149" width="0.2402%" height="15" fill="rgb(246,215,13)" fg:x="16439" fg:w="205"/><text x="19.5579%" y="159.50"></text></g><g><title>memmove (205 instructions, 0.24%)</title><rect x="19.5052%" y="149" width="0.2402%" height="15" fill="rgb(237,203,50)" fg:x="16644" fg:w="205"/><text x="19.7982%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="19.7455%" y="149" width="0.0176%" height="15" fill="rgb(253,79,53)" fg:x="16849" fg:w="15"/><text x="20.0384%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="19.7630%" y="149" width="0.0176%" height="15" fill="rgb(249,11,7)" fg:x="16864" fg:w="15"/><text x="20.0560%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_left (606 instructions, 0.71%)</title><rect x="19.2650%" y="165" width="0.7102%" height="15" fill="rgb(215,76,42)" fg:x="16439" fg:w="606"/><text x="19.5579%" y="175.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="20.2224%" y="165" width="0.1500%" height="15" fill="rgb(207,211,36)" fg:x="17256" fg:w="128"/><text x="20.5154%" y="175.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="20.3724%" y="165" width="0.1500%" height="15" fill="rgb(226,201,25)" fg:x="17384" fg:w="128"/><text x="20.6654%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.6490%" y="165" width="0.0270%" height="15" fill="rgb(227,110,38)" fg:x="17620" fg:w="23"/><text x="20.9420%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.6760%" y="165" width="0.0270%" height="15" fill="rgb(238,70,54)" fg:x="17643" fg:w="23"/><text x="20.9689%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="20.8295%" y="165" width="0.1875%" height="15" fill="rgb(205,113,52)" fg:x="17774" fg:w="160"/><text x="21.1224%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="21.0170%" y="165" width="0.1875%" height="15" fill="rgb(215,30,37)" fg:x="17934" fg:w="160"/><text x="21.3099%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.3311%" y="165" width="0.0270%" height="15" fill="rgb(252,168,17)" fg:x="18202" fg:w="23"/><text x="21.6240%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.3580%" y="165" width="0.0270%" height="15" fill="rgb(230,179,35)" fg:x="18225" fg:w="23"/><text x="21.6510%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.5115%" y="165" width="0.0270%" height="15" fill="rgb(251,195,40)" fg:x="18356" fg:w="23"/><text x="21.8045%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.5385%" y="165" width="0.0270%" height="15" fill="rgb(221,21,31)" fg:x="18379" fg:w="23"/><text x="21.8314%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.6920%" y="165" width="0.0270%" height="15" fill="rgb(235,212,17)" fg:x="18510" fg:w="23"/><text x="21.9850%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.7190%" y="165" width="0.0270%" height="15" fill="rgb(247,165,4)" fg:x="18533" fg:w="23"/><text x="22.0119%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="21.8725%" y="165" width="0.2250%" height="15" fill="rgb(222,48,9)" fg:x="18664" fg:w="192"/><text x="22.1654%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="22.0975%" y="165" width="0.2250%" height="15" fill="rgb(242,84,36)" fg:x="18856" fg:w="192"/><text x="22.3904%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="22.4491%" y="165" width="0.3000%" height="15" fill="rgb(209,12,51)" fg:x="19156" fg:w="256"/><text x="22.7420%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="22.7491%" y="165" width="0.3000%" height="15" fill="rgb(244,161,32)" fg:x="19412" fg:w="256"/><text x="23.0420%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="23.1756%" y="165" width="0.0270%" height="15" fill="rgb(243,182,16)" fg:x="19776" fg:w="23"/><text x="23.4686%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="23.2026%" y="165" width="0.0270%" height="15" fill="rgb(247,45,4)" fg:x="19799" fg:w="23"/><text x="23.4956%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="23.3561%" y="165" width="0.1840%" height="15" fill="rgb(226,176,25)" fg:x="19930" fg:w="157"/><text x="23.6491%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="23.5401%" y="165" width="0.1840%" height="15" fill="rgb(233,218,31)" fg:x="20087" fg:w="157"/><text x="23.8331%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="23.8507%" y="165" width="0.1875%" height="15" fill="rgb(236,58,49)" fg:x="20352" fg:w="160"/><text x="24.1436%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="24.0382%" y="165" width="0.1875%" height="15" fill="rgb(209,85,32)" fg:x="20512" fg:w="160"/><text x="24.3311%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="24.3522%" y="165" width="0.0270%" height="15" fill="rgb(248,123,2)" fg:x="20780" fg:w="23"/><text x="24.6452%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="24.3792%" y="165" width="0.0270%" height="15" fill="rgb(236,89,52)" fg:x="20803" fg:w="23"/><text x="24.6722%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="24.5327%" y="165" width="0.2250%" height="15" fill="rgb(235,103,42)" fg:x="20934" fg:w="192"/><text x="24.8257%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="24.7577%" y="165" width="0.2250%" height="15" fill="rgb(229,91,45)" fg:x="21126" fg:w="192"/><text x="25.0507%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.1093%" y="165" width="0.0270%" height="15" fill="rgb(210,45,21)" fg:x="21426" fg:w="23"/><text x="25.4022%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.1362%" y="165" width="0.0270%" height="15" fill="rgb(235,168,5)" fg:x="21449" fg:w="23"/><text x="25.4292%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="25.2898%" y="165" width="0.2625%" height="15" fill="rgb(250,90,32)" fg:x="21580" fg:w="224"/><text x="25.5827%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="25.5523%" y="165" width="0.2625%" height="15" fill="rgb(248,101,15)" fg:x="21804" fg:w="224"/><text x="25.8452%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.9413%" y="165" width="0.0270%" height="15" fill="rgb(234,199,15)" fg:x="22136" fg:w="23"/><text x="26.2343%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.9683%" y="165" width="0.0270%" height="15" fill="rgb(252,121,28)" fg:x="22159" fg:w="23"/><text x="26.2613%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.1218%" y="165" width="0.0270%" height="15" fill="rgb(207,203,33)" fg:x="22290" fg:w="23"/><text x="26.4148%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.1488%" y="165" width="0.0270%" height="15" fill="rgb(217,27,10)" fg:x="22313" fg:w="23"/><text x="26.4417%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.3023%" y="165" width="0.0270%" height="15" fill="rgb(239,214,12)" fg:x="22444" fg:w="23"/><text x="26.5953%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.3292%" y="165" width="0.0270%" height="15" fill="rgb(245,84,21)" fg:x="22467" fg:w="23"/><text x="26.6222%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.4828%" y="165" width="0.0270%" height="15" fill="rgb(235,175,47)" fg:x="22598" fg:w="23"/><text x="26.7757%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.5097%" y="165" width="0.0270%" height="15" fill="rgb(220,111,44)" fg:x="22621" fg:w="23"/><text x="26.8027%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.6632%" y="165" width="0.0270%" height="15" fill="rgb(220,217,8)" fg:x="22752" fg:w="23"/><text x="26.9562%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.6902%" y="165" width="0.0270%" height="15" fill="rgb(214,84,54)" fg:x="22775" fg:w="23"/><text x="26.9832%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.8437%" y="165" width="0.0270%" height="15" fill="rgb(252,28,9)" fg:x="22906" fg:w="23"/><text x="27.1367%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.8707%" y="165" width="0.0270%" height="15" fill="rgb(235,116,40)" fg:x="22929" fg:w="23"/><text x="27.1636%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.0242%" y="165" width="0.0270%" height="15" fill="rgb(223,179,34)" fg:x="23060" fg:w="23"/><text x="27.3171%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.0511%" y="165" width="0.0270%" height="15" fill="rgb(243,35,52)" fg:x="23083" fg:w="23"/><text x="27.3441%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.0781%" y="149" width="0.0270%" height="15" fill="rgb(218,20,36)" fg:x="23106" fg:w="23"/><text x="27.3711%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="27.1050%" y="149" width="0.2156%" height="15" fill="rgb(251,219,52)" fg:x="23129" fg:w="184"/><text x="27.3980%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.3207%" y="149" width="0.0270%" height="15" fill="rgb(216,89,24)" fg:x="23313" fg:w="23"/><text x="27.6136%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="27.3476%" y="149" width="0.2156%" height="15" fill="rgb(252,16,8)" fg:x="23336" fg:w="184"/><text x="27.6406%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.5633%" y="149" width="0.0270%" height="15" fill="rgb(217,10,45)" fg:x="23520" fg:w="23"/><text x="27.8562%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (84 instructions, 0.10%)</title><rect x="27.5902%" y="149" width="0.0984%" height="15" fill="rgb(231,13,33)" fg:x="23543" fg:w="84"/><text x="27.8832%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (732 instructions, 0.86%)</title><rect x="27.0781%" y="165" width="0.8578%" height="15" fill="rgb(240,141,46)" fg:x="23106" fg:w="732"/><text x="27.3711%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.9359%" y="149" width="0.0270%" height="15" fill="rgb(244,216,24)" fg:x="23838" fg:w="23"/><text x="28.2289%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="27.9629%" y="149" width="0.2156%" height="15" fill="rgb(208,39,3)" fg:x="23861" fg:w="184"/><text x="28.2558%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="28.1785%" y="149" width="0.0270%" height="15" fill="rgb(250,216,13)" fg:x="24045" fg:w="23"/><text x="28.4715%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="28.2055%" y="149" width="0.2156%" height="15" fill="rgb(228,202,46)" fg:x="24068" fg:w="184"/><text x="28.4984%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="28.4211%" y="149" width="0.0270%" height="15" fill="rgb(230,71,36)" fg:x="24252" fg:w="23"/><text x="28.7141%" y="159.50"></text></g><g><title>memcpy (136 instructions, 0.16%)</title><rect x="28.4480%" y="149" width="0.1594%" height="15" fill="rgb(211,39,38)" fg:x="24275" fg:w="136"/><text x="28.7410%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.08%)</title><rect x="28.6074%" y="133" width="0.0785%" height="15" fill="rgb(252,167,29)" fg:x="24411" fg:w="67"/><text x="28.9004%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (182 instructions, 0.21%)</title><rect x="28.6074%" y="149" width="0.2133%" height="15" fill="rgb(247,125,41)" fg:x="24411" fg:w="182"/><text x="28.9004%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (1,081 instructions, 1.27%)</title><rect x="27.9359%" y="165" width="1.2668%" height="15" fill="rgb(211,115,18)" fg:x="23838" fg:w="1081"/><text x="28.2289%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="29.5403%" y="165" width="0.0270%" height="15" fill="rgb(229,117,15)" fg:x="25207" fg:w="23"/><text x="29.8332%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="29.5672%" y="165" width="0.0270%" height="15" fill="rgb(216,14,0)" fg:x="25230" fg:w="23"/><text x="29.8602%" y="175.50"></text></g><g><title>memmove (288 instructions, 0.34%)</title><rect x="29.7207%" y="165" width="0.3375%" height="15" fill="rgb(229,119,3)" fg:x="25361" fg:w="288"/><text x="30.0137%" y="175.50"></text></g><g><title>memmove (288 instructions, 0.34%)</title><rect x="30.0582%" y="165" width="0.3375%" height="15" fill="rgb(226,8,42)" fg:x="25649" fg:w="288"/><text x="30.3512%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="30.5223%" y="165" width="0.0270%" height="15" fill="rgb(227,138,23)" fg:x="26045" fg:w="23"/><text x="30.8153%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="30.5493%" y="165" width="0.0270%" height="15" fill="rgb(226,104,4)" fg:x="26068" fg:w="23"/><text x="30.8422%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="30.7028%" y="165" width="0.1875%" height="15" fill="rgb(210,29,27)" fg:x="26199" fg:w="160"/><text x="30.9958%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="30.8903%" y="165" width="0.1875%" height="15" fill="rgb(237,87,48)" fg:x="26359" fg:w="160"/><text x="31.1833%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="31.0778%" y="149" width="0.2250%" height="15" fill="rgb(242,132,5)" fg:x="26519" fg:w="192"/><text x="31.3708%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="31.3028%" y="149" width="0.2156%" height="15" fill="rgb(254,0,33)" fg:x="26711" fg:w="184"/><text x="31.5958%" y="159.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="31.5184%" y="149" width="0.2250%" height="15" fill="rgb(207,101,10)" fg:x="26895" fg:w="192"/><text x="31.8114%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="31.7434%" y="149" width="0.2156%" height="15" fill="rgb(252,15,36)" fg:x="27087" fg:w="184"/><text x="32.0364%" y="159.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="31.9591%" y="149" width="0.1500%" height="15" fill="rgb(231,107,16)" fg:x="27271" fg:w="128"/><text x="32.2520%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (84 instructions, 0.10%)</title><rect x="32.1091%" y="149" width="0.0984%" height="15" fill="rgb(208,26,42)" fg:x="27399" fg:w="84"/><text x="32.4020%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,264 instructions, 1.48%)</title><rect x="31.0778%" y="165" width="1.4813%" height="15" fill="rgb(224,55,30)" fg:x="26519" fg:w="1264"/><text x="31.3708%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.8005%" y="165" width="0.0270%" height="15" fill="rgb(210,203,3)" fg:x="27989" fg:w="23"/><text x="33.0935%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.8275%" y="165" width="0.0270%" height="15" fill="rgb(225,153,32)" fg:x="28012" fg:w="23"/><text x="33.1204%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.9810%" y="165" width="0.0270%" height="15" fill="rgb(208,105,0)" fg:x="28143" fg:w="23"/><text x="33.2739%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.0079%" y="165" width="0.0270%" height="15" fill="rgb(230,105,2)" fg:x="28166" fg:w="23"/><text x="33.3009%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="33.1615%" y="165" width="0.2625%" height="15" fill="rgb(243,128,6)" fg:x="28297" fg:w="224"/><text x="33.4544%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="33.4240%" y="165" width="0.2625%" height="15" fill="rgb(215,152,38)" fg:x="28521" fg:w="224"/><text x="33.7169%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.8130%" y="165" width="0.0270%" height="15" fill="rgb(235,108,8)" fg:x="28853" fg:w="23"/><text x="34.1060%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.8400%" y="165" width="0.0270%" height="15" fill="rgb(246,78,25)" fg:x="28876" fg:w="23"/><text x="34.1330%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.9935%" y="165" width="0.0270%" height="15" fill="rgb(227,146,53)" fg:x="29007" fg:w="23"/><text x="34.2865%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="34.0205%" y="165" width="0.0270%" height="15" fill="rgb(221,13,25)" fg:x="29030" fg:w="23"/><text x="34.3134%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="34.1740%" y="165" width="0.2625%" height="15" fill="rgb(233,206,9)" fg:x="29161" fg:w="224"/><text x="34.4670%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="34.4365%" y="165" width="0.2625%" height="15" fill="rgb(252,69,17)" fg:x="29385" fg:w="224"/><text x="34.7295%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="34.8256%" y="165" width="0.0270%" height="15" fill="rgb(233,167,22)" fg:x="29717" fg:w="23"/><text x="35.1185%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="34.8525%" y="165" width="0.0270%" height="15" fill="rgb(247,0,21)" fg:x="29740" fg:w="23"/><text x="35.1455%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="35.0060%" y="165" width="0.2250%" height="15" fill="rgb(253,145,14)" fg:x="29871" fg:w="192"/><text x="35.2990%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="35.2310%" y="165" width="0.2250%" height="15" fill="rgb(220,197,31)" fg:x="30063" fg:w="192"/><text x="35.5240%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="35.5826%" y="165" width="0.3000%" height="15" fill="rgb(221,96,42)" fg:x="30363" fg:w="256"/><text x="35.8756%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="35.8826%" y="165" width="0.3000%" height="15" fill="rgb(217,7,50)" fg:x="30619" fg:w="256"/><text x="36.1756%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="36.3092%" y="165" width="0.2250%" height="15" fill="rgb(229,171,37)" fg:x="30983" fg:w="192"/><text x="36.6022%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="36.5342%" y="165" width="0.2250%" height="15" fill="rgb(228,187,43)" fg:x="31175" fg:w="192"/><text x="36.8272%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="36.8858%" y="165" width="0.0270%" height="15" fill="rgb(239,175,29)" fg:x="31475" fg:w="23"/><text x="37.1787%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="36.9127%" y="165" width="0.0270%" height="15" fill="rgb(244,72,4)" fg:x="31498" fg:w="23"/><text x="37.2057%" y="175.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="36.9397%" y="149" width="0.1500%" height="15" fill="rgb(211,220,4)" fg:x="31521" fg:w="128"/><text x="37.2327%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="37.0897%" y="149" width="0.2156%" height="15" fill="rgb(220,40,54)" fg:x="31649" fg:w="184"/><text x="37.3827%" y="159.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="37.3053%" y="149" width="0.1500%" height="15" fill="rgb(227,110,18)" fg:x="31833" fg:w="128"/><text x="37.5983%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="37.4553%" y="149" width="0.2156%" height="15" fill="rgb(224,129,25)" fg:x="31961" fg:w="184"/><text x="37.7483%" y="159.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="37.6710%" y="149" width="0.1840%" height="15" fill="rgb(238,182,28)" fg:x="32145" fg:w="157"/><text x="37.9639%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (84 instructions, 0.10%)</title><rect x="37.8549%" y="149" width="0.0984%" height="15" fill="rgb(228,63,52)" fg:x="32302" fg:w="84"/><text x="38.1479%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,143 instructions, 1.34%)</title><rect x="36.9397%" y="165" width="1.3395%" height="15" fill="rgb(210,86,37)" fg:x="31521" fg:w="1143"/><text x="37.2327%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.5206%" y="165" width="0.0270%" height="15" fill="rgb(250,78,31)" fg:x="32870" fg:w="23"/><text x="38.8136%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.5475%" y="165" width="0.0270%" height="15" fill="rgb(224,149,43)" fg:x="32893" fg:w="23"/><text x="38.8405%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.7011%" y="165" width="0.0270%" height="15" fill="rgb(237,65,24)" fg:x="33024" fg:w="23"/><text x="38.9940%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.7280%" y="165" width="0.0270%" height="15" fill="rgb(215,29,33)" fg:x="33047" fg:w="23"/><text x="39.0210%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="38.8815%" y="165" width="0.1840%" height="15" fill="rgb(212,204,26)" fg:x="33178" fg:w="157"/><text x="39.1745%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="39.0655%" y="165" width="0.1840%" height="15" fill="rgb(232,144,54)" fg:x="33335" fg:w="157"/><text x="39.3585%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.3761%" y="165" width="0.0270%" height="15" fill="rgb(225,158,29)" fg:x="33600" fg:w="23"/><text x="39.6690%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.4030%" y="165" width="0.0270%" height="15" fill="rgb(222,12,44)" fg:x="33623" fg:w="23"/><text x="39.6960%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.5566%" y="165" width="0.0270%" height="15" fill="rgb(231,23,0)" fg:x="33754" fg:w="23"/><text x="39.8495%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.5835%" y="165" width="0.0270%" height="15" fill="rgb(240,111,9)" fg:x="33777" fg:w="23"/><text x="39.8765%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="39.7370%" y="165" width="0.2625%" height="15" fill="rgb(228,160,43)" fg:x="33908" fg:w="224"/><text x="40.0300%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.26%)</title><rect x="39.9995%" y="165" width="0.2625%" height="15" fill="rgb(233,23,36)" fg:x="34132" fg:w="224"/><text x="40.2925%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="40.3886%" y="165" width="0.0270%" height="15" fill="rgb(254,201,9)" fg:x="34464" fg:w="23"/><text x="40.6816%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="40.4156%" y="165" width="0.0270%" height="15" fill="rgb(227,92,3)" fg:x="34487" fg:w="23"/><text x="40.7085%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="40.5691%" y="165" width="0.1840%" height="15" fill="rgb(228,202,26)" fg:x="34618" fg:w="157"/><text x="40.8620%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.18%)</title><rect x="40.7531%" y="165" width="0.1840%" height="15" fill="rgb(232,12,16)" fg:x="34775" fg:w="157"/><text x="41.0460%" y="175.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (21,557 instructions, 25.26%)</title><rect x="15.8008%" y="181" width="25.2628%" height="15" fill="rgb(230,224,24)" fg:x="13483" fg:w="21557"/><text x="16.0938%" y="191.50">alloc::collections::btree::remove:..</text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.02%)</title><rect x="41.0636%" y="149" width="0.0164%" height="15" fill="rgb(217,135,45)" fg:x="35040" fg:w="14"/><text x="41.3566%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.07%)</title><rect x="41.0800%" y="133" width="0.0738%" height="15" fill="rgb(236,62,10)" fg:x="35054" fg:w="63"/><text x="41.3730%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (98 instructions, 0.11%)</title><rect x="41.0800%" y="149" width="0.1148%" height="15" fill="rgb(246,170,13)" fg:x="35054" fg:w="98"/><text x="41.3730%" y="159.50"></text></g><g><title>memset (152 instructions, 0.18%)</title><rect x="41.1949%" y="149" width="0.1781%" height="15" fill="rgb(220,41,42)" fg:x="35152" fg:w="152"/><text x="41.4878%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (444 instructions, 0.52%)</title><rect x="41.0636%" y="165" width="0.5203%" height="15" fill="rgb(245,74,34)" fg:x="35040" fg:w="444"/><text x="41.3566%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 0.61%)</title><rect x="41.5839%" y="149" width="0.6070%" height="15" fill="rgb(245,225,8)" fg:x="35484" fg:w="518"/><text x="41.8769%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.10%)</title><rect x="42.1910%" y="101" width="0.0973%" height="15" fill="rgb(236,176,30)" fg:x="36002" fg:w="83"/><text x="42.4840%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.15%)</title><rect x="42.1910%" y="117" width="0.1477%" height="15" fill="rgb(217,172,39)" fg:x="36002" fg:w="126"/><text x="42.4840%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (205 instructions, 0.24%)</title><rect x="42.1910%" y="133" width="0.2402%" height="15" fill="rgb(228,77,26)" fg:x="36002" fg:w="205"/><text x="42.4840%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="42.4312%" y="133" width="0.0176%" height="15" fill="rgb(233,7,10)" fg:x="36207" fg:w="15"/><text x="42.7242%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="42.4488%" y="133" width="0.0176%" height="15" fill="rgb(224,207,44)" fg:x="36222" fg:w="15"/><text x="42.7418%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (423 instructions, 0.50%)</title><rect x="42.1910%" y="149" width="0.4957%" height="15" fill="rgb(244,169,18)" fg:x="36002" fg:w="423"/><text x="42.4840%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 0.60%)</title><rect x="42.6867%" y="149" width="0.6047%" height="15" fill="rgb(207,80,33)" fg:x="36425" fg:w="516"/><text x="42.9797%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,557 instructions, 1.82%)</title><rect x="41.5839%" y="165" width="1.8247%" height="15" fill="rgb(209,110,33)" fg:x="35484" fg:w="1557"/><text x="41.8769%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="43.4156%" y="165" width="0.0703%" height="15" fill="rgb(231,209,16)" fg:x="37047" fg:w="60"/><text x="43.7086%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,673 instructions, 3.13%)</title><rect x="41.0636%" y="181" width="3.1325%" height="15" fill="rgb(247,176,30)" fg:x="35040" fg:w="2673"/><text x="41.3566%" y="191.50">ic..</text></g><g><title>btreemap::__canister_method_batch_remove::{{closure}} (84,715 instructions, 99.28%)</title><rect x="0.2227%" y="197" width="99.2781%" height="15" fill="rgb(238,168,24)" fg:x="190" fg:w="84715"/><text x="0.5156%" y="207.50">btreemap::__canister_method_batch_remove::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.02%)</title><rect x="99.5008%" y="197" width="0.0164%" height="15" fill="rgb(212,229,30)" fg:x="84905" fg:w="14"/><text x="99.7937%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.10%)</title><rect x="99.5183%" y="197" width="0.1008%" height="15" fill="rgb(230,120,21)" fg:x="84920" fg:w="86"/><text x="99.8113%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.21%)</title><rect x="99.6191%" y="197" width="0.2121%" height="15" fill="rgb(215,179,2)" fg:x="85006" fg:w="181"/><text x="99.9121%" y="207.50"></text></g><g><title>all (85,331 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(237,98,38)" fg:x="0" fg:w="85331"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (85,331 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(218,204,25)" fg:x="0" fg:w="85331"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>