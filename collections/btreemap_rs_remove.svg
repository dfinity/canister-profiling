<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="84048"><g><title>ic_cdk::setup (24 instructions, 0.03%)</title><rect x="0.0000%" y="197" width="0.0286%" height="15" fill="rgb(226,78,50)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="0.0286%" y="197" width="0.0976%" height="15" fill="rgb(222,34,8)" fg:x="24" fg:w="82"/><text x="0.3215%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (80 instructions, 0.10%)</title><rect x="0.1261%" y="197" width="0.0952%" height="15" fill="rgb(211,17,42)" fg:x="106" fg:w="80"/><text x="0.4191%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (116 instructions, 0.14%)</title><rect x="0.2213%" y="165" width="0.1380%" height="15" fill="rgb(231,208,8)" fg:x="186" fg:w="116"/><text x="0.5143%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.10%)</title><rect x="0.3593%" y="149" width="0.0976%" height="15" fill="rgb(230,51,46)" fg:x="302" fg:w="82"/><text x="0.6523%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.53%)</title><rect x="0.4569%" y="149" width="0.5271%" height="15" fill="rgb(237,222,53)" fg:x="384" fg:w="443"/><text x="0.7499%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.11%)</title><rect x="0.9840%" y="149" width="0.1130%" height="15" fill="rgb(232,101,42)" fg:x="827" fg:w="95"/><text x="1.2769%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.0970%" y="149" width="0.0714%" height="15" fill="rgb(211,72,1)" fg:x="922" fg:w="60"/><text x="1.3900%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.1684%" y="149" width="0.0714%" height="15" fill="rgb(226,59,7)" fg:x="982" fg:w="60"/><text x="1.4613%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.2398%" y="149" width="0.0714%" height="15" fill="rgb(234,67,37)" fg:x="1042" fg:w="60"/><text x="1.5327%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.07%)</title><rect x="1.3112%" y="149" width="0.0714%" height="15" fill="rgb(244,15,33)" fg:x="1102" fg:w="60"/><text x="1.6041%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.10%)</title><rect x="1.3825%" y="149" width="0.0976%" height="15" fill="rgb(208,83,25)" fg:x="1162" fg:w="82"/><text x="1.6755%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.08%)</title><rect x="1.4801%" y="149" width="0.0833%" height="15" fill="rgb(250,207,18)" fg:x="1244" fg:w="70"/><text x="1.7731%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.53%)</title><rect x="1.5634%" y="149" width="0.5271%" height="15" fill="rgb(242,12,11)" fg:x="1314" fg:w="443"/><text x="1.8564%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="2.0905%" y="149" width="0.0226%" height="15" fill="rgb(214,133,7)" fg:x="1757" fg:w="19"/><text x="2.3834%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="2.1131%" y="133" width="0.0976%" height="15" fill="rgb(232,217,10)" fg:x="1776" fg:w="82"/><text x="2.4060%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.08%)</title><rect x="2.2106%" y="101" width="0.0797%" height="15" fill="rgb(251,105,32)" fg:x="1858" fg:w="67"/><text x="2.5036%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.11%)</title><rect x="2.2106%" y="117" width="0.1142%" height="15" fill="rgb(232,185,41)" fg:x="1858" fg:w="96"/><text x="2.5036%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="2.3249%" y="69" width="0.0131%" height="15" fill="rgb(237,18,45)" fg:x="1954" fg:w="11"/><text x="2.6178%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="2.3379%" y="53" width="0.0416%" height="15" fill="rgb(219,39,45)" fg:x="1965" fg:w="35"/><text x="2.6309%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.08%)</title><rect x="2.3379%" y="69" width="0.0761%" height="15" fill="rgb(214,138,51)" fg:x="1965" fg:w="64"/><text x="2.6309%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.17%)</title><rect x="2.3249%" y="85" width="0.1713%" height="15" fill="rgb(207,168,15)" fg:x="1954" fg:w="144"/><text x="2.6178%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.25%)</title><rect x="2.3249%" y="101" width="0.2487%" height="15" fill="rgb(209,29,16)" fg:x="1954" fg:w="209"/><text x="2.6178%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.26%)</title><rect x="2.3249%" y="117" width="0.2606%" height="15" fill="rgb(243,56,25)" fg:x="1954" fg:w="219"/><text x="2.6178%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 0.54%)</title><rect x="2.2106%" y="133" width="0.5437%" height="15" fill="rgb(213,164,32)" fg:x="1858" fg:w="457"/><text x="2.5036%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 0.81%)</title><rect x="2.1131%" y="149" width="0.8055%" height="15" fill="rgb(205,90,17)" fg:x="1776" fg:w="677"/><text x="2.4060%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.11%)</title><rect x="2.9186%" y="149" width="0.1130%" height="15" fill="rgb(226,138,2)" fg:x="2453" fg:w="95"/><text x="3.2115%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="3.0316%" y="149" width="0.0714%" height="15" fill="rgb(242,25,49)" fg:x="2548" fg:w="60"/><text x="3.3246%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.09%)</title><rect x="3.1030%" y="149" width="0.0904%" height="15" fill="rgb(243,169,4)" fg:x="2608" fg:w="76"/><text x="3.3960%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.08%)</title><rect x="3.1934%" y="149" width="0.0833%" height="15" fill="rgb(217,97,28)" fg:x="2684" fg:w="70"/><text x="3.4864%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 0.53%)</title><rect x="3.2767%" y="133" width="0.5271%" height="15" fill="rgb(237,152,40)" fg:x="2754" fg:w="443"/><text x="3.5697%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="3.8038%" y="133" width="0.0226%" height="15" fill="rgb(252,147,9)" fg:x="3197" fg:w="19"/><text x="4.0967%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="3.8264%" y="117" width="0.0976%" height="15" fill="rgb(220,87,30)" fg:x="3216" fg:w="82"/><text x="4.1194%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.08%)</title><rect x="3.9239%" y="85" width="0.0797%" height="15" fill="rgb(207,141,47)" fg:x="3298" fg:w="67"/><text x="4.2169%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.11%)</title><rect x="3.9239%" y="101" width="0.1142%" height="15" fill="rgb(236,38,36)" fg:x="3298" fg:w="96"/><text x="4.2169%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="4.0382%" y="53" width="0.0131%" height="15" fill="rgb(227,113,14)" fg:x="3394" fg:w="11"/><text x="4.3311%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="4.0513%" y="37" width="0.0416%" height="15" fill="rgb(213,105,10)" fg:x="3405" fg:w="35"/><text x="4.3442%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.08%)</title><rect x="4.0513%" y="53" width="0.0761%" height="15" fill="rgb(214,22,49)" fg:x="3405" fg:w="64"/><text x="4.3442%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.17%)</title><rect x="4.0382%" y="69" width="0.1713%" height="15" fill="rgb(248,220,44)" fg:x="3394" fg:w="144"/><text x="4.3311%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.25%)</title><rect x="4.0382%" y="85" width="0.2487%" height="15" fill="rgb(209,6,52)" fg:x="3394" fg:w="209"/><text x="4.3311%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.26%)</title><rect x="4.0382%" y="101" width="0.2606%" height="15" fill="rgb(223,154,12)" fg:x="3394" fg:w="219"/><text x="4.3311%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 0.54%)</title><rect x="3.9239%" y="117" width="0.5437%" height="15" fill="rgb(214,158,32)" fg:x="3298" fg:w="457"/><text x="4.2169%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 0.81%)</title><rect x="3.8264%" y="133" width="0.8055%" height="15" fill="rgb(215,93,45)" fg:x="3216" fg:w="677"/><text x="4.1194%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.11%)</title><rect x="4.6319%" y="133" width="0.1130%" height="15" fill="rgb(219,25,17)" fg:x="3893" fg:w="95"/><text x="4.9248%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="4.7449%" y="133" width="0.0714%" height="15" fill="rgb(239,226,46)" fg:x="3988" fg:w="60"/><text x="5.0379%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.10%)</title><rect x="4.8163%" y="117" width="0.0976%" height="15" fill="rgb(243,161,51)" fg:x="4048" fg:w="82"/><text x="5.1093%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.11%)</title><rect x="4.9139%" y="117" width="0.1130%" height="15" fill="rgb(251,139,48)" fg:x="4130" fg:w="95"/><text x="5.2068%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.09%)</title><rect x="5.0269%" y="117" width="0.0904%" height="15" fill="rgb(241,75,6)" fg:x="4225" fg:w="76"/><text x="5.3199%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 0.39%)</title><rect x="4.8163%" y="133" width="0.3926%" height="15" fill="rgb(222,69,51)" fg:x="4048" fg:w="330"/><text x="5.1093%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="5.2089%" y="133" width="0.0976%" height="15" fill="rgb(225,197,53)" fg:x="4378" fg:w="82"/><text x="5.5019%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,952 instructions, 2.32%)</title><rect x="3.2767%" y="149" width="2.3225%" height="15" fill="rgb(228,104,54)" fg:x="2754" fg:w="1952"/><text x="3.5697%" y="159.50">b..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.09%)</title><rect x="5.5992%" y="149" width="0.0904%" height="15" fill="rgb(248,157,27)" fg:x="4706" fg:w="76"/><text x="5.8922%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="5.6896%" y="149" width="0.0178%" height="15" fill="rgb(240,127,49)" fg:x="4782" fg:w="15"/><text x="5.9826%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="5.7075%" y="149" width="0.0178%" height="15" fill="rgb(237,106,13)" fg:x="4797" fg:w="15"/><text x="6.0004%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="5.7253%" y="149" width="0.0178%" height="15" fill="rgb(216,194,11)" fg:x="4812" fg:w="15"/><text x="6.0183%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (158 instructions, 0.19%)</title><rect x="5.7503%" y="133" width="0.1880%" height="15" fill="rgb(217,123,0)" fg:x="4833" fg:w="158"/><text x="6.0433%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (254 instructions, 0.30%)</title><rect x="5.7503%" y="149" width="0.3022%" height="15" fill="rgb(215,13,9)" fg:x="4833" fg:w="254"/><text x="6.0433%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="6.0525%" y="117" width="0.0976%" height="15" fill="rgb(229,19,24)" fg:x="5087" fg:w="82"/><text x="6.3455%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.15%)</title><rect x="6.0525%" y="133" width="0.1547%" height="15" fill="rgb(249,178,42)" fg:x="5087" fg:w="130"/><text x="6.3455%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 0.26%)</title><rect x="6.0525%" y="149" width="0.2558%" height="15" fill="rgb(238,128,19)" fg:x="5087" fg:w="215"/><text x="6.3455%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="6.3083%" y="149" width="0.0976%" height="15" fill="rgb(229,135,37)" fg:x="5302" fg:w="82"/><text x="6.6013%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.11%)</title><rect x="6.4059%" y="149" width="0.1059%" height="15" fill="rgb(229,31,25)" fg:x="5384" fg:w="89"/><text x="6.6988%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="6.5118%" y="149" width="0.0976%" height="15" fill="rgb(240,20,5)" fg:x="5473" fg:w="82"/><text x="6.8047%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="6.6093%" y="149" width="0.0976%" height="15" fill="rgb(242,163,39)" fg:x="5555" fg:w="82"/><text x="6.9023%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.11%)</title><rect x="6.7116%" y="149" width="0.1059%" height="15" fill="rgb(229,176,43)" fg:x="5641" fg:w="89"/><text x="7.0046%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.47%)</title><rect x="6.8175%" y="149" width="0.4664%" height="15" fill="rgb(243,55,44)" fg:x="5730" fg:w="392"/><text x="7.1105%" y="159.50"></text></g><g><title>memcpy (392 instructions, 0.47%)</title><rect x="7.2839%" y="149" width="0.4664%" height="15" fill="rgb(241,16,8)" fg:x="6122" fg:w="392"/><text x="7.5769%" y="159.50"></text></g><g><title>memcpy (504 instructions, 0.60%)</title><rect x="7.7503%" y="149" width="0.5997%" height="15" fill="rgb(219,26,44)" fg:x="6514" fg:w="504"/><text x="8.0433%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,930 instructions, 9.44%)</title><rect x="0.3593%" y="165" width="9.4351%" height="15" fill="rgb(220,228,29)" fg:x="302" fg:w="7930"/><text x="0.6523%" y="175.50">candid::de:..</text></g><g><title>memcpy (344 instructions, 0.41%)</title><rect x="9.7944%" y="165" width="0.4093%" height="15" fill="rgb(227,126,6)" fg:x="8232" fg:w="344"/><text x="10.0874%" y="175.50"></text></g><g><title>candid::types::internal::find_type (23 instructions, 0.03%)</title><rect x="10.2037%" y="165" width="0.0274%" height="15" fill="rgb(208,117,53)" fg:x="8576" fg:w="23"/><text x="10.4967%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="10.2311%" y="165" width="0.0976%" height="15" fill="rgb(211,143,49)" fg:x="8599" fg:w="82"/><text x="10.5240%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.11%)</title><rect x="10.3286%" y="149" width="0.1083%" height="15" fill="rgb(237,201,49)" fg:x="8681" fg:w="91"/><text x="10.6216%" y="159.50"></text></g><g><title>candid::types::internal::env_add (174 instructions, 0.21%)</title><rect x="10.3286%" y="165" width="0.2070%" height="15" fill="rgb(206,112,38)" fg:x="8681" fg:w="174"/><text x="10.6216%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="10.5356%" y="165" width="0.0976%" height="15" fill="rgb(212,162,36)" fg:x="8855" fg:w="82"/><text x="10.8286%" y="175.50"></text></g><g><title>memcmp (77 instructions, 0.09%)</title><rect x="10.6332%" y="149" width="0.0916%" height="15" fill="rgb(236,108,49)" fg:x="8937" fg:w="77"/><text x="10.9262%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.11%)</title><rect x="10.7248%" y="133" width="0.1059%" height="15" fill="rgb(217,64,17)" fg:x="9014" fg:w="89"/><text x="11.0178%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.16%)</title><rect x="10.7248%" y="149" width="0.1582%" height="15" fill="rgb(207,118,25)" fg:x="9014" fg:w="133"/><text x="11.0178%" y="159.50"></text></g><g><title>candid::types::internal::env_add (382 instructions, 0.45%)</title><rect x="10.6332%" y="165" width="0.4545%" height="15" fill="rgb(249,107,49)" fg:x="8937" fg:w="382"/><text x="10.9262%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (51 instructions, 0.06%)</title><rect x="11.0877%" y="149" width="0.0607%" height="15" fill="rgb(214,141,9)" fg:x="9319" fg:w="51"/><text x="11.3807%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="11.1484%" y="149" width="0.0155%" height="15" fill="rgb(219,220,28)" fg:x="9370" fg:w="13"/><text x="11.4414%" y="159.50"></text></g><g><title>candid::types::internal::env_id (198 instructions, 0.24%)</title><rect x="11.0877%" y="165" width="0.2356%" height="15" fill="rgb(221,156,30)" fg:x="9319" fg:w="198"/><text x="11.3807%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.06%)</title><rect x="11.3233%" y="165" width="0.0583%" height="15" fill="rgb(247,20,40)" fg:x="9517" fg:w="49"/><text x="11.6163%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.10%)</title><rect x="11.3816%" y="149" width="0.0988%" height="15" fill="rgb(237,84,36)" fg:x="9566" fg:w="83"/><text x="11.6746%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.03%)</title><rect x="11.5327%" y="133" width="0.0274%" height="15" fill="rgb(239,71,6)" fg:x="9693" fg:w="23"/><text x="11.8257%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.16%)</title><rect x="11.5327%" y="149" width="0.1642%" height="15" fill="rgb(247,226,28)" fg:x="9693" fg:w="138"/><text x="11.8257%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 instructions, 0.37%)</title><rect x="11.3816%" y="165" width="0.3676%" height="15" fill="rgb(216,187,49)" fg:x="9566" fg:w="309"/><text x="11.6746%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.04%)</title><rect x="11.7492%" y="149" width="0.0416%" height="15" fill="rgb(229,141,18)" fg:x="9875" fg:w="35"/><text x="12.0422%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (34 instructions, 0.04%)</title><rect x="11.7909%" y="149" width="0.0405%" height="15" fill="rgb(244,112,39)" fg:x="9910" fg:w="34"/><text x="12.0839%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (34 instructions, 0.04%)</title><rect x="11.8313%" y="149" width="0.0405%" height="15" fill="rgb(236,174,16)" fg:x="9944" fg:w="34"/><text x="12.1243%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.04%)</title><rect x="11.8718%" y="149" width="0.0393%" height="15" fill="rgb(231,46,33)" fg:x="9978" fg:w="33"/><text x="12.1648%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 0.30%)</title><rect x="11.7492%" y="165" width="0.2974%" height="15" fill="rgb(236,192,25)" fg:x="9875" fg:w="250"/><text x="12.0422%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.0467%" y="165" width="0.0155%" height="15" fill="rgb(244,17,0)" fg:x="10125" fg:w="13"/><text x="12.3397%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.0622%" y="165" width="0.0155%" height="15" fill="rgb(245,79,27)" fg:x="10138" fg:w="13"/><text x="12.3551%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.0776%" y="165" width="0.0155%" height="15" fill="rgb(249,169,51)" fg:x="10151" fg:w="13"/><text x="12.3706%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.05%)</title><rect x="12.0931%" y="165" width="0.0512%" height="15" fill="rgb(225,112,33)" fg:x="10164" fg:w="43"/><text x="12.3861%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="12.1526%" y="133" width="0.0321%" height="15" fill="rgb(226,46,31)" fg:x="10214" fg:w="27"/><text x="12.4455%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.17%)</title><rect x="12.1526%" y="149" width="0.1690%" height="15" fill="rgb(205,107,31)" fg:x="10214" fg:w="142"/><text x="12.4455%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="12.3215%" y="117" width="0.0321%" height="15" fill="rgb(253,203,54)" fg:x="10356" fg:w="27"/><text x="12.6145%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.17%)</title><rect x="12.3215%" y="133" width="0.1690%" height="15" fill="rgb(227,119,41)" fg:x="10356" fg:w="142"/><text x="12.6145%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 0.22%)</title><rect x="12.3215%" y="149" width="0.2213%" height="15" fill="rgb(215,9,46)" fg:x="10356" fg:w="186"/><text x="12.6145%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.02%)</title><rect x="12.5428%" y="149" width="0.0155%" height="15" fill="rgb(249,33,44)" fg:x="10542" fg:w="13"/><text x="12.8358%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (415 instructions, 0.49%)</title><rect x="12.1443%" y="165" width="0.4938%" height="15" fill="rgb(242,47,9)" fg:x="10207" fg:w="415"/><text x="12.4372%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="12.6380%" y="149" width="0.0321%" height="15" fill="rgb(205,120,28)" fg:x="10622" fg:w="27"/><text x="12.9310%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (136 instructions, 0.16%)</title><rect x="12.6380%" y="165" width="0.1618%" height="15" fill="rgb(243,6,32)" fg:x="10622" fg:w="136"/><text x="12.9310%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,141 instructions, 14.45%)</title><rect x="0.2213%" y="181" width="14.4453%" height="15" fill="rgb(235,30,4)" fg:x="186" fg:w="12141"/><text x="0.5143%" y="191.50">ic_cdk::api::call:..</text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="14.6666%" y="165" width="0.3807%" height="15" fill="rgb(238,222,2)" fg:x="12327" fg:w="320"/><text x="14.9596%" y="175.50"></text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="15.0474%" y="165" width="0.3807%" height="15" fill="rgb(233,46,19)" fg:x="12647" fg:w="320"/><text x="15.3403%" y="175.50"></text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="15.5566%" y="165" width="0.3807%" height="15" fill="rgb(252,95,35)" fg:x="13075" fg:w="320"/><text x="15.8496%" y="175.50"></text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="15.9373%" y="165" width="0.3807%" height="15" fill="rgb(217,218,50)" fg:x="13395" fg:w="320"/><text x="16.2303%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="16.4466%" y="165" width="0.0274%" height="15" fill="rgb(226,223,34)" fg:x="13823" fg:w="23"/><text x="16.7395%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="16.4739%" y="165" width="0.0274%" height="15" fill="rgb(243,73,46)" fg:x="13846" fg:w="23"/><text x="16.7669%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="16.5013%" y="149" width="0.0274%" height="15" fill="rgb(208,133,52)" fg:x="13869" fg:w="23"/><text x="16.7943%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="16.5287%" y="149" width="0.2189%" height="15" fill="rgb(248,181,3)" fg:x="13892" fg:w="184"/><text x="16.8216%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="16.7476%" y="149" width="0.0274%" height="15" fill="rgb(229,159,42)" fg:x="14076" fg:w="23"/><text x="17.0405%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="16.7749%" y="149" width="0.2189%" height="15" fill="rgb(218,174,28)" fg:x="14099" fg:w="184"/><text x="17.0679%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="16.9939%" y="149" width="0.0274%" height="15" fill="rgb(212,178,0)" fg:x="14283" fg:w="23"/><text x="17.2868%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.11%)</title><rect x="17.0212%" y="149" width="0.1059%" height="15" fill="rgb(251,23,17)" fg:x="14306" fg:w="89"/><text x="17.3142%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (737 instructions, 0.88%)</title><rect x="16.5013%" y="165" width="0.8769%" height="15" fill="rgb(209,131,30)" fg:x="13869" fg:w="737"/><text x="16.7943%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="17.6233%" y="165" width="0.1904%" height="15" fill="rgb(210,133,7)" fg:x="14812" fg:w="160"/><text x="17.9162%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="17.8136%" y="165" width="0.1904%" height="15" fill="rgb(240,132,28)" fg:x="14972" fg:w="160"/><text x="18.1066%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="18.1325%" y="165" width="0.0274%" height="15" fill="rgb(225,157,15)" fg:x="15240" fg:w="23"/><text x="18.4255%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="18.1599%" y="165" width="0.0274%" height="15" fill="rgb(209,115,39)" fg:x="15263" fg:w="23"/><text x="18.4528%" y="175.50"></text></g><g><title>memmove (205 instructions, 0.24%)</title><rect x="18.1872%" y="149" width="0.2439%" height="15" fill="rgb(215,180,0)" fg:x="15286" fg:w="205"/><text x="18.4802%" y="159.50"></text></g><g><title>memmove (205 instructions, 0.24%)</title><rect x="18.4311%" y="149" width="0.2439%" height="15" fill="rgb(207,95,38)" fg:x="15491" fg:w="205"/><text x="18.7241%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="18.6750%" y="149" width="0.0178%" height="15" fill="rgb(249,167,21)" fg:x="15696" fg:w="15"/><text x="18.9680%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="18.6929%" y="149" width="0.0178%" height="15" fill="rgb(252,25,25)" fg:x="15711" fg:w="15"/><text x="18.9859%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_left (606 instructions, 0.72%)</title><rect x="18.1872%" y="165" width="0.7210%" height="15" fill="rgb(252,25,40)" fg:x="15286" fg:w="606"/><text x="18.4802%" y="175.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="19.1593%" y="165" width="0.1523%" height="15" fill="rgb(206,134,19)" fg:x="16103" fg:w="128"/><text x="19.4523%" y="175.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="19.3116%" y="165" width="0.1523%" height="15" fill="rgb(207,43,42)" fg:x="16231" fg:w="128"/><text x="19.6046%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="19.5924%" y="165" width="0.0274%" height="15" fill="rgb(210,91,24)" fg:x="16467" fg:w="23"/><text x="19.8853%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="19.6197%" y="165" width="0.0274%" height="15" fill="rgb(218,115,24)" fg:x="16490" fg:w="23"/><text x="19.9127%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="19.7756%" y="165" width="0.1904%" height="15" fill="rgb(244,124,12)" fg:x="16621" fg:w="160"/><text x="20.0686%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="19.9660%" y="165" width="0.1904%" height="15" fill="rgb(235,61,24)" fg:x="16781" fg:w="160"/><text x="20.2589%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.2848%" y="165" width="0.0274%" height="15" fill="rgb(226,200,33)" fg:x="17049" fg:w="23"/><text x="20.5778%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.3122%" y="165" width="0.0274%" height="15" fill="rgb(221,183,26)" fg:x="17072" fg:w="23"/><text x="20.6052%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.4681%" y="165" width="0.0274%" height="15" fill="rgb(219,209,9)" fg:x="17203" fg:w="23"/><text x="20.7610%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.4954%" y="165" width="0.0274%" height="15" fill="rgb(205,189,4)" fg:x="17226" fg:w="23"/><text x="20.7884%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.6513%" y="165" width="0.0274%" height="15" fill="rgb(219,35,52)" fg:x="17357" fg:w="23"/><text x="20.9443%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.6787%" y="165" width="0.0274%" height="15" fill="rgb(253,98,49)" fg:x="17380" fg:w="23"/><text x="20.9716%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="20.8345%" y="165" width="0.2284%" height="15" fill="rgb(228,111,33)" fg:x="17511" fg:w="192"/><text x="21.1275%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="21.0630%" y="165" width="0.2284%" height="15" fill="rgb(230,43,51)" fg:x="17703" fg:w="192"/><text x="21.3559%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="21.4199%" y="165" width="0.3046%" height="15" fill="rgb(205,106,51)" fg:x="18003" fg:w="256"/><text x="21.7129%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="21.7245%" y="165" width="0.3046%" height="15" fill="rgb(229,169,15)" fg:x="18259" fg:w="256"/><text x="22.0175%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="22.1576%" y="165" width="0.0274%" height="15" fill="rgb(220,162,26)" fg:x="18623" fg:w="23"/><text x="22.4505%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="22.1849%" y="165" width="0.0274%" height="15" fill="rgb(215,12,20)" fg:x="18646" fg:w="23"/><text x="22.4779%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.19%)</title><rect x="22.3408%" y="165" width="0.1868%" height="15" fill="rgb(222,224,47)" fg:x="18777" fg:w="157"/><text x="22.6338%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.19%)</title><rect x="22.5276%" y="165" width="0.1868%" height="15" fill="rgb(206,23,5)" fg:x="18934" fg:w="157"/><text x="22.8206%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="22.8429%" y="165" width="0.1904%" height="15" fill="rgb(246,93,7)" fg:x="19199" fg:w="160"/><text x="23.1359%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="23.0333%" y="165" width="0.1904%" height="15" fill="rgb(248,39,47)" fg:x="19359" fg:w="160"/><text x="23.3262%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="23.3521%" y="165" width="0.0274%" height="15" fill="rgb(205,73,19)" fg:x="19627" fg:w="23"/><text x="23.6451%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="23.3795%" y="165" width="0.0274%" height="15" fill="rgb(250,53,20)" fg:x="19650" fg:w="23"/><text x="23.6725%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="23.5354%" y="165" width="0.2284%" height="15" fill="rgb(222,179,40)" fg:x="19781" fg:w="192"/><text x="23.8283%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="23.7638%" y="165" width="0.2284%" height="15" fill="rgb(229,66,8)" fg:x="19973" fg:w="192"/><text x="24.0568%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="24.1207%" y="165" width="0.0274%" height="15" fill="rgb(224,208,19)" fg:x="20273" fg:w="23"/><text x="24.4137%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="24.1481%" y="165" width="0.0274%" height="15" fill="rgb(225,133,6)" fg:x="20296" fg:w="23"/><text x="24.4411%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.27%)</title><rect x="24.3040%" y="165" width="0.2665%" height="15" fill="rgb(231,55,27)" fg:x="20427" fg:w="224"/><text x="24.5969%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.27%)</title><rect x="24.5705%" y="165" width="0.2665%" height="15" fill="rgb(226,131,18)" fg:x="20651" fg:w="224"/><text x="24.8635%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="24.9655%" y="165" width="0.0274%" height="15" fill="rgb(242,94,37)" fg:x="20983" fg:w="23"/><text x="25.2585%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="24.9929%" y="165" width="0.0274%" height="15" fill="rgb(233,207,44)" fg:x="21006" fg:w="23"/><text x="25.2858%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.1487%" y="165" width="0.0274%" height="15" fill="rgb(234,27,23)" fg:x="21137" fg:w="23"/><text x="25.4417%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.1761%" y="165" width="0.0274%" height="15" fill="rgb(253,9,25)" fg:x="21160" fg:w="23"/><text x="25.4691%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.3320%" y="165" width="0.0274%" height="15" fill="rgb(218,30,43)" fg:x="21291" fg:w="23"/><text x="25.6249%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.3593%" y="165" width="0.0274%" height="15" fill="rgb(234,163,35)" fg:x="21314" fg:w="23"/><text x="25.6523%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.5152%" y="165" width="0.0274%" height="15" fill="rgb(224,224,29)" fg:x="21445" fg:w="23"/><text x="25.8082%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.5425%" y="165" width="0.0274%" height="15" fill="rgb(239,24,54)" fg:x="21468" fg:w="23"/><text x="25.8355%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.6984%" y="165" width="0.0274%" height="15" fill="rgb(210,137,0)" fg:x="21599" fg:w="23"/><text x="25.9914%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.7258%" y="165" width="0.0274%" height="15" fill="rgb(216,180,0)" fg:x="21622" fg:w="23"/><text x="26.0187%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.8816%" y="165" width="0.0274%" height="15" fill="rgb(244,130,18)" fg:x="21753" fg:w="23"/><text x="26.1746%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.9090%" y="165" width="0.0274%" height="15" fill="rgb(219,6,22)" fg:x="21776" fg:w="23"/><text x="26.2020%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.0649%" y="165" width="0.0274%" height="15" fill="rgb(216,205,49)" fg:x="21907" fg:w="23"/><text x="26.3578%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.0922%" y="165" width="0.0274%" height="15" fill="rgb(241,25,26)" fg:x="21930" fg:w="23"/><text x="26.3852%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.1196%" y="149" width="0.0274%" height="15" fill="rgb(221,170,43)" fg:x="21953" fg:w="23"/><text x="26.4126%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="26.1470%" y="149" width="0.2189%" height="15" fill="rgb(228,162,24)" fg:x="21976" fg:w="184"/><text x="26.4399%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.3659%" y="149" width="0.0274%" height="15" fill="rgb(236,87,32)" fg:x="22160" fg:w="23"/><text x="26.6589%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="26.3933%" y="149" width="0.2189%" height="15" fill="rgb(251,132,26)" fg:x="22183" fg:w="184"/><text x="26.6862%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.6122%" y="149" width="0.0274%" height="15" fill="rgb(253,38,47)" fg:x="22367" fg:w="23"/><text x="26.9051%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.10%)</title><rect x="26.6395%" y="149" width="0.0988%" height="15" fill="rgb(211,25,25)" fg:x="22390" fg:w="83"/><text x="26.9325%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (731 instructions, 0.87%)</title><rect x="26.1196%" y="165" width="0.8697%" height="15" fill="rgb(246,198,6)" fg:x="21953" fg:w="731"/><text x="26.4126%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.9893%" y="149" width="0.0274%" height="15" fill="rgb(251,119,37)" fg:x="22684" fg:w="23"/><text x="27.2823%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="27.0167%" y="149" width="0.2189%" height="15" fill="rgb(234,24,4)" fg:x="22707" fg:w="184"/><text x="27.3097%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.2356%" y="149" width="0.0274%" height="15" fill="rgb(228,79,10)" fg:x="22891" fg:w="23"/><text x="27.5286%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="27.2630%" y="149" width="0.2189%" height="15" fill="rgb(212,15,11)" fg:x="22914" fg:w="184"/><text x="27.5560%" y="159.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.4819%" y="149" width="0.0274%" height="15" fill="rgb(234,178,13)" fg:x="23098" fg:w="23"/><text x="27.7749%" y="159.50"></text></g><g><title>memcpy (136 instructions, 0.16%)</title><rect x="27.5093%" y="149" width="0.1618%" height="15" fill="rgb(221,127,8)" fg:x="23121" fg:w="136"/><text x="27.8022%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.03%)</title><rect x="27.6711%" y="133" width="0.0274%" height="15" fill="rgb(208,32,36)" fg:x="23257" fg:w="23"/><text x="27.9641%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.08%)</title><rect x="27.6985%" y="133" width="0.0809%" height="15" fill="rgb(218,147,46)" fg:x="23280" fg:w="68"/><text x="27.9914%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (187 instructions, 0.22%)</title><rect x="27.6711%" y="149" width="0.2225%" height="15" fill="rgb(217,189,34)" fg:x="23257" fg:w="187"/><text x="27.9641%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (1,077 instructions, 1.28%)</title><rect x="26.9893%" y="165" width="1.2814%" height="15" fill="rgb(254,187,30)" fg:x="22684" fg:w="1077"/><text x="27.2823%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="28.6134%" y="165" width="0.0274%" height="15" fill="rgb(246,218,16)" fg:x="24049" fg:w="23"/><text x="28.9064%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="28.6408%" y="165" width="0.0274%" height="15" fill="rgb(247,205,35)" fg:x="24072" fg:w="23"/><text x="28.9337%" y="175.50"></text></g><g><title>memmove (288 instructions, 0.34%)</title><rect x="28.7966%" y="165" width="0.3427%" height="15" fill="rgb(222,181,13)" fg:x="24203" fg:w="288"/><text x="29.0896%" y="175.50"></text></g><g><title>memmove (288 instructions, 0.34%)</title><rect x="29.1393%" y="165" width="0.3427%" height="15" fill="rgb(235,198,2)" fg:x="24491" fg:w="288"/><text x="29.4323%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="29.6105%" y="165" width="0.0274%" height="15" fill="rgb(229,49,41)" fg:x="24887" fg:w="23"/><text x="29.9034%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="29.6378%" y="165" width="0.0274%" height="15" fill="rgb(209,68,51)" fg:x="24910" fg:w="23"/><text x="29.9308%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="29.7937%" y="165" width="0.1904%" height="15" fill="rgb(231,28,12)" fg:x="25041" fg:w="160"/><text x="30.0867%" y="175.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="29.9841%" y="165" width="0.1904%" height="15" fill="rgb(249,214,22)" fg:x="25201" fg:w="160"/><text x="30.2770%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="30.1744%" y="149" width="0.2284%" height="15" fill="rgb(254,140,40)" fg:x="25361" fg:w="192"/><text x="30.4674%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="30.4029%" y="149" width="0.2189%" height="15" fill="rgb(253,178,28)" fg:x="25553" fg:w="184"/><text x="30.6958%" y="159.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="30.6218%" y="149" width="0.2284%" height="15" fill="rgb(247,93,23)" fg:x="25737" fg:w="192"/><text x="30.9148%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="30.8502%" y="149" width="0.2189%" height="15" fill="rgb(216,129,53)" fg:x="25929" fg:w="184"/><text x="31.1432%" y="159.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="31.0692%" y="149" width="0.1523%" height="15" fill="rgb(250,30,48)" fg:x="26113" fg:w="128"/><text x="31.3621%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.10%)</title><rect x="31.2214%" y="149" width="0.0988%" height="15" fill="rgb(244,100,37)" fg:x="26241" fg:w="83"/><text x="31.5144%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,253 instructions, 1.49%)</title><rect x="30.1744%" y="165" width="1.4908%" height="15" fill="rgb(238,122,20)" fg:x="25361" fg:w="1253"/><text x="30.4674%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="31.9103%" y="165" width="0.0274%" height="15" fill="rgb(253,173,31)" fg:x="26820" fg:w="23"/><text x="32.2033%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="31.9377%" y="165" width="0.0274%" height="15" fill="rgb(224,59,5)" fg:x="26843" fg:w="23"/><text x="32.2307%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.0936%" y="165" width="0.0274%" height="15" fill="rgb(253,112,24)" fg:x="26974" fg:w="23"/><text x="32.3865%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.1209%" y="165" width="0.0274%" height="15" fill="rgb(244,96,50)" fg:x="26997" fg:w="23"/><text x="32.4139%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.27%)</title><rect x="32.2768%" y="165" width="0.2665%" height="15" fill="rgb(215,49,51)" fg:x="27128" fg:w="224"/><text x="32.5698%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.27%)</title><rect x="32.5433%" y="165" width="0.2665%" height="15" fill="rgb(206,163,43)" fg:x="27352" fg:w="224"/><text x="32.8363%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.9383%" y="165" width="0.0274%" height="15" fill="rgb(218,165,34)" fg:x="27684" fg:w="23"/><text x="33.2313%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.9657%" y="165" width="0.0274%" height="15" fill="rgb(236,77,15)" fg:x="27707" fg:w="23"/><text x="33.2587%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.1215%" y="165" width="0.0274%" height="15" fill="rgb(217,158,47)" fg:x="27838" fg:w="23"/><text x="33.4145%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.1489%" y="165" width="0.0274%" height="15" fill="rgb(224,57,31)" fg:x="27861" fg:w="23"/><text x="33.4419%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.27%)</title><rect x="33.3048%" y="165" width="0.2665%" height="15" fill="rgb(215,62,28)" fg:x="27992" fg:w="224"/><text x="33.5977%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.27%)</title><rect x="33.5713%" y="165" width="0.2665%" height="15" fill="rgb(227,21,13)" fg:x="28216" fg:w="224"/><text x="33.8643%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.9663%" y="165" width="0.0274%" height="15" fill="rgb(210,69,21)" fg:x="28548" fg:w="23"/><text x="34.2593%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.9937%" y="165" width="0.0274%" height="15" fill="rgb(213,11,48)" fg:x="28571" fg:w="23"/><text x="34.2866%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="34.1495%" y="165" width="0.2284%" height="15" fill="rgb(223,192,40)" fg:x="28702" fg:w="192"/><text x="34.4425%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="34.3780%" y="165" width="0.2284%" height="15" fill="rgb(238,32,39)" fg:x="28894" fg:w="192"/><text x="34.6709%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="34.7349%" y="165" width="0.3046%" height="15" fill="rgb(246,215,13)" fg:x="29194" fg:w="256"/><text x="35.0279%" y="175.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="35.0395%" y="165" width="0.3046%" height="15" fill="rgb(237,203,50)" fg:x="29450" fg:w="256"/><text x="35.3325%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="35.4726%" y="165" width="0.2284%" height="15" fill="rgb(253,79,53)" fg:x="29814" fg:w="192"/><text x="35.7656%" y="175.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="35.7010%" y="165" width="0.2284%" height="15" fill="rgb(249,11,7)" fg:x="30006" fg:w="192"/><text x="35.9940%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="36.0580%" y="165" width="0.0274%" height="15" fill="rgb(215,76,42)" fg:x="30306" fg:w="23"/><text x="36.3509%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="36.0853%" y="165" width="0.0274%" height="15" fill="rgb(207,211,36)" fg:x="30329" fg:w="23"/><text x="36.3783%" y="175.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="36.1127%" y="149" width="0.1523%" height="15" fill="rgb(226,201,25)" fg:x="30352" fg:w="128"/><text x="36.4057%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="36.2650%" y="149" width="0.2189%" height="15" fill="rgb(227,110,38)" fg:x="30480" fg:w="184"/><text x="36.5580%" y="159.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="36.4839%" y="149" width="0.1523%" height="15" fill="rgb(238,70,54)" fg:x="30664" fg:w="128"/><text x="36.7769%" y="159.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="36.6362%" y="149" width="0.2189%" height="15" fill="rgb(205,113,52)" fg:x="30792" fg:w="184"/><text x="36.9292%" y="159.50"></text></g><g><title>memmove (157 instructions, 0.19%)</title><rect x="36.8551%" y="149" width="0.1868%" height="15" fill="rgb(215,30,37)" fg:x="30976" fg:w="157"/><text x="37.1481%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.10%)</title><rect x="37.0419%" y="149" width="0.0988%" height="15" fill="rgb(252,168,17)" fg:x="31133" fg:w="83"/><text x="37.3349%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,142 instructions, 1.36%)</title><rect x="36.1127%" y="165" width="1.3587%" height="15" fill="rgb(230,179,35)" fg:x="30352" fg:w="1142"/><text x="36.4057%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="37.7165%" y="165" width="0.0274%" height="15" fill="rgb(251,195,40)" fg:x="31700" fg:w="23"/><text x="38.0095%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="37.7439%" y="165" width="0.0274%" height="15" fill="rgb(221,21,31)" fg:x="31723" fg:w="23"/><text x="38.0369%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="37.8998%" y="165" width="0.0274%" height="15" fill="rgb(235,212,17)" fg:x="31854" fg:w="23"/><text x="38.1927%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="37.9271%" y="165" width="0.0274%" height="15" fill="rgb(247,165,4)" fg:x="31877" fg:w="23"/><text x="38.2201%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.19%)</title><rect x="38.0830%" y="165" width="0.1868%" height="15" fill="rgb(222,48,9)" fg:x="32008" fg:w="157"/><text x="38.3760%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.19%)</title><rect x="38.2698%" y="165" width="0.1868%" height="15" fill="rgb(242,84,36)" fg:x="32165" fg:w="157"/><text x="38.5628%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.5851%" y="165" width="0.0274%" height="15" fill="rgb(209,12,51)" fg:x="32430" fg:w="23"/><text x="38.8781%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.6125%" y="165" width="0.0274%" height="15" fill="rgb(244,161,32)" fg:x="32453" fg:w="23"/><text x="38.9054%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.7683%" y="165" width="0.0274%" height="15" fill="rgb(243,182,16)" fg:x="32584" fg:w="23"/><text x="39.0613%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.7957%" y="165" width="0.0274%" height="15" fill="rgb(247,45,4)" fg:x="32607" fg:w="23"/><text x="39.0887%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.27%)</title><rect x="38.9516%" y="165" width="0.2665%" height="15" fill="rgb(226,176,25)" fg:x="32738" fg:w="224"/><text x="39.2445%" y="175.50"></text></g><g><title>memmove (224 instructions, 0.27%)</title><rect x="39.2181%" y="165" width="0.2665%" height="15" fill="rgb(233,218,31)" fg:x="32962" fg:w="224"/><text x="39.5110%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.6131%" y="165" width="0.0274%" height="15" fill="rgb(236,58,49)" fg:x="33294" fg:w="23"/><text x="39.9060%" y="175.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.6404%" y="165" width="0.0274%" height="15" fill="rgb(209,85,32)" fg:x="33317" fg:w="23"/><text x="39.9334%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.19%)</title><rect x="39.7963%" y="165" width="0.1868%" height="15" fill="rgb(248,123,2)" fg:x="33448" fg:w="157"/><text x="40.0893%" y="175.50"></text></g><g><title>memmove (157 instructions, 0.19%)</title><rect x="39.9831%" y="165" width="0.1868%" height="15" fill="rgb(236,89,52)" fg:x="33605" fg:w="157"/><text x="40.2761%" y="175.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (21,543 instructions, 25.63%)</title><rect x="14.6666%" y="181" width="25.6318%" height="15" fill="rgb(235,103,42)" fg:x="12327" fg:w="21543"/><text x="14.9596%" y="191.50">alloc::collections::btree::remove::..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="40.2984%" y="117" width="0.0321%" height="15" fill="rgb(229,91,45)" fg:x="33870" fg:w="27"/><text x="40.5914%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (115 instructions, 0.14%)</title><rect x="40.2984%" y="133" width="0.1368%" height="15" fill="rgb(210,45,21)" fg:x="33870" fg:w="115"/><text x="40.5914%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (159 instructions, 0.19%)</title><rect x="40.2984%" y="149" width="0.1892%" height="15" fill="rgb(235,168,5)" fg:x="33870" fg:w="159"/><text x="40.5914%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (63 instructions, 0.07%)</title><rect x="40.4876%" y="149" width="0.0750%" height="15" fill="rgb(250,90,32)" fg:x="34029" fg:w="63"/><text x="40.7805%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (346 instructions, 0.41%)</title><rect x="40.2984%" y="165" width="0.4117%" height="15" fill="rgb(248,101,15)" fg:x="33870" fg:w="346"/><text x="40.5914%" y="175.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (518 instructions, 0.62%)</title><rect x="40.7101%" y="149" width="0.6163%" height="15" fill="rgb(234,199,15)" fg:x="34216" fg:w="518"/><text x="41.0030%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="41.3264%" y="101" width="0.0976%" height="15" fill="rgb(252,121,28)" fg:x="34734" fg:w="82"/><text x="41.6194%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.15%)</title><rect x="41.3264%" y="117" width="0.1547%" height="15" fill="rgb(207,203,33)" fg:x="34734" fg:w="130"/><text x="41.6194%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 0.25%)</title><rect x="41.3264%" y="133" width="0.2522%" height="15" fill="rgb(217,27,10)" fg:x="34734" fg:w="212"/><text x="41.6194%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="41.5786%" y="133" width="0.0178%" height="15" fill="rgb(239,214,12)" fg:x="34946" fg:w="15"/><text x="41.8716%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="41.5965%" y="133" width="0.0178%" height="15" fill="rgb(245,84,21)" fg:x="34961" fg:w="15"/><text x="41.8894%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 0.51%)</title><rect x="41.3264%" y="149" width="0.5092%" height="15" fill="rgb(235,175,47)" fg:x="34734" fg:w="428"/><text x="41.6194%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (516 instructions, 0.61%)</title><rect x="41.8356%" y="149" width="0.6139%" height="15" fill="rgb(220,111,44)" fg:x="35162" fg:w="516"/><text x="42.1286%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,566 instructions, 1.86%)</title><rect x="40.7101%" y="165" width="1.8632%" height="15" fill="rgb(220,217,8)" fg:x="34216" fg:w="1566"/><text x="41.0030%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.07%)</title><rect x="42.5899%" y="165" width="0.0714%" height="15" fill="rgb(214,84,54)" fg:x="35796" fg:w="60"/><text x="42.8829%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,588 instructions, 3.08%)</title><rect x="40.2984%" y="181" width="3.0792%" height="15" fill="rgb(252,28,9)" fg:x="33870" fg:w="2588"/><text x="40.5914%" y="191.50">ic..</text></g><g><title>btreemap::__canister_method_batch_remove::{{closure}} (83,476 instructions, 99.32%)</title><rect x="0.2213%" y="197" width="99.3194%" height="15" fill="rgb(235,116,40)" fg:x="186" fg:w="83476"/><text x="0.5143%" y="207.50">btreemap::__canister_method_batch_remove::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.02%)</title><rect x="99.5407%" y="197" width="0.0167%" height="15" fill="rgb(223,179,34)" fg:x="83662" fg:w="14"/><text x="99.8337%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="99.6645%" y="181" width="0.0321%" height="15" fill="rgb(243,35,52)" fg:x="83766" fg:w="27"/><text x="99.9574%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (227 instructions, 0.27%)</title><rect x="99.5586%" y="197" width="0.2701%" height="15" fill="rgb(218,20,36)" fg:x="83677" fg:w="227"/><text x="99.8516%" y="207.50"></text></g><g><title>all (84,048 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(251,219,52)" fg:x="0" fg:w="84048"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (84,048 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,89,24)" fg:x="0" fg:w="84048"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>