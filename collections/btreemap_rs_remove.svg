<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="81308"><g><title>ic_cdk::setup (19 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0234%" height="15" fill="rgb(211,192,50)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="0.0234%" y="197" width="0.0935%" height="15" fill="rgb(223,170,45)" fg:x="19" fg:w="76"/><text x="0.3163%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="0.1168%" y="197" width="0.0935%" height="15" fill="rgb(219,135,45)" fg:x="95" fg:w="76"/><text x="0.4098%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="0.2103%" y="165" width="0.0935%" height="15" fill="rgb(224,60,45)" fg:x="171" fg:w="76"/><text x="0.5033%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.08%)</title><rect x="0.3038%" y="149" width="0.0849%" height="15" fill="rgb(243,27,38)" fg:x="247" fg:w="69"/><text x="0.5968%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.50%)</title><rect x="0.3886%" y="149" width="0.4993%" height="15" fill="rgb(228,24,38)" fg:x="316" fg:w="406"/><text x="0.6816%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.10%)</title><rect x="0.8880%" y="149" width="0.1009%" height="15" fill="rgb(223,204,21)" fg:x="722" fg:w="82"/><text x="1.1810%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="0.9888%" y="149" width="0.0664%" height="15" fill="rgb(210,102,9)" fg:x="804" fg:w="54"/><text x="1.2818%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.0552%" y="149" width="0.0664%" height="15" fill="rgb(217,73,1)" fg:x="858" fg:w="54"/><text x="1.3482%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.1217%" y="149" width="0.0664%" height="15" fill="rgb(211,18,46)" fg:x="912" fg:w="54"/><text x="1.4146%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.07%)</title><rect x="1.1881%" y="149" width="0.0664%" height="15" fill="rgb(247,126,23)" fg:x="966" fg:w="54"/><text x="1.4810%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.08%)</title><rect x="1.2545%" y="149" width="0.0849%" height="15" fill="rgb(235,46,19)" fg:x="1020" fg:w="69"/><text x="1.5475%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.08%)</title><rect x="1.3394%" y="149" width="0.0799%" height="15" fill="rgb(243,15,47)" fg:x="1089" fg:w="65"/><text x="1.6323%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.50%)</title><rect x="1.4193%" y="149" width="0.4993%" height="15" fill="rgb(236,82,52)" fg:x="1154" fg:w="406"/><text x="1.7123%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="1.9186%" y="149" width="0.0197%" height="15" fill="rgb(211,41,47)" fg:x="1560" fg:w="16"/><text x="2.2116%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="1.9383%" y="133" width="0.0935%" height="15" fill="rgb(220,35,32)" fg:x="1576" fg:w="76"/><text x="2.2313%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.07%)</title><rect x="2.0318%" y="101" width="0.0738%" height="15" fill="rgb(222,196,9)" fg:x="1652" fg:w="60"/><text x="2.3247%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.10%)</title><rect x="2.0318%" y="117" width="0.1045%" height="15" fill="rgb(210,216,9)" fg:x="1652" fg:w="85"/><text x="2.3247%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="2.1363%" y="69" width="0.0111%" height="15" fill="rgb(230,58,49)" fg:x="1737" fg:w="9"/><text x="2.4293%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.04%)</title><rect x="2.1474%" y="53" width="0.0369%" height="15" fill="rgb(230,163,41)" fg:x="1746" fg:w="30"/><text x="2.4404%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.07%)</title><rect x="2.1474%" y="69" width="0.0676%" height="15" fill="rgb(205,135,42)" fg:x="1746" fg:w="55"/><text x="2.4404%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.15%)</title><rect x="2.1363%" y="85" width="0.1451%" height="15" fill="rgb(246,227,0)" fg:x="1737" fg:w="118"/><text x="2.4293%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.21%)</title><rect x="2.1363%" y="101" width="0.2103%" height="15" fill="rgb(208,186,10)" fg:x="1737" fg:w="171"/><text x="2.4293%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.22%)</title><rect x="2.1363%" y="117" width="0.2165%" height="15" fill="rgb(218,215,25)" fg:x="1737" fg:w="176"/><text x="2.4293%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 0.46%)</title><rect x="2.0318%" y="133" width="0.4575%" height="15" fill="rgb(241,215,5)" fg:x="1652" fg:w="372"/><text x="2.3247%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.72%)</title><rect x="1.9383%" y="149" width="0.7244%" height="15" fill="rgb(247,14,27)" fg:x="1576" fg:w="589"/><text x="2.2313%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.10%)</title><rect x="2.6627%" y="149" width="0.1009%" height="15" fill="rgb(215,157,6)" fg:x="2165" fg:w="82"/><text x="2.9557%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="2.7636%" y="149" width="0.0676%" height="15" fill="rgb(234,157,38)" fg:x="2247" fg:w="55"/><text x="3.0565%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.08%)</title><rect x="2.8312%" y="149" width="0.0775%" height="15" fill="rgb(228,40,26)" fg:x="2302" fg:w="63"/><text x="3.1242%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.08%)</title><rect x="2.9087%" y="149" width="0.0799%" height="15" fill="rgb(214,149,27)" fg:x="2365" fg:w="65"/><text x="3.2017%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 0.50%)</title><rect x="2.9886%" y="133" width="0.4993%" height="15" fill="rgb(239,158,50)" fg:x="2430" fg:w="406"/><text x="3.2816%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.02%)</title><rect x="3.4880%" y="133" width="0.0197%" height="15" fill="rgb(248,194,53)" fg:x="2836" fg:w="16"/><text x="3.7809%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="3.5076%" y="117" width="0.0935%" height="15" fill="rgb(231,187,49)" fg:x="2852" fg:w="76"/><text x="3.8006%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.07%)</title><rect x="3.6011%" y="85" width="0.0738%" height="15" fill="rgb(220,125,11)" fg:x="2928" fg:w="60"/><text x="3.8941%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.10%)</title><rect x="3.6011%" y="101" width="0.1045%" height="15" fill="rgb(253,203,5)" fg:x="2928" fg:w="85"/><text x="3.8941%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.01%)</title><rect x="3.7057%" y="53" width="0.0111%" height="15" fill="rgb(222,154,45)" fg:x="3013" fg:w="9"/><text x="3.9986%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.04%)</title><rect x="3.7167%" y="37" width="0.0369%" height="15" fill="rgb(211,130,6)" fg:x="3022" fg:w="30"/><text x="4.0097%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.07%)</title><rect x="3.7167%" y="53" width="0.0676%" height="15" fill="rgb(219,136,18)" fg:x="3022" fg:w="55"/><text x="4.0097%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.15%)</title><rect x="3.7057%" y="69" width="0.1451%" height="15" fill="rgb(235,180,30)" fg:x="3013" fg:w="118"/><text x="3.9986%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.21%)</title><rect x="3.7057%" y="85" width="0.2103%" height="15" fill="rgb(209,122,14)" fg:x="3013" fg:w="171"/><text x="3.9986%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.22%)</title><rect x="3.7057%" y="101" width="0.2165%" height="15" fill="rgb(240,10,0)" fg:x="3013" fg:w="176"/><text x="3.9986%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 0.46%)</title><rect x="3.6011%" y="117" width="0.4575%" height="15" fill="rgb(209,167,28)" fg:x="2928" fg:w="372"/><text x="3.8941%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 0.72%)</title><rect x="3.5076%" y="133" width="0.7244%" height="15" fill="rgb(244,114,11)" fg:x="2852" fg:w="589"/><text x="3.8006%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.10%)</title><rect x="4.2321%" y="133" width="0.1009%" height="15" fill="rgb(239,0,4)" fg:x="3441" fg:w="82"/><text x="4.5250%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="4.3329%" y="133" width="0.0676%" height="15" fill="rgb(221,109,47)" fg:x="3523" fg:w="55"/><text x="4.6259%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.08%)</title><rect x="4.4006%" y="117" width="0.0849%" height="15" fill="rgb(205,195,7)" fg:x="3578" fg:w="69"/><text x="4.6935%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.11%)</title><rect x="4.4854%" y="117" width="0.1119%" height="15" fill="rgb(226,220,13)" fg:x="3647" fg:w="91"/><text x="4.7784%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.08%)</title><rect x="4.5973%" y="117" width="0.0775%" height="15" fill="rgb(252,34,4)" fg:x="3738" fg:w="63"/><text x="4.8903%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 0.35%)</title><rect x="4.4006%" y="133" width="0.3468%" height="15" fill="rgb(247,158,39)" fg:x="3578" fg:w="282"/><text x="4.6935%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.10%)</title><rect x="4.7474%" y="133" width="0.0959%" height="15" fill="rgb(228,37,52)" fg:x="3860" fg:w="78"/><text x="5.0403%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,711 instructions, 2.10%)</title><rect x="2.9886%" y="149" width="2.1043%" height="15" fill="rgb(219,45,42)" fg:x="2430" fg:w="1711"/><text x="3.2816%" y="159.50">b..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.08%)</title><rect x="5.0930%" y="149" width="0.0775%" height="15" fill="rgb(219,68,42)" fg:x="4141" fg:w="63"/><text x="5.3859%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="5.1705%" y="149" width="0.0160%" height="15" fill="rgb(241,229,51)" fg:x="4204" fg:w="13"/><text x="5.4634%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.02%)</title><rect x="5.1865%" y="149" width="0.0160%" height="15" fill="rgb(221,166,19)" fg:x="4217" fg:w="13"/><text x="5.4794%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.02%)</title><rect x="5.2110%" y="149" width="0.0184%" height="15" fill="rgb(219,187,21)" fg:x="4237" fg:w="15"/><text x="5.5040%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.09%)</title><rect x="5.2295%" y="133" width="0.0873%" height="15" fill="rgb(226,197,11)" fg:x="4252" fg:w="71"/><text x="5.5225%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (154 instructions, 0.19%)</title><rect x="5.2295%" y="149" width="0.1894%" height="15" fill="rgb(240,46,49)" fg:x="4252" fg:w="154"/><text x="5.5225%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.15%)</title><rect x="5.4189%" y="117" width="0.1451%" height="15" fill="rgb(240,229,26)" fg:x="4406" fg:w="118"/><text x="5.7119%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (152 instructions, 0.19%)</title><rect x="5.4189%" y="133" width="0.1869%" height="15" fill="rgb(213,25,43)" fg:x="4406" fg:w="152"/><text x="5.7119%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (220 instructions, 0.27%)</title><rect x="5.4189%" y="149" width="0.2706%" height="15" fill="rgb(238,98,45)" fg:x="4406" fg:w="220"/><text x="5.7119%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="5.6895%" y="149" width="0.0935%" height="15" fill="rgb(229,58,16)" fg:x="4626" fg:w="76"/><text x="5.9824%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="5.7829%" y="149" width="0.0996%" height="15" fill="rgb(217,86,13)" fg:x="4702" fg:w="81"/><text x="6.0759%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="5.8826%" y="149" width="0.0935%" height="15" fill="rgb(246,36,46)" fg:x="4783" fg:w="76"/><text x="6.1755%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="5.9760%" y="149" width="0.0935%" height="15" fill="rgb(248,64,45)" fg:x="4859" fg:w="76"/><text x="6.2690%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="6.0720%" y="149" width="0.0996%" height="15" fill="rgb(245,126,49)" fg:x="4937" fg:w="81"/><text x="6.3649%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.47%)</title><rect x="6.1716%" y="149" width="0.4674%" height="15" fill="rgb(212,64,50)" fg:x="5018" fg:w="380"/><text x="6.4646%" y="159.50"></text></g><g><title>memcpy (380 instructions, 0.47%)</title><rect x="6.6390%" y="149" width="0.4674%" height="15" fill="rgb(244,8,45)" fg:x="5398" fg:w="380"/><text x="6.9319%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,446 instructions, 7.93%)</title><rect x="0.3038%" y="165" width="7.9279%" height="15" fill="rgb(252,55,28)" fg:x="247" fg:w="6446"/><text x="0.5968%" y="175.50">candid::d..</text></g><g><title>memcpy (335 instructions, 0.41%)</title><rect x="8.2317%" y="165" width="0.4120%" height="15" fill="rgb(218,67,29)" fg:x="6693" fg:w="335"/><text x="8.5246%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.01%)</title><rect x="8.6437%" y="149" width="0.0148%" height="15" fill="rgb(243,92,45)" fg:x="7028" fg:w="12"/><text x="8.9366%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.06%)</title><rect x="8.6437%" y="165" width="0.0615%" height="15" fill="rgb(243,165,19)" fg:x="7028" fg:w="50"/><text x="8.9366%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="8.7052%" y="165" width="0.0935%" height="15" fill="rgb(219,140,45)" fg:x="7078" fg:w="76"/><text x="8.9981%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.01%)</title><rect x="8.7986%" y="149" width="0.0148%" height="15" fill="rgb(219,153,17)" fg:x="7154" fg:w="12"/><text x="9.0916%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="8.8134%" y="133" width="0.0652%" height="15" fill="rgb(211,177,40)" fg:x="7166" fg:w="53"/><text x="9.1064%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.11%)</title><rect x="8.8786%" y="133" width="0.1082%" height="15" fill="rgb(214,105,22)" fg:x="7219" fg:w="88"/><text x="9.1716%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.20%)</title><rect x="8.9868%" y="133" width="0.1992%" height="15" fill="rgb(208,14,44)" fg:x="7307" fg:w="162"/><text x="9.2798%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.66%)</title><rect x="8.8134%" y="149" width="0.6641%" height="15" fill="rgb(232,164,7)" fg:x="7166" fg:w="540"/><text x="9.1064%" y="159.50"></text></g><g><title>candid::types::internal::env_add (772 instructions, 0.95%)</title><rect x="8.7986%" y="165" width="0.9495%" height="15" fill="rgb(233,57,15)" fg:x="7154" fg:w="772"/><text x="9.0916%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="9.7481%" y="165" width="0.1009%" height="15" fill="rgb(238,88,15)" fg:x="7926" fg:w="82"/><text x="10.0411%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.01%)</title><rect x="9.8490%" y="149" width="0.0148%" height="15" fill="rgb(230,137,54)" fg:x="8008" fg:w="12"/><text x="10.1419%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="9.8637%" y="133" width="0.0652%" height="15" fill="rgb(241,228,31)" fg:x="8020" fg:w="53"/><text x="10.1567%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.11%)</title><rect x="9.9289%" y="133" width="0.1082%" height="15" fill="rgb(221,25,3)" fg:x="8073" fg:w="88"/><text x="10.2219%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.20%)</title><rect x="10.0371%" y="133" width="0.1992%" height="15" fill="rgb(240,166,10)" fg:x="8161" fg:w="162"/><text x="10.3301%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 0.66%)</title><rect x="9.8637%" y="149" width="0.6641%" height="15" fill="rgb(207,173,52)" fg:x="8020" fg:w="540"/><text x="10.1567%" y="159.50"></text></g><g><title>memcmp (68 instructions, 0.08%)</title><rect x="10.5279%" y="149" width="0.0836%" height="15" fill="rgb(229,117,46)" fg:x="8560" fg:w="68"/><text x="10.8208%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="10.6115%" y="133" width="0.0676%" height="15" fill="rgb(235,200,21)" fg:x="8628" fg:w="55"/><text x="10.9045%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 instructions, 0.10%)</title><rect x="10.6115%" y="149" width="0.1009%" height="15" fill="rgb(232,47,9)" fg:x="8628" fg:w="82"/><text x="10.9045%" y="159.50"></text></g><g><title>candid::types::internal::env_add (886 instructions, 1.09%)</title><rect x="9.8490%" y="165" width="1.0897%" height="15" fill="rgb(210,219,50)" fg:x="8008" fg:w="886"/><text x="10.1419%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.07%)</title><rect x="10.9387%" y="117" width="0.0652%" height="15" fill="rgb(239,209,14)" fg:x="8894" fg:w="53"/><text x="11.2316%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.10%)</title><rect x="10.9387%" y="133" width="0.0972%" height="15" fill="rgb(226,198,48)" fg:x="8894" fg:w="79"/><text x="11.2316%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.36%)</title><rect x="10.9387%" y="149" width="0.3591%" height="15" fill="rgb(228,163,7)" fg:x="8894" fg:w="292"/><text x="11.2316%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1233 (15 instructions, 0.02%)</title><rect x="11.2978%" y="149" width="0.0184%" height="15" fill="rgb(221,123,27)" fg:x="9186" fg:w="15"/><text x="11.5908%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.3162%" y="149" width="0.0135%" height="15" fill="rgb(211,114,34)" fg:x="9201" fg:w="11"/><text x="11.6092%" y="159.50"></text></g><g><title>candid::types::internal::env_id (522 instructions, 0.64%)</title><rect x="10.9387%" y="165" width="0.6420%" height="15" fill="rgb(226,95,0)" fg:x="8894" fg:w="522"/><text x="11.2316%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (34 instructions, 0.04%)</title><rect x="11.5807%" y="165" width="0.0418%" height="15" fill="rgb(231,103,47)" fg:x="9416" fg:w="34"/><text x="11.8736%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="11.6225%" y="149" width="0.0676%" height="15" fill="rgb(233,229,35)" fg:x="9450" fg:w="55"/><text x="11.9154%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="11.7233%" y="149" width="0.0676%" height="15" fill="rgb(242,13,0)" fg:x="9532" fg:w="55"/><text x="12.0163%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (164 instructions, 0.20%)</title><rect x="11.6225%" y="165" width="0.2017%" height="15" fill="rgb(219,48,24)" fg:x="9450" fg:w="164"/><text x="11.9154%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.03%)</title><rect x="11.8242%" y="149" width="0.0344%" height="15" fill="rgb(214,127,19)" fg:x="9614" fg:w="28"/><text x="12.1171%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.12%)</title><rect x="11.8242%" y="165" width="0.1193%" height="15" fill="rgb(206,6,46)" fg:x="9614" fg:w="97"/><text x="12.1171%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.9435%" y="165" width="0.0135%" height="15" fill="rgb(229,101,51)" fg:x="9711" fg:w="11"/><text x="12.2364%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.9570%" y="165" width="0.0135%" height="15" fill="rgb(241,224,23)" fg:x="9722" fg:w="11"/><text x="12.2500%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="11.9705%" y="165" width="0.0135%" height="15" fill="rgb(211,35,53)" fg:x="9733" fg:w="11"/><text x="12.2635%" y="175.50"></text></g><g><title>memcpy (410 instructions, 0.50%)</title><rect x="11.9841%" y="165" width="0.5043%" height="15" fill="rgb(247,10,53)" fg:x="9744" fg:w="410"/><text x="12.2770%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.01%)</title><rect x="12.4883%" y="133" width="0.0148%" height="15" fill="rgb(254,67,7)" fg:x="10154" fg:w="12"/><text x="12.7813%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.12%)</title><rect x="12.5031%" y="133" width="0.1230%" height="15" fill="rgb(216,105,40)" fg:x="10166" fg:w="100"/><text x="12.7960%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="12.6261%" y="117" width="0.0996%" height="15" fill="rgb(205,196,3)" fg:x="10266" fg:w="81"/><text x="12.9190%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.13%)</title><rect x="12.6261%" y="133" width="0.1328%" height="15" fill="rgb(252,112,4)" fg:x="10266" fg:w="108"/><text x="12.9190%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.01%)</title><rect x="12.7589%" y="133" width="0.0135%" height="15" fill="rgb(217,143,41)" fg:x="10374" fg:w="11"/><text x="13.0519%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (273 instructions, 0.34%)</title><rect x="12.4883%" y="149" width="0.3358%" height="15" fill="rgb(220,28,16)" fg:x="10154" fg:w="273"/><text x="12.7813%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (307 instructions, 0.38%)</title><rect x="12.4883%" y="165" width="0.3776%" height="15" fill="rgb(243,121,26)" fg:x="10154" fg:w="307"/><text x="12.7813%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.15%)</title><rect x="12.8659%" y="165" width="0.1513%" height="15" fill="rgb(231,70,21)" fg:x="10461" fg:w="123"/><text x="13.1589%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (10,804 instructions, 13.29%)</title><rect x="0.2103%" y="181" width="13.2877%" height="15" fill="rgb(209,37,20)" fg:x="171" fg:w="10804"/><text x="0.5033%" y="191.50">ic_cdk::api::call..</text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="13.5042%" y="165" width="0.1771%" height="15" fill="rgb(251,184,22)" fg:x="10980" fg:w="144"/><text x="13.7972%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="13.6813%" y="165" width="0.1771%" height="15" fill="rgb(218,211,31)" fg:x="11124" fg:w="144"/><text x="13.9743%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="13.9753%" y="165" width="0.0234%" height="15" fill="rgb(212,4,20)" fg:x="11363" fg:w="19"/><text x="14.2682%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="13.9986%" y="165" width="0.0234%" height="15" fill="rgb(215,113,5)" fg:x="11382" fg:w="19"/><text x="14.2916%" y="175.50"></text></g><g><title>memmove (298 instructions, 0.37%)</title><rect x="14.0220%" y="149" width="0.3665%" height="15" fill="rgb(205,59,4)" fg:x="11401" fg:w="298"/><text x="14.3150%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="14.3885%" y="149" width="0.2091%" height="15" fill="rgb(226,30,8)" fg:x="11699" fg:w="170"/><text x="14.6815%" y="159.50"></text></g><g><title>memmove (298 instructions, 0.37%)</title><rect x="14.5976%" y="149" width="0.3665%" height="15" fill="rgb(239,102,20)" fg:x="11869" fg:w="298"/><text x="14.8905%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="14.9641%" y="149" width="0.2091%" height="15" fill="rgb(221,224,32)" fg:x="12167" fg:w="170"/><text x="15.2571%" y="159.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="15.1732%" y="149" width="0.2189%" height="15" fill="rgb(244,2,17)" fg:x="12337" fg:w="178"/><text x="15.4661%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="15.3921%" y="149" width="0.0996%" height="15" fill="rgb(214,208,53)" fg:x="12515" fg:w="81"/><text x="15.6851%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (1,517 instructions, 1.87%)</title><rect x="14.0220%" y="165" width="1.8657%" height="15" fill="rgb(228,107,19)" fg:x="11401" fg:w="1517"/><text x="14.3150%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.1128%" y="165" width="0.0234%" height="15" fill="rgb(249,110,8)" fg:x="13101" fg:w="19"/><text x="16.4058%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.1362%" y="165" width="0.0234%" height="15" fill="rgb(236,165,39)" fg:x="13120" fg:w="19"/><text x="16.4291%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.2764%" y="165" width="0.0234%" height="15" fill="rgb(250,81,28)" fg:x="13234" fg:w="19"/><text x="16.5693%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="16.2997%" y="165" width="0.0234%" height="15" fill="rgb(222,188,44)" fg:x="13253" fg:w="19"/><text x="16.5927%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="16.3231%" y="149" width="0.0135%" height="15" fill="rgb(240,22,31)" fg:x="13272" fg:w="11"/><text x="16.6161%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="16.3366%" y="149" width="0.0135%" height="15" fill="rgb(224,15,12)" fg:x="13283" fg:w="11"/><text x="16.6296%" y="159.50"></text></g><g><title>memmove (268 instructions, 0.33%)</title><rect x="16.3502%" y="149" width="0.3296%" height="15" fill="rgb(240,20,2)" fg:x="13294" fg:w="268"/><text x="16.6431%" y="159.50"></text></g><g><title>memmove (268 instructions, 0.33%)</title><rect x="16.6798%" y="149" width="0.3296%" height="15" fill="rgb(207,13,26)" fg:x="13562" fg:w="268"/><text x="16.9728%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_right (701 instructions, 0.86%)</title><rect x="16.3231%" y="165" width="0.8622%" height="15" fill="rgb(239,182,18)" fg:x="13272" fg:w="701"/><text x="16.6161%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="17.4116%" y="165" width="0.0234%" height="15" fill="rgb(218,73,4)" fg:x="14157" fg:w="19"/><text x="17.7045%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="17.4349%" y="165" width="0.0234%" height="15" fill="rgb(218,17,48)" fg:x="14176" fg:w="19"/><text x="17.7279%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="17.5751%" y="165" width="0.2189%" height="15" fill="rgb(207,107,30)" fg:x="14290" fg:w="178"/><text x="17.8681%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="17.7941%" y="165" width="0.2189%" height="15" fill="rgb(247,38,21)" fg:x="14468" fg:w="178"/><text x="18.0870%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.1298%" y="165" width="0.0234%" height="15" fill="rgb(222,33,52)" fg:x="14741" fg:w="19"/><text x="18.4228%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.1532%" y="165" width="0.0234%" height="15" fill="rgb(218,163,50)" fg:x="14760" fg:w="19"/><text x="18.4462%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.2934%" y="165" width="0.0234%" height="15" fill="rgb(217,61,4)" fg:x="14874" fg:w="19"/><text x="18.5864%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.3168%" y="165" width="0.0234%" height="15" fill="rgb(241,8,16)" fg:x="14893" fg:w="19"/><text x="18.6097%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.4570%" y="165" width="0.0234%" height="15" fill="rgb(244,128,52)" fg:x="15007" fg:w="19"/><text x="18.7499%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.4803%" y="165" width="0.0234%" height="15" fill="rgb(209,137,30)" fg:x="15026" fg:w="19"/><text x="18.7733%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.6206%" y="165" width="0.0234%" height="15" fill="rgb(247,36,26)" fg:x="15140" fg:w="19"/><text x="18.9135%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.6439%" y="165" width="0.0234%" height="15" fill="rgb(210,85,27)" fg:x="15159" fg:w="19"/><text x="18.9369%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.7841%" y="165" width="0.0234%" height="15" fill="rgb(213,152,2)" fg:x="15273" fg:w="19"/><text x="19.0771%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.8075%" y="165" width="0.0234%" height="15" fill="rgb(210,3,39)" fg:x="15292" fg:w="19"/><text x="19.1005%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.9477%" y="165" width="0.0234%" height="15" fill="rgb(248,166,45)" fg:x="15406" fg:w="19"/><text x="19.2407%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="18.9711%" y="165" width="0.0234%" height="15" fill="rgb(250,31,48)" fg:x="15425" fg:w="19"/><text x="19.2640%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.1113%" y="165" width="0.0234%" height="15" fill="rgb(220,92,20)" fg:x="15539" fg:w="19"/><text x="19.4042%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.1346%" y="165" width="0.0234%" height="15" fill="rgb(219,46,45)" fg:x="15558" fg:w="19"/><text x="19.4276%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.2749%" y="165" width="0.0234%" height="15" fill="rgb(242,224,50)" fg:x="15672" fg:w="19"/><text x="19.5678%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="19.2982%" y="165" width="0.0234%" height="15" fill="rgb(229,53,23)" fg:x="15691" fg:w="19"/><text x="19.5912%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="19.4384%" y="165" width="0.2558%" height="15" fill="rgb(214,156,36)" fg:x="15805" fg:w="208"/><text x="19.7314%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="19.6942%" y="165" width="0.2558%" height="15" fill="rgb(251,164,4)" fg:x="16013" fg:w="208"/><text x="19.9872%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.0669%" y="165" width="0.0234%" height="15" fill="rgb(223,49,8)" fg:x="16316" fg:w="19"/><text x="20.3599%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.0903%" y="165" width="0.0234%" height="15" fill="rgb(205,169,17)" fg:x="16335" fg:w="19"/><text x="20.3832%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.2305%" y="165" width="0.0234%" height="15" fill="rgb(205,58,20)" fg:x="16449" fg:w="19"/><text x="20.5235%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.2538%" y="165" width="0.0234%" height="15" fill="rgb(236,227,14)" fg:x="16468" fg:w="19"/><text x="20.5468%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.3941%" y="165" width="0.0234%" height="15" fill="rgb(233,198,53)" fg:x="16582" fg:w="19"/><text x="20.6870%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.4174%" y="165" width="0.0234%" height="15" fill="rgb(212,161,42)" fg:x="16601" fg:w="19"/><text x="20.7104%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.5576%" y="165" width="0.0234%" height="15" fill="rgb(248,177,35)" fg:x="16715" fg:w="19"/><text x="20.8506%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.5810%" y="165" width="0.0234%" height="15" fill="rgb(242,73,36)" fg:x="16734" fg:w="19"/><text x="20.8740%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.7212%" y="165" width="0.0234%" height="15" fill="rgb(245,107,31)" fg:x="16848" fg:w="19"/><text x="21.0142%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.7446%" y="165" width="0.0234%" height="15" fill="rgb(220,120,0)" fg:x="16867" fg:w="19"/><text x="21.0375%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.8848%" y="165" width="0.0234%" height="15" fill="rgb(212,41,7)" fg:x="16981" fg:w="19"/><text x="21.1778%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="20.9082%" y="165" width="0.0234%" height="15" fill="rgb(232,70,4)" fg:x="17000" fg:w="19"/><text x="21.2011%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.0484%" y="165" width="0.0234%" height="15" fill="rgb(215,142,44)" fg:x="17114" fg:w="19"/><text x="21.3413%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.0717%" y="165" width="0.0234%" height="15" fill="rgb(215,84,33)" fg:x="17133" fg:w="19"/><text x="21.3647%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.2119%" y="165" width="0.0234%" height="15" fill="rgb(207,229,26)" fg:x="17247" fg:w="19"/><text x="21.5049%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.2353%" y="165" width="0.0234%" height="15" fill="rgb(252,106,39)" fg:x="17266" fg:w="19"/><text x="21.5283%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.3755%" y="165" width="0.0234%" height="15" fill="rgb(234,125,38)" fg:x="17380" fg:w="19"/><text x="21.6685%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.3989%" y="165" width="0.0234%" height="15" fill="rgb(252,3,2)" fg:x="17399" fg:w="19"/><text x="21.6918%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.5391%" y="165" width="0.0234%" height="15" fill="rgb(236,1,28)" fg:x="17513" fg:w="19"/><text x="21.8321%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.5625%" y="165" width="0.0234%" height="15" fill="rgb(230,157,39)" fg:x="17532" fg:w="19"/><text x="21.8554%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.7027%" y="165" width="0.0234%" height="15" fill="rgb(243,199,42)" fg:x="17646" fg:w="19"/><text x="21.9956%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.7260%" y="165" width="0.0234%" height="15" fill="rgb(215,46,49)" fg:x="17665" fg:w="19"/><text x="22.0190%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.8662%" y="165" width="0.0234%" height="15" fill="rgb(220,180,9)" fg:x="17779" fg:w="19"/><text x="22.1592%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="21.8896%" y="165" width="0.0234%" height="15" fill="rgb(219,185,36)" fg:x="17798" fg:w="19"/><text x="22.1826%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.0298%" y="165" width="0.0234%" height="15" fill="rgb(228,117,53)" fg:x="17912" fg:w="19"/><text x="22.3228%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.0532%" y="165" width="0.0234%" height="15" fill="rgb(221,106,12)" fg:x="17931" fg:w="19"/><text x="22.3461%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.1934%" y="165" width="0.0234%" height="15" fill="rgb(215,108,17)" fg:x="18045" fg:w="19"/><text x="22.4864%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.2168%" y="165" width="0.0234%" height="15" fill="rgb(245,26,18)" fg:x="18064" fg:w="19"/><text x="22.5097%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.3570%" y="165" width="0.0234%" height="15" fill="rgb(237,27,36)" fg:x="18178" fg:w="19"/><text x="22.6499%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="22.3803%" y="165" width="0.0234%" height="15" fill="rgb(247,5,1)" fg:x="18197" fg:w="19"/><text x="22.6733%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="22.5205%" y="165" width="0.2189%" height="15" fill="rgb(215,108,11)" fg:x="18311" fg:w="178"/><text x="22.8135%" y="175.50"></text></g><g><title>memmove (178 instructions, 0.22%)</title><rect x="22.7395%" y="165" width="0.2189%" height="15" fill="rgb(252,83,12)" fg:x="18489" fg:w="178"/><text x="23.0324%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.0752%" y="165" width="0.0234%" height="15" fill="rgb(224,206,18)" fg:x="18762" fg:w="19"/><text x="23.3682%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.0986%" y="165" width="0.0234%" height="15" fill="rgb(248,203,50)" fg:x="18781" fg:w="19"/><text x="23.3916%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.2388%" y="165" width="0.0234%" height="15" fill="rgb(252,31,12)" fg:x="18895" fg:w="19"/><text x="23.5318%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.2622%" y="165" width="0.0234%" height="15" fill="rgb(232,228,4)" fg:x="18914" fg:w="19"/><text x="23.5551%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.4024%" y="165" width="0.0234%" height="15" fill="rgb(245,220,34)" fg:x="19028" fg:w="19"/><text x="23.6953%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.4257%" y="165" width="0.0234%" height="15" fill="rgb(239,102,53)" fg:x="19047" fg:w="19"/><text x="23.7187%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.5659%" y="165" width="0.0234%" height="15" fill="rgb(239,63,17)" fg:x="19161" fg:w="19"/><text x="23.8589%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.5893%" y="165" width="0.0234%" height="15" fill="rgb(211,89,0)" fg:x="19180" fg:w="19"/><text x="23.8823%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.7295%" y="165" width="0.0234%" height="15" fill="rgb(228,127,4)" fg:x="19294" fg:w="19"/><text x="24.0225%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="23.7529%" y="165" width="0.0234%" height="15" fill="rgb(248,184,36)" fg:x="19313" fg:w="19"/><text x="24.0459%" y="175.50"></text></g><g><title>memmove (194 instructions, 0.24%)</title><rect x="23.7763%" y="149" width="0.2386%" height="15" fill="rgb(234,210,44)" fg:x="19332" fg:w="194"/><text x="24.0692%" y="159.50"></text></g><g><title>memmove (194 instructions, 0.24%)</title><rect x="24.0149%" y="149" width="0.2386%" height="15" fill="rgb(211,192,41)" fg:x="19526" fg:w="194"/><text x="24.3078%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="24.2535%" y="149" width="0.0135%" height="15" fill="rgb(234,98,45)" fg:x="19720" fg:w="11"/><text x="24.5464%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="24.2670%" y="149" width="0.0135%" height="15" fill="rgb(226,184,27)" fg:x="19731" fg:w="11"/><text x="24.5600%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_left (553 instructions, 0.68%)</title><rect x="23.7763%" y="165" width="0.6801%" height="15" fill="rgb(248,47,9)" fg:x="19332" fg:w="553"/><text x="24.0692%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="24.6876%" y="165" width="0.1771%" height="15" fill="rgb(234,135,15)" fg:x="20073" fg:w="144"/><text x="24.9806%" y="175.50"></text></g><g><title>memmove (144 instructions, 0.18%)</title><rect x="24.8647%" y="165" width="0.1771%" height="15" fill="rgb(218,229,45)" fg:x="20217" fg:w="144"/><text x="25.1577%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.1587%" y="165" width="0.0234%" height="15" fill="rgb(233,105,40)" fg:x="20456" fg:w="19"/><text x="25.4516%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.1820%" y="165" width="0.0234%" height="15" fill="rgb(228,166,10)" fg:x="20475" fg:w="19"/><text x="25.4750%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.3222%" y="165" width="0.0234%" height="15" fill="rgb(243,66,27)" fg:x="20589" fg:w="19"/><text x="25.6152%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="25.3456%" y="165" width="0.0234%" height="15" fill="rgb(231,46,38)" fg:x="20608" fg:w="19"/><text x="25.6386%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="25.4858%" y="165" width="0.2558%" height="15" fill="rgb(248,117,18)" fg:x="20722" fg:w="208"/><text x="25.7788%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="25.7416%" y="165" width="0.2558%" height="15" fill="rgb(210,189,6)" fg:x="20930" fg:w="208"/><text x="26.0346%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.1143%" y="165" width="0.0234%" height="15" fill="rgb(221,40,47)" fg:x="21233" fg:w="19"/><text x="26.4073%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.1376%" y="165" width="0.0234%" height="15" fill="rgb(208,18,49)" fg:x="21252" fg:w="19"/><text x="26.4306%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.1610%" y="149" width="0.0234%" height="15" fill="rgb(233,67,46)" fg:x="21271" fg:w="19"/><text x="26.4540%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="26.1844%" y="149" width="0.2091%" height="15" fill="rgb(250,128,28)" fg:x="21290" fg:w="170"/><text x="26.4774%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.3935%" y="149" width="0.0234%" height="15" fill="rgb(223,170,18)" fg:x="21460" fg:w="19"/><text x="26.6864%" y="159.50"></text></g><g><title>memcpy (170 instructions, 0.21%)</title><rect x="26.4168%" y="149" width="0.2091%" height="15" fill="rgb(209,211,26)" fg:x="21479" fg:w="170"/><text x="26.7098%" y="159.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="26.6259%" y="149" width="0.0234%" height="15" fill="rgb(217,227,11)" fg:x="21649" fg:w="19"/><text x="26.9189%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (78 instructions, 0.10%)</title><rect x="26.6493%" y="149" width="0.0959%" height="15" fill="rgb(211,85,42)" fg:x="21668" fg:w="78"/><text x="26.9423%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (654 instructions, 0.80%)</title><rect x="26.1610%" y="165" width="0.8043%" height="15" fill="rgb(216,171,2)" fg:x="21271" fg:w="654"/><text x="26.4540%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.1904%" y="165" width="0.0234%" height="15" fill="rgb(250,124,51)" fg:x="22108" fg:w="19"/><text x="27.4834%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.2138%" y="165" width="0.0234%" height="15" fill="rgb(249,28,37)" fg:x="22127" fg:w="19"/><text x="27.5068%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.3540%" y="165" width="0.0234%" height="15" fill="rgb(218,102,20)" fg:x="22241" fg:w="19"/><text x="27.6470%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.3774%" y="165" width="0.0234%" height="15" fill="rgb(254,102,2)" fg:x="22260" fg:w="19"/><text x="27.6703%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.5176%" y="165" width="0.0234%" height="15" fill="rgb(241,42,0)" fg:x="22374" fg:w="19"/><text x="27.8106%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.5410%" y="165" width="0.0234%" height="15" fill="rgb(215,39,30)" fg:x="22393" fg:w="19"/><text x="27.8339%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.6812%" y="165" width="0.0234%" height="15" fill="rgb(205,72,52)" fg:x="22507" fg:w="19"/><text x="27.9741%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.7045%" y="165" width="0.0234%" height="15" fill="rgb(248,113,13)" fg:x="22526" fg:w="19"/><text x="27.9975%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.8447%" y="165" width="0.0234%" height="15" fill="rgb(212,120,42)" fg:x="22640" fg:w="19"/><text x="28.1377%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="27.8681%" y="165" width="0.0234%" height="15" fill="rgb(236,88,35)" fg:x="22659" fg:w="19"/><text x="28.1611%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.0083%" y="165" width="0.0234%" height="15" fill="rgb(248,224,14)" fg:x="22773" fg:w="19"/><text x="28.3013%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.0317%" y="165" width="0.0234%" height="15" fill="rgb(227,174,17)" fg:x="22792" fg:w="19"/><text x="28.3247%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.1719%" y="165" width="0.0234%" height="15" fill="rgb(225,119,6)" fg:x="22906" fg:w="19"/><text x="28.4649%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.1953%" y="165" width="0.0234%" height="15" fill="rgb(211,178,6)" fg:x="22925" fg:w="19"/><text x="28.4882%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.3355%" y="165" width="0.0234%" height="15" fill="rgb(234,207,25)" fg:x="23039" fg:w="19"/><text x="28.6284%" y="175.50"></text></g><g><title>memmove (19 instructions, 0.02%)</title><rect x="28.3588%" y="165" width="0.0234%" height="15" fill="rgb(250,43,8)" fg:x="23058" fg:w="19"/><text x="28.6518%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="28.4990%" y="165" width="0.2558%" height="15" fill="rgb(208,20,18)" fg:x="23172" fg:w="208"/><text x="28.7920%" y="175.50"></text></g><g><title>memmove (208 instructions, 0.26%)</title><rect x="28.7549%" y="165" width="0.2558%" height="15" fill="rgb(227,74,4)" fg:x="23380" fg:w="208"/><text x="29.0478%" y="175.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (12,703 instructions, 15.62%)</title><rect x="13.5042%" y="181" width="15.6233%" height="15" fill="rgb(254,167,9)" fg:x="10980" fg:w="12703"/><text x="13.7972%" y="191.50">alloc::collections::..</text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.01%)</title><rect x="29.1275%" y="149" width="0.0148%" height="15" fill="rgb(233,18,12)" fg:x="23683" fg:w="12"/><text x="29.4205%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (56 instructions, 0.07%)</title><rect x="29.1423%" y="133" width="0.0689%" height="15" fill="rgb(237,18,54)" fg:x="23695" fg:w="56"/><text x="29.4352%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (83 instructions, 0.10%)</title><rect x="29.1423%" y="149" width="0.1021%" height="15" fill="rgb(215,135,26)" fg:x="23695" fg:w="83"/><text x="29.4352%" y="159.50"></text></g><g><title>memset (136 instructions, 0.17%)</title><rect x="29.2444%" y="149" width="0.1673%" height="15" fill="rgb(234,52,47)" fg:x="23778" fg:w="136"/><text x="29.5373%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (389 instructions, 0.48%)</title><rect x="29.1275%" y="165" width="0.4784%" height="15" fill="rgb(207,7,9)" fg:x="23683" fg:w="389"/><text x="29.4205%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.04%)</title><rect x="29.6059%" y="149" width="0.0394%" height="15" fill="rgb(218,149,23)" fg:x="24072" fg:w="32"/><text x="29.8989%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.09%)</title><rect x="29.6453%" y="117" width="0.0935%" height="15" fill="rgb(238,125,25)" fg:x="24104" fg:w="76"/><text x="29.9383%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.14%)</title><rect x="29.6453%" y="133" width="0.1353%" height="15" fill="rgb(244,36,8)" fg:x="24104" fg:w="110"/><text x="29.9383%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.22%)</title><rect x="29.6453%" y="149" width="0.2152%" height="15" fill="rgb(229,62,10)" fg:x="24104" fg:w="175"/><text x="29.9383%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="29.8605%" y="149" width="0.0135%" height="15" fill="rgb(242,183,37)" fg:x="24279" fg:w="11"/><text x="30.1535%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.01%)</title><rect x="29.8741%" y="149" width="0.0135%" height="15" fill="rgb(222,136,53)" fg:x="24290" fg:w="11"/><text x="30.1670%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.04%)</title><rect x="29.8876%" y="149" width="0.0369%" height="15" fill="rgb(208,66,38)" fg:x="24301" fg:w="30"/><text x="30.1806%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (470 instructions, 0.58%)</title><rect x="29.6059%" y="165" width="0.5780%" height="15" fill="rgb(220,71,20)" fg:x="24072" fg:w="470"/><text x="29.8989%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.07%)</title><rect x="30.1901%" y="165" width="0.0676%" height="15" fill="rgb(220,168,3)" fg:x="24547" fg:w="55"/><text x="30.4831%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (993 instructions, 1.22%)</title><rect x="29.1275%" y="181" width="1.2213%" height="15" fill="rgb(248,9,40)" fg:x="23683" fg:w="993"/><text x="29.4205%" y="191.50"></text></g><g><title>btreemap::batch_remove_4_::{{closure}} (80,778 instructions, 99.35%)</title><rect x="0.2103%" y="197" width="99.3482%" height="15" fill="rgb(251,29,41)" fg:x="171" fg:w="80778"/><text x="0.5033%" y="207.50">btreemap::batch_remove_4_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.01%)</title><rect x="99.5585%" y="197" width="0.0148%" height="15" fill="rgb(209,97,45)" fg:x="80949" fg:w="12"/><text x="99.8514%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.10%)</title><rect x="99.5732%" y="197" width="0.0996%" height="15" fill="rgb(245,63,32)" fg:x="80961" fg:w="81"/><text x="99.8662%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.21%)</title><rect x="99.6728%" y="197" width="0.2066%" height="15" fill="rgb(210,7,50)" fg:x="81042" fg:w="168"/><text x="99.9658%" y="207.50"></text></g><g><title>all (81,308 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,181,10)" fg:x="0" fg:w="81308"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (81,308 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,175,46)" fg:x="0" fg:w="81308"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>