<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="310" onload="init(evt)" viewBox="0 0 1024 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="293.00"> </text><svg id="frames" x="10" width="1004" total_samples="84265"><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="0.0000%" y="229" width="0.0973%" height="15" fill="rgb(244,38,45)" fg:x="0" fg:w="82"/><text x="0.2930%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (80 instructions, 0.09%)</title><rect x="0.0973%" y="229" width="0.0949%" height="15" fill="rgb(217,135,3)" fg:x="82" fg:w="80"/><text x="0.3903%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (116 instructions, 0.14%)</title><rect x="0.1923%" y="181" width="0.1377%" height="15" fill="rgb(235,175,50)" fg:x="162" fg:w="116"/><text x="0.4852%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (1,173 instructions, 1.39%)</title><rect x="0.1923%" y="197" width="1.3920%" height="15" fill="rgb(230,40,13)" fg:x="162" fg:w="1173"/><text x="0.4852%" y="207.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.06%)</title><rect x="1.5843%" y="165" width="0.0605%" height="15" fill="rgb(221,107,24)" fg:x="1335" fg:w="51"/><text x="1.8773%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 0.52%)</title><rect x="1.6448%" y="165" width="0.5186%" height="15" fill="rgb(242,173,16)" fg:x="1386" fg:w="437"/><text x="1.9378%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.08%)</title><rect x="2.1634%" y="165" width="0.0760%" height="15" fill="rgb(252,31,53)" fg:x="1823" fg:w="64"/><text x="2.4564%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.09%)</title><rect x="2.2394%" y="165" width="0.0902%" height="15" fill="rgb(211,205,38)" fg:x="1887" fg:w="76"/><text x="2.5323%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.09%)</title><rect x="2.3296%" y="165" width="0.0902%" height="15" fill="rgb(221,182,5)" fg:x="1963" fg:w="76"/><text x="2.6225%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.09%)</title><rect x="2.4197%" y="165" width="0.0902%" height="15" fill="rgb(236,96,26)" fg:x="2039" fg:w="76"/><text x="2.7127%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.09%)</title><rect x="2.5099%" y="165" width="0.0902%" height="15" fill="rgb(223,65,12)" fg:x="2115" fg:w="76"/><text x="2.8029%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.06%)</title><rect x="2.6001%" y="165" width="0.0605%" height="15" fill="rgb(245,215,28)" fg:x="2191" fg:w="51"/><text x="2.8931%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.11%)</title><rect x="2.6607%" y="165" width="0.1127%" height="15" fill="rgb(240,155,6)" fg:x="2242" fg:w="95"/><text x="2.9536%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 0.52%)</title><rect x="2.7734%" y="165" width="0.5186%" height="15" fill="rgb(222,110,32)" fg:x="2337" fg:w="437"/><text x="3.0664%" y="175.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="3.2920%" y="165" width="0.0225%" height="15" fill="rgb(210,91,2)" fg:x="2774" fg:w="19"/><text x="3.5850%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="3.3145%" y="133" width="0.0973%" height="15" fill="rgb(229,203,5)" fg:x="2793" fg:w="82"/><text x="3.6075%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.08%)</title><rect x="3.4119%" y="101" width="0.0795%" height="15" fill="rgb(235,134,32)" fg:x="2875" fg:w="67"/><text x="3.7048%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.11%)</title><rect x="3.4119%" y="117" width="0.1139%" height="15" fill="rgb(246,139,1)" fg:x="2875" fg:w="96"/><text x="3.7048%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="3.5258%" y="69" width="0.0131%" height="15" fill="rgb(239,161,38)" fg:x="2971" fg:w="11"/><text x="3.8188%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="3.5388%" y="53" width="0.0415%" height="15" fill="rgb(246,213,49)" fg:x="2982" fg:w="35"/><text x="3.8318%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.08%)</title><rect x="3.5388%" y="69" width="0.0760%" height="15" fill="rgb(241,44,23)" fg:x="2982" fg:w="64"/><text x="3.8318%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.17%)</title><rect x="3.5258%" y="85" width="0.1709%" height="15" fill="rgb(218,37,50)" fg:x="2971" fg:w="144"/><text x="3.8188%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.25%)</title><rect x="3.5258%" y="101" width="0.2492%" height="15" fill="rgb(253,19,47)" fg:x="2971" fg:w="210"/><text x="3.8188%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.26%)</title><rect x="3.5258%" y="117" width="0.2611%" height="15" fill="rgb(208,95,48)" fg:x="2971" fg:w="220"/><text x="3.8188%" y="127.50"></text></g><g><title>core::fmt::write (449 instructions, 0.53%)</title><rect x="3.4119%" y="133" width="0.5328%" height="15" fill="rgb(251,182,13)" fg:x="2875" fg:w="449"/><text x="3.7048%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 0.79%)</title><rect x="3.3145%" y="149" width="0.7916%" height="15" fill="rgb(207,72,17)" fg:x="2793" fg:w="667"/><text x="3.6075%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.08%)</title><rect x="4.1061%" y="149" width="0.0760%" height="15" fill="rgb(245,40,50)" fg:x="3460" fg:w="64"/><text x="4.3991%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.07%)</title><rect x="4.1820%" y="149" width="0.0724%" height="15" fill="rgb(252,43,5)" fg:x="3524" fg:w="61"/><text x="4.4750%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 1.07%)</title><rect x="3.3145%" y="165" width="1.0716%" height="15" fill="rgb(223,190,4)" fg:x="2793" fg:w="903"/><text x="3.6075%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 instructions, 0.03%)</title><rect x="4.3862%" y="165" width="0.0320%" height="15" fill="rgb(242,187,16)" fg:x="3696" fg:w="27"/><text x="4.6791%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.05%)</title><rect x="4.4182%" y="165" width="0.0546%" height="15" fill="rgb(254,28,11)" fg:x="3723" fg:w="46"/><text x="4.7112%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.11%)</title><rect x="4.4728%" y="165" width="0.1127%" height="15" fill="rgb(214,191,44)" fg:x="3769" fg:w="95"/><text x="4.7658%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 0.52%)</title><rect x="4.5855%" y="149" width="0.5186%" height="15" fill="rgb(246,104,7)" fg:x="3864" fg:w="437"/><text x="4.8785%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.02%)</title><rect x="5.1041%" y="149" width="0.0225%" height="15" fill="rgb(206,189,28)" fg:x="4301" fg:w="19"/><text x="5.3971%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="5.1267%" y="117" width="0.0973%" height="15" fill="rgb(214,40,12)" fg:x="4320" fg:w="82"/><text x="5.4197%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.08%)</title><rect x="5.2240%" y="85" width="0.0795%" height="15" fill="rgb(254,207,30)" fg:x="4402" fg:w="67"/><text x="5.5170%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.11%)</title><rect x="5.2240%" y="101" width="0.1139%" height="15" fill="rgb(245,203,6)" fg:x="4402" fg:w="96"/><text x="5.5170%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.01%)</title><rect x="5.3379%" y="53" width="0.0131%" height="15" fill="rgb(214,62,40)" fg:x="4498" fg:w="11"/><text x="5.6309%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.04%)</title><rect x="5.3510%" y="37" width="0.0415%" height="15" fill="rgb(219,195,29)" fg:x="4509" fg:w="35"/><text x="5.6439%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.08%)</title><rect x="5.3510%" y="53" width="0.0760%" height="15" fill="rgb(235,127,41)" fg:x="4509" fg:w="64"/><text x="5.6439%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.17%)</title><rect x="5.3379%" y="69" width="0.1709%" height="15" fill="rgb(213,229,13)" fg:x="4498" fg:w="144"/><text x="5.6309%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.25%)</title><rect x="5.3379%" y="85" width="0.2492%" height="15" fill="rgb(240,25,38)" fg:x="4498" fg:w="210"/><text x="5.6309%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.26%)</title><rect x="5.3379%" y="101" width="0.2611%" height="15" fill="rgb(233,46,21)" fg:x="4498" fg:w="220"/><text x="5.6309%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 0.53%)</title><rect x="5.2240%" y="117" width="0.5328%" height="15" fill="rgb(205,19,12)" fg:x="4402" fg:w="449"/><text x="5.5170%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 0.79%)</title><rect x="5.1267%" y="133" width="0.7916%" height="15" fill="rgb(205,77,8)" fg:x="4320" fg:w="667"/><text x="5.4197%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.08%)</title><rect x="5.9182%" y="133" width="0.0760%" height="15" fill="rgb(237,71,25)" fg:x="4987" fg:w="64"/><text x="6.2112%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.07%)</title><rect x="5.9942%" y="133" width="0.0724%" height="15" fill="rgb(225,31,33)" fg:x="5051" fg:w="61"/><text x="6.2872%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 1.07%)</title><rect x="5.1267%" y="149" width="1.0716%" height="15" fill="rgb(246,43,46)" fg:x="4320" fg:w="903"/><text x="5.4197%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.06%)</title><rect x="6.1983%" y="133" width="0.0605%" height="15" fill="rgb(222,43,29)" fg:x="5223" fg:w="51"/><text x="6.4913%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (118 instructions, 0.14%)</title><rect x="6.2588%" y="133" width="0.1400%" height="15" fill="rgb(215,163,28)" fg:x="5274" fg:w="118"/><text x="6.5518%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.05%)</title><rect x="6.3989%" y="133" width="0.0546%" height="15" fill="rgb(220,195,6)" fg:x="5392" fg:w="46"/><text x="6.6918%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 0.34%)</title><rect x="6.1983%" y="149" width="0.3358%" height="15" fill="rgb(252,85,8)" fg:x="5223" fg:w="283"/><text x="6.4913%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="6.5341%" y="149" width="0.0973%" height="15" fill="rgb(233,101,3)" fg:x="5506" fg:w="82"/><text x="6.8271%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,910 instructions, 2.27%)</title><rect x="4.5855%" y="165" width="2.2667%" height="15" fill="rgb(234,96,35)" fg:x="3864" fg:w="1910"/><text x="4.8785%" y="175.50">b..</text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.05%)</title><rect x="6.8522%" y="165" width="0.0546%" height="15" fill="rgb(234,204,23)" fg:x="5774" fg:w="46"/><text x="7.1452%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.02%)</title><rect x="6.9068%" y="165" width="0.0178%" height="15" fill="rgb(227,101,12)" fg:x="5820" fg:w="15"/><text x="7.1998%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (158 instructions, 0.19%)</title><rect x="6.9341%" y="149" width="0.1875%" height="15" fill="rgb(219,212,1)" fg:x="5843" fg:w="158"/><text x="7.2270%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (254 instructions, 0.30%)</title><rect x="6.9341%" y="165" width="0.3014%" height="15" fill="rgb(230,182,52)" fg:x="5843" fg:w="254"/><text x="7.2270%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="7.2355%" y="133" width="0.0973%" height="15" fill="rgb(213,181,9)" fg:x="6097" fg:w="82"/><text x="7.5285%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.15%)</title><rect x="7.2355%" y="149" width="0.1460%" height="15" fill="rgb(249,110,5)" fg:x="6097" fg:w="123"/><text x="7.5285%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (210 instructions, 0.25%)</title><rect x="7.2355%" y="165" width="0.2492%" height="15" fill="rgb(246,214,38)" fg:x="6097" fg:w="210"/><text x="7.5285%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="7.4847%" y="165" width="0.0973%" height="15" fill="rgb(234,19,13)" fg:x="6307" fg:w="82"/><text x="7.7777%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.11%)</title><rect x="7.5820%" y="165" width="0.1056%" height="15" fill="rgb(249,115,4)" fg:x="6389" fg:w="89"/><text x="7.8750%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="7.6877%" y="165" width="0.0973%" height="15" fill="rgb(216,80,1)" fg:x="6478" fg:w="82"/><text x="7.9806%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="7.7850%" y="165" width="0.0973%" height="15" fill="rgb(214,106,8)" fg:x="6560" fg:w="82"/><text x="8.0779%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.11%)</title><rect x="7.8882%" y="165" width="0.1056%" height="15" fill="rgb(227,109,42)" fg:x="6647" fg:w="89"/><text x="8.1812%" y="175.50"></text></g><g><title>memcpy (392 instructions, 0.47%)</title><rect x="7.9938%" y="165" width="0.4652%" height="15" fill="rgb(228,92,16)" fg:x="6736" fg:w="392"/><text x="8.2868%" y="175.50"></text></g><g><title>memcpy (392 instructions, 0.47%)</title><rect x="8.4590%" y="165" width="0.4652%" height="15" fill="rgb(226,149,6)" fg:x="7128" fg:w="392"/><text x="8.7520%" y="175.50"></text></g><g><title>memcpy (504 instructions, 0.60%)</title><rect x="8.9242%" y="165" width="0.5981%" height="15" fill="rgb(229,81,18)" fg:x="7520" fg:w="504"/><text x="9.2172%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,933 instructions, 9.41%)</title><rect x="1.5843%" y="181" width="9.4143%" height="15" fill="rgb(243,71,38)" fg:x="1335" fg:w="7933"/><text x="1.8773%" y="191.50">candid::de:..</text></g><g><title>memcpy (408 instructions, 0.48%)</title><rect x="10.9986%" y="181" width="0.4842%" height="15" fill="rgb(214,174,30)" fg:x="9268" fg:w="408"/><text x="11.2916%" y="191.50"></text></g><g><title>memcpy (408 instructions, 0.48%)</title><rect x="11.4828%" y="181" width="0.4842%" height="15" fill="rgb(228,204,34)" fg:x="9676" fg:w="408"/><text x="11.7758%" y="191.50"></text></g><g><title>candid::types::internal::find_type (24 instructions, 0.03%)</title><rect x="11.9670%" y="181" width="0.0285%" height="15" fill="rgb(244,161,29)" fg:x="10084" fg:w="24"/><text x="12.2600%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="11.9955%" y="181" width="0.0973%" height="15" fill="rgb(243,88,43)" fg:x="10108" fg:w="82"/><text x="12.2885%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (91 instructions, 0.11%)</title><rect x="12.0928%" y="165" width="0.1080%" height="15" fill="rgb(210,89,1)" fg:x="10190" fg:w="91"/><text x="12.3858%" y="175.50"></text></g><g><title>candid::types::internal::env_add (175 instructions, 0.21%)</title><rect x="12.0928%" y="181" width="0.2077%" height="15" fill="rgb(252,117,6)" fg:x="10190" fg:w="175"/><text x="12.3858%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="12.3005%" y="181" width="0.0973%" height="15" fill="rgb(209,186,35)" fg:x="10365" fg:w="82"/><text x="12.5934%" y="191.50"></text></g><g><title>memcmp (77 instructions, 0.09%)</title><rect x="12.3978%" y="165" width="0.0914%" height="15" fill="rgb(238,33,11)" fg:x="10447" fg:w="77"/><text x="12.6908%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.11%)</title><rect x="12.4892%" y="149" width="0.1056%" height="15" fill="rgb(213,221,30)" fg:x="10524" fg:w="89"/><text x="12.7821%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.19%)</title><rect x="12.4892%" y="165" width="0.1899%" height="15" fill="rgb(218,140,36)" fg:x="10524" fg:w="160"/><text x="12.7821%" y="175.50"></text></g><g><title>candid::types::internal::env_add (416 instructions, 0.49%)</title><rect x="12.3978%" y="181" width="0.4937%" height="15" fill="rgb(231,4,17)" fg:x="10447" fg:w="416"/><text x="12.6908%" y="191.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (49 instructions, 0.06%)</title><rect x="12.8915%" y="165" width="0.0581%" height="15" fill="rgb(248,228,33)" fg:x="10863" fg:w="49"/><text x="13.1844%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.02%)</title><rect x="12.9496%" y="165" width="0.0166%" height="15" fill="rgb(240,199,0)" fg:x="10912" fg:w="14"/><text x="13.2426%" y="175.50"></text></g><g><title>candid::types::internal::env_id (200 instructions, 0.24%)</title><rect x="12.8915%" y="181" width="0.2373%" height="15" fill="rgb(230,13,39)" fg:x="10863" fg:w="200"/><text x="13.1844%" y="191.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.06%)</title><rect x="13.1288%" y="181" width="0.0581%" height="15" fill="rgb(210,159,50)" fg:x="11063" fg:w="49"/><text x="13.4218%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.10%)</title><rect x="13.1870%" y="165" width="0.0985%" height="15" fill="rgb(240,22,11)" fg:x="11112" fg:w="83"/><text x="13.4799%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.03%)</title><rect x="13.3697%" y="149" width="0.0273%" height="15" fill="rgb(240,94,21)" fg:x="11266" fg:w="23"/><text x="13.6627%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.16%)</title><rect x="13.3697%" y="165" width="0.1638%" height="15" fill="rgb(218,209,45)" fg:x="11266" fg:w="138"/><text x="13.6627%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (363 instructions, 0.43%)</title><rect x="13.1870%" y="181" width="0.4308%" height="15" fill="rgb(244,223,36)" fg:x="11112" fg:w="363"/><text x="13.4799%" y="191.50"></text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.04%)</title><rect x="13.6178%" y="165" width="0.0439%" height="15" fill="rgb(215,20,45)" fg:x="11475" fg:w="37"/><text x="13.9107%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (34 instructions, 0.04%)</title><rect x="13.6617%" y="165" width="0.0403%" height="15" fill="rgb(225,203,19)" fg:x="11512" fg:w="34"/><text x="13.9546%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (34 instructions, 0.04%)</title><rect x="13.7020%" y="165" width="0.0403%" height="15" fill="rgb(238,131,22)" fg:x="11546" fg:w="34"/><text x="13.9950%" y="175.50"></text></g><g><title>candid::de::Deserializer::add_cost (31 instructions, 0.04%)</title><rect x="13.7424%" y="165" width="0.0368%" height="15" fill="rgb(250,207,51)" fg:x="11580" fg:w="31"/><text x="14.0353%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (261 instructions, 0.31%)</title><rect x="13.6178%" y="181" width="0.3097%" height="15" fill="rgb(230,43,16)" fg:x="11475" fg:w="261"/><text x="13.9107%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.02%)</title><rect x="13.9275%" y="181" width="0.0166%" height="15" fill="rgb(244,4,6)" fg:x="11736" fg:w="14"/><text x="14.2205%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.02%)</title><rect x="13.9441%" y="181" width="0.0166%" height="15" fill="rgb(251,41,9)" fg:x="11750" fg:w="14"/><text x="14.2371%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.02%)</title><rect x="13.9607%" y="181" width="0.0166%" height="15" fill="rgb(240,39,16)" fg:x="11764" fg:w="14"/><text x="14.2537%" y="191.50"></text></g><g><title>candid::de::IDLDeserialize::done (37 instructions, 0.04%)</title><rect x="13.9773%" y="181" width="0.0439%" height="15" fill="rgb(254,142,26)" fg:x="11778" fg:w="37"/><text x="14.2703%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="14.0307%" y="149" width="0.0320%" height="15" fill="rgb(215,170,26)" fg:x="11823" fg:w="27"/><text x="14.3237%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.17%)</title><rect x="14.0307%" y="165" width="0.1685%" height="15" fill="rgb(225,130,18)" fg:x="11823" fg:w="142"/><text x="14.3237%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="14.1993%" y="133" width="0.0320%" height="15" fill="rgb(254,112,28)" fg:x="11965" fg:w="27"/><text x="14.4922%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.17%)</title><rect x="14.1993%" y="149" width="0.1685%" height="15" fill="rgb(212,87,16)" fg:x="11965" fg:w="142"/><text x="14.4922%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (213 instructions, 0.25%)</title><rect x="14.1993%" y="165" width="0.2528%" height="15" fill="rgb(236,188,30)" fg:x="11965" fg:w="213"/><text x="14.4922%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.02%)</title><rect x="14.4520%" y="165" width="0.0166%" height="15" fill="rgb(254,194,4)" fg:x="12178" fg:w="14"/><text x="14.7450%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (474 instructions, 0.56%)</title><rect x="14.0212%" y="181" width="0.5625%" height="15" fill="rgb(240,134,7)" fg:x="11815" fg:w="474"/><text x="14.3142%" y="191.50"></text></g><g><title>candid::utils::decode_args_with_config_debug (11,386 instructions, 13.51%)</title><rect x="1.5843%" y="197" width="13.5121%" height="15" fill="rgb(207,72,11)" fg:x="1335" fg:w="11386"/><text x="1.8773%" y="207.50">candid::utils::de..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="15.0964%" y="181" width="0.0320%" height="15" fill="rgb(253,190,49)" fg:x="12721" fg:w="27"/><text x="15.3894%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (136 instructions, 0.16%)</title><rect x="15.0964%" y="197" width="0.1614%" height="15" fill="rgb(221,53,21)" fg:x="12721" fg:w="136"/><text x="15.3894%" y="207.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,802 instructions, 15.19%)</title><rect x="0.1923%" y="213" width="15.1925%" height="15" fill="rgb(239,138,15)" fg:x="162" fg:w="12802"/><text x="0.4852%" y="223.50">ic_cdk::api::call::..</text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="15.3848%" y="197" width="0.3798%" height="15" fill="rgb(244,140,30)" fg:x="12964" fg:w="320"/><text x="15.6778%" y="207.50"></text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="15.7646%" y="197" width="0.3798%" height="15" fill="rgb(244,208,1)" fg:x="13284" fg:w="320"/><text x="16.0575%" y="207.50"></text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="16.2535%" y="197" width="0.3798%" height="15" fill="rgb(227,213,21)" fg:x="13696" fg:w="320"/><text x="16.5465%" y="207.50"></text></g><g><title>memmove (320 instructions, 0.38%)</title><rect x="16.6332%" y="197" width="0.3798%" height="15" fill="rgb(252,96,8)" fg:x="14016" fg:w="320"/><text x="16.9262%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.1222%" y="197" width="0.0273%" height="15" fill="rgb(252,94,29)" fg:x="14428" fg:w="23"/><text x="17.4151%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.1495%" y="197" width="0.0273%" height="15" fill="rgb(227,167,32)" fg:x="14451" fg:w="23"/><text x="17.4424%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.1768%" y="181" width="0.0273%" height="15" fill="rgb(207,132,4)" fg:x="14474" fg:w="23"/><text x="17.4697%" y="191.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="17.2041%" y="181" width="0.2184%" height="15" fill="rgb(220,64,17)" fg:x="14497" fg:w="184"/><text x="17.4970%" y="191.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.4224%" y="181" width="0.0273%" height="15" fill="rgb(231,95,24)" fg:x="14681" fg:w="23"/><text x="17.7154%" y="191.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="17.4497%" y="181" width="0.2184%" height="15" fill="rgb(229,39,43)" fg:x="14704" fg:w="184"/><text x="17.7427%" y="191.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="17.6681%" y="181" width="0.0273%" height="15" fill="rgb(228,65,51)" fg:x="14888" fg:w="23"/><text x="17.9610%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.11%)</title><rect x="17.6954%" y="181" width="0.1056%" height="15" fill="rgb(225,51,28)" fg:x="14911" fg:w="89"/><text x="17.9883%" y="191.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (736 instructions, 0.87%)</title><rect x="17.1768%" y="197" width="0.8734%" height="15" fill="rgb(249,155,10)" fg:x="14474" fg:w="736"/><text x="17.4697%" y="207.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="18.2816%" y="197" width="0.1899%" height="15" fill="rgb(214,130,7)" fg:x="15405" fg:w="160"/><text x="18.5746%" y="207.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="18.4715%" y="197" width="0.1899%" height="15" fill="rgb(233,8,10)" fg:x="15565" fg:w="160"/><text x="18.7645%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="18.7705%" y="197" width="0.0273%" height="15" fill="rgb(237,221,45)" fg:x="15817" fg:w="23"/><text x="19.0635%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="18.7978%" y="197" width="0.0273%" height="15" fill="rgb(248,54,37)" fg:x="15840" fg:w="23"/><text x="19.0908%" y="207.50"></text></g><g><title>memmove (206 instructions, 0.24%)</title><rect x="18.8251%" y="181" width="0.2445%" height="15" fill="rgb(247,100,48)" fg:x="15863" fg:w="206"/><text x="19.1181%" y="191.50"></text></g><g><title>memmove (206 instructions, 0.24%)</title><rect x="19.0696%" y="181" width="0.2445%" height="15" fill="rgb(248,89,9)" fg:x="16069" fg:w="206"/><text x="19.3626%" y="191.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="19.3141%" y="181" width="0.0178%" height="15" fill="rgb(207,111,27)" fg:x="16275" fg:w="15"/><text x="19.6070%" y="191.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="19.3319%" y="181" width="0.0178%" height="15" fill="rgb(230,43,10)" fg:x="16290" fg:w="15"/><text x="19.6248%" y="191.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_left (604 instructions, 0.72%)</title><rect x="18.8251%" y="197" width="0.7168%" height="15" fill="rgb(218,62,36)" fg:x="15863" fg:w="604"/><text x="19.1181%" y="207.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="19.7555%" y="197" width="0.1519%" height="15" fill="rgb(248,104,39)" fg:x="16647" fg:w="128"/><text x="20.0485%" y="207.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="19.9074%" y="197" width="0.1519%" height="15" fill="rgb(216,108,17)" fg:x="16775" fg:w="128"/><text x="20.2004%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.1685%" y="197" width="0.0273%" height="15" fill="rgb(231,132,36)" fg:x="16995" fg:w="23"/><text x="20.4615%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.1958%" y="197" width="0.0273%" height="15" fill="rgb(235,125,51)" fg:x="17018" fg:w="23"/><text x="20.4888%" y="207.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="20.3323%" y="197" width="0.1899%" height="15" fill="rgb(213,9,27)" fg:x="17133" fg:w="160"/><text x="20.6253%" y="207.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="20.5222%" y="197" width="0.1899%" height="15" fill="rgb(243,119,9)" fg:x="17293" fg:w="160"/><text x="20.8151%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.8212%" y="197" width="0.0273%" height="15" fill="rgb(254,118,1)" fg:x="17545" fg:w="23"/><text x="21.1142%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.8485%" y="197" width="0.0273%" height="15" fill="rgb(227,13,42)" fg:x="17568" fg:w="23"/><text x="21.1415%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="20.9850%" y="197" width="0.0273%" height="15" fill="rgb(241,15,52)" fg:x="17683" fg:w="23"/><text x="21.2780%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.0123%" y="197" width="0.0273%" height="15" fill="rgb(235,67,24)" fg:x="17706" fg:w="23"/><text x="21.3053%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.1488%" y="197" width="0.0273%" height="15" fill="rgb(236,11,15)" fg:x="17821" fg:w="23"/><text x="21.4417%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="21.1761%" y="197" width="0.0273%" height="15" fill="rgb(228,83,45)" fg:x="17844" fg:w="23"/><text x="21.4690%" y="207.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="21.3125%" y="197" width="0.2279%" height="15" fill="rgb(214,178,40)" fg:x="17959" fg:w="192"/><text x="21.6055%" y="207.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="21.5404%" y="197" width="0.2279%" height="15" fill="rgb(230,35,32)" fg:x="18151" fg:w="192"/><text x="21.8333%" y="207.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="21.8774%" y="197" width="0.3038%" height="15" fill="rgb(228,48,45)" fg:x="18435" fg:w="256"/><text x="22.1704%" y="207.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="22.1812%" y="197" width="0.3038%" height="15" fill="rgb(208,217,29)" fg:x="18691" fg:w="256"/><text x="22.4742%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="22.5942%" y="197" width="0.0273%" height="15" fill="rgb(254,20,15)" fg:x="19039" fg:w="23"/><text x="22.8872%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="22.6215%" y="197" width="0.0273%" height="15" fill="rgb(248,17,10)" fg:x="19062" fg:w="23"/><text x="22.9145%" y="207.50"></text></g><g><title>memmove (157 instructions, 0.19%)</title><rect x="22.7580%" y="197" width="0.1863%" height="15" fill="rgb(221,108,33)" fg:x="19177" fg:w="157"/><text x="23.0509%" y="207.50"></text></g><g><title>memmove (157 instructions, 0.19%)</title><rect x="22.9443%" y="197" width="0.1863%" height="15" fill="rgb(244,189,32)" fg:x="19334" fg:w="157"/><text x="23.2373%" y="207.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="23.2398%" y="197" width="0.1899%" height="15" fill="rgb(233,173,43)" fg:x="19583" fg:w="160"/><text x="23.5327%" y="207.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="23.4297%" y="197" width="0.1899%" height="15" fill="rgb(212,88,24)" fg:x="19743" fg:w="160"/><text x="23.7226%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="23.7287%" y="197" width="0.0273%" height="15" fill="rgb(242,110,44)" fg:x="19995" fg:w="23"/><text x="24.0217%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="23.7560%" y="197" width="0.0273%" height="15" fill="rgb(233,205,47)" fg:x="20018" fg:w="23"/><text x="24.0490%" y="207.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="23.8925%" y="197" width="0.2279%" height="15" fill="rgb(234,49,35)" fg:x="20133" fg:w="192"/><text x="24.1855%" y="207.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="24.1203%" y="197" width="0.2279%" height="15" fill="rgb(207,73,30)" fg:x="20325" fg:w="192"/><text x="24.4133%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="24.4574%" y="197" width="0.0273%" height="15" fill="rgb(214,191,21)" fg:x="20609" fg:w="23"/><text x="24.7503%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="24.4847%" y="197" width="0.0273%" height="15" fill="rgb(227,12,24)" fg:x="20632" fg:w="23"/><text x="24.7776%" y="207.50"></text></g><g><title>memmove (224 instructions, 0.27%)</title><rect x="24.6211%" y="197" width="0.2658%" height="15" fill="rgb(254,197,6)" fg:x="20747" fg:w="224"/><text x="24.9141%" y="207.50"></text></g><g><title>memmove (224 instructions, 0.27%)</title><rect x="24.8870%" y="197" width="0.2658%" height="15" fill="rgb(208,221,49)" fg:x="20971" fg:w="224"/><text x="25.1799%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.2620%" y="197" width="0.0273%" height="15" fill="rgb(228,35,2)" fg:x="21287" fg:w="23"/><text x="25.5549%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.2893%" y="197" width="0.0273%" height="15" fill="rgb(246,60,35)" fg:x="21310" fg:w="23"/><text x="25.5822%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.4257%" y="197" width="0.0273%" height="15" fill="rgb(230,21,8)" fg:x="21425" fg:w="23"/><text x="25.7187%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.4530%" y="197" width="0.0273%" height="15" fill="rgb(242,56,26)" fg:x="21448" fg:w="23"/><text x="25.7460%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.5895%" y="197" width="0.0273%" height="15" fill="rgb(216,20,27)" fg:x="21563" fg:w="23"/><text x="25.8825%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.6168%" y="197" width="0.0273%" height="15" fill="rgb(214,65,20)" fg:x="21586" fg:w="23"/><text x="25.9098%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.7533%" y="197" width="0.0273%" height="15" fill="rgb(234,179,42)" fg:x="21701" fg:w="23"/><text x="26.0462%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.7806%" y="197" width="0.0273%" height="15" fill="rgb(222,24,3)" fg:x="21724" fg:w="23"/><text x="26.0735%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.9170%" y="197" width="0.0273%" height="15" fill="rgb(209,17,37)" fg:x="21839" fg:w="23"/><text x="26.2100%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="25.9443%" y="197" width="0.0273%" height="15" fill="rgb(216,211,14)" fg:x="21862" fg:w="23"/><text x="26.2373%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.0808%" y="197" width="0.0273%" height="15" fill="rgb(213,117,9)" fg:x="21977" fg:w="23"/><text x="26.3738%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.1081%" y="197" width="0.0273%" height="15" fill="rgb(206,98,8)" fg:x="22000" fg:w="23"/><text x="26.4011%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.2446%" y="197" width="0.0273%" height="15" fill="rgb(209,24,13)" fg:x="22115" fg:w="23"/><text x="26.5376%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.2719%" y="197" width="0.0273%" height="15" fill="rgb(212,56,29)" fg:x="22138" fg:w="23"/><text x="26.5648%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.2992%" y="181" width="0.0273%" height="15" fill="rgb(240,107,1)" fg:x="22161" fg:w="23"/><text x="26.5921%" y="191.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="26.3265%" y="181" width="0.2184%" height="15" fill="rgb(205,86,22)" fg:x="22184" fg:w="184"/><text x="26.6194%" y="191.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.5448%" y="181" width="0.0273%" height="15" fill="rgb(237,139,22)" fg:x="22368" fg:w="23"/><text x="26.8378%" y="191.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="26.5721%" y="181" width="0.2184%" height="15" fill="rgb(212,95,25)" fg:x="22391" fg:w="184"/><text x="26.8651%" y="191.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="26.7905%" y="181" width="0.0273%" height="15" fill="rgb(211,174,37)" fg:x="22575" fg:w="23"/><text x="27.0835%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.10%)</title><rect x="26.8178%" y="181" width="0.0985%" height="15" fill="rgb(211,170,45)" fg:x="22598" fg:w="83"/><text x="27.1107%" y="191.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (730 instructions, 0.87%)</title><rect x="26.2992%" y="197" width="0.8663%" height="15" fill="rgb(212,51,51)" fg:x="22161" fg:w="730"/><text x="26.5921%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.1655%" y="197" width="0.0273%" height="15" fill="rgb(226,169,24)" fg:x="22891" fg:w="23"/><text x="27.4585%" y="207.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="27.1928%" y="197" width="0.2184%" height="15" fill="rgb(238,196,16)" fg:x="22914" fg:w="184"/><text x="27.4858%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.4111%" y="197" width="0.0273%" height="15" fill="rgb(211,120,46)" fg:x="23098" fg:w="23"/><text x="27.7041%" y="207.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="27.4384%" y="197" width="0.2184%" height="15" fill="rgb(228,207,2)" fg:x="23121" fg:w="184"/><text x="27.7314%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="27.6568%" y="197" width="0.0273%" height="15" fill="rgb(250,140,8)" fg:x="23305" fg:w="23"/><text x="27.9498%" y="207.50"></text></g><g><title>memcpy (136 instructions, 0.16%)</title><rect x="27.6841%" y="197" width="0.1614%" height="15" fill="rgb(225,104,31)" fg:x="23328" fg:w="136"/><text x="27.9771%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.03%)</title><rect x="27.8455%" y="181" width="0.0273%" height="15" fill="rgb(224,139,10)" fg:x="23464" fg:w="23"/><text x="28.1385%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.08%)</title><rect x="27.8728%" y="181" width="0.0795%" height="15" fill="rgb(252,179,9)" fg:x="23487" fg:w="67"/><text x="28.1658%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (185 instructions, 0.22%)</title><rect x="27.8455%" y="197" width="0.2195%" height="15" fill="rgb(207,124,42)" fg:x="23464" fg:w="185"/><text x="28.1385%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="28.7771%" y="197" width="0.0273%" height="15" fill="rgb(238,116,17)" fg:x="24249" fg:w="23"/><text x="29.0700%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="28.8044%" y="197" width="0.0273%" height="15" fill="rgb(244,148,39)" fg:x="24272" fg:w="23"/><text x="29.0973%" y="207.50"></text></g><g><title>memmove (288 instructions, 0.34%)</title><rect x="28.9408%" y="197" width="0.3418%" height="15" fill="rgb(218,104,19)" fg:x="24387" fg:w="288"/><text x="29.2338%" y="207.50"></text></g><g><title>memmove (288 instructions, 0.34%)</title><rect x="29.2826%" y="197" width="0.3418%" height="15" fill="rgb(213,111,6)" fg:x="24675" fg:w="288"/><text x="29.5756%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="29.7336%" y="197" width="0.0273%" height="15" fill="rgb(232,47,49)" fg:x="25055" fg:w="23"/><text x="30.0265%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="29.7609%" y="197" width="0.0273%" height="15" fill="rgb(244,8,13)" fg:x="25078" fg:w="23"/><text x="30.0538%" y="207.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="29.8973%" y="197" width="0.1899%" height="15" fill="rgb(213,131,34)" fg:x="25193" fg:w="160"/><text x="30.1903%" y="207.50"></text></g><g><title>memmove (160 instructions, 0.19%)</title><rect x="30.0872%" y="197" width="0.1899%" height="15" fill="rgb(248,73,5)" fg:x="25353" fg:w="160"/><text x="30.3802%" y="207.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="30.2771%" y="181" width="0.2279%" height="15" fill="rgb(212,131,42)" fg:x="25513" fg:w="192"/><text x="30.5701%" y="191.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="30.5050%" y="181" width="0.2184%" height="15" fill="rgb(222,60,48)" fg:x="25705" fg:w="184"/><text x="30.7979%" y="191.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="30.7233%" y="181" width="0.2279%" height="15" fill="rgb(205,142,31)" fg:x="25889" fg:w="192"/><text x="31.0163%" y="191.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="30.9512%" y="181" width="0.2184%" height="15" fill="rgb(251,121,48)" fg:x="26081" fg:w="184"/><text x="31.2441%" y="191.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="31.1695%" y="181" width="0.1519%" height="15" fill="rgb(231,29,41)" fg:x="26265" fg:w="128"/><text x="31.4625%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.10%)</title><rect x="31.3214%" y="181" width="0.0985%" height="15" fill="rgb(226,219,38)" fg:x="26393" fg:w="83"/><text x="31.6144%" y="191.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (1,252 instructions, 1.49%)</title><rect x="30.2771%" y="197" width="1.4858%" height="15" fill="rgb(223,116,0)" fg:x="25513" fg:w="1252"/><text x="30.5701%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="31.9943%" y="197" width="0.0273%" height="15" fill="rgb(253,48,30)" fg:x="26960" fg:w="23"/><text x="32.2873%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.0216%" y="197" width="0.0273%" height="15" fill="rgb(225,119,12)" fg:x="26983" fg:w="23"/><text x="32.3146%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.1581%" y="197" width="0.0273%" height="15" fill="rgb(216,216,15)" fg:x="27098" fg:w="23"/><text x="32.4510%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.1854%" y="197" width="0.0273%" height="15" fill="rgb(249,3,8)" fg:x="27121" fg:w="23"/><text x="32.4783%" y="207.50"></text></g><g><title>memmove (224 instructions, 0.27%)</title><rect x="32.3218%" y="197" width="0.2658%" height="15" fill="rgb(234,108,31)" fg:x="27236" fg:w="224"/><text x="32.6148%" y="207.50"></text></g><g><title>memmove (224 instructions, 0.27%)</title><rect x="32.5877%" y="197" width="0.2658%" height="15" fill="rgb(207,17,53)" fg:x="27460" fg:w="224"/><text x="32.8806%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.9627%" y="197" width="0.0273%" height="15" fill="rgb(234,91,40)" fg:x="27776" fg:w="23"/><text x="33.2556%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="32.9900%" y="197" width="0.0273%" height="15" fill="rgb(245,90,10)" fg:x="27799" fg:w="23"/><text x="33.2829%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.1264%" y="197" width="0.0273%" height="15" fill="rgb(249,105,0)" fg:x="27914" fg:w="23"/><text x="33.4194%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.1537%" y="197" width="0.0273%" height="15" fill="rgb(211,107,47)" fg:x="27937" fg:w="23"/><text x="33.4467%" y="207.50"></text></g><g><title>memmove (224 instructions, 0.27%)</title><rect x="33.2902%" y="197" width="0.2658%" height="15" fill="rgb(216,0,54)" fg:x="28052" fg:w="224"/><text x="33.5832%" y="207.50"></text></g><g><title>memmove (224 instructions, 0.27%)</title><rect x="33.5560%" y="197" width="0.2658%" height="15" fill="rgb(217,74,0)" fg:x="28276" fg:w="224"/><text x="33.8490%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.9311%" y="197" width="0.0273%" height="15" fill="rgb(231,55,14)" fg:x="28592" fg:w="23"/><text x="34.2240%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="33.9583%" y="197" width="0.0273%" height="15" fill="rgb(241,179,37)" fg:x="28615" fg:w="23"/><text x="34.2513%" y="207.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="34.0948%" y="197" width="0.2279%" height="15" fill="rgb(231,160,20)" fg:x="28730" fg:w="192"/><text x="34.3878%" y="207.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="34.3227%" y="197" width="0.2279%" height="15" fill="rgb(224,15,51)" fg:x="28922" fg:w="192"/><text x="34.6156%" y="207.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="34.6597%" y="197" width="0.3038%" height="15" fill="rgb(238,58,2)" fg:x="29206" fg:w="256"/><text x="34.9527%" y="207.50"></text></g><g><title>memmove (256 instructions, 0.30%)</title><rect x="34.9635%" y="197" width="0.3038%" height="15" fill="rgb(254,169,43)" fg:x="29462" fg:w="256"/><text x="35.2565%" y="207.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="35.3765%" y="197" width="0.2279%" height="15" fill="rgb(228,96,52)" fg:x="29810" fg:w="192"/><text x="35.6695%" y="207.50"></text></g><g><title>memmove (192 instructions, 0.23%)</title><rect x="35.6043%" y="197" width="0.2279%" height="15" fill="rgb(229,219,13)" fg:x="30002" fg:w="192"/><text x="35.8973%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="35.9414%" y="197" width="0.0273%" height="15" fill="rgb(227,17,21)" fg:x="30286" fg:w="23"/><text x="36.2343%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="35.9687%" y="197" width="0.0273%" height="15" fill="rgb(209,217,43)" fg:x="30309" fg:w="23"/><text x="36.2616%" y="207.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="35.9960%" y="181" width="0.1519%" height="15" fill="rgb(242,126,15)" fg:x="30332" fg:w="128"/><text x="36.2889%" y="191.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="36.1479%" y="181" width="0.2184%" height="15" fill="rgb(219,194,13)" fg:x="30460" fg:w="184"/><text x="36.4408%" y="191.50"></text></g><g><title>memmove (128 instructions, 0.15%)</title><rect x="36.3662%" y="181" width="0.1519%" height="15" fill="rgb(210,115,38)" fg:x="30644" fg:w="128"/><text x="36.6592%" y="191.50"></text></g><g><title>memcpy (184 instructions, 0.22%)</title><rect x="36.5181%" y="181" width="0.2184%" height="15" fill="rgb(237,50,49)" fg:x="30772" fg:w="184"/><text x="36.8111%" y="191.50"></text></g><g><title>memmove (157 instructions, 0.19%)</title><rect x="36.7365%" y="181" width="0.1863%" height="15" fill="rgb(219,52,52)" fg:x="30956" fg:w="157"/><text x="37.0295%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.10%)</title><rect x="36.9228%" y="181" width="0.0985%" height="15" fill="rgb(235,61,51)" fg:x="31113" fg:w="83"/><text x="37.2158%" y="191.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (1,141 instructions, 1.35%)</title><rect x="35.9960%" y="197" width="1.3541%" height="15" fill="rgb(206,36,34)" fg:x="30332" fg:w="1141"/><text x="36.2889%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="37.5814%" y="197" width="0.0273%" height="15" fill="rgb(246,37,40)" fg:x="31668" fg:w="23"/><text x="37.8744%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="37.6087%" y="197" width="0.0273%" height="15" fill="rgb(242,11,32)" fg:x="31691" fg:w="23"/><text x="37.9017%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="37.7452%" y="197" width="0.0273%" height="15" fill="rgb(240,65,4)" fg:x="31806" fg:w="23"/><text x="38.0382%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="37.7725%" y="197" width="0.0273%" height="15" fill="rgb(245,43,4)" fg:x="31829" fg:w="23"/><text x="38.0655%" y="207.50"></text></g><g><title>memmove (157 instructions, 0.19%)</title><rect x="37.9090%" y="197" width="0.1863%" height="15" fill="rgb(232,28,48)" fg:x="31944" fg:w="157"/><text x="38.2019%" y="207.50"></text></g><g><title>memmove (157 instructions, 0.19%)</title><rect x="38.0953%" y="197" width="0.1863%" height="15" fill="rgb(239,150,38)" fg:x="32101" fg:w="157"/><text x="38.3883%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.3908%" y="197" width="0.0273%" height="15" fill="rgb(230,146,26)" fg:x="32350" fg:w="23"/><text x="38.6838%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.4181%" y="197" width="0.0273%" height="15" fill="rgb(229,41,16)" fg:x="32373" fg:w="23"/><text x="38.7111%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.5546%" y="197" width="0.0273%" height="15" fill="rgb(209,99,50)" fg:x="32488" fg:w="23"/><text x="38.8475%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="38.5819%" y="197" width="0.0273%" height="15" fill="rgb(245,144,21)" fg:x="32511" fg:w="23"/><text x="38.8748%" y="207.50"></text></g><g><title>memmove (224 instructions, 0.27%)</title><rect x="38.7183%" y="197" width="0.2658%" height="15" fill="rgb(233,106,6)" fg:x="32626" fg:w="224"/><text x="39.0113%" y="207.50"></text></g><g><title>memmove (224 instructions, 0.27%)</title><rect x="38.9842%" y="197" width="0.2658%" height="15" fill="rgb(229,35,52)" fg:x="32850" fg:w="224"/><text x="39.2771%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.3592%" y="197" width="0.0273%" height="15" fill="rgb(215,94,6)" fg:x="33166" fg:w="23"/><text x="39.6521%" y="207.50"></text></g><g><title>memmove (23 instructions, 0.03%)</title><rect x="39.3865%" y="197" width="0.0273%" height="15" fill="rgb(222,188,35)" fg:x="33189" fg:w="23"/><text x="39.6794%" y="207.50"></text></g><g><title>memmove (157 instructions, 0.19%)</title><rect x="39.5229%" y="197" width="0.1863%" height="15" fill="rgb(254,150,19)" fg:x="33304" fg:w="157"/><text x="39.8159%" y="207.50"></text></g><g><title>memmove (157 instructions, 0.19%)</title><rect x="39.7093%" y="197" width="0.1863%" height="15" fill="rgb(226,5,2)" fg:x="33461" fg:w="157"/><text x="40.0022%" y="207.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (20,746 instructions, 24.62%)</title><rect x="15.3848%" y="213" width="24.6199%" height="15" fill="rgb(209,71,49)" fg:x="12964" fg:w="20746"/><text x="15.6778%" y="223.50">alloc::collections::btree::remove..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="40.0047%" y="149" width="0.0320%" height="15" fill="rgb(220,195,34)" fg:x="33710" fg:w="27"/><text x="40.2977%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (116 instructions, 0.14%)</title><rect x="40.0047%" y="165" width="0.1377%" height="15" fill="rgb(247,179,42)" fg:x="33710" fg:w="116"/><text x="40.2977%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (187 instructions, 0.22%)</title><rect x="40.0047%" y="181" width="0.2219%" height="15" fill="rgb(223,46,42)" fg:x="33710" fg:w="187"/><text x="40.2977%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (62 instructions, 0.07%)</title><rect x="40.2267%" y="181" width="0.0736%" height="15" fill="rgb(254,161,9)" fg:x="33897" fg:w="62"/><text x="40.5196%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::new (425 instructions, 0.50%)</title><rect x="40.0047%" y="197" width="0.5044%" height="15" fill="rgb(225,90,25)" fg:x="33710" fg:w="425"/><text x="40.2977%" y="207.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (518 instructions, 0.61%)</title><rect x="40.5091%" y="181" width="0.6147%" height="15" fill="rgb(238,161,28)" fg:x="34135" fg:w="518"/><text x="40.8021%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.10%)</title><rect x="41.1238%" y="133" width="0.0973%" height="15" fill="rgb(253,177,20)" fg:x="34653" fg:w="82"/><text x="41.4168%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.15%)</title><rect x="41.1238%" y="149" width="0.1460%" height="15" fill="rgb(230,223,15)" fg:x="34653" fg:w="123"/><text x="41.4168%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 0.24%)</title><rect x="41.1238%" y="165" width="0.2445%" height="15" fill="rgb(214,198,33)" fg:x="34653" fg:w="206"/><text x="41.4168%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="41.3683%" y="165" width="0.0178%" height="15" fill="rgb(227,165,8)" fg:x="34859" fg:w="15"/><text x="41.6613%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.02%)</title><rect x="41.3861%" y="165" width="0.0178%" height="15" fill="rgb(207,188,4)" fg:x="34874" fg:w="15"/><text x="41.6791%" y="175.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 0.51%)</title><rect x="41.1238%" y="181" width="0.5079%" height="15" fill="rgb(226,37,8)" fg:x="34653" fg:w="428"/><text x="41.4168%" y="191.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (516 instructions, 0.61%)</title><rect x="41.6318%" y="181" width="0.6124%" height="15" fill="rgb(239,120,25)" fg:x="35081" fg:w="516"/><text x="41.9247%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,546 instructions, 1.83%)</title><rect x="40.5091%" y="197" width="1.8347%" height="15" fill="rgb(232,147,7)" fg:x="34135" fg:w="1546"/><text x="40.8021%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.07%)</title><rect x="42.3628%" y="197" width="0.0724%" height="15" fill="rgb(213,185,36)" fg:x="35697" fg:w="61"/><text x="42.6558%" y="207.50"></text></g><g><title>ic_cdk::api::call::reply (2,679 instructions, 3.18%)</title><rect x="40.0047%" y="213" width="3.1793%" height="15" fill="rgb(243,25,6)" fg:x="33710" fg:w="2679"/><text x="40.2977%" y="223.50">ic..</text></g><g><title>btreemap::__canister_method_batch_remove::{{closure}} (83,647 instructions, 99.27%)</title><rect x="0.1923%" y="229" width="99.2666%" height="15" fill="rgb(236,149,49)" fg:x="162" fg:w="83647"/><text x="0.4852%" y="239.50">btreemap::__canister_method_batch_remove::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (15 instructions, 0.02%)</title><rect x="99.4589%" y="229" width="0.0178%" height="15" fill="rgb(248,140,8)" fg:x="83809" fg:w="15"/><text x="99.7518%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.03%)</title><rect x="99.5835%" y="197" width="0.0320%" height="15" fill="rgb(223,133,15)" fg:x="83914" fg:w="27"/><text x="99.8764%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (227 instructions, 0.27%)</title><rect x="99.4778%" y="213" width="0.2694%" height="15" fill="rgb(228,181,22)" fg:x="83825" fg:w="227"/><text x="99.7708%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (345 instructions, 0.41%)</title><rect x="99.4767%" y="229" width="0.4094%" height="15" fill="rgb(210,196,25)" fg:x="83824" fg:w="345"/><text x="99.7696%" y="239.50"></text></g><g><title>all (84,265 instructions, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(232,121,14)" fg:x="0" fg:w="84265"/><text x="0.2930%" y="271.50"></text></g><g><title>canister_update batch_remove (84,265 instructions, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(208,15,7)" fg:x="0" fg:w="84265"/><text x="0.2930%" y="255.50">canister_update batch_remove</text></g></svg></svg>