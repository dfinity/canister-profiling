<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="182" onload="init(evt)" viewBox="0 0 1024 182" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="182" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">btreemap_rs.upgrade</text><text id="details" fill="rgb(0,0,0)" x="10" y="165.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="165.00"> </text><svg id="frames" x="10" width="1004" total_samples="25888507"><g><title>core::hash::BuildHasher::hash_one (2,890 instructions, 0.01%)</title><rect x="0.0307%" y="37" width="0.0112%" height="15" fill="rgb(254,171,35)" fg:x="7954" fg:w="2890"/><text x="0.3237%" y="47.50"></text></g><g><title>candid::types::internal::env_add (4,466 instructions, 0.02%)</title><rect x="0.0277%" y="53" width="0.0173%" height="15" fill="rgb(205,218,0)" fg:x="7168" fg:w="4466"/><text x="0.3207%" y="63.50"></text></g><g><title>candid::types::CandidType::ty (7,213 instructions, 0.03%)</title><rect x="0.0249%" y="69" width="0.0279%" height="15" fill="rgb(244,200,7)" fg:x="6434" fg:w="7213"/><text x="0.3178%" y="79.50"></text></g><g><title>candid::types::CandidType::ty (14,936 instructions, 0.06%)</title><rect x="0.0157%" y="85" width="0.0577%" height="15" fill="rgb(209,183,39)" fg:x="4061" fg:w="14936"/><text x="0.3087%" y="95.50"></text></g><g><title>candid::types::internal::env_add (2,854 instructions, 0.01%)</title><rect x="0.0734%" y="85" width="0.0110%" height="15" fill="rgb(218,128,40)" fg:x="18997" fg:w="2854"/><text x="0.3663%" y="95.50"></text></g><g><title>candid::types::internal::env_add (2,847 instructions, 0.01%)</title><rect x="0.0883%" y="85" width="0.0110%" height="15" fill="rgb(212,218,16)" fg:x="22847" fg:w="2847"/><text x="0.3812%" y="95.50"></text></g><g><title>candid::ser::TypeSerialize::build_type (5,585 instructions, 0.02%)</title><rect x="0.1137%" y="69" width="0.0216%" height="15" fill="rgb(209,36,36)" fg:x="29431" fg:w="5585"/><text x="0.4067%" y="79.50"></text></g><g><title>candid::ser::TypeSerialize::build_type (10,273 instructions, 0.04%)</title><rect x="0.1038%" y="85" width="0.0397%" height="15" fill="rgb(213,88,37)" fg:x="26870" fg:w="10273"/><text x="0.3968%" y="95.50"></text></g><g><title>memcpy (122,945 instructions, 0.47%)</title><rect x="0.1585%" y="37" width="0.4749%" height="15" fill="rgb(226,198,3)" fg:x="41026" fg:w="122945"/><text x="0.4514%" y="47.50"></text></g><g><title>__rust_realloc (123,334 instructions, 0.48%)</title><rect x="0.1578%" y="53" width="0.4764%" height="15" fill="rgb(219,195,18)" fg:x="40841" fg:w="123334"/><text x="0.4507%" y="63.50"></text></g><g><title>alloc::raw_vec::finish_grow (123,369 instructions, 0.48%)</title><rect x="0.1578%" y="69" width="0.4765%" height="15" fill="rgb(247,31,39)" fg:x="40841" fg:w="123369"/><text x="0.4507%" y="79.50"></text></g><g><title>memcpy (491,585 instructions, 1.90%)</title><rect x="0.6363%" y="37" width="1.8989%" height="15" fill="rgb(242,92,50)" fg:x="164722" fg:w="491585"/><text x="0.9292%" y="47.50"></text></g><g><title>__rust_realloc (492,121 instructions, 1.90%)</title><rect x="0.6353%" y="53" width="1.9009%" height="15" fill="rgb(233,56,17)" fg:x="164471" fg:w="492121"/><text x="0.9283%" y="63.50"></text></g><g><title>alloc::raw_vec::finish_grow (492,156 instructions, 1.90%)</title><rect x="0.6353%" y="69" width="1.9011%" height="15" fill="rgb(235,81,22)" fg:x="164471" fg:w="492156"/><text x="0.9283%" y="79.50"></text></g><g><title>memcpy (983,105 instructions, 3.80%)</title><rect x="2.5376%" y="37" width="3.7975%" height="15" fill="rgb(253,49,30)" fg:x="656951" fg:w="983105"/><text x="2.8306%" y="47.50">mem..</text></g><g><title>__rust_realloc (983,641 instructions, 3.80%)</title><rect x="2.5366%" y="53" width="3.7995%" height="15" fill="rgb(237,47,16)" fg:x="656700" fg:w="983641"/><text x="2.8296%" y="63.50">__r..</text></g><g><title>alloc::raw_vec::finish_grow (983,676 instructions, 3.80%)</title><rect x="2.5366%" y="69" width="3.7997%" height="15" fill="rgb(219,55,2)" fg:x="656700" fg:w="983676"/><text x="2.8296%" y="79.50">all..</text></g><g><title>memcpy (1,966,145 instructions, 7.59%)</title><rect x="6.3376%" y="37" width="7.5947%" height="15" fill="rgb(225,128,49)" fg:x="1640700" fg:w="1966145"/><text x="6.6305%" y="47.50">memcpy</text></g><g><title>__rust_realloc (1,966,681 instructions, 7.60%)</title><rect x="6.3366%" y="53" width="7.5967%" height="15" fill="rgb(213,72,2)" fg:x="1640449" fg:w="1966681"/><text x="6.6296%" y="63.50">__rust_r..</text></g><g><title>alloc::raw_vec::finish_grow (1,966,716 instructions, 7.60%)</title><rect x="6.3366%" y="69" width="7.5969%" height="15" fill="rgb(241,41,47)" fg:x="1640449" fg:w="1966716"/><text x="6.6296%" y="79.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3,570,259 instructions, 13.79%)</title><rect x="0.1435%" y="85" width="13.7909%" height="15" fill="rgb(215,87,26)" fg:x="37154" fg:w="3570259"/><text x="0.4365%" y="95.50">alloc::raw_vec::R..</text></g><g><title>candid::ser::TypeSerialize::serialize (2,827 instructions, 0.01%)</title><rect x="13.9344%" y="85" width="0.0109%" height="15" fill="rgb(241,64,22)" fg:x="3607413" fg:w="2827"/><text x="14.2274%" y="95.50"></text></g><g><title>memcpy (4,400,125 instructions, 17.00%)</title><rect x="13.9495%" y="85" width="16.9964%" height="15" fill="rgb(248,123,50)" fg:x="3611313" fg:w="4400125"/><text x="14.2425%" y="95.50">memcpy</text></g><g><title>memcpy (7,700 instructions, 0.03%)</title><rect x="30.9514%" y="69" width="0.0297%" height="15" fill="rgb(206,40,18)" fg:x="8012856" fg:w="7700"/><text x="31.2444%" y="79.50"></text></g><g><title>memcpy (7,700 instructions, 0.03%)</title><rect x="30.9917%" y="69" width="0.0297%" height="15" fill="rgb(252,91,21)" fg:x="8023283" fg:w="7700"/><text x="31.2846%" y="79.50"></text></g><g><title>ic_stable_structures::writer::Writer&lt;M&gt;::write (821,313 instructions, 3.17%)</title><rect x="30.9491%" y="85" width="3.1725%" height="15" fill="rgb(216,81,12)" fg:x="8012258" fg:w="821313"/><text x="31.2421%" y="95.50">ic..</text></g><g><title>btreemap::pre_upgrade_1_::{{closure}} (13,456,871 instructions, 51.98%)</title><rect x="0.0007%" y="101" width="51.9801%" height="15" fill="rgb(210,78,19)" fg:x="171" fg:w="13456871"/><text x="0.2936%" y="111.50">btreemap::pre_upgrade_1_::{{closure}}</text></g><g><title>canister_pre_upgrade (13,457,401 instructions, 51.98%)</title><rect x="0.0000%" y="117" width="51.9821%" height="15" fill="rgb(245,97,4)" fg:x="0" fg:w="13457401"/><text x="0.2930%" y="127.50">canister_pre_upgrade</text></g><g><title>memset (5,244 instructions, 0.02%)</title><rect x="51.9847%" y="69" width="0.0203%" height="15" fill="rgb(224,125,32)" fg:x="13458050" fg:w="5244"/><text x="52.2776%" y="79.50"></text></g><g><title>memcpy (7,850 instructions, 0.03%)</title><rect x="52.0049%" y="69" width="0.0303%" height="15" fill="rgb(239,152,11)" fg:x="13463294" fg:w="7850"/><text x="52.2979%" y="79.50"></text></g><g><title>memset (81,964 instructions, 0.32%)</title><rect x="52.0355%" y="69" width="0.3166%" height="15" fill="rgb(221,77,28)" fg:x="13471207" fg:w="81964"/><text x="52.3284%" y="79.50"></text></g><g><title>memcpy (7,700 instructions, 0.03%)</title><rect x="52.3559%" y="69" width="0.0297%" height="15" fill="rgb(237,224,33)" fg:x="13554158" fg:w="7700"/><text x="52.6489%" y="79.50"></text></g><g><title>memcpy (7,700 instructions, 0.03%)</title><rect x="52.3864%" y="69" width="0.0297%" height="15" fill="rgb(247,6,3)" fg:x="13562057" fg:w="7700"/><text x="52.6794%" y="79.50"></text></g><g><title>memcpy (7,715 instructions, 0.03%)</title><rect x="52.4173%" y="69" width="0.0298%" height="15" fill="rgb(228,212,9)" fg:x="13570061" fg:w="7715"/><text x="52.7103%" y="79.50"></text></g><g><title>utils::MEMORY_MANAGER::__getit (712,199 instructions, 2.75%)</title><rect x="51.9841%" y="85" width="2.7510%" height="15" fill="rgb(227,146,9)" fg:x="13457900" fg:w="712199"/><text x="52.2770%" y="95.50">u..</text></g><g><title>memset (2,000,108 instructions, 7.73%)</title><rect x="54.7369%" y="85" width="7.7259%" height="15" fill="rgb(242,198,31)" fg:x="14170578" fg:w="2000108"/><text x="55.0299%" y="95.50">memset</text></g><g><title>&lt;ic_stable_structures::memory_manager::VirtualMemory&lt;M&gt; as ic_stable_structures::Memory&gt;::read (800,242 instructions, 3.09%)</title><rect x="62.4628%" y="85" width="3.0911%" height="15" fill="rgb(239,38,23)" fg:x="16170686" fg:w="800242"/><text x="62.7558%" y="95.50">&lt;i..</text></g><g><title>&lt;candid::binary_parser::ConsType as binread::BinRead&gt;::read_options (2,844 instructions, 0.01%)</title><rect x="65.5624%" y="69" width="0.0110%" height="15" fill="rgb(245,207,53)" fg:x="16973132" fg:w="2844"/><text x="65.8554%" y="79.50"></text></g><g><title>&lt;candid::binary_parser::Fields as binread::BinRead&gt;::read_options (2,981 instructions, 0.01%)</title><rect x="65.5871%" y="53" width="0.0115%" height="15" fill="rgb(206,206,25)" fg:x="16979515" fg:w="2981"/><text x="65.8800%" y="63.50"></text></g><g><title>&lt;candid::binary_parser::ConsType as binread::BinRead&gt;::read_options (7,468 instructions, 0.03%)</title><rect x="65.5737%" y="69" width="0.0288%" height="15" fill="rgb(220,208,14)" fg:x="16976041" fg:w="7468"/><text x="65.8666%" y="79.50"></text></g><g><title>candid::de::IDLDeserialize::new (24,056 instructions, 0.09%)</title><rect x="65.5539%" y="85" width="0.0929%" height="15" fill="rgb(209,179,49)" fg:x="16970928" fg:w="24056"/><text x="65.8469%" y="95.50"></text></g><g><title>candid::types::CandidType::ty (3,466 instructions, 0.01%)</title><rect x="65.6551%" y="69" width="0.0134%" height="15" fill="rgb(233,203,38)" fg:x="16997131" fg:w="3466"/><text x="65.9481%" y="79.50"></text></g><g><title>candid::types::CandidType::ty (10,556 instructions, 0.04%)</title><rect x="65.6484%" y="85" width="0.0408%" height="15" fill="rgb(241,202,33)" fg:x="16995394" fg:w="10556"/><text x="65.9414%" y="95.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,602 instructions, 0.01%)</title><rect x="68.0129%" y="69" width="0.0101%" height="15" fill="rgb(244,137,28)" fg:x="17607535" fg:w="2602"/><text x="68.3059%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,632 instructions, 0.01%)</title><rect x="68.2658%" y="69" width="0.0102%" height="15" fill="rgb(218,53,1)" fg:x="17672993" fg:w="2632"/><text x="68.5588%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,630 instructions, 0.01%)</title><rect x="68.5243%" y="69" width="0.0140%" height="15" fill="rgb(207,123,53)" fg:x="17739921" fg:w="3630"/><text x="68.8173%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,604 instructions, 0.01%)</title><rect x="69.2542%" y="69" width="0.0101%" height="15" fill="rgb(215,146,23)" fg:x="17928885" fg:w="2604"/><text x="69.5472%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,634 instructions, 0.01%)</title><rect x="69.5074%" y="69" width="0.0102%" height="15" fill="rgb(235,2,53)" fg:x="17994441" fg:w="2634"/><text x="69.8004%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,791 instructions, 0.01%)</title><rect x="69.7664%" y="69" width="0.0108%" height="15" fill="rgb(254,18,11)" fg:x="18061467" fg:w="2791"/><text x="70.0593%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,706 instructions, 0.01%)</title><rect x="70.0315%" y="69" width="0.0105%" height="15" fill="rgb(228,35,52)" fg:x="18130120" fg:w="2706"/><text x="70.3245%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,655 instructions, 0.01%)</title><rect x="70.3020%" y="69" width="0.0141%" height="15" fill="rgb(217,151,6)" fg:x="18200134" fg:w="3655"/><text x="70.5950%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,616 instructions, 0.01%)</title><rect x="70.7960%" y="69" width="0.0101%" height="15" fill="rgb(253,103,5)" fg:x="18328031" fg:w="2616"/><text x="71.0890%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,646 instructions, 0.01%)</title><rect x="71.0494%" y="69" width="0.0102%" height="15" fill="rgb(207,8,39)" fg:x="18393635" fg:w="2646"/><text x="71.3424%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,676 instructions, 0.01%)</title><rect x="71.3085%" y="69" width="0.0103%" height="15" fill="rgb(246,86,51)" fg:x="18460709" fg:w="2676"/><text x="71.6015%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,706 instructions, 0.01%)</title><rect x="71.5733%" y="69" width="0.0105%" height="15" fill="rgb(227,206,21)" fg:x="18529253" fg:w="2706"/><text x="71.8662%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,736 instructions, 0.01%)</title><rect x="71.8437%" y="69" width="0.0106%" height="15" fill="rgb(222,42,11)" fg:x="18599267" fg:w="2736"/><text x="72.1367%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,685 instructions, 0.01%)</title><rect x="72.1198%" y="69" width="0.0142%" height="15" fill="rgb(244,10,9)" fg:x="18670751" fg:w="3685"/><text x="72.4128%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,616 instructions, 0.01%)</title><rect x="72.3718%" y="69" width="0.0101%" height="15" fill="rgb(239,144,24)" fg:x="18735984" fg:w="2616"/><text x="72.6648%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,646 instructions, 0.01%)</title><rect x="72.6252%" y="69" width="0.0102%" height="15" fill="rgb(234,221,47)" fg:x="18801588" fg:w="2646"/><text x="72.9182%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,676 instructions, 0.01%)</title><rect x="72.8843%" y="69" width="0.0103%" height="15" fill="rgb(235,95,17)" fg:x="18868662" fg:w="2676"/><text x="73.1773%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,706 instructions, 0.01%)</title><rect x="73.1491%" y="69" width="0.0105%" height="15" fill="rgb(207,15,15)" fg:x="18937206" fg:w="2706"/><text x="73.4421%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,736 instructions, 0.01%)</title><rect x="73.4195%" y="69" width="0.0106%" height="15" fill="rgb(206,148,24)" fg:x="19007220" fg:w="2736"/><text x="73.7125%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,766 instructions, 0.01%)</title><rect x="73.6957%" y="69" width="0.0107%" height="15" fill="rgb(213,204,48)" fg:x="19078704" fg:w="2766"/><text x="73.9886%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,715 instructions, 0.01%)</title><rect x="73.9775%" y="69" width="0.0143%" height="15" fill="rgb(245,34,17)" fg:x="19151658" fg:w="3715"/><text x="74.2704%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,646 instructions, 0.01%)</title><rect x="74.2351%" y="69" width="0.0102%" height="15" fill="rgb(253,174,52)" fg:x="19218361" fg:w="2646"/><text x="74.5281%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,676 instructions, 0.01%)</title><rect x="74.4942%" y="69" width="0.0103%" height="15" fill="rgb(249,39,45)" fg:x="19285435" fg:w="2676"/><text x="74.7872%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,706 instructions, 0.01%)</title><rect x="74.7590%" y="69" width="0.0105%" height="15" fill="rgb(206,50,49)" fg:x="19353979" fg:w="2706"/><text x="75.0519%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,736 instructions, 0.01%)</title><rect x="75.0294%" y="69" width="0.0106%" height="15" fill="rgb(238,43,41)" fg:x="19423993" fg:w="2736"/><text x="75.3224%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,766 instructions, 0.01%)</title><rect x="75.3055%" y="69" width="0.0107%" height="15" fill="rgb(214,89,29)" fg:x="19495477" fg:w="2766"/><text x="75.5985%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,796 instructions, 0.01%)</title><rect x="75.5873%" y="69" width="0.0108%" height="15" fill="rgb(205,209,27)" fg:x="19568431" fg:w="2796"/><text x="75.8803%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,745 instructions, 0.01%)</title><rect x="75.8748%" y="69" width="0.0145%" height="15" fill="rgb(212,61,29)" fg:x="19642855" fg:w="3745"/><text x="76.1678%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,676 instructions, 0.01%)</title><rect x="76.1381%" y="69" width="0.0103%" height="15" fill="rgb(210,163,54)" fg:x="19711028" fg:w="2676"/><text x="76.4311%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,706 instructions, 0.01%)</title><rect x="76.4029%" y="69" width="0.0105%" height="15" fill="rgb(218,58,31)" fg:x="19779572" fg:w="2706"/><text x="76.6959%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,736 instructions, 0.01%)</title><rect x="76.6734%" y="69" width="0.0106%" height="15" fill="rgb(217,139,41)" fg:x="19849586" fg:w="2736"/><text x="76.9663%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,766 instructions, 0.01%)</title><rect x="76.9495%" y="69" width="0.0107%" height="15" fill="rgb(250,182,36)" fg:x="19921070" fg:w="2766"/><text x="77.2424%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,796 instructions, 0.01%)</title><rect x="77.2313%" y="69" width="0.0108%" height="15" fill="rgb(217,92,4)" fg:x="19994024" fg:w="2796"/><text x="77.5242%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,826 instructions, 0.01%)</title><rect x="77.5188%" y="69" width="0.0109%" height="15" fill="rgb(236,30,54)" fg:x="20068448" fg:w="2826"/><text x="77.8117%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,775 instructions, 0.01%)</title><rect x="77.8119%" y="69" width="0.0146%" height="15" fill="rgb(222,101,49)" fg:x="20144342" fg:w="3775"/><text x="78.1049%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,706 instructions, 0.01%)</title><rect x="78.0809%" y="69" width="0.0105%" height="15" fill="rgb(222,227,51)" fg:x="20213985" fg:w="2706"/><text x="78.3739%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,736 instructions, 0.01%)</title><rect x="78.3514%" y="69" width="0.0106%" height="15" fill="rgb(227,187,19)" fg:x="20283999" fg:w="2736"/><text x="78.6443%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,766 instructions, 0.01%)</title><rect x="78.6275%" y="69" width="0.0107%" height="15" fill="rgb(228,143,28)" fg:x="20355483" fg:w="2766"/><text x="78.9205%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,796 instructions, 0.01%)</title><rect x="78.9093%" y="69" width="0.0108%" height="15" fill="rgb(225,54,28)" fg:x="20428437" fg:w="2796"/><text x="79.2023%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,826 instructions, 0.01%)</title><rect x="79.1968%" y="69" width="0.0109%" height="15" fill="rgb(237,227,10)" fg:x="20502861" fg:w="2826"/><text x="79.4897%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,856 instructions, 0.01%)</title><rect x="79.4899%" y="69" width="0.0110%" height="15" fill="rgb(210,203,53)" fg:x="20578755" fg:w="2856"/><text x="79.7829%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,805 instructions, 0.01%)</title><rect x="79.7888%" y="69" width="0.0147%" height="15" fill="rgb(238,164,17)" fg:x="20656119" fg:w="3805"/><text x="80.0817%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,736 instructions, 0.01%)</title><rect x="80.0635%" y="69" width="0.0106%" height="15" fill="rgb(218,62,47)" fg:x="20727232" fg:w="2736"/><text x="80.3564%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,766 instructions, 0.01%)</title><rect x="80.3396%" y="69" width="0.0107%" height="15" fill="rgb(207,2,39)" fg:x="20798716" fg:w="2766"/><text x="80.6325%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,796 instructions, 0.01%)</title><rect x="80.6214%" y="69" width="0.0108%" height="15" fill="rgb(214,41,8)" fg:x="20871670" fg:w="2796"/><text x="80.9143%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,826 instructions, 0.01%)</title><rect x="80.9089%" y="69" width="0.0109%" height="15" fill="rgb(214,94,40)" fg:x="20946094" fg:w="2826"/><text x="81.2018%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,856 instructions, 0.01%)</title><rect x="81.2020%" y="69" width="0.0110%" height="15" fill="rgb(248,49,36)" fg:x="21021988" fg:w="2856"/><text x="81.4950%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,886 instructions, 0.01%)</title><rect x="81.5008%" y="69" width="0.0111%" height="15" fill="rgb(213,156,41)" fg:x="21099352" fg:w="2886"/><text x="81.7938%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,835 instructions, 0.01%)</title><rect x="81.8054%" y="69" width="0.0148%" height="15" fill="rgb(242,69,44)" fg:x="21178186" fg:w="3835"/><text x="82.0983%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,766 instructions, 0.01%)</title><rect x="82.0857%" y="69" width="0.0107%" height="15" fill="rgb(244,125,36)" fg:x="21250769" fg:w="2766"/><text x="82.3787%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,796 instructions, 0.01%)</title><rect x="82.3675%" y="69" width="0.0108%" height="15" fill="rgb(210,162,47)" fg:x="21323723" fg:w="2796"/><text x="82.6605%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,826 instructions, 0.01%)</title><rect x="82.6550%" y="69" width="0.0109%" height="15" fill="rgb(213,40,29)" fg:x="21398147" fg:w="2826"/><text x="82.9480%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,856 instructions, 0.01%)</title><rect x="82.9482%" y="69" width="0.0110%" height="15" fill="rgb(232,34,5)" fg:x="21474041" fg:w="2856"/><text x="83.2411%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,886 instructions, 0.01%)</title><rect x="83.2470%" y="69" width="0.0111%" height="15" fill="rgb(205,116,22)" fg:x="21551405" fg:w="2886"/><text x="83.5400%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,916 instructions, 0.01%)</title><rect x="83.5515%" y="69" width="0.0113%" height="15" fill="rgb(246,225,2)" fg:x="21630239" fg:w="2916"/><text x="83.8445%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,865 instructions, 0.01%)</title><rect x="83.8617%" y="69" width="0.0149%" height="15" fill="rgb(235,89,24)" fg:x="21710543" fg:w="3865"/><text x="84.1547%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,796 instructions, 0.01%)</title><rect x="84.1477%" y="69" width="0.0108%" height="15" fill="rgb(236,94,23)" fg:x="21784596" fg:w="2796"/><text x="84.4407%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,826 instructions, 0.01%)</title><rect x="84.4357%" y="69" width="0.0109%" height="15" fill="rgb(222,145,15)" fg:x="21859142" fg:w="2826"/><text x="84.7287%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,856 instructions, 0.01%)</title><rect x="84.7289%" y="69" width="0.0110%" height="15" fill="rgb(217,20,13)" fg:x="21935036" fg:w="2856"/><text x="85.0218%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,886 instructions, 0.01%)</title><rect x="85.0277%" y="69" width="0.0111%" height="15" fill="rgb(223,8,24)" fg:x="22012400" fg:w="2886"/><text x="85.3207%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,916 instructions, 0.01%)</title><rect x="85.3322%" y="69" width="0.0113%" height="15" fill="rgb(245,198,15)" fg:x="22091234" fg:w="2916"/><text x="85.6252%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,946 instructions, 0.01%)</title><rect x="85.6424%" y="69" width="0.0114%" height="15" fill="rgb(249,64,5)" fg:x="22171538" fg:w="2946"/><text x="85.9354%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,895 instructions, 0.02%)</title><rect x="85.9583%" y="69" width="0.0150%" height="15" fill="rgb(226,14,27)" fg:x="22253312" fg:w="3895"/><text x="86.2512%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,826 instructions, 0.01%)</title><rect x="86.2500%" y="69" width="0.0109%" height="15" fill="rgb(243,152,31)" fg:x="22328835" fg:w="2826"/><text x="86.5430%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,856 instructions, 0.01%)</title><rect x="86.5431%" y="69" width="0.0110%" height="15" fill="rgb(211,0,8)" fg:x="22404729" fg:w="2856"/><text x="86.8361%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,886 instructions, 0.01%)</title><rect x="86.8420%" y="69" width="0.0111%" height="15" fill="rgb(250,141,30)" fg:x="22482093" fg:w="2886"/><text x="87.1350%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,916 instructions, 0.01%)</title><rect x="87.1465%" y="69" width="0.0113%" height="15" fill="rgb(233,85,23)" fg:x="22560927" fg:w="2916"/><text x="87.4395%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,946 instructions, 0.01%)</title><rect x="87.4567%" y="69" width="0.0114%" height="15" fill="rgb(220,223,13)" fg:x="22641231" fg:w="2946"/><text x="87.7497%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,976 instructions, 0.01%)</title><rect x="87.7726%" y="69" width="0.0115%" height="15" fill="rgb(234,77,41)" fg:x="22723005" fg:w="2976"/><text x="88.0655%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,925 instructions, 0.02%)</title><rect x="88.0941%" y="69" width="0.0152%" height="15" fill="rgb(237,191,53)" fg:x="22806249" fg:w="3925"/><text x="88.3871%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,856 instructions, 0.01%)</title><rect x="88.3915%" y="69" width="0.0110%" height="15" fill="rgb(254,129,26)" fg:x="22883242" fg:w="2856"/><text x="88.6845%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,886 instructions, 0.01%)</title><rect x="88.6903%" y="69" width="0.0111%" height="15" fill="rgb(212,6,49)" fg:x="22960606" fg:w="2886"/><text x="88.9833%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,916 instructions, 0.01%)</title><rect x="88.9949%" y="69" width="0.0113%" height="15" fill="rgb(231,81,7)" fg:x="23039440" fg:w="2916"/><text x="89.2878%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,946 instructions, 0.01%)</title><rect x="89.3050%" y="69" width="0.0114%" height="15" fill="rgb(244,30,53)" fg:x="23119744" fg:w="2946"/><text x="89.5980%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,976 instructions, 0.01%)</title><rect x="89.6209%" y="69" width="0.0115%" height="15" fill="rgb(238,45,16)" fg:x="23201518" fg:w="2976"/><text x="89.9139%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,006 instructions, 0.01%)</title><rect x="89.9425%" y="69" width="0.0116%" height="15" fill="rgb(238,1,6)" fg:x="23284762" fg:w="3006"/><text x="90.2354%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4,935 instructions, 0.02%)</title><rect x="90.2697%" y="69" width="0.0191%" height="15" fill="rgb(215,1,37)" fg:x="23369476" fg:w="4935"/><text x="90.5627%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,738 instructions, 0.01%)</title><rect x="90.5491%" y="69" width="0.0106%" height="15" fill="rgb(248,107,41)" fg:x="23441815" fg:w="2738"/><text x="90.8421%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,768 instructions, 0.01%)</title><rect x="90.8256%" y="69" width="0.0107%" height="15" fill="rgb(232,195,12)" fg:x="23513397" fg:w="2768"/><text x="91.1186%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,798 instructions, 0.01%)</title><rect x="91.1078%" y="69" width="0.0108%" height="15" fill="rgb(236,181,40)" fg:x="23586449" fg:w="2798"/><text x="91.4008%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,828 instructions, 0.01%)</title><rect x="91.3957%" y="69" width="0.0109%" height="15" fill="rgb(234,187,16)" fg:x="23660971" fg:w="2828"/><text x="91.6886%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,858 instructions, 0.01%)</title><rect x="91.6892%" y="69" width="0.0110%" height="15" fill="rgb(232,49,4)" fg:x="23736963" fg:w="2858"/><text x="91.9822%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,888 instructions, 0.01%)</title><rect x="91.9884%" y="69" width="0.0112%" height="15" fill="rgb(211,197,18)" fg:x="23814425" fg:w="2888"/><text x="92.2814%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,837 instructions, 0.01%)</title><rect x="92.2933%" y="69" width="0.0148%" height="15" fill="rgb(209,169,12)" fg:x="23893357" fg:w="3837"/><text x="92.5863%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,768 instructions, 0.01%)</title><rect x="92.5740%" y="69" width="0.0107%" height="15" fill="rgb(240,24,31)" fg:x="23966038" fg:w="2768"/><text x="92.8670%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,798 instructions, 0.01%)</title><rect x="92.8562%" y="69" width="0.0108%" height="15" fill="rgb(253,80,43)" fg:x="24039090" fg:w="2798"/><text x="93.1492%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,828 instructions, 0.01%)</title><rect x="93.1441%" y="69" width="0.0109%" height="15" fill="rgb(226,125,23)" fg:x="24113612" fg:w="2828"/><text x="93.4371%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,858 instructions, 0.01%)</title><rect x="93.4376%" y="69" width="0.0110%" height="15" fill="rgb(224,33,49)" fg:x="24189604" fg:w="2858"/><text x="93.7306%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,888 instructions, 0.01%)</title><rect x="93.7368%" y="69" width="0.0112%" height="15" fill="rgb(243,16,17)" fg:x="24267066" fg:w="2888"/><text x="94.0298%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,918 instructions, 0.01%)</title><rect x="94.0417%" y="69" width="0.0113%" height="15" fill="rgb(207,65,26)" fg:x="24345998" fg:w="2918"/><text x="94.3347%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,867 instructions, 0.01%)</title><rect x="94.3523%" y="69" width="0.0149%" height="15" fill="rgb(253,71,16)" fg:x="24426400" fg:w="3867"/><text x="94.6453%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,798 instructions, 0.01%)</title><rect x="94.6387%" y="69" width="0.0108%" height="15" fill="rgb(213,106,8)" fg:x="24500551" fg:w="2798"/><text x="94.9317%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,828 instructions, 0.01%)</title><rect x="94.9266%" y="69" width="0.0109%" height="15" fill="rgb(209,158,36)" fg:x="24575073" fg:w="2828"/><text x="95.2195%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,858 instructions, 0.01%)</title><rect x="95.2201%" y="69" width="0.0110%" height="15" fill="rgb(238,115,29)" fg:x="24651065" fg:w="2858"/><text x="95.5131%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,888 instructions, 0.01%)</title><rect x="95.5193%" y="69" width="0.0112%" height="15" fill="rgb(215,95,32)" fg:x="24728527" fg:w="2888"/><text x="95.8123%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,918 instructions, 0.01%)</title><rect x="95.8242%" y="69" width="0.0113%" height="15" fill="rgb(216,30,14)" fg:x="24807459" fg:w="2918"/><text x="96.1172%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,948 instructions, 0.01%)</title><rect x="96.1348%" y="69" width="0.0114%" height="15" fill="rgb(230,54,16)" fg:x="24887861" fg:w="2948"/><text x="96.4278%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,897 instructions, 0.02%)</title><rect x="96.4515%" y="69" width="0.0151%" height="15" fill="rgb(234,67,35)" fg:x="24969855" fg:w="3897"/><text x="96.7445%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,828 instructions, 0.01%)</title><rect x="96.7436%" y="69" width="0.0109%" height="15" fill="rgb(250,60,43)" fg:x="25045476" fg:w="2828"/><text x="97.0366%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,858 instructions, 0.01%)</title><rect x="97.0371%" y="69" width="0.0110%" height="15" fill="rgb(221,131,30)" fg:x="25121468" fg:w="2858"/><text x="97.3301%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,888 instructions, 0.01%)</title><rect x="97.3364%" y="69" width="0.0112%" height="15" fill="rgb(232,82,46)" fg:x="25198930" fg:w="2888"/><text x="97.6293%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,918 instructions, 0.01%)</title><rect x="97.6413%" y="69" width="0.0113%" height="15" fill="rgb(254,62,30)" fg:x="25277862" fg:w="2918"/><text x="97.9342%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,948 instructions, 0.01%)</title><rect x="97.9518%" y="69" width="0.0114%" height="15" fill="rgb(241,172,36)" fg:x="25358264" fg:w="2948"/><text x="98.2448%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,978 instructions, 0.01%)</title><rect x="98.2681%" y="69" width="0.0115%" height="15" fill="rgb(219,48,50)" fg:x="25440136" fg:w="2978"/><text x="98.5610%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,927 instructions, 0.02%)</title><rect x="98.5900%" y="69" width="0.0152%" height="15" fill="rgb(236,212,36)" fg:x="25523478" fg:w="3927"/><text x="98.8830%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,858 instructions, 0.01%)</title><rect x="98.8878%" y="69" width="0.0110%" height="15" fill="rgb(239,36,0)" fg:x="25600569" fg:w="2858"/><text x="99.1807%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,888 instructions, 0.01%)</title><rect x="99.1870%" y="69" width="0.0112%" height="15" fill="rgb(226,212,11)" fg:x="25678031" fg:w="2888"/><text x="99.4800%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,918 instructions, 0.01%)</title><rect x="99.4919%" y="69" width="0.0113%" height="15" fill="rgb(250,225,3)" fg:x="25756963" fg:w="2918"/><text x="99.7849%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2,948 instructions, 0.01%)</title><rect x="99.8025%" y="69" width="0.0114%" height="15" fill="rgb(218,220,21)" fg:x="25837365" fg:w="2948"/><text x="100.0954%" y="79.50"></text></g><g><title>canister_post_upgrade (12,421,106 instructions, 47.98%)</title><rect x="51.9821%" y="117" width="47.9792%" height="15" fill="rgb(230,116,53)" fg:x="13457401" fg:w="12421106"/><text x="52.2751%" y="127.50">canister_post_upgrade</text></g><g><title>btreemap::post_upgrade_2_::{{closure}} (12,420,607 instructions, 47.98%)</title><rect x="51.9841%" y="101" width="47.9773%" height="15" fill="rgb(223,10,25)" fg:x="13457900" fg:w="12420607"/><text x="52.2770%" y="111.50">btreemap::post_upgrade_2_::{{closure}}</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::btree::map::BTreeMap&lt;K,V&gt;&gt;::deserialize (8,872,210 instructions, 34.27%)</title><rect x="65.6905%" y="85" width="34.2708%" height="15" fill="rgb(210,119,28)" fg:x="17006297" fg:w="8872210"/><text x="65.9835%" y="95.50">serde::de::impls::&lt;impl serde::de::Deserialize ..</text></g><g><title>all (25,888,507 instructions, 100%)</title><rect x="0.0000%" y="133" width="100.0000%" height="15" fill="rgb(225,125,39)" fg:x="0" fg:w="25888507"/><text x="0.2930%" y="143.50"></text></g><g><title>incomplete_trace (10,000 instructions, 0.04%)</title><rect x="99.9614%" y="117" width="0.0386%" height="15" fill="rgb(215,184,20)" fg:x="25878507" fg:w="10000"/><text x="100.2543%" y="127.50"></text></g></svg></svg>