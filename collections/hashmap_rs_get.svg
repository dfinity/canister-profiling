<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="17350"><g><title>ic_cdk::setup (19 instructions, 0.11%)</title><rect x="0.0000%" y="197" width="0.1095%" height="15" fill="rgb(225,229,25)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="0.1095%" y="197" width="0.4380%" height="15" fill="rgb(226,99,43)" fg:x="19" fg:w="76"/><text x="0.4025%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="0.5476%" y="197" width="0.4380%" height="15" fill="rgb(251,30,20)" fg:x="95" fg:w="76"/><text x="0.8405%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="0.9856%" y="165" width="0.4380%" height="15" fill="rgb(221,166,32)" fg:x="171" fg:w="76"/><text x="1.2786%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.40%)</title><rect x="1.4236%" y="149" width="0.3977%" height="15" fill="rgb(212,2,30)" fg:x="247" fg:w="69"/><text x="1.7166%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.8213%" y="133" width="0.0231%" height="15" fill="rgb(240,107,34)" fg:x="316" fg:w="4"/><text x="2.1143%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 2.34%)</title><rect x="1.8213%" y="149" width="2.3401%" height="15" fill="rgb(250,152,43)" fg:x="316" fg:w="406"/><text x="2.1143%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.47%)</title><rect x="4.1614%" y="149" width="0.4726%" height="15" fill="rgb(220,123,35)" fg:x="722" fg:w="82"/><text x="4.4544%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.31%)</title><rect x="4.6340%" y="149" width="0.3112%" height="15" fill="rgb(210,105,29)" fg:x="804" fg:w="54"/><text x="4.9270%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.31%)</title><rect x="4.9452%" y="149" width="0.3112%" height="15" fill="rgb(224,171,50)" fg:x="858" fg:w="54"/><text x="5.2382%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.31%)</title><rect x="5.2565%" y="149" width="0.3112%" height="15" fill="rgb(227,172,48)" fg:x="912" fg:w="54"/><text x="5.5495%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.31%)</title><rect x="5.5677%" y="149" width="0.3112%" height="15" fill="rgb(252,124,45)" fg:x="966" fg:w="54"/><text x="5.8607%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.40%)</title><rect x="5.8790%" y="149" width="0.3977%" height="15" fill="rgb(242,64,7)" fg:x="1020" fg:w="69"/><text x="6.1719%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.37%)</title><rect x="6.2767%" y="149" width="0.3746%" height="15" fill="rgb(250,99,33)" fg:x="1089" fg:w="65"/><text x="6.5696%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="6.6513%" y="133" width="0.0231%" height="15" fill="rgb(242,110,52)" fg:x="1154" fg:w="4"/><text x="6.9443%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 2.34%)</title><rect x="6.6513%" y="149" width="2.3401%" height="15" fill="rgb(235,60,34)" fg:x="1154" fg:w="406"/><text x="6.9443%" y="159.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="8.9914%" y="149" width="0.0922%" height="15" fill="rgb(248,186,51)" fg:x="1560" fg:w="16"/><text x="9.2843%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="9.0836%" y="133" width="0.4380%" height="15" fill="rgb(253,195,11)" fg:x="1576" fg:w="76"/><text x="9.3765%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.35%)</title><rect x="9.5216%" y="101" width="0.3458%" height="15" fill="rgb(224,174,6)" fg:x="1652" fg:w="60"/><text x="9.8146%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.49%)</title><rect x="9.5216%" y="117" width="0.4899%" height="15" fill="rgb(245,141,21)" fg:x="1652" fg:w="85"/><text x="9.8146%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="10.0115%" y="69" width="0.0519%" height="15" fill="rgb(214,77,44)" fg:x="1737" fg:w="9"/><text x="10.3045%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.17%)</title><rect x="10.0634%" y="53" width="0.1729%" height="15" fill="rgb(223,224,6)" fg:x="1746" fg:w="30"/><text x="10.3564%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.32%)</title><rect x="10.0634%" y="69" width="0.3170%" height="15" fill="rgb(235,110,44)" fg:x="1746" fg:w="55"/><text x="10.3564%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.68%)</title><rect x="10.0115%" y="85" width="0.6801%" height="15" fill="rgb(241,226,2)" fg:x="1737" fg:w="118"/><text x="10.3045%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.99%)</title><rect x="10.0115%" y="101" width="0.9856%" height="15" fill="rgb(230,70,20)" fg:x="1737" fg:w="171"/><text x="10.3045%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 1.01%)</title><rect x="10.0115%" y="117" width="1.0144%" height="15" fill="rgb(241,174,27)" fg:x="1737" fg:w="176"/><text x="10.3045%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 2.14%)</title><rect x="9.5216%" y="133" width="2.1441%" height="15" fill="rgb(249,33,50)" fg:x="1652" fg:w="372"/><text x="9.8146%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 3.39%)</title><rect x="9.0836%" y="149" width="3.3948%" height="15" fill="rgb(211,213,48)" fg:x="1576" fg:w="589"/><text x="9.3765%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.47%)</title><rect x="12.4784%" y="149" width="0.4726%" height="15" fill="rgb(244,56,29)" fg:x="2165" fg:w="82"/><text x="12.7714%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.32%)</title><rect x="12.9510%" y="149" width="0.3170%" height="15" fill="rgb(247,48,17)" fg:x="2247" fg:w="55"/><text x="13.2440%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.36%)</title><rect x="13.2680%" y="149" width="0.3631%" height="15" fill="rgb(218,10,31)" fg:x="2302" fg:w="63"/><text x="13.5610%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.37%)</title><rect x="13.6311%" y="149" width="0.3746%" height="15" fill="rgb(224,223,37)" fg:x="2365" fg:w="65"/><text x="13.9241%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="14.0058%" y="117" width="0.0231%" height="15" fill="rgb(246,32,26)" fg:x="2430" fg:w="4"/><text x="14.2987%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 2.34%)</title><rect x="14.0058%" y="133" width="2.3401%" height="15" fill="rgb(222,96,23)" fg:x="2430" fg:w="406"/><text x="14.2987%" y="143.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="16.3458%" y="133" width="0.0922%" height="15" fill="rgb(233,43,0)" fg:x="2836" fg:w="16"/><text x="16.6388%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="16.4380%" y="117" width="0.4380%" height="15" fill="rgb(205,122,41)" fg:x="2852" fg:w="76"/><text x="16.7310%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.35%)</title><rect x="16.8761%" y="85" width="0.3458%" height="15" fill="rgb(243,170,42)" fg:x="2928" fg:w="60"/><text x="17.1690%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.49%)</title><rect x="16.8761%" y="101" width="0.4899%" height="15" fill="rgb(244,185,43)" fg:x="2928" fg:w="85"/><text x="17.1690%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="17.3660%" y="53" width="0.0519%" height="15" fill="rgb(219,115,19)" fg:x="3013" fg:w="9"/><text x="17.6590%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.17%)</title><rect x="17.4179%" y="37" width="0.1729%" height="15" fill="rgb(209,189,41)" fg:x="3022" fg:w="30"/><text x="17.7108%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.32%)</title><rect x="17.4179%" y="53" width="0.3170%" height="15" fill="rgb(228,182,47)" fg:x="3022" fg:w="55"/><text x="17.7108%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.68%)</title><rect x="17.3660%" y="69" width="0.6801%" height="15" fill="rgb(249,142,45)" fg:x="3013" fg:w="118"/><text x="17.6590%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.99%)</title><rect x="17.3660%" y="85" width="0.9856%" height="15" fill="rgb(246,19,30)" fg:x="3013" fg:w="171"/><text x="17.6590%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 1.01%)</title><rect x="17.3660%" y="101" width="1.0144%" height="15" fill="rgb(250,47,47)" fg:x="3013" fg:w="176"/><text x="17.6590%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 2.14%)</title><rect x="16.8761%" y="117" width="2.1441%" height="15" fill="rgb(208,213,37)" fg:x="2928" fg:w="372"/><text x="17.1690%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 3.39%)</title><rect x="16.4380%" y="133" width="3.3948%" height="15" fill="rgb(212,92,30)" fg:x="2852" fg:w="589"/><text x="16.7310%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.47%)</title><rect x="19.8329%" y="133" width="0.4726%" height="15" fill="rgb(237,172,0)" fg:x="3441" fg:w="82"/><text x="20.1258%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.32%)</title><rect x="20.3055%" y="133" width="0.3170%" height="15" fill="rgb(215,20,2)" fg:x="3523" fg:w="55"/><text x="20.5984%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.40%)</title><rect x="20.6225%" y="117" width="0.3977%" height="15" fill="rgb(213,116,29)" fg:x="3578" fg:w="69"/><text x="20.9154%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.52%)</title><rect x="21.0202%" y="117" width="0.5245%" height="15" fill="rgb(238,174,2)" fg:x="3647" fg:w="91"/><text x="21.3131%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.36%)</title><rect x="21.5447%" y="117" width="0.3631%" height="15" fill="rgb(246,186,16)" fg:x="3738" fg:w="63"/><text x="21.8376%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 1.63%)</title><rect x="20.6225%" y="133" width="1.6254%" height="15" fill="rgb(231,78,53)" fg:x="3578" fg:w="282"/><text x="20.9154%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.45%)</title><rect x="22.2478%" y="133" width="0.4496%" height="15" fill="rgb(240,0,45)" fg:x="3860" fg:w="78"/><text x="22.5408%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,711 instructions, 9.86%)</title><rect x="14.0058%" y="149" width="9.8617%" height="15" fill="rgb(243,47,27)" fg:x="2430" fg:w="1711"/><text x="14.2987%" y="159.50">binread::bin..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.36%)</title><rect x="23.8674%" y="149" width="0.3631%" height="15" fill="rgb(234,147,53)" fg:x="4141" fg:w="63"/><text x="24.1604%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.07%)</title><rect x="24.2305%" y="149" width="0.0749%" height="15" fill="rgb(227,143,1)" fg:x="4204" fg:w="13"/><text x="24.5235%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.07%)</title><rect x="24.3055%" y="149" width="0.0749%" height="15" fill="rgb(229,221,34)" fg:x="4217" fg:w="13"/><text x="24.5984%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.04%)</title><rect x="24.3804%" y="149" width="0.0403%" height="15" fill="rgb(233,118,17)" fg:x="4230" fg:w="7"/><text x="24.6734%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.09%)</title><rect x="24.4207%" y="149" width="0.0865%" height="15" fill="rgb(213,93,11)" fg:x="4237" fg:w="15"/><text x="24.7137%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="24.5072%" y="133" width="0.4380%" height="15" fill="rgb(218,164,50)" fg:x="4252" fg:w="76"/><text x="24.8002%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.92%)</title><rect x="24.5072%" y="149" width="0.9164%" height="15" fill="rgb(232,120,11)" fg:x="4252" fg:w="159"/><text x="24.8002%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="25.4236%" y="117" width="0.4380%" height="15" fill="rgb(234,129,0)" fg:x="4411" fg:w="76"/><text x="25.7166%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.63%)</title><rect x="25.4236%" y="133" width="0.6340%" height="15" fill="rgb(224,128,52)" fg:x="4411" fg:w="110"/><text x="25.7166%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 1.03%)</title><rect x="25.4236%" y="149" width="1.0259%" height="15" fill="rgb(213,202,40)" fg:x="4411" fg:w="178"/><text x="25.7166%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="26.4496%" y="149" width="0.4380%" height="15" fill="rgb(216,44,22)" fg:x="4589" fg:w="76"/><text x="26.7425%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.47%)</title><rect x="26.8876%" y="149" width="0.4669%" height="15" fill="rgb(236,124,23)" fg:x="4665" fg:w="81"/><text x="27.1806%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="27.3545%" y="149" width="0.4380%" height="15" fill="rgb(243,28,42)" fg:x="4746" fg:w="76"/><text x="27.6474%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="27.7925%" y="149" width="0.4380%" height="15" fill="rgb(225,118,18)" fg:x="4822" fg:w="76"/><text x="28.0855%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 instructions, 0.01%)</title><rect x="28.2305%" y="149" width="0.0115%" height="15" fill="rgb(252,114,14)" fg:x="4898" fg:w="2"/><text x="28.5235%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.47%)</title><rect x="28.2421%" y="149" width="0.4669%" height="15" fill="rgb(228,156,38)" fg:x="4900" fg:w="81"/><text x="28.5350%" y="159.50"></text></g><g><title>memcpy (399 instructions, 2.30%)</title><rect x="28.7089%" y="149" width="2.2997%" height="15" fill="rgb(247,32,54)" fg:x="4981" fg:w="399"/><text x="29.0019%" y="159.50">m..</text></g><g><title>memcpy (399 instructions, 2.30%)</title><rect x="31.0086%" y="149" width="2.2997%" height="15" fill="rgb(249,128,3)" fg:x="5380" fg:w="399"/><text x="31.3016%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new (6,459 instructions, 37.23%)</title><rect x="1.4236%" y="165" width="37.2277%" height="15" fill="rgb(218,33,18)" fg:x="247" fg:w="6459"/><text x="1.7166%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (354 instructions, 2.04%)</title><rect x="38.6513%" y="165" width="2.0403%" height="15" fill="rgb(236,60,17)" fg:x="6706" fg:w="354"/><text x="38.9443%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="40.6916%" y="149" width="0.0288%" height="15" fill="rgb(237,63,22)" fg:x="7060" fg:w="5"/><text x="40.9846%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.22%)</title><rect x="40.6916%" y="165" width="0.2248%" height="15" fill="rgb(210,27,14)" fg:x="7060" fg:w="39"/><text x="40.9846%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.32%)</title><rect x="40.9164%" y="149" width="0.3170%" height="15" fill="rgb(237,39,29)" fg:x="7099" fg:w="55"/><text x="41.2094%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (200 instructions, 1.15%)</title><rect x="40.9164%" y="165" width="1.1527%" height="15" fill="rgb(215,128,47)" fg:x="7099" fg:w="200"/><text x="41.2094%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="42.0692%" y="149" width="0.0288%" height="15" fill="rgb(246,159,28)" fg:x="7299" fg:w="5"/><text x="42.3621%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="42.0980%" y="133" width="0.3055%" height="15" fill="rgb(217,102,37)" fg:x="7304" fg:w="53"/><text x="42.3910%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.51%)</title><rect x="42.4035%" y="133" width="0.5072%" height="15" fill="rgb(245,205,50)" fg:x="7357" fg:w="88"/><text x="42.6964%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.93%)</title><rect x="42.9107%" y="133" width="0.9337%" height="15" fill="rgb(229,55,35)" fg:x="7445" fg:w="162"/><text x="43.2036%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.11%)</title><rect x="42.0980%" y="149" width="3.1124%" height="15" fill="rgb(206,6,27)" fg:x="7304" fg:w="540"/><text x="42.3910%" y="159.50">co..</text></g><g><title>candid::types::internal::env_add (749 instructions, 4.32%)</title><rect x="42.0692%" y="165" width="4.3170%" height="15" fill="rgb(217,46,46)" fg:x="7299" fg:w="749"/><text x="42.3621%" y="175.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="46.3862%" y="165" width="0.4380%" height="15" fill="rgb(249,224,28)" fg:x="8048" fg:w="76"/><text x="46.6791%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="46.8242%" y="149" width="0.0288%" height="15" fill="rgb(251,194,44)" fg:x="8124" fg:w="5"/><text x="47.1172%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="46.8530%" y="133" width="0.3055%" height="15" fill="rgb(218,47,36)" fg:x="8129" fg:w="53"/><text x="47.1460%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.51%)</title><rect x="47.1585%" y="133" width="0.5072%" height="15" fill="rgb(226,174,11)" fg:x="8182" fg:w="88"/><text x="47.4515%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.93%)</title><rect x="47.6657%" y="133" width="0.9337%" height="15" fill="rgb(253,29,34)" fg:x="8270" fg:w="162"/><text x="47.9587%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.11%)</title><rect x="46.8530%" y="149" width="3.1124%" height="15" fill="rgb(244,73,35)" fg:x="8129" fg:w="540"/><text x="47.1460%" y="159.50">co..</text></g><g><title>memcmp (68 instructions, 0.39%)</title><rect x="49.9654%" y="149" width="0.3919%" height="15" fill="rgb(249,216,48)" fg:x="8669" fg:w="68"/><text x="50.2584%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.47%)</title><rect x="50.3573%" y="133" width="0.4669%" height="15" fill="rgb(223,100,14)" fg:x="8737" fg:w="81"/><text x="50.6503%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.62%)</title><rect x="50.3573%" y="149" width="0.6225%" height="15" fill="rgb(224,21,31)" fg:x="8737" fg:w="108"/><text x="50.6503%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 5.13%)</title><rect x="46.8242%" y="165" width="5.1297%" height="15" fill="rgb(226,39,42)" fg:x="8124" fg:w="890"/><text x="47.1172%" y="175.50">candi..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="51.9539%" y="117" width="0.3055%" height="15" fill="rgb(238,222,36)" fg:x="9014" fg:w="53"/><text x="52.2469%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.45%)</title><rect x="51.9539%" y="133" width="0.4496%" height="15" fill="rgb(246,146,1)" fg:x="9014" fg:w="78"/><text x="52.2469%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 1.69%)</title><rect x="51.9539%" y="149" width="1.6888%" height="15" fill="rgb(242,70,28)" fg:x="9014" fg:w="293"/><text x="52.2469%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1319 (15 instructions, 0.09%)</title><rect x="53.6427%" y="149" width="0.0865%" height="15" fill="rgb(253,46,5)" fg:x="9307" fg:w="15"/><text x="53.9356%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="53.7291%" y="149" width="0.0634%" height="15" fill="rgb(251,140,46)" fg:x="9322" fg:w="11"/><text x="54.0221%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 2.76%)</title><rect x="51.9539%" y="165" width="2.7550%" height="15" fill="rgb(210,118,16)" fg:x="9014" fg:w="478"/><text x="52.2469%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.27%)</title><rect x="54.7089%" y="165" width="0.2709%" height="15" fill="rgb(254,155,18)" fg:x="9492" fg:w="47"/><text x="55.0019%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (120 instructions, 0.69%)</title><rect x="54.9798%" y="149" width="0.6916%" height="15" fill="rgb(242,64,30)" fg:x="9539" fg:w="120"/><text x="55.2728%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.71%)</title><rect x="55.8271%" y="149" width="0.7089%" height="15" fill="rgb(248,15,32)" fg:x="9686" fg:w="123"/><text x="56.1201%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (297 instructions, 1.71%)</title><rect x="54.9798%" y="165" width="1.7118%" height="15" fill="rgb(241,128,15)" fg:x="9539" fg:w="297"/><text x="55.2728%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.16%)</title><rect x="56.6916%" y="149" width="0.1614%" height="15" fill="rgb(247,198,19)" fg:x="9836" fg:w="28"/><text x="56.9846%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1739 (15 instructions, 0.09%)</title><rect x="56.8530%" y="149" width="0.0865%" height="15" fill="rgb(230,158,14)" fg:x="9864" fg:w="15"/><text x="57.1460%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1739 (15 instructions, 0.09%)</title><rect x="56.9395%" y="149" width="0.0865%" height="15" fill="rgb(240,154,30)" fg:x="9879" fg:w="15"/><text x="57.2325%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.78%)</title><rect x="56.6916%" y="165" width="0.7781%" height="15" fill="rgb(226,140,35)" fg:x="9836" fg:w="135"/><text x="56.9846%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="57.4697%" y="165" width="0.0634%" height="15" fill="rgb(241,12,48)" fg:x="9971" fg:w="11"/><text x="57.7627%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="57.5331%" y="165" width="0.0634%" height="15" fill="rgb(247,131,52)" fg:x="9982" fg:w="11"/><text x="57.8261%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="57.5965%" y="165" width="0.0634%" height="15" fill="rgb(248,24,21)" fg:x="9993" fg:w="11"/><text x="57.8895%" y="175.50"></text></g><g><title>memcpy (410 instructions, 2.36%)</title><rect x="57.6599%" y="165" width="2.3631%" height="15" fill="rgb(236,110,23)" fg:x="10004" fg:w="410"/><text x="57.9529%" y="175.50">m..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.07%)</title><rect x="60.0231%" y="133" width="0.0692%" height="15" fill="rgb(243,187,6)" fg:x="10414" fg:w="12"/><text x="60.3160%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.97%)</title><rect x="60.0922%" y="133" width="0.9683%" height="15" fill="rgb(232,145,2)" fg:x="10426" fg:w="168"/><text x="60.3852%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.36%)</title><rect x="61.0605%" y="101" width="0.3631%" height="15" fill="rgb(228,92,25)" fg:x="10594" fg:w="63"/><text x="61.3535%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (163 instructions, 0.94%)</title><rect x="61.0605%" y="117" width="0.9395%" height="15" fill="rgb(214,158,41)" fg:x="10594" fg:w="163"/><text x="61.3535%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (190 instructions, 1.10%)</title><rect x="61.0605%" y="133" width="1.0951%" height="15" fill="rgb(238,94,29)" fg:x="10594" fg:w="190"/><text x="61.3535%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="62.1556%" y="133" width="0.0634%" height="15" fill="rgb(238,8,25)" fg:x="10784" fg:w="11"/><text x="62.4486%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (421 instructions, 2.43%)</title><rect x="60.0231%" y="149" width="2.4265%" height="15" fill="rgb(240,181,26)" fg:x="10414" fg:w="421"/><text x="60.3160%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (459 instructions, 2.65%)</title><rect x="60.0231%" y="165" width="2.6455%" height="15" fill="rgb(218,22,10)" fg:x="10414" fg:w="459"/><text x="60.3160%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.32%)</title><rect x="62.6686%" y="149" width="0.3170%" height="15" fill="rgb(234,79,5)" fg:x="10873" fg:w="55"/><text x="62.9616%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.36%)</title><rect x="62.9856%" y="149" width="0.3631%" height="15" fill="rgb(216,152,44)" fg:x="10928" fg:w="63"/><text x="63.2786%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 1.15%)</title><rect x="62.6686%" y="165" width="1.1470%" height="15" fill="rgb(210,41,12)" fg:x="10873" fg:w="199"/><text x="62.9616%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,294 instructions, 65.10%)</title><rect x="0.9856%" y="181" width="65.0951%" height="15" fill="rgb(214,128,4)" fg:x="171" fg:w="11294"/><text x="1.2786%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="66.0807%" y="149" width="0.0288%" height="15" fill="rgb(239,178,3)" fg:x="11465" fg:w="5"/><text x="66.3737%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.58%)</title><rect x="66.1095%" y="133" width="0.5764%" height="15" fill="rgb(230,150,21)" fg:x="11470" fg:w="100"/><text x="66.4025%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (127 instructions, 0.73%)</title><rect x="66.1095%" y="149" width="0.7320%" height="15" fill="rgb(246,165,35)" fg:x="11470" fg:w="127"/><text x="66.4025%" y="159.50"></text></g><g><title>memset (136 instructions, 0.78%)</title><rect x="66.8415%" y="149" width="0.7839%" height="15" fill="rgb(217,143,38)" fg:x="11597" fg:w="136"/><text x="67.1345%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (428 instructions, 2.47%)</title><rect x="66.0807%" y="165" width="2.4669%" height="15" fill="rgb(239,109,54)" fg:x="11465" fg:w="428"/><text x="66.3737%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.18%)</title><rect x="68.5476%" y="149" width="0.1844%" height="15" fill="rgb(223,72,23)" fg:x="11893" fg:w="32"/><text x="68.8405%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="68.7320%" y="101" width="0.4380%" height="15" fill="rgb(240,98,7)" fg:x="11925" fg:w="76"/><text x="69.0250%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.63%)</title><rect x="68.7320%" y="117" width="0.6340%" height="15" fill="rgb(230,17,41)" fg:x="11925" fg:w="110"/><text x="69.0250%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 1.01%)</title><rect x="68.7320%" y="133" width="1.0086%" height="15" fill="rgb(215,64,5)" fg:x="11925" fg:w="175"/><text x="69.0250%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="69.7406%" y="133" width="0.0634%" height="15" fill="rgb(211,126,22)" fg:x="12100" fg:w="11"/><text x="70.0336%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="69.8040%" y="133" width="0.0634%" height="15" fill="rgb(208,190,22)" fg:x="12111" fg:w="11"/><text x="70.0970%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (359 instructions, 2.07%)</title><rect x="68.7320%" y="149" width="2.0692%" height="15" fill="rgb(222,46,17)" fg:x="11925" fg:w="359"/><text x="69.0250%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.17%)</title><rect x="70.8012%" y="149" width="0.1729%" height="15" fill="rgb(231,33,0)" fg:x="12284" fg:w="30"/><text x="71.0941%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.03%)</title><rect x="70.9741%" y="149" width="0.0288%" height="15" fill="rgb(207,16,20)" fg:x="12314" fg:w="5"/><text x="71.2670%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (494 instructions, 2.85%)</title><rect x="68.5476%" y="165" width="2.8473%" height="15" fill="rgb(208,122,12)" fg:x="11893" fg:w="494"/><text x="68.8405%" y="175.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="71.3948%" y="165" width="0.0288%" height="15" fill="rgb(253,202,7)" fg:x="12387" fg:w="5"/><text x="71.6878%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.32%)</title><rect x="71.4236%" y="165" width="0.3170%" height="15" fill="rgb(241,142,32)" fg:x="12392" fg:w="55"/><text x="71.7166%" y="175.50"></text></g><g><title>candid::utils::write_args (1,046 instructions, 6.03%)</title><rect x="66.0807%" y="181" width="6.0288%" height="15" fill="rgb(239,145,31)" fg:x="11465" fg:w="1046"/><text x="66.3737%" y="191.50">candid..</text></g><g><title>hashmap::batch_get_5_::{{closure}} (16,744 instructions, 96.51%)</title><rect x="0.9856%" y="197" width="96.5072%" height="15" fill="rgb(245,219,10)" fg:x="171" fg:w="16744"/><text x="1.2786%" y="207.50">hashmap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.07%)</title><rect x="97.4928%" y="197" width="0.0692%" height="15" fill="rgb(223,137,33)" fg:x="16915" fg:w="12"/><text x="97.7858%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.32%)</title><rect x="98.0288%" y="181" width="0.3170%" height="15" fill="rgb(209,224,41)" fg:x="17008" fg:w="55"/><text x="98.3218%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.36%)</title><rect x="98.3458%" y="181" width="0.3631%" height="15" fill="rgb(230,3,36)" fg:x="17063" fg:w="63"/><text x="98.6388%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (325 instructions, 1.87%)</title><rect x="97.5620%" y="197" width="1.8732%" height="15" fill="rgb(233,176,5)" fg:x="16927" fg:w="325"/><text x="97.8549%" y="207.50"></text></g><g><title>all (17,350 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,214,38)" fg:x="0" fg:w="17350"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (17,350 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,118,27)" fg:x="0" fg:w="17350"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>