<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="17010"><g><title>ic_cdk::setup (19 instructions, 0.11%)</title><rect x="0.0000%" y="197" width="0.1117%" height="15" fill="rgb(225,212,51)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="0.1117%" y="197" width="0.4468%" height="15" fill="rgb(246,148,28)" fg:x="19" fg:w="76"/><text x="0.4047%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="0.5585%" y="197" width="0.4468%" height="15" fill="rgb(220,2,43)" fg:x="95" fg:w="76"/><text x="0.8515%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="1.0053%" y="165" width="0.4468%" height="15" fill="rgb(216,48,40)" fg:x="171" fg:w="76"/><text x="1.2983%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.42%)</title><rect x="1.4521%" y="149" width="0.4174%" height="15" fill="rgb(244,16,36)" fg:x="247" fg:w="71"/><text x="1.7451%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.8695%" y="133" width="0.0235%" height="15" fill="rgb(217,58,8)" fg:x="318" fg:w="4"/><text x="2.1625%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.35%)</title><rect x="1.8695%" y="149" width="2.3516%" height="15" fill="rgb(235,212,38)" fg:x="318" fg:w="400"/><text x="2.1625%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.50%)</title><rect x="4.2210%" y="149" width="0.4997%" height="15" fill="rgb(248,49,9)" fg:x="718" fg:w="85"/><text x="4.5140%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.33%)</title><rect x="4.7208%" y="149" width="0.3292%" height="15" fill="rgb(210,177,18)" fg:x="803" fg:w="56"/><text x="5.0137%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.33%)</title><rect x="5.0500%" y="149" width="0.3292%" height="15" fill="rgb(207,69,16)" fg:x="859" fg:w="56"/><text x="5.3429%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.33%)</title><rect x="5.3792%" y="149" width="0.3292%" height="15" fill="rgb(217,184,54)" fg:x="915" fg:w="56"/><text x="5.6722%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.33%)</title><rect x="5.7084%" y="149" width="0.3292%" height="15" fill="rgb(253,73,9)" fg:x="971" fg:w="56"/><text x="6.0014%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.42%)</title><rect x="6.0376%" y="149" width="0.4174%" height="15" fill="rgb(221,158,47)" fg:x="1027" fg:w="71"/><text x="6.3306%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (69 instructions, 0.41%)</title><rect x="6.4550%" y="149" width="0.4056%" height="15" fill="rgb(233,48,26)" fg:x="1098" fg:w="69"/><text x="6.7480%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="6.8607%" y="133" width="0.0235%" height="15" fill="rgb(225,174,16)" fg:x="1167" fg:w="4"/><text x="7.1536%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.35%)</title><rect x="6.8607%" y="149" width="2.3516%" height="15" fill="rgb(232,113,37)" fg:x="1167" fg:w="400"/><text x="7.1536%" y="159.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="9.2122%" y="149" width="0.0941%" height="15" fill="rgb(207,136,17)" fg:x="1567" fg:w="16"/><text x="9.5052%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="9.3063%" y="133" width="0.4468%" height="15" fill="rgb(224,168,21)" fg:x="1583" fg:w="76"/><text x="9.5993%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.35%)</title><rect x="9.7531%" y="101" width="0.3527%" height="15" fill="rgb(233,194,54)" fg:x="1659" fg:w="60"/><text x="10.0461%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.50%)</title><rect x="9.7531%" y="117" width="0.4997%" height="15" fill="rgb(237,21,32)" fg:x="1659" fg:w="85"/><text x="10.0461%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="10.2528%" y="69" width="0.0529%" height="15" fill="rgb(244,153,44)" fg:x="1744" fg:w="9"/><text x="10.5458%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.18%)</title><rect x="10.3057%" y="53" width="0.1764%" height="15" fill="rgb(219,20,43)" fg:x="1753" fg:w="30"/><text x="10.5987%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.32%)</title><rect x="10.3057%" y="69" width="0.3233%" height="15" fill="rgb(251,164,30)" fg:x="1753" fg:w="55"/><text x="10.5987%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.69%)</title><rect x="10.2528%" y="85" width="0.6937%" height="15" fill="rgb(220,178,36)" fg:x="1744" fg:w="118"/><text x="10.5458%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 1.01%)</title><rect x="10.2528%" y="101" width="1.0053%" height="15" fill="rgb(223,112,32)" fg:x="1744" fg:w="171"/><text x="10.5458%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 1.03%)</title><rect x="10.2528%" y="117" width="1.0347%" height="15" fill="rgb(253,139,9)" fg:x="1744" fg:w="176"/><text x="10.5458%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 2.19%)</title><rect x="9.7531%" y="133" width="2.1869%" height="15" fill="rgb(249,178,12)" fg:x="1659" fg:w="372"/><text x="10.0461%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 3.49%)</title><rect x="9.3063%" y="149" width="3.4921%" height="15" fill="rgb(252,22,31)" fg:x="1583" fg:w="594"/><text x="9.5993%" y="159.50">all..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.50%)</title><rect x="12.7984%" y="149" width="0.4997%" height="15" fill="rgb(227,105,44)" fg:x="2177" fg:w="85"/><text x="13.0913%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.32%)</title><rect x="13.2981%" y="149" width="0.3233%" height="15" fill="rgb(220,69,52)" fg:x="2262" fg:w="55"/><text x="13.5910%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.39%)</title><rect x="13.6214%" y="149" width="0.3880%" height="15" fill="rgb(250,101,16)" fg:x="2317" fg:w="66"/><text x="13.9144%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (69 instructions, 0.41%)</title><rect x="14.0094%" y="149" width="0.4056%" height="15" fill="rgb(236,26,8)" fg:x="2383" fg:w="69"/><text x="14.3024%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="14.4150%" y="117" width="0.0235%" height="15" fill="rgb(238,165,54)" fg:x="2452" fg:w="4"/><text x="14.7080%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.35%)</title><rect x="14.4150%" y="133" width="2.3516%" height="15" fill="rgb(236,223,53)" fg:x="2452" fg:w="400"/><text x="14.7080%" y="143.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="16.7666%" y="133" width="0.0941%" height="15" fill="rgb(207,61,19)" fg:x="2852" fg:w="16"/><text x="17.0596%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="16.8607%" y="117" width="0.4468%" height="15" fill="rgb(227,44,32)" fg:x="2868" fg:w="76"/><text x="17.1536%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.35%)</title><rect x="17.3075%" y="85" width="0.3527%" height="15" fill="rgb(227,147,31)" fg:x="2944" fg:w="60"/><text x="17.6004%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.50%)</title><rect x="17.3075%" y="101" width="0.4997%" height="15" fill="rgb(253,69,27)" fg:x="2944" fg:w="85"/><text x="17.6004%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="17.8072%" y="53" width="0.0529%" height="15" fill="rgb(211,208,21)" fg:x="3029" fg:w="9"/><text x="18.1001%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.18%)</title><rect x="17.8601%" y="37" width="0.1764%" height="15" fill="rgb(219,112,47)" fg:x="3038" fg:w="30"/><text x="18.1531%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.32%)</title><rect x="17.8601%" y="53" width="0.3233%" height="15" fill="rgb(219,161,14)" fg:x="3038" fg:w="55"/><text x="18.1531%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.69%)</title><rect x="17.8072%" y="69" width="0.6937%" height="15" fill="rgb(212,172,8)" fg:x="3029" fg:w="118"/><text x="18.1001%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 1.01%)</title><rect x="17.8072%" y="85" width="1.0053%" height="15" fill="rgb(253,210,9)" fg:x="3029" fg:w="171"/><text x="18.1001%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 1.03%)</title><rect x="17.8072%" y="101" width="1.0347%" height="15" fill="rgb(211,196,24)" fg:x="3029" fg:w="176"/><text x="18.1001%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 2.19%)</title><rect x="17.3075%" y="117" width="2.1869%" height="15" fill="rgb(237,53,25)" fg:x="2944" fg:w="372"/><text x="17.6004%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 3.49%)</title><rect x="16.8607%" y="133" width="3.4921%" height="15" fill="rgb(237,45,35)" fg:x="2868" fg:w="594"/><text x="17.1536%" y="143.50">all..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.50%)</title><rect x="20.3527%" y="133" width="0.4997%" height="15" fill="rgb(232,222,20)" fg:x="3462" fg:w="85"/><text x="20.6457%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.32%)</title><rect x="20.8524%" y="133" width="0.3233%" height="15" fill="rgb(251,175,39)" fg:x="3547" fg:w="55"/><text x="21.1454%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.42%)</title><rect x="21.1758%" y="117" width="0.4174%" height="15" fill="rgb(228,136,7)" fg:x="3602" fg:w="71"/><text x="21.4687%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.56%)</title><rect x="21.5932%" y="117" width="0.5585%" height="15" fill="rgb(249,179,30)" fg:x="3673" fg:w="95"/><text x="21.8861%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.39%)</title><rect x="22.1517%" y="117" width="0.3880%" height="15" fill="rgb(245,87,31)" fg:x="3768" fg:w="66"/><text x="22.4446%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 1.66%)</title><rect x="21.1758%" y="133" width="1.6637%" height="15" fill="rgb(244,86,19)" fg:x="3602" fg:w="283"/><text x="21.4687%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (79 instructions, 0.46%)</title><rect x="22.8395%" y="133" width="0.4644%" height="15" fill="rgb(219,132,7)" fg:x="3885" fg:w="79"/><text x="23.1325%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,681 instructions, 9.88%)</title><rect x="14.4150%" y="149" width="9.8824%" height="15" fill="rgb(209,222,45)" fg:x="2452" fg:w="1681"/><text x="14.7080%" y="159.50">binread::bin..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.39%)</title><rect x="24.2975%" y="149" width="0.3880%" height="15" fill="rgb(205,202,38)" fg:x="4133" fg:w="66"/><text x="24.5904%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.08%)</title><rect x="24.6855%" y="149" width="0.0764%" height="15" fill="rgb(239,197,48)" fg:x="4199" fg:w="13"/><text x="24.9784%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.08%)</title><rect x="24.7619%" y="149" width="0.0764%" height="15" fill="rgb(223,4,54)" fg:x="4212" fg:w="13"/><text x="25.0549%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.04%)</title><rect x="24.8383%" y="149" width="0.0412%" height="15" fill="rgb(239,16,21)" fg:x="4225" fg:w="7"/><text x="25.1313%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.07%)</title><rect x="24.8795%" y="149" width="0.0705%" height="15" fill="rgb(231,94,37)" fg:x="4232" fg:w="12"/><text x="25.1725%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="24.9500%" y="133" width="0.4468%" height="15" fill="rgb(218,63,17)" fg:x="4244" fg:w="76"/><text x="25.2430%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.93%)</title><rect x="24.9500%" y="149" width="0.9347%" height="15" fill="rgb(223,182,18)" fg:x="4244" fg:w="159"/><text x="25.2430%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="25.8848%" y="117" width="0.4468%" height="15" fill="rgb(207,84,52)" fg:x="4403" fg:w="76"/><text x="26.1777%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.65%)</title><rect x="25.8848%" y="133" width="0.6526%" height="15" fill="rgb(221,173,27)" fg:x="4403" fg:w="111"/><text x="26.1777%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (183 instructions, 1.08%)</title><rect x="25.8848%" y="149" width="1.0758%" height="15" fill="rgb(217,90,40)" fg:x="4403" fg:w="183"/><text x="26.1777%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="26.9606%" y="149" width="0.4468%" height="15" fill="rgb(227,176,27)" fg:x="4586" fg:w="76"/><text x="27.2536%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.48%)</title><rect x="27.4074%" y="149" width="0.4762%" height="15" fill="rgb(244,156,8)" fg:x="4662" fg:w="81"/><text x="27.7004%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="27.8836%" y="149" width="0.4468%" height="15" fill="rgb(207,47,53)" fg:x="4743" fg:w="76"/><text x="28.1766%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="28.3304%" y="149" width="0.4468%" height="15" fill="rgb(229,45,29)" fg:x="4819" fg:w="76"/><text x="28.6234%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 instructions, 0.01%)</title><rect x="28.7772%" y="149" width="0.0118%" height="15" fill="rgb(233,78,53)" fg:x="4895" fg:w="2"/><text x="29.0702%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.48%)</title><rect x="28.7889%" y="149" width="0.4762%" height="15" fill="rgb(244,116,39)" fg:x="4897" fg:w="81"/><text x="29.0819%" y="159.50"></text></g><g><title>memcpy (381 instructions, 2.24%)</title><rect x="29.2651%" y="149" width="2.2399%" height="15" fill="rgb(211,119,11)" fg:x="4978" fg:w="381"/><text x="29.5581%" y="159.50">m..</text></g><g><title>memcpy (381 instructions, 2.24%)</title><rect x="31.5050%" y="149" width="2.2399%" height="15" fill="rgb(210,65,50)" fg:x="5359" fg:w="381"/><text x="31.7980%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new (6,396 instructions, 37.60%)</title><rect x="1.4521%" y="165" width="37.6014%" height="15" fill="rgb(239,203,39)" fg:x="247" fg:w="6396"/><text x="1.7451%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (336 instructions, 1.98%)</title><rect x="39.0535%" y="165" width="1.9753%" height="15" fill="rgb(208,168,54)" fg:x="6643" fg:w="336"/><text x="39.3465%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="41.0288%" y="133" width="0.0294%" height="15" fill="rgb(246,12,44)" fg:x="6979" fg:w="5"/><text x="41.3218%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.23%)</title><rect x="41.0288%" y="149" width="0.2293%" height="15" fill="rgb(212,58,32)" fg:x="6979" fg:w="39"/><text x="41.3218%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="41.2581%" y="149" width="0.4468%" height="15" fill="rgb(254,123,42)" fg:x="7018" fg:w="76"/><text x="41.5511%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="41.7049%" y="133" width="0.0294%" height="15" fill="rgb(240,34,20)" fg:x="7094" fg:w="5"/><text x="41.9978%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="41.7343%" y="117" width="0.3116%" height="15" fill="rgb(208,208,8)" fg:x="7099" fg:w="53"/><text x="42.0272%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.52%)</title><rect x="42.0459%" y="117" width="0.5232%" height="15" fill="rgb(236,95,40)" fg:x="7152" fg:w="89"/><text x="42.3388%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.95%)</title><rect x="42.5691%" y="117" width="0.9465%" height="15" fill="rgb(215,94,32)" fg:x="7241" fg:w="161"/><text x="42.8620%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.17%)</title><rect x="41.7343%" y="133" width="3.1746%" height="15" fill="rgb(222,95,8)" fg:x="7099" fg:w="540"/><text x="42.0272%" y="143.50">co..</text></g><g><title>candid::types::internal::env_add (759 instructions, 4.46%)</title><rect x="41.7049%" y="149" width="4.4621%" height="15" fill="rgb(227,85,5)" fg:x="7094" fg:w="759"/><text x="41.9978%" y="159.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="46.1670%" y="149" width="0.4468%" height="15" fill="rgb(219,109,20)" fg:x="7853" fg:w="76"/><text x="46.4599%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="46.6138%" y="133" width="0.0294%" height="15" fill="rgb(235,64,7)" fg:x="7929" fg:w="5"/><text x="46.9067%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="46.6432%" y="117" width="0.3116%" height="15" fill="rgb(209,211,44)" fg:x="7934" fg:w="53"/><text x="46.9361%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.52%)</title><rect x="46.9547%" y="117" width="0.5232%" height="15" fill="rgb(220,61,28)" fg:x="7987" fg:w="89"/><text x="47.2477%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.95%)</title><rect x="47.4780%" y="117" width="0.9465%" height="15" fill="rgb(210,12,1)" fg:x="8076" fg:w="161"/><text x="47.7709%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.17%)</title><rect x="46.6432%" y="133" width="3.1746%" height="15" fill="rgb(224,132,2)" fg:x="7934" fg:w="540"/><text x="46.9361%" y="143.50">co..</text></g><g><title>memcmp (68 instructions, 0.40%)</title><rect x="49.8178%" y="133" width="0.3998%" height="15" fill="rgb(229,60,38)" fg:x="8474" fg:w="68"/><text x="50.1107%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.48%)</title><rect x="50.2175%" y="117" width="0.4762%" height="15" fill="rgb(252,48,54)" fg:x="8542" fg:w="81"/><text x="50.5105%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (111 instructions, 0.65%)</title><rect x="50.2175%" y="133" width="0.6526%" height="15" fill="rgb(250,1,3)" fg:x="8542" fg:w="111"/><text x="50.5105%" y="143.50"></text></g><g><title>candid::types::internal::env_add (893 instructions, 5.25%)</title><rect x="46.6138%" y="149" width="5.2499%" height="15" fill="rgb(206,98,54)" fg:x="7929" fg:w="893"/><text x="46.9067%" y="159.50">candi..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="51.8636%" y="101" width="0.3116%" height="15" fill="rgb(222,0,54)" fg:x="8822" fg:w="53"/><text x="52.1566%" y="111.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.46%)</title><rect x="51.8636%" y="117" width="0.4644%" height="15" fill="rgb(234,166,6)" fg:x="8822" fg:w="79"/><text x="52.1566%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 1.72%)</title><rect x="51.8636%" y="133" width="1.7166%" height="15" fill="rgb(205,169,15)" fg:x="8822" fg:w="292"/><text x="52.1566%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.192 (15 instructions, 0.09%)</title><rect x="53.5802%" y="133" width="0.0882%" height="15" fill="rgb(237,116,31)" fg:x="9114" fg:w="15"/><text x="53.8732%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="53.6684%" y="133" width="0.0647%" height="15" fill="rgb(250,81,34)" fg:x="9129" fg:w="11"/><text x="53.9614%" y="143.50"></text></g><g><title>candid::types::internal::env_id (479 instructions, 2.82%)</title><rect x="51.8636%" y="149" width="2.8160%" height="15" fill="rgb(236,20,29)" fg:x="8822" fg:w="479"/><text x="52.1566%" y="159.50">ca..</text></g><g><title>candid::types::CandidType::ty (2,429 instructions, 14.28%)</title><rect x="41.0288%" y="165" width="14.2798%" height="15" fill="rgb(214,68,25)" fg:x="6979" fg:w="2429"/><text x="41.3218%" y="175.50">candid::types::Can..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.19%)</title><rect x="55.3086%" y="149" width="0.1940%" height="15" fill="rgb(244,156,24)" fg:x="9408" fg:w="33"/><text x="55.6016%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (124 instructions, 0.73%)</title><rect x="55.5026%" y="133" width="0.7290%" height="15" fill="rgb(254,174,51)" fg:x="9441" fg:w="124"/><text x="55.7956%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (124 instructions, 0.73%)</title><rect x="56.4080%" y="133" width="0.7290%" height="15" fill="rgb(231,65,2)" fg:x="9595" fg:w="124"/><text x="56.7010%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (308 instructions, 1.81%)</title><rect x="55.5026%" y="149" width="1.8107%" height="15" fill="rgb(237,173,4)" fg:x="9441" fg:w="308"/><text x="55.7956%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1714 (16 instructions, 0.09%)</title><rect x="57.3133%" y="133" width="0.0941%" height="15" fill="rgb(223,208,13)" fg:x="9749" fg:w="16"/><text x="57.6063%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1714 (16 instructions, 0.09%)</title><rect x="57.4074%" y="133" width="0.0941%" height="15" fill="rgb(251,169,44)" fg:x="9765" fg:w="16"/><text x="57.7004%" y="143.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (121 instructions, 0.71%)</title><rect x="57.3133%" y="149" width="0.7113%" height="15" fill="rgb(250,94,11)" fg:x="9749" fg:w="121"/><text x="57.6063%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="58.0247%" y="149" width="0.0647%" height="15" fill="rgb(206,188,0)" fg:x="9870" fg:w="11"/><text x="58.3177%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="58.0894%" y="149" width="0.0647%" height="15" fill="rgb(227,112,0)" fg:x="9881" fg:w="11"/><text x="58.3823%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="58.1540%" y="149" width="0.0647%" height="15" fill="rgb(233,126,30)" fg:x="9892" fg:w="11"/><text x="58.4470%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::deserialize_with_type (663 instructions, 3.90%)</title><rect x="55.3086%" y="165" width="3.8977%" height="15" fill="rgb(216,68,6)" fg:x="9408" fg:w="663"/><text x="55.6016%" y="175.50">can..</text></g><g><title>memcpy (411 instructions, 2.42%)</title><rect x="59.2063%" y="165" width="2.4162%" height="15" fill="rgb(231,9,8)" fg:x="10071" fg:w="411"/><text x="59.4993%" y="175.50">m..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="61.6226%" y="149" width="0.0294%" height="15" fill="rgb(228,191,43)" fg:x="10482" fg:w="5"/><text x="61.9155%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (170 instructions, 1.00%)</title><rect x="61.6520%" y="149" width="0.9994%" height="15" fill="rgb(253,115,7)" fg:x="10487" fg:w="170"/><text x="61.9449%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.37%)</title><rect x="62.6514%" y="117" width="0.3704%" height="15" fill="rgb(252,82,4)" fg:x="10657" fg:w="63"/><text x="62.9444%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (165 instructions, 0.97%)</title><rect x="62.6514%" y="133" width="0.9700%" height="15" fill="rgb(232,74,52)" fg:x="10657" fg:w="165"/><text x="62.9444%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (195 instructions, 1.15%)</title><rect x="62.6514%" y="149" width="1.1464%" height="15" fill="rgb(252,4,4)" fg:x="10657" fg:w="195"/><text x="62.9444%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="63.7978%" y="149" width="0.0647%" height="15" fill="rgb(246,75,39)" fg:x="10852" fg:w="11"/><text x="64.0907%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (448 instructions, 2.63%)</title><rect x="61.6226%" y="165" width="2.6337%" height="15" fill="rgb(206,112,43)" fg:x="10482" fg:w="448"/><text x="61.9155%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.37%)</title><rect x="64.2563%" y="149" width="0.3704%" height="15" fill="rgb(250,105,12)" fg:x="10930" fg:w="63"/><text x="64.5493%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 1.16%)</title><rect x="64.2563%" y="165" width="1.1581%" height="15" fill="rgb(223,19,54)" fg:x="10930" fg:w="197"/><text x="64.5493%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,113 instructions, 65.33%)</title><rect x="1.0053%" y="181" width="65.3322%" height="15" fill="rgb(211,1,35)" fg:x="171" fg:w="11113"/><text x="1.2983%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="66.3374%" y="149" width="0.0294%" height="15" fill="rgb(217,93,23)" fg:x="11284" fg:w="5"/><text x="66.6304%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (133 instructions, 0.78%)</title><rect x="66.3668%" y="133" width="0.7819%" height="15" fill="rgb(219,151,39)" fg:x="11289" fg:w="133"/><text x="66.6598%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (163 instructions, 0.96%)</title><rect x="66.3668%" y="149" width="0.9583%" height="15" fill="rgb(247,125,3)" fg:x="11289" fg:w="163"/><text x="66.6598%" y="159.50"></text></g><g><title>memset (136 instructions, 0.80%)</title><rect x="67.3251%" y="149" width="0.7995%" height="15" fill="rgb(226,166,34)" fg:x="11452" fg:w="136"/><text x="67.6181%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (463 instructions, 2.72%)</title><rect x="66.3374%" y="165" width="2.7219%" height="15" fill="rgb(231,71,42)" fg:x="11284" fg:w="463"/><text x="66.6304%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.19%)</title><rect x="69.0594%" y="149" width="0.1881%" height="15" fill="rgb(250,207,44)" fg:x="11747" fg:w="32"/><text x="69.3523%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="69.2475%" y="117" width="0.4468%" height="15" fill="rgb(253,164,25)" fg:x="11779" fg:w="76"/><text x="69.5405%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.65%)</title><rect x="69.2475%" y="133" width="0.6526%" height="15" fill="rgb(212,33,47)" fg:x="11779" fg:w="111"/><text x="69.5405%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (180 instructions, 1.06%)</title><rect x="69.2475%" y="149" width="1.0582%" height="15" fill="rgb(207,145,25)" fg:x="11779" fg:w="180"/><text x="69.5405%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="70.3057%" y="149" width="0.0647%" height="15" fill="rgb(220,162,27)" fg:x="11959" fg:w="11"/><text x="70.5987%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="70.3704%" y="149" width="0.0647%" height="15" fill="rgb(213,216,1)" fg:x="11970" fg:w="11"/><text x="70.6633%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.18%)</title><rect x="70.4350%" y="149" width="0.1764%" height="15" fill="rgb(238,90,49)" fg:x="11981" fg:w="30"/><text x="70.7280%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.03%)</title><rect x="70.6114%" y="149" width="0.0294%" height="15" fill="rgb(250,43,27)" fg:x="12011" fg:w="5"/><text x="70.9044%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (476 instructions, 2.80%)</title><rect x="69.0594%" y="165" width="2.7984%" height="15" fill="rgb(232,63,16)" fg:x="11747" fg:w="476"/><text x="69.3523%" y="175.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="71.8577%" y="165" width="0.0294%" height="15" fill="rgb(209,50,35)" fg:x="12223" fg:w="5"/><text x="72.1507%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.32%)</title><rect x="71.8871%" y="165" width="0.3233%" height="15" fill="rgb(230,14,9)" fg:x="12228" fg:w="55"/><text x="72.1801%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,073 instructions, 6.31%)</title><rect x="66.3374%" y="181" width="6.3081%" height="15" fill="rgb(208,158,49)" fg:x="11284" fg:w="1073"/><text x="66.6304%" y="191.50">ic_cdk:..</text></g><g><title>hashmap::batch_get_5_::{{closure}} (16,542 instructions, 97.25%)</title><rect x="1.0053%" y="197" width="97.2487%" height="15" fill="rgb(236,147,23)" fg:x="171" fg:w="16542"/><text x="1.2983%" y="207.50">hashmap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.07%)</title><rect x="98.2540%" y="197" width="0.0705%" height="15" fill="rgb(245,53,32)" fg:x="16713" fg:w="12"/><text x="98.5469%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.48%)</title><rect x="98.3245%" y="197" width="0.4762%" height="15" fill="rgb(209,12,26)" fg:x="16725" fg:w="81"/><text x="98.6175%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (101 instructions, 0.59%)</title><rect x="98.8007%" y="197" width="0.5938%" height="15" fill="rgb(227,67,15)" fg:x="16806" fg:w="101"/><text x="99.0937%" y="207.50"></text></g><g><title>all (17,010 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,137,50)" fg:x="0" fg:w="17010"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (17,010 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(231,145,1)" fg:x="0" fg:w="17010"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>