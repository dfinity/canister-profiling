<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="16498"><g><title>ic_cdk::setup (19 instructions, 0.12%)</title><rect x="0.0000%" y="197" width="0.1152%" height="15" fill="rgb(212,180,23)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="0.1152%" y="197" width="0.4607%" height="15" fill="rgb(240,134,24)" fg:x="19" fg:w="76"/><text x="0.4081%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="0.5758%" y="197" width="0.4607%" height="15" fill="rgb(207,93,0)" fg:x="95" fg:w="76"/><text x="0.8688%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="1.0365%" y="165" width="0.4607%" height="15" fill="rgb(221,160,13)" fg:x="171" fg:w="76"/><text x="1.3295%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.43%)</title><rect x="1.4972%" y="149" width="0.4304%" height="15" fill="rgb(221,33,39)" fg:x="247" fg:w="71"/><text x="1.7901%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.9275%" y="133" width="0.0242%" height="15" fill="rgb(212,68,33)" fg:x="318" fg:w="4"/><text x="2.2205%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.42%)</title><rect x="1.9275%" y="149" width="2.4245%" height="15" fill="rgb(208,72,37)" fg:x="318" fg:w="400"/><text x="2.2205%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.52%)</title><rect x="4.3520%" y="149" width="0.5152%" height="15" fill="rgb(236,138,45)" fg:x="718" fg:w="85"/><text x="4.6450%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.33%)</title><rect x="4.8673%" y="149" width="0.3273%" height="15" fill="rgb(207,86,25)" fg:x="803" fg:w="54"/><text x="5.1602%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.33%)</title><rect x="5.1946%" y="149" width="0.3273%" height="15" fill="rgb(205,195,4)" fg:x="857" fg:w="54"/><text x="5.4875%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.33%)</title><rect x="5.5219%" y="149" width="0.3273%" height="15" fill="rgb(221,47,42)" fg:x="911" fg:w="54"/><text x="5.8149%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.33%)</title><rect x="5.8492%" y="149" width="0.3273%" height="15" fill="rgb(216,36,7)" fg:x="965" fg:w="54"/><text x="6.1422%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.43%)</title><rect x="6.1765%" y="149" width="0.4304%" height="15" fill="rgb(251,212,22)" fg:x="1019" fg:w="71"/><text x="6.4695%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.39%)</title><rect x="6.6069%" y="149" width="0.3940%" height="15" fill="rgb(251,136,2)" fg:x="1090" fg:w="65"/><text x="6.8998%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="7.0008%" y="133" width="0.0242%" height="15" fill="rgb(229,23,53)" fg:x="1155" fg:w="4"/><text x="7.2938%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.42%)</title><rect x="7.0008%" y="149" width="2.4245%" height="15" fill="rgb(232,22,36)" fg:x="1155" fg:w="400"/><text x="7.2938%" y="159.50">c..</text></g><g><title>memcmp (16 instructions, 0.10%)</title><rect x="9.4254%" y="149" width="0.0970%" height="15" fill="rgb(220,54,19)" fg:x="1555" fg:w="16"/><text x="9.7184%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="9.5224%" y="133" width="0.4607%" height="15" fill="rgb(238,56,42)" fg:x="1571" fg:w="76"/><text x="9.8153%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.36%)</title><rect x="9.9830%" y="101" width="0.3637%" height="15" fill="rgb(210,79,48)" fg:x="1647" fg:w="60"/><text x="10.2760%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.52%)</title><rect x="9.9830%" y="117" width="0.5152%" height="15" fill="rgb(222,61,34)" fg:x="1647" fg:w="85"/><text x="10.2760%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="10.4982%" y="69" width="0.0546%" height="15" fill="rgb(207,156,27)" fg:x="1732" fg:w="9"/><text x="10.7912%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.18%)</title><rect x="10.5528%" y="53" width="0.1818%" height="15" fill="rgb(229,212,37)" fg:x="1741" fg:w="30"/><text x="10.8458%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.33%)</title><rect x="10.5528%" y="69" width="0.3334%" height="15" fill="rgb(252,82,21)" fg:x="1741" fg:w="55"/><text x="10.8458%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.72%)</title><rect x="10.4982%" y="85" width="0.7152%" height="15" fill="rgb(208,15,6)" fg:x="1732" fg:w="118"/><text x="10.7912%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 1.04%)</title><rect x="10.4982%" y="101" width="1.0365%" height="15" fill="rgb(214,95,1)" fg:x="1732" fg:w="171"/><text x="10.7912%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 1.07%)</title><rect x="10.4982%" y="117" width="1.0668%" height="15" fill="rgb(247,70,33)" fg:x="1732" fg:w="176"/><text x="10.7912%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 2.25%)</title><rect x="9.9830%" y="133" width="2.2548%" height="15" fill="rgb(245,188,37)" fg:x="1647" fg:w="372"/><text x="10.2760%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 3.60%)</title><rect x="9.5224%" y="149" width="3.6004%" height="15" fill="rgb(210,160,43)" fg:x="1571" fg:w="594"/><text x="9.8153%" y="159.50">all..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.52%)</title><rect x="13.1228%" y="149" width="0.5152%" height="15" fill="rgb(234,119,15)" fg:x="2165" fg:w="85"/><text x="13.4158%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.33%)</title><rect x="13.6380%" y="149" width="0.3334%" height="15" fill="rgb(240,66,54)" fg:x="2250" fg:w="55"/><text x="13.9310%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.40%)</title><rect x="13.9714%" y="149" width="0.4000%" height="15" fill="rgb(253,55,37)" fg:x="2305" fg:w="66"/><text x="14.2644%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.39%)</title><rect x="14.3714%" y="149" width="0.3940%" height="15" fill="rgb(225,205,27)" fg:x="2371" fg:w="65"/><text x="14.6644%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="14.7654%" y="117" width="0.0242%" height="15" fill="rgb(237,106,7)" fg:x="2436" fg:w="4"/><text x="15.0584%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.42%)</title><rect x="14.7654%" y="133" width="2.4245%" height="15" fill="rgb(223,168,15)" fg:x="2436" fg:w="400"/><text x="15.0584%" y="143.50">c..</text></g><g><title>memcmp (16 instructions, 0.10%)</title><rect x="17.1900%" y="133" width="0.0970%" height="15" fill="rgb(216,53,41)" fg:x="2836" fg:w="16"/><text x="17.4829%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="17.2869%" y="117" width="0.4607%" height="15" fill="rgb(239,188,10)" fg:x="2852" fg:w="76"/><text x="17.5799%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.36%)</title><rect x="17.7476%" y="85" width="0.3637%" height="15" fill="rgb(235,82,48)" fg:x="2928" fg:w="60"/><text x="18.0406%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.52%)</title><rect x="17.7476%" y="101" width="0.5152%" height="15" fill="rgb(210,103,35)" fg:x="2928" fg:w="85"/><text x="18.0406%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="18.2628%" y="53" width="0.0546%" height="15" fill="rgb(214,207,25)" fg:x="3013" fg:w="9"/><text x="18.5558%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.18%)</title><rect x="18.3174%" y="37" width="0.1818%" height="15" fill="rgb(218,6,48)" fg:x="3022" fg:w="30"/><text x="18.6103%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.33%)</title><rect x="18.3174%" y="53" width="0.3334%" height="15" fill="rgb(243,81,34)" fg:x="3022" fg:w="55"/><text x="18.6103%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.72%)</title><rect x="18.2628%" y="69" width="0.7152%" height="15" fill="rgb(234,223,27)" fg:x="3013" fg:w="118"/><text x="18.5558%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 1.04%)</title><rect x="18.2628%" y="85" width="1.0365%" height="15" fill="rgb(227,171,7)" fg:x="3013" fg:w="171"/><text x="18.5558%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 1.07%)</title><rect x="18.2628%" y="101" width="1.0668%" height="15" fill="rgb(224,177,11)" fg:x="3013" fg:w="176"/><text x="18.5558%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 2.25%)</title><rect x="17.7476%" y="117" width="2.2548%" height="15" fill="rgb(207,46,20)" fg:x="2928" fg:w="372"/><text x="18.0406%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 3.60%)</title><rect x="17.2869%" y="133" width="3.6004%" height="15" fill="rgb(205,71,19)" fg:x="2852" fg:w="594"/><text x="17.5799%" y="143.50">all..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.52%)</title><rect x="20.8874%" y="133" width="0.5152%" height="15" fill="rgb(242,85,7)" fg:x="3446" fg:w="85"/><text x="21.1803%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.33%)</title><rect x="21.4026%" y="133" width="0.3334%" height="15" fill="rgb(226,63,50)" fg:x="3531" fg:w="55"/><text x="21.6956%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.43%)</title><rect x="21.7360%" y="117" width="0.4304%" height="15" fill="rgb(215,84,51)" fg:x="3586" fg:w="71"/><text x="22.0289%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.55%)</title><rect x="22.1663%" y="117" width="0.5516%" height="15" fill="rgb(240,149,51)" fg:x="3657" fg:w="91"/><text x="22.4593%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.40%)</title><rect x="22.7179%" y="117" width="0.4000%" height="15" fill="rgb(240,128,36)" fg:x="3748" fg:w="66"/><text x="23.0109%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 1.74%)</title><rect x="21.7360%" y="133" width="1.7396%" height="15" fill="rgb(253,164,36)" fg:x="3586" fg:w="287"/><text x="22.0289%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="23.4756%" y="133" width="0.4607%" height="15" fill="rgb(205,19,34)" fg:x="3873" fg:w="76"/><text x="23.7685%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,714 instructions, 10.39%)</title><rect x="14.7654%" y="149" width="10.3891%" height="15" fill="rgb(211,107,26)" fg:x="2436" fg:w="1714"/><text x="15.0584%" y="159.50">binread::binr..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.40%)</title><rect x="25.1546%" y="149" width="0.4000%" height="15" fill="rgb(212,120,0)" fg:x="4150" fg:w="66"/><text x="25.4475%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.08%)</title><rect x="25.5546%" y="149" width="0.0788%" height="15" fill="rgb(206,155,15)" fg:x="4216" fg:w="13"/><text x="25.8476%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.08%)</title><rect x="25.6334%" y="149" width="0.0788%" height="15" fill="rgb(218,9,32)" fg:x="4229" fg:w="13"/><text x="25.9264%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.04%)</title><rect x="25.7122%" y="149" width="0.0424%" height="15" fill="rgb(244,98,12)" fg:x="4242" fg:w="7"/><text x="26.0052%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.09%)</title><rect x="25.7546%" y="149" width="0.0909%" height="15" fill="rgb(209,8,18)" fg:x="4249" fg:w="15"/><text x="26.0476%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="25.8456%" y="133" width="0.4607%" height="15" fill="rgb(205,217,13)" fg:x="4264" fg:w="76"/><text x="26.1385%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.96%)</title><rect x="25.8456%" y="149" width="0.9638%" height="15" fill="rgb(207,203,4)" fg:x="4264" fg:w="159"/><text x="26.1385%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="26.8093%" y="117" width="0.4607%" height="15" fill="rgb(253,205,51)" fg:x="4423" fg:w="76"/><text x="27.1023%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.67%)</title><rect x="26.8093%" y="133" width="0.6728%" height="15" fill="rgb(210,0,49)" fg:x="4423" fg:w="111"/><text x="27.1023%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (179 instructions, 1.08%)</title><rect x="26.8093%" y="149" width="1.0850%" height="15" fill="rgb(245,29,0)" fg:x="4423" fg:w="179"/><text x="27.1023%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="27.8943%" y="149" width="0.4607%" height="15" fill="rgb(234,63,6)" fg:x="4602" fg:w="76"/><text x="28.1873%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.49%)</title><rect x="28.3550%" y="149" width="0.4910%" height="15" fill="rgb(212,12,14)" fg:x="4678" fg:w="81"/><text x="28.6479%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="28.8459%" y="149" width="0.4607%" height="15" fill="rgb(207,204,41)" fg:x="4759" fg:w="76"/><text x="29.1389%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="29.3066%" y="149" width="0.4607%" height="15" fill="rgb(247,228,21)" fg:x="4835" fg:w="76"/><text x="29.5996%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 instructions, 0.01%)</title><rect x="29.7672%" y="149" width="0.0121%" height="15" fill="rgb(241,181,25)" fg:x="4911" fg:w="2"/><text x="30.0602%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.49%)</title><rect x="29.7794%" y="149" width="0.4910%" height="15" fill="rgb(226,48,23)" fg:x="4913" fg:w="81"/><text x="30.0723%" y="159.50"></text></g><g><title>memcpy (381 instructions, 2.31%)</title><rect x="30.2703%" y="149" width="2.3094%" height="15" fill="rgb(210,102,38)" fg:x="4994" fg:w="381"/><text x="30.5633%" y="159.50">m..</text></g><g><title>memcpy (381 instructions, 2.31%)</title><rect x="32.5797%" y="149" width="2.3094%" height="15" fill="rgb(243,128,12)" fg:x="5375" fg:w="381"/><text x="32.8727%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new (6,424 instructions, 38.94%)</title><rect x="1.4972%" y="165" width="38.9381%" height="15" fill="rgb(219,29,3)" fg:x="247" fg:w="6424"/><text x="1.7901%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (336 instructions, 2.04%)</title><rect x="40.4352%" y="165" width="2.0366%" height="15" fill="rgb(239,108,31)" fg:x="6671" fg:w="336"/><text x="40.7282%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="42.4718%" y="149" width="0.0303%" height="15" fill="rgb(227,10,25)" fg:x="7007" fg:w="5"/><text x="42.7648%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.24%)</title><rect x="42.4718%" y="165" width="0.2364%" height="15" fill="rgb(211,118,17)" fg:x="7007" fg:w="39"/><text x="42.7648%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.44%)</title><rect x="42.7082%" y="165" width="0.4425%" height="15" fill="rgb(208,108,25)" fg:x="7046" fg:w="73"/><text x="43.0012%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="43.1507%" y="149" width="0.0303%" height="15" fill="rgb(231,91,43)" fg:x="7119" fg:w="5"/><text x="43.4437%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.32%)</title><rect x="43.1810%" y="133" width="0.3213%" height="15" fill="rgb(245,205,43)" fg:x="7124" fg:w="53"/><text x="43.4740%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.54%)</title><rect x="43.5022%" y="133" width="0.5395%" height="15" fill="rgb(238,70,42)" fg:x="7177" fg:w="89"/><text x="43.7952%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.98%)</title><rect x="44.0417%" y="133" width="0.9759%" height="15" fill="rgb(243,74,25)" fg:x="7266" fg:w="161"/><text x="44.3347%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.27%)</title><rect x="43.1810%" y="149" width="3.2731%" height="15" fill="rgb(220,92,24)" fg:x="7124" fg:w="540"/><text x="43.4740%" y="159.50">co..</text></g><g><title>candid::types::internal::env_add (755 instructions, 4.58%)</title><rect x="43.1507%" y="165" width="4.5763%" height="15" fill="rgb(217,89,28)" fg:x="7119" fg:w="755"/><text x="43.4437%" y="175.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.33%)</title><rect x="47.7270%" y="149" width="0.3334%" height="15" fill="rgb(224,220,2)" fg:x="7874" fg:w="55"/><text x="48.0200%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (162 instructions, 0.98%)</title><rect x="47.7270%" y="165" width="0.9819%" height="15" fill="rgb(211,70,37)" fg:x="7874" fg:w="162"/><text x="48.0200%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="48.7089%" y="149" width="0.0303%" height="15" fill="rgb(219,33,12)" fg:x="8036" fg:w="5"/><text x="49.0019%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.32%)</title><rect x="48.7392%" y="133" width="0.3213%" height="15" fill="rgb(224,91,44)" fg:x="8041" fg:w="53"/><text x="49.0322%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.54%)</title><rect x="49.0605%" y="133" width="0.5395%" height="15" fill="rgb(243,103,1)" fg:x="8094" fg:w="89"/><text x="49.3535%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.98%)</title><rect x="49.6000%" y="133" width="0.9759%" height="15" fill="rgb(239,229,11)" fg:x="8183" fg:w="161"/><text x="49.8929%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.27%)</title><rect x="48.7392%" y="149" width="3.2731%" height="15" fill="rgb(252,8,54)" fg:x="8041" fg:w="540"/><text x="49.0322%" y="159.50">co..</text></g><g><title>memcmp (68 instructions, 0.41%)</title><rect x="52.0124%" y="149" width="0.4122%" height="15" fill="rgb(227,156,14)" fg:x="8581" fg:w="68"/><text x="52.3053%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.49%)</title><rect x="52.4245%" y="133" width="0.4910%" height="15" fill="rgb(207,33,10)" fg:x="8649" fg:w="81"/><text x="52.7175%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.65%)</title><rect x="52.4245%" y="149" width="0.6546%" height="15" fill="rgb(207,168,41)" fg:x="8649" fg:w="108"/><text x="52.7175%" y="159.50"></text></g><g><title>candid::types::internal::env_add (889 instructions, 5.39%)</title><rect x="48.7089%" y="165" width="5.3885%" height="15" fill="rgb(227,121,1)" fg:x="8036" fg:w="889"/><text x="49.0019%" y="175.50">candi..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.32%)</title><rect x="54.0975%" y="117" width="0.3213%" height="15" fill="rgb(212,21,42)" fg:x="8925" fg:w="53"/><text x="54.3904%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.48%)</title><rect x="54.0975%" y="133" width="0.4788%" height="15" fill="rgb(232,183,14)" fg:x="8925" fg:w="79"/><text x="54.3904%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 1.77%)</title><rect x="54.0975%" y="149" width="1.7699%" height="15" fill="rgb(230,219,2)" fg:x="8925" fg:w="292"/><text x="54.3904%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.176 (15 instructions, 0.09%)</title><rect x="55.8674%" y="149" width="0.0909%" height="15" fill="rgb(230,176,29)" fg:x="9217" fg:w="15"/><text x="56.1603%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.07%)</title><rect x="55.9583%" y="149" width="0.0667%" height="15" fill="rgb(237,208,33)" fg:x="9232" fg:w="11"/><text x="56.2513%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 2.90%)</title><rect x="54.0975%" y="165" width="2.8973%" height="15" fill="rgb(219,152,44)" fg:x="8925" fg:w="478"/><text x="54.3904%" y="175.50">ca..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.20%)</title><rect x="56.9948%" y="165" width="0.2000%" height="15" fill="rgb(222,216,25)" fg:x="9403" fg:w="33"/><text x="57.2878%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.75%)</title><rect x="57.1948%" y="149" width="0.7455%" height="15" fill="rgb(216,21,30)" fg:x="9436" fg:w="123"/><text x="57.4878%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.75%)</title><rect x="58.1040%" y="149" width="0.7455%" height="15" fill="rgb(208,195,35)" fg:x="9586" fg:w="123"/><text x="58.3970%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 1.82%)</title><rect x="57.1948%" y="165" width="1.8184%" height="15" fill="rgb(236,111,38)" fg:x="9436" fg:w="300"/><text x="57.4878%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.17%)</title><rect x="59.0132%" y="149" width="0.1697%" height="15" fill="rgb(230,227,23)" fg:x="9736" fg:w="28"/><text x="59.3062%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.59%)</title><rect x="59.0132%" y="165" width="0.5880%" height="15" fill="rgb(236,150,32)" fg:x="9736" fg:w="97"/><text x="59.3062%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.07%)</title><rect x="59.6012%" y="165" width="0.0667%" height="15" fill="rgb(238,92,44)" fg:x="9833" fg:w="11"/><text x="59.8941%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.07%)</title><rect x="59.6678%" y="165" width="0.0667%" height="15" fill="rgb(244,117,34)" fg:x="9844" fg:w="11"/><text x="59.9608%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.07%)</title><rect x="59.7345%" y="165" width="0.0667%" height="15" fill="rgb(242,89,5)" fg:x="9855" fg:w="11"/><text x="60.0275%" y="175.50"></text></g><g><title>memcpy (411 instructions, 2.49%)</title><rect x="59.8012%" y="165" width="2.4912%" height="15" fill="rgb(243,228,44)" fg:x="9866" fg:w="411"/><text x="60.0942%" y="175.50">m..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.07%)</title><rect x="62.2924%" y="133" width="0.0727%" height="15" fill="rgb(231,123,4)" fg:x="10277" fg:w="12"/><text x="62.5854%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 1.02%)</title><rect x="62.3651%" y="133" width="1.0183%" height="15" fill="rgb(213,143,50)" fg:x="10289" fg:w="168"/><text x="62.6581%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.38%)</title><rect x="63.3834%" y="101" width="0.3819%" height="15" fill="rgb(223,61,27)" fg:x="10457" fg:w="63"/><text x="63.6764%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (209 instructions, 1.27%)</title><rect x="63.3834%" y="117" width="1.2668%" height="15" fill="rgb(239,224,14)" fg:x="10457" fg:w="209"/><text x="63.6764%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (236 instructions, 1.43%)</title><rect x="63.3834%" y="133" width="1.4305%" height="15" fill="rgb(209,170,42)" fg:x="10457" fg:w="236"/><text x="63.6764%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.07%)</title><rect x="64.8139%" y="133" width="0.0667%" height="15" fill="rgb(219,28,0)" fg:x="10693" fg:w="11"/><text x="65.1069%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (469 instructions, 2.84%)</title><rect x="62.2924%" y="149" width="2.8428%" height="15" fill="rgb(211,211,18)" fg:x="10277" fg:w="469"/><text x="62.5854%" y="159.50">co..</text></g><g><title>candid::de::IDLDeserialize::done (503 instructions, 3.05%)</title><rect x="62.2924%" y="165" width="3.0489%" height="15" fill="rgb(252,221,24)" fg:x="10277" fg:w="503"/><text x="62.5854%" y="175.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.33%)</title><rect x="65.3413%" y="149" width="0.3334%" height="15" fill="rgb(221,76,15)" fg:x="10780" fg:w="55"/><text x="65.6342%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.38%)</title><rect x="65.6746%" y="149" width="0.3819%" height="15" fill="rgb(243,217,50)" fg:x="10835" fg:w="63"/><text x="65.9676%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (200 instructions, 1.21%)</title><rect x="65.3413%" y="165" width="1.2123%" height="15" fill="rgb(244,37,11)" fg:x="10780" fg:w="200"/><text x="65.6342%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,200 instructions, 67.89%)</title><rect x="1.0365%" y="181" width="67.8870%" height="15" fill="rgb(235,191,41)" fg:x="171" fg:w="11200"/><text x="1.3295%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="68.9235%" y="149" width="0.0303%" height="15" fill="rgb(219,76,43)" fg:x="11371" fg:w="5"/><text x="69.2165%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.33%)</title><rect x="68.9538%" y="133" width="0.3334%" height="15" fill="rgb(224,131,6)" fg:x="11376" fg:w="55"/><text x="69.2468%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 instructions, 0.50%)</title><rect x="68.9538%" y="149" width="0.4970%" height="15" fill="rgb(227,120,54)" fg:x="11376" fg:w="82"/><text x="69.2468%" y="159.50"></text></g><g><title>memset (136 instructions, 0.82%)</title><rect x="69.4508%" y="149" width="0.8243%" height="15" fill="rgb(233,64,33)" fg:x="11458" fg:w="136"/><text x="69.7438%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (382 instructions, 2.32%)</title><rect x="68.9235%" y="165" width="2.3154%" height="15" fill="rgb(249,76,4)" fg:x="11371" fg:w="382"/><text x="69.2165%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.19%)</title><rect x="71.2389%" y="149" width="0.1940%" height="15" fill="rgb(241,54,27)" fg:x="11753" fg:w="32"/><text x="71.5319%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="71.4329%" y="117" width="0.4607%" height="15" fill="rgb(208,97,21)" fg:x="11785" fg:w="76"/><text x="71.7259%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.67%)</title><rect x="71.4329%" y="133" width="0.6728%" height="15" fill="rgb(209,192,44)" fg:x="11785" fg:w="111"/><text x="71.7259%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (176 instructions, 1.07%)</title><rect x="71.4329%" y="149" width="1.0668%" height="15" fill="rgb(253,38,3)" fg:x="11785" fg:w="176"/><text x="71.7259%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.07%)</title><rect x="72.4997%" y="149" width="0.0667%" height="15" fill="rgb(239,191,24)" fg:x="11961" fg:w="11"/><text x="72.7927%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.07%)</title><rect x="72.5664%" y="149" width="0.0667%" height="15" fill="rgb(246,171,41)" fg:x="11972" fg:w="11"/><text x="72.8593%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.18%)</title><rect x="72.6330%" y="149" width="0.1818%" height="15" fill="rgb(219,211,31)" fg:x="11983" fg:w="30"/><text x="72.9260%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.03%)</title><rect x="72.8149%" y="149" width="0.0303%" height="15" fill="rgb(207,163,39)" fg:x="12013" fg:w="5"/><text x="73.1079%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (472 instructions, 2.86%)</title><rect x="71.2389%" y="165" width="2.8610%" height="15" fill="rgb(217,215,17)" fg:x="11753" fg:w="472"/><text x="71.5319%" y="175.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="74.0999%" y="165" width="0.0303%" height="15" fill="rgb(207,109,2)" fg:x="12225" fg:w="5"/><text x="74.3929%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.33%)</title><rect x="74.1302%" y="165" width="0.3334%" height="15" fill="rgb(211,81,10)" fg:x="12230" fg:w="55"/><text x="74.4232%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (988 instructions, 5.99%)</title><rect x="68.9235%" y="181" width="5.9886%" height="15" fill="rgb(219,117,46)" fg:x="11371" fg:w="988"/><text x="69.2165%" y="191.50">ic_cdk..</text></g><g><title>hashmap::batch_get_2_::{{closure}} (15,891 instructions, 96.32%)</title><rect x="1.0365%" y="197" width="96.3208%" height="15" fill="rgb(214,14,25)" fg:x="171" fg:w="15891"/><text x="1.3295%" y="207.50">hashmap::batch_get_2_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.07%)</title><rect x="97.3573%" y="197" width="0.0727%" height="15" fill="rgb(240,202,33)" fg:x="16062" fg:w="12"/><text x="97.6502%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.33%)</title><rect x="97.9210%" y="181" width="0.3334%" height="15" fill="rgb(237,118,28)" fg:x="16155" fg:w="55"/><text x="98.2139%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.38%)</title><rect x="98.2543%" y="181" width="0.3819%" height="15" fill="rgb(244,57,4)" fg:x="16210" fg:w="63"/><text x="98.5473%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (326 instructions, 1.98%)</title><rect x="97.4300%" y="197" width="1.9760%" height="15" fill="rgb(213,64,20)" fg:x="16074" fg:w="326"/><text x="97.7230%" y="207.50"></text></g><g><title>all (16,498 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,157,51)" fg:x="0" fg:w="16498"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (16,498 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,27,34)" fg:x="0" fg:w="16498"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>