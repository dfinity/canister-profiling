<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="21856"><g><title>ic_cdk::setup (24 instructions, 0.11%)</title><rect x="0.0000%" y="197" width="0.1098%" height="15" fill="rgb(212,146,39)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.38%)</title><rect x="0.1098%" y="197" width="0.3798%" height="15" fill="rgb(210,17,3)" fg:x="24" fg:w="83"/><text x="0.4028%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.38%)</title><rect x="0.4896%" y="197" width="0.3798%" height="15" fill="rgb(247,152,9)" fg:x="107" fg:w="83"/><text x="0.7825%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.38%)</title><rect x="0.8693%" y="165" width="0.3798%" height="15" fill="rgb(209,151,36)" fg:x="190" fg:w="83"/><text x="1.1623%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.38%)</title><rect x="1.2491%" y="149" width="0.3752%" height="15" fill="rgb(232,134,19)" fg:x="273" fg:w="82"/><text x="1.5421%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="1.6243%" y="133" width="0.0275%" height="15" fill="rgb(237,104,15)" fg:x="355" fg:w="6"/><text x="1.9172%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 2.01%)</title><rect x="1.6243%" y="149" width="2.0132%" height="15" fill="rgb(227,106,17)" fg:x="355" fg:w="440"/><text x="1.9172%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.43%)</title><rect x="3.6374%" y="149" width="0.4347%" height="15" fill="rgb(219,80,33)" fg:x="795" fg:w="95"/><text x="3.9304%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.27%)</title><rect x="4.0721%" y="149" width="0.2745%" height="15" fill="rgb(237,165,52)" fg:x="890" fg:w="60"/><text x="4.3651%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.27%)</title><rect x="4.3466%" y="149" width="0.2745%" height="15" fill="rgb(217,195,6)" fg:x="950" fg:w="60"/><text x="4.6396%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.27%)</title><rect x="4.6212%" y="149" width="0.2745%" height="15" fill="rgb(216,198,10)" fg:x="1010" fg:w="60"/><text x="4.9141%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.27%)</title><rect x="4.8957%" y="149" width="0.2745%" height="15" fill="rgb(235,21,34)" fg:x="1070" fg:w="60"/><text x="5.1886%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.38%)</title><rect x="5.1702%" y="149" width="0.3752%" height="15" fill="rgb(219,129,23)" fg:x="1130" fg:w="82"/><text x="5.4632%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.32%)</title><rect x="5.5454%" y="149" width="0.3203%" height="15" fill="rgb(222,61,23)" fg:x="1212" fg:w="70"/><text x="5.8384%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="5.8657%" y="133" width="0.0275%" height="15" fill="rgb(252,46,1)" fg:x="1282" fg:w="6"/><text x="6.1586%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 2.01%)</title><rect x="5.8657%" y="149" width="2.0132%" height="15" fill="rgb(224,165,42)" fg:x="1282" fg:w="440"/><text x="6.1586%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.09%)</title><rect x="7.8788%" y="149" width="0.0869%" height="15" fill="rgb(218,164,1)" fg:x="1722" fg:w="19"/><text x="8.1718%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.38%)</title><rect x="7.9658%" y="133" width="0.3798%" height="15" fill="rgb(227,186,10)" fg:x="1741" fg:w="83"/><text x="8.2587%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.31%)</title><rect x="8.3455%" y="101" width="0.3066%" height="15" fill="rgb(227,20,13)" fg:x="1824" fg:w="67"/><text x="8.6385%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.45%)</title><rect x="8.3455%" y="117" width="0.4484%" height="15" fill="rgb(240,10,40)" fg:x="1824" fg:w="98"/><text x="8.6385%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.05%)</title><rect x="8.7939%" y="69" width="0.0503%" height="15" fill="rgb(223,123,30)" fg:x="1922" fg:w="11"/><text x="9.0869%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.16%)</title><rect x="8.8443%" y="53" width="0.1601%" height="15" fill="rgb(243,106,17)" fg:x="1933" fg:w="35"/><text x="9.1372%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.30%)</title><rect x="8.8443%" y="69" width="0.3020%" height="15" fill="rgb(239,120,48)" fg:x="1933" fg:w="66"/><text x="9.1372%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.67%)</title><rect x="8.7939%" y="85" width="0.6726%" height="15" fill="rgb(223,22,52)" fg:x="1922" fg:w="147"/><text x="9.0869%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.97%)</title><rect x="8.7939%" y="101" width="0.9700%" height="15" fill="rgb(209,47,8)" fg:x="1922" fg:w="212"/><text x="9.0869%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 1.02%)</title><rect x="8.7939%" y="117" width="1.0157%" height="15" fill="rgb(212,166,27)" fg:x="1922" fg:w="222"/><text x="9.0869%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 2.11%)</title><rect x="8.3455%" y="133" width="2.1093%" height="15" fill="rgb(241,169,45)" fg:x="1824" fg:w="461"/><text x="8.6385%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 3.15%)</title><rect x="7.9658%" y="149" width="3.1525%" height="15" fill="rgb(213,126,26)" fg:x="1741" fg:w="689"/><text x="8.2587%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.43%)</title><rect x="11.1182%" y="149" width="0.4347%" height="15" fill="rgb(221,40,33)" fg:x="2430" fg:w="95"/><text x="11.4112%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.27%)</title><rect x="11.5529%" y="149" width="0.2745%" height="15" fill="rgb(250,46,7)" fg:x="2525" fg:w="60"/><text x="11.8459%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.35%)</title><rect x="11.8274%" y="149" width="0.3477%" height="15" fill="rgb(224,189,11)" fg:x="2585" fg:w="76"/><text x="12.1204%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.32%)</title><rect x="12.1751%" y="149" width="0.3203%" height="15" fill="rgb(231,198,9)" fg:x="2661" fg:w="70"/><text x="12.4681%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="12.4954%" y="117" width="0.0275%" height="15" fill="rgb(215,7,0)" fg:x="2731" fg:w="6"/><text x="12.7884%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 2.01%)</title><rect x="12.4954%" y="133" width="2.0132%" height="15" fill="rgb(206,182,52)" fg:x="2731" fg:w="440"/><text x="12.7884%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.09%)</title><rect x="14.5086%" y="133" width="0.0869%" height="15" fill="rgb(228,21,46)" fg:x="3171" fg:w="19"/><text x="14.8016%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.38%)</title><rect x="14.5955%" y="117" width="0.3798%" height="15" fill="rgb(231,163,1)" fg:x="3190" fg:w="83"/><text x="14.8885%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.31%)</title><rect x="14.9753%" y="85" width="0.3066%" height="15" fill="rgb(252,67,28)" fg:x="3273" fg:w="67"/><text x="15.2683%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.45%)</title><rect x="14.9753%" y="101" width="0.4484%" height="15" fill="rgb(219,29,30)" fg:x="3273" fg:w="98"/><text x="15.2683%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.05%)</title><rect x="15.4237%" y="53" width="0.0503%" height="15" fill="rgb(253,135,23)" fg:x="3371" fg:w="11"/><text x="15.7167%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.16%)</title><rect x="15.4740%" y="37" width="0.1601%" height="15" fill="rgb(228,103,12)" fg:x="3382" fg:w="35"/><text x="15.7670%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.30%)</title><rect x="15.4740%" y="53" width="0.3020%" height="15" fill="rgb(229,30,47)" fg:x="3382" fg:w="66"/><text x="15.7670%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.67%)</title><rect x="15.4237%" y="69" width="0.6726%" height="15" fill="rgb(221,26,20)" fg:x="3371" fg:w="147"/><text x="15.7167%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.97%)</title><rect x="15.4237%" y="85" width="0.9700%" height="15" fill="rgb(239,85,30)" fg:x="3371" fg:w="212"/><text x="15.7167%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 1.02%)</title><rect x="15.4237%" y="101" width="1.0157%" height="15" fill="rgb(222,29,19)" fg:x="3371" fg:w="222"/><text x="15.7167%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 2.11%)</title><rect x="14.9753%" y="117" width="2.1093%" height="15" fill="rgb(207,207,39)" fg:x="3273" fg:w="461"/><text x="15.2683%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 3.15%)</title><rect x="14.5955%" y="133" width="3.1525%" height="15" fill="rgb(209,12,35)" fg:x="3190" fg:w="689"/><text x="14.8885%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.43%)</title><rect x="17.7480%" y="133" width="0.4347%" height="15" fill="rgb(217,127,12)" fg:x="3879" fg:w="95"/><text x="18.0410%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.27%)</title><rect x="18.1827%" y="133" width="0.2745%" height="15" fill="rgb(211,114,0)" fg:x="3974" fg:w="60"/><text x="18.4756%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.38%)</title><rect x="18.4572%" y="117" width="0.3752%" height="15" fill="rgb(243,23,44)" fg:x="4034" fg:w="82"/><text x="18.7501%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.43%)</title><rect x="18.8324%" y="117" width="0.4347%" height="15" fill="rgb(250,203,9)" fg:x="4116" fg:w="95"/><text x="19.1253%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.35%)</title><rect x="19.2670%" y="117" width="0.3477%" height="15" fill="rgb(229,37,46)" fg:x="4211" fg:w="76"/><text x="19.5600%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 1.51%)</title><rect x="18.4572%" y="133" width="1.5099%" height="15" fill="rgb(236,177,24)" fg:x="4034" fg:w="330"/><text x="18.7501%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.38%)</title><rect x="19.9671%" y="133" width="0.3752%" height="15" fill="rgb(217,206,35)" fg:x="4364" fg:w="82"/><text x="20.2600%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,960 instructions, 8.97%)</title><rect x="12.4954%" y="149" width="8.9678%" height="15" fill="rgb(218,227,51)" fg:x="2731" fg:w="1960"/><text x="12.7884%" y="159.50">binread::b..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.35%)</title><rect x="21.4632%" y="149" width="0.3477%" height="15" fill="rgb(209,121,32)" fg:x="4691" fg:w="76"/><text x="21.7562%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.07%)</title><rect x="21.8109%" y="149" width="0.0686%" height="15" fill="rgb(216,195,49)" fg:x="4767" fg:w="15"/><text x="22.1039%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.07%)</title><rect x="21.8796%" y="149" width="0.0686%" height="15" fill="rgb(207,151,38)" fg:x="4782" fg:w="15"/><text x="22.1725%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.04%)</title><rect x="21.9482%" y="149" width="0.0412%" height="15" fill="rgb(234,65,24)" fg:x="4797" fg:w="9"/><text x="22.2412%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.08%)</title><rect x="21.9894%" y="149" width="0.0824%" height="15" fill="rgb(231,78,22)" fg:x="4806" fg:w="18"/><text x="22.2824%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.38%)</title><rect x="22.0717%" y="133" width="0.3798%" height="15" fill="rgb(233,182,47)" fg:x="4824" fg:w="83"/><text x="22.3647%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.82%)</title><rect x="22.0717%" y="149" width="0.8190%" height="15" fill="rgb(210,194,39)" fg:x="4824" fg:w="179"/><text x="22.3647%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.38%)</title><rect x="22.8907%" y="117" width="0.3798%" height="15" fill="rgb(240,32,16)" fg:x="5003" fg:w="83"/><text x="23.1837%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.58%)</title><rect x="22.8907%" y="133" width="0.5765%" height="15" fill="rgb(235,15,5)" fg:x="5003" fg:w="126"/><text x="23.1837%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (208 instructions, 0.95%)</title><rect x="22.8907%" y="149" width="0.9517%" height="15" fill="rgb(254,137,19)" fg:x="5003" fg:w="208"/><text x="23.1837%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.38%)</title><rect x="23.8424%" y="149" width="0.3798%" height="15" fill="rgb(220,174,0)" fg:x="5211" fg:w="83"/><text x="24.1354%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.39%)</title><rect x="24.2222%" y="149" width="0.3935%" height="15" fill="rgb(239,81,25)" fg:x="5294" fg:w="86"/><text x="24.5152%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.38%)</title><rect x="24.6157%" y="149" width="0.3798%" height="15" fill="rgb(205,138,51)" fg:x="5380" fg:w="83"/><text x="24.9086%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.38%)</title><rect x="24.9954%" y="149" width="0.3798%" height="15" fill="rgb(226,2,13)" fg:x="5463" fg:w="83"/><text x="25.2884%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="25.3752%" y="149" width="0.0183%" height="15" fill="rgb(217,95,3)" fg:x="5546" fg:w="4"/><text x="25.6682%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.39%)</title><rect x="25.3935%" y="149" width="0.3935%" height="15" fill="rgb(217,67,4)" fg:x="5550" fg:w="86"/><text x="25.6865%" y="159.50"></text></g><g><title>memcpy (428 instructions, 1.96%)</title><rect x="25.7870%" y="149" width="1.9583%" height="15" fill="rgb(208,32,38)" fg:x="5636" fg:w="428"/><text x="26.0799%" y="159.50"></text></g><g><title>memcpy (428 instructions, 1.96%)</title><rect x="27.7452%" y="149" width="1.9583%" height="15" fill="rgb(238,86,27)" fg:x="6064" fg:w="428"/><text x="28.0382%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,366 instructions, 33.70%)</title><rect x="1.2491%" y="165" width="33.7024%" height="15" fill="rgb(209,122,33)" fg:x="273" fg:w="7366"/><text x="1.5421%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (380 instructions, 1.74%)</title><rect x="34.9515%" y="165" width="1.7387%" height="15" fill="rgb(250,210,53)" fg:x="7639" fg:w="380"/><text x="35.2445%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.06%)</title><rect x="36.6902%" y="149" width="0.0641%" height="15" fill="rgb(252,158,54)" fg:x="8019" fg:w="14"/><text x="36.9831%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.29%)</title><rect x="36.6902%" y="165" width="0.2883%" height="15" fill="rgb(234,143,24)" fg:x="8019" fg:w="63"/><text x="36.9831%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.28%)</title><rect x="36.9784%" y="149" width="0.2837%" height="15" fill="rgb(248,89,2)" fg:x="8082" fg:w="62"/><text x="37.2714%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (220 instructions, 1.01%)</title><rect x="36.9784%" y="165" width="1.0066%" height="15" fill="rgb(228,123,36)" fg:x="8082" fg:w="220"/><text x="37.2714%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.06%)</title><rect x="37.9850%" y="149" width="0.0641%" height="15" fill="rgb(235,74,23)" fg:x="8302" fg:w="14"/><text x="38.2780%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.27%)</title><rect x="38.0490%" y="133" width="0.2699%" height="15" fill="rgb(249,217,17)" fg:x="8316" fg:w="59"/><text x="38.3420%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.43%)</title><rect x="38.3190%" y="133" width="0.4301%" height="15" fill="rgb(248,229,10)" fg:x="8375" fg:w="94"/><text x="38.6120%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.79%)</title><rect x="38.7491%" y="133" width="0.7915%" height="15" fill="rgb(253,208,20)" fg:x="8469" fg:w="173"/><text x="39.0421%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.65%)</title><rect x="38.0490%" y="149" width="2.6492%" height="15" fill="rgb(251,80,29)" fg:x="8316" fg:w="579"/><text x="38.3420%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (821 instructions, 3.76%)</title><rect x="37.9850%" y="165" width="3.7564%" height="15" fill="rgb(214,58,8)" fg:x="8302" fg:w="821"/><text x="38.2780%" y="175.50">can..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.38%)</title><rect x="41.7414%" y="165" width="0.3798%" height="15" fill="rgb(234,104,54)" fg:x="9123" fg:w="83"/><text x="42.0344%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.06%)</title><rect x="42.1212%" y="149" width="0.0641%" height="15" fill="rgb(231,78,15)" fg:x="9206" fg:w="14"/><text x="42.4141%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.27%)</title><rect x="42.1852%" y="133" width="0.2699%" height="15" fill="rgb(213,138,47)" fg:x="9220" fg:w="59"/><text x="42.4782%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.43%)</title><rect x="42.4552%" y="133" width="0.4301%" height="15" fill="rgb(221,202,27)" fg:x="9279" fg:w="94"/><text x="42.7481%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.79%)</title><rect x="42.8852%" y="133" width="0.7915%" height="15" fill="rgb(253,116,11)" fg:x="9373" fg:w="173"/><text x="43.1782%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.65%)</title><rect x="42.1852%" y="149" width="2.6492%" height="15" fill="rgb(241,10,11)" fg:x="9220" fg:w="579"/><text x="42.4782%" y="159.50">c..</text></g><g><title>memcmp (77 instructions, 0.35%)</title><rect x="44.8344%" y="149" width="0.3523%" height="15" fill="rgb(234,146,14)" fg:x="9799" fg:w="77"/><text x="45.1273%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.39%)</title><rect x="45.1867%" y="133" width="0.3935%" height="15" fill="rgb(243,48,50)" fg:x="9876" fg:w="86"/><text x="45.4796%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.55%)</title><rect x="45.1867%" y="149" width="0.5536%" height="15" fill="rgb(209,33,9)" fg:x="9876" fg:w="121"/><text x="45.4796%" y="159.50"></text></g><g><title>candid::types::internal::env_add (986 instructions, 4.51%)</title><rect x="42.1212%" y="165" width="4.5113%" height="15" fill="rgb(248,75,43)" fg:x="9206" fg:w="986"/><text x="42.4141%" y="175.50">cand..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.27%)</title><rect x="46.6325%" y="117" width="0.2699%" height="15" fill="rgb(209,216,35)" fg:x="10192" fg:w="59"/><text x="46.9255%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.43%)</title><rect x="46.6325%" y="133" width="0.4301%" height="15" fill="rgb(225,18,39)" fg:x="10192" fg:w="94"/><text x="46.9255%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 1.44%)</title><rect x="46.6325%" y="149" width="1.4413%" height="15" fill="rgb(213,123,9)" fg:x="10192" fg:w="315"/><text x="46.9255%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.848 (18 instructions, 0.08%)</title><rect x="48.0738%" y="149" width="0.0824%" height="15" fill="rgb(254,130,47)" fg:x="10507" fg:w="18"/><text x="48.3667%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="48.1561%" y="149" width="0.0595%" height="15" fill="rgb(223,3,48)" fg:x="10525" fg:w="13"/><text x="48.4491%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 2.52%)</title><rect x="46.6325%" y="165" width="2.5210%" height="15" fill="rgb(230,34,15)" fg:x="10192" fg:w="551"/><text x="46.9255%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.24%)</title><rect x="49.1536%" y="165" width="0.2425%" height="15" fill="rgb(231,63,21)" fg:x="10743" fg:w="53"/><text x="49.4465%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (130 instructions, 0.59%)</title><rect x="49.3960%" y="149" width="0.5948%" height="15" fill="rgb(239,10,31)" fg:x="10796" fg:w="130"/><text x="49.6890%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.60%)</title><rect x="50.1510%" y="149" width="0.6040%" height="15" fill="rgb(214,39,32)" fg:x="10961" fg:w="132"/><text x="50.4440%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (332 instructions, 1.52%)</title><rect x="49.3960%" y="165" width="1.5190%" height="15" fill="rgb(218,130,47)" fg:x="10796" fg:w="332"/><text x="49.6890%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.16%)</title><rect x="50.9151%" y="149" width="0.1556%" height="15" fill="rgb(207,121,53)" fg:x="11128" fg:w="34"/><text x="51.2080%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1732 (18 instructions, 0.08%)</title><rect x="51.0706%" y="149" width="0.0824%" height="15" fill="rgb(253,33,53)" fg:x="11162" fg:w="18"/><text x="51.3636%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1732 (18 instructions, 0.08%)</title><rect x="51.1530%" y="149" width="0.0824%" height="15" fill="rgb(207,163,36)" fg:x="11180" fg:w="18"/><text x="51.4460%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.77%)</title><rect x="50.9151%" y="165" width="0.7732%" height="15" fill="rgb(234,188,16)" fg:x="11128" fg:w="169"/><text x="51.2080%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="51.6883%" y="165" width="0.0595%" height="15" fill="rgb(223,20,38)" fg:x="11297" fg:w="13"/><text x="51.9813%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="51.7478%" y="165" width="0.0595%" height="15" fill="rgb(234,33,6)" fg:x="11310" fg:w="13"/><text x="52.0408%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="51.8073%" y="165" width="0.0595%" height="15" fill="rgb(241,36,13)" fg:x="11323" fg:w="13"/><text x="52.1003%" y="175.50"></text></g><g><title>memcpy (440 instructions, 2.01%)</title><rect x="51.8668%" y="165" width="2.0132%" height="15" fill="rgb(238,35,8)" fg:x="11336" fg:w="440"/><text x="52.1597%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.09%)</title><rect x="53.8799%" y="133" width="0.0869%" height="15" fill="rgb(214,13,49)" fg:x="11776" fg:w="19"/><text x="54.1729%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.83%)</title><rect x="53.9669%" y="133" width="0.8281%" height="15" fill="rgb(213,92,50)" fg:x="11795" fg:w="181"/><text x="54.2598%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.31%)</title><rect x="54.7950%" y="101" width="0.3066%" height="15" fill="rgb(251,12,39)" fg:x="11976" fg:w="67"/><text x="55.0880%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.83%)</title><rect x="54.7950%" y="117" width="0.8281%" height="15" fill="rgb(243,66,54)" fg:x="11976" fg:w="181"/><text x="55.0880%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (216 instructions, 0.99%)</title><rect x="54.7950%" y="133" width="0.9883%" height="15" fill="rgb(217,208,52)" fg:x="11976" fg:w="216"/><text x="55.0880%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="55.7833%" y="133" width="0.0595%" height="15" fill="rgb(228,137,43)" fg:x="12192" fg:w="13"/><text x="56.0763%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (491 instructions, 2.25%)</title><rect x="53.8799%" y="149" width="2.2465%" height="15" fill="rgb(212,130,53)" fg:x="11776" fg:w="491"/><text x="54.1729%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (540 instructions, 2.47%)</title><rect x="53.8799%" y="165" width="2.4707%" height="15" fill="rgb(234,159,41)" fg:x="11776" fg:w="540"/><text x="54.1729%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.28%)</title><rect x="56.3507%" y="149" width="0.2837%" height="15" fill="rgb(224,156,10)" fg:x="12316" fg:w="62"/><text x="56.6436%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.31%)</title><rect x="56.6343%" y="149" width="0.3066%" height="15" fill="rgb(235,12,45)" fg:x="12378" fg:w="67"/><text x="56.9273%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (228 instructions, 1.04%)</title><rect x="56.3507%" y="165" width="1.0432%" height="15" fill="rgb(224,208,10)" fg:x="12316" fg:w="228"/><text x="56.6436%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,822 instructions, 63.24%)</title><rect x="0.8693%" y="181" width="63.2412%" height="15" fill="rgb(220,227,6)" fg:x="190" fg:w="13822"/><text x="1.1623%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.06%)</title><rect x="64.1105%" y="149" width="0.0641%" height="15" fill="rgb(216,152,29)" fg:x="14012" fg:w="14"/><text x="64.4035%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (109 instructions, 0.50%)</title><rect x="64.1746%" y="133" width="0.4987%" height="15" fill="rgb(239,127,12)" fg:x="14026" fg:w="109"/><text x="64.4676%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (144 instructions, 0.66%)</title><rect x="64.1746%" y="149" width="0.6589%" height="15" fill="rgb(219,208,29)" fg:x="14026" fg:w="144"/><text x="64.4676%" y="159.50"></text></g><g><title>memset (152 instructions, 0.70%)</title><rect x="64.8335%" y="149" width="0.6955%" height="15" fill="rgb(227,118,2)" fg:x="14170" fg:w="152"/><text x="65.1264%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (490 instructions, 2.24%)</title><rect x="64.1105%" y="165" width="2.2419%" height="15" fill="rgb(236,35,47)" fg:x="14012" fg:w="490"/><text x="64.4035%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (518 instructions, 2.37%)</title><rect x="66.3525%" y="149" width="2.3701%" height="15" fill="rgb(214,36,22)" fg:x="14502" fg:w="518"/><text x="66.6455%" y="159.50">s..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.38%)</title><rect x="68.7225%" y="101" width="0.3798%" height="15" fill="rgb(236,129,54)" fg:x="15020" fg:w="83"/><text x="69.0155%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.58%)</title><rect x="68.7225%" y="117" width="0.5765%" height="15" fill="rgb(211,40,39)" fg:x="15020" fg:w="126"/><text x="69.0155%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (205 instructions, 0.94%)</title><rect x="68.7225%" y="133" width="0.9380%" height="15" fill="rgb(236,69,36)" fg:x="15020" fg:w="205"/><text x="69.0155%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.07%)</title><rect x="69.6605%" y="133" width="0.0686%" height="15" fill="rgb(212,153,45)" fg:x="15225" fg:w="15"/><text x="69.9535%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.07%)</title><rect x="69.7291%" y="133" width="0.0686%" height="15" fill="rgb(223,99,44)" fg:x="15240" fg:w="15"/><text x="70.0221%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (423 instructions, 1.94%)</title><rect x="68.7225%" y="149" width="1.9354%" height="15" fill="rgb(219,84,39)" fg:x="15020" fg:w="423"/><text x="69.0155%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 2.36%)</title><rect x="70.6579%" y="149" width="2.3609%" height="15" fill="rgb(231,181,8)" fg:x="15443" fg:w="516"/><text x="70.9509%" y="159.50">s..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.03%)</title><rect x="73.0189%" y="149" width="0.0320%" height="15" fill="rgb(234,44,45)" fg:x="15959" fg:w="7"/><text x="73.3118%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,557 instructions, 7.12%)</title><rect x="66.3525%" y="165" width="7.1239%" height="15" fill="rgb(242,111,38)" fg:x="14502" fg:w="1557"/><text x="66.6455%" y="175.50">candid::..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 instructions, 0.03%)</title><rect x="73.4764%" y="165" width="0.0275%" height="15" fill="rgb(242,40,39)" fg:x="16059" fg:w="6"/><text x="73.7694%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.27%)</title><rect x="73.5038%" y="165" width="0.2745%" height="15" fill="rgb(251,181,22)" fg:x="16065" fg:w="60"/><text x="73.7968%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,719 instructions, 12.44%)</title><rect x="64.1105%" y="181" width="12.4405%" height="15" fill="rgb(221,12,40)" fg:x="14012" fg:w="2719"/><text x="64.4035%" y="191.50">ic_cdk::api::ca..</text></g><g><title>hashmap::batch_get_5_::{{closure}} (21,144 instructions, 96.74%)</title><rect x="0.8693%" y="197" width="96.7423%" height="15" fill="rgb(233,130,34)" fg:x="190" fg:w="21144"/><text x="1.1623%" y="207.50">hashmap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.06%)</title><rect x="97.6116%" y="197" width="0.0641%" height="15" fill="rgb(225,104,21)" fg:x="21334" fg:w="14"/><text x="97.9046%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.28%)</title><rect x="98.0738%" y="181" width="0.2837%" height="15" fill="rgb(250,57,20)" fg:x="21435" fg:w="62"/><text x="98.3667%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (67 instructions, 0.31%)</title><rect x="98.3574%" y="181" width="0.3066%" height="15" fill="rgb(222,6,17)" fg:x="21497" fg:w="67"/><text x="98.6504%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (363 instructions, 1.66%)</title><rect x="97.6803%" y="197" width="1.6609%" height="15" fill="rgb(219,38,8)" fg:x="21349" fg:w="363"/><text x="97.9732%" y="207.50"></text></g><g><title>all (21,856 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,0,46)" fg:x="0" fg:w="21856"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (21,856 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,81,51)" fg:x="0" fg:w="21856"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>