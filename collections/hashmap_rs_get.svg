<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="17031"><g><title>ic_cdk::setup (19 instructions, 0.11%)</title><rect x="0.0000%" y="197" width="0.1116%" height="15" fill="rgb(209,12,26)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="0.1116%" y="197" width="0.4462%" height="15" fill="rgb(227,67,15)" fg:x="19" fg:w="76"/><text x="0.4045%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="0.5578%" y="197" width="0.4462%" height="15" fill="rgb(207,137,50)" fg:x="95" fg:w="76"/><text x="0.8508%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="1.0041%" y="165" width="0.4462%" height="15" fill="rgb(231,145,1)" fg:x="171" fg:w="76"/><text x="1.2970%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.42%)</title><rect x="1.4503%" y="149" width="0.4169%" height="15" fill="rgb(241,19,29)" fg:x="247" fg:w="71"/><text x="1.7433%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.8672%" y="133" width="0.0235%" height="15" fill="rgb(223,64,38)" fg:x="318" fg:w="4"/><text x="2.1602%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.35%)</title><rect x="1.8672%" y="149" width="2.3487%" height="15" fill="rgb(214,1,23)" fg:x="318" fg:w="400"/><text x="2.1602%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.50%)</title><rect x="4.2158%" y="149" width="0.4991%" height="15" fill="rgb(242,143,27)" fg:x="718" fg:w="85"/><text x="4.5088%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.32%)</title><rect x="4.7149%" y="149" width="0.3171%" height="15" fill="rgb(223,153,52)" fg:x="803" fg:w="54"/><text x="5.0079%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.32%)</title><rect x="5.0320%" y="149" width="0.3171%" height="15" fill="rgb(222,96,26)" fg:x="857" fg:w="54"/><text x="5.3250%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.32%)</title><rect x="5.3491%" y="149" width="0.3171%" height="15" fill="rgb(220,43,41)" fg:x="911" fg:w="54"/><text x="5.6420%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.32%)</title><rect x="5.6661%" y="149" width="0.3171%" height="15" fill="rgb(252,229,12)" fg:x="965" fg:w="54"/><text x="5.9591%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.42%)</title><rect x="5.9832%" y="149" width="0.4169%" height="15" fill="rgb(225,90,28)" fg:x="1019" fg:w="71"/><text x="6.2762%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.38%)</title><rect x="6.4001%" y="149" width="0.3817%" height="15" fill="rgb(241,173,25)" fg:x="1090" fg:w="65"/><text x="6.6931%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="6.7818%" y="133" width="0.0235%" height="15" fill="rgb(244,62,27)" fg:x="1155" fg:w="4"/><text x="7.0747%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.35%)</title><rect x="6.7818%" y="149" width="2.3487%" height="15" fill="rgb(247,38,8)" fg:x="1155" fg:w="400"/><text x="7.0747%" y="159.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="9.1304%" y="149" width="0.0939%" height="15" fill="rgb(206,71,14)" fg:x="1555" fg:w="16"/><text x="9.4234%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="9.2244%" y="133" width="0.4462%" height="15" fill="rgb(239,88,52)" fg:x="1571" fg:w="76"/><text x="9.5173%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.35%)</title><rect x="9.6706%" y="101" width="0.3523%" height="15" fill="rgb(220,212,3)" fg:x="1647" fg:w="60"/><text x="9.9636%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.50%)</title><rect x="9.6706%" y="117" width="0.4991%" height="15" fill="rgb(244,4,8)" fg:x="1647" fg:w="85"/><text x="9.9636%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="10.1697%" y="69" width="0.0528%" height="15" fill="rgb(219,23,28)" fg:x="1732" fg:w="9"/><text x="10.4627%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.18%)</title><rect x="10.2225%" y="53" width="0.1761%" height="15" fill="rgb(238,40,32)" fg:x="1741" fg:w="30"/><text x="10.5155%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.32%)</title><rect x="10.2225%" y="69" width="0.3229%" height="15" fill="rgb(246,94,26)" fg:x="1741" fg:w="55"/><text x="10.5155%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.69%)</title><rect x="10.1697%" y="85" width="0.6929%" height="15" fill="rgb(210,142,33)" fg:x="1732" fg:w="118"/><text x="10.4627%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 1.00%)</title><rect x="10.1697%" y="101" width="1.0041%" height="15" fill="rgb(250,119,8)" fg:x="1732" fg:w="171"/><text x="10.4627%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 1.03%)</title><rect x="10.1697%" y="117" width="1.0334%" height="15" fill="rgb(223,175,20)" fg:x="1732" fg:w="176"/><text x="10.4627%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 2.18%)</title><rect x="9.6706%" y="133" width="2.1843%" height="15" fill="rgb(224,200,17)" fg:x="1647" fg:w="372"/><text x="9.9636%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 3.49%)</title><rect x="9.2244%" y="149" width="3.4878%" height="15" fill="rgb(216,158,6)" fg:x="1571" fg:w="594"/><text x="9.5173%" y="159.50">all..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.50%)</title><rect x="12.7121%" y="149" width="0.4991%" height="15" fill="rgb(251,109,6)" fg:x="2165" fg:w="85"/><text x="13.0051%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.32%)</title><rect x="13.2112%" y="149" width="0.3229%" height="15" fill="rgb(228,136,0)" fg:x="2250" fg:w="55"/><text x="13.5042%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.39%)</title><rect x="13.5341%" y="149" width="0.3875%" height="15" fill="rgb(238,225,38)" fg:x="2305" fg:w="66"/><text x="13.8271%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.38%)</title><rect x="13.9217%" y="149" width="0.3817%" height="15" fill="rgb(216,62,13)" fg:x="2371" fg:w="65"/><text x="14.2146%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="14.3033%" y="117" width="0.0235%" height="15" fill="rgb(223,78,0)" fg:x="2436" fg:w="4"/><text x="14.5963%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.35%)</title><rect x="14.3033%" y="133" width="2.3487%" height="15" fill="rgb(239,208,27)" fg:x="2436" fg:w="400"/><text x="14.5963%" y="143.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="16.6520%" y="133" width="0.0939%" height="15" fill="rgb(210,22,47)" fg:x="2836" fg:w="16"/><text x="16.9450%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="16.7459%" y="117" width="0.4462%" height="15" fill="rgb(240,226,35)" fg:x="2852" fg:w="76"/><text x="17.0389%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.35%)</title><rect x="17.1922%" y="85" width="0.3523%" height="15" fill="rgb(234,212,44)" fg:x="2928" fg:w="60"/><text x="17.4851%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.50%)</title><rect x="17.1922%" y="101" width="0.4991%" height="15" fill="rgb(210,162,39)" fg:x="2928" fg:w="85"/><text x="17.4851%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="17.6913%" y="53" width="0.0528%" height="15" fill="rgb(250,179,17)" fg:x="3013" fg:w="9"/><text x="17.9842%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.18%)</title><rect x="17.7441%" y="37" width="0.1761%" height="15" fill="rgb(254,103,43)" fg:x="3022" fg:w="30"/><text x="18.0371%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.32%)</title><rect x="17.7441%" y="53" width="0.3229%" height="15" fill="rgb(213,6,19)" fg:x="3022" fg:w="55"/><text x="18.0371%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.69%)</title><rect x="17.6913%" y="69" width="0.6929%" height="15" fill="rgb(233,187,52)" fg:x="3013" fg:w="118"/><text x="17.9842%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 1.00%)</title><rect x="17.6913%" y="85" width="1.0041%" height="15" fill="rgb(218,19,27)" fg:x="3013" fg:w="171"/><text x="17.9842%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 1.03%)</title><rect x="17.6913%" y="101" width="1.0334%" height="15" fill="rgb(240,8,4)" fg:x="3013" fg:w="176"/><text x="17.9842%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 2.18%)</title><rect x="17.1922%" y="117" width="2.1843%" height="15" fill="rgb(232,93,37)" fg:x="2928" fg:w="372"/><text x="17.4851%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 3.49%)</title><rect x="16.7459%" y="133" width="3.4878%" height="15" fill="rgb(232,148,14)" fg:x="2852" fg:w="594"/><text x="17.0389%" y="143.50">all..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.50%)</title><rect x="20.2337%" y="133" width="0.4991%" height="15" fill="rgb(216,56,3)" fg:x="3446" fg:w="85"/><text x="20.5267%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.32%)</title><rect x="20.7328%" y="133" width="0.3229%" height="15" fill="rgb(222,183,47)" fg:x="3531" fg:w="55"/><text x="21.0258%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.42%)</title><rect x="21.0557%" y="117" width="0.4169%" height="15" fill="rgb(207,119,49)" fg:x="3586" fg:w="71"/><text x="21.3487%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.53%)</title><rect x="21.4726%" y="117" width="0.5343%" height="15" fill="rgb(209,114,49)" fg:x="3657" fg:w="91"/><text x="21.7656%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.39%)</title><rect x="22.0069%" y="117" width="0.3875%" height="15" fill="rgb(213,72,15)" fg:x="3748" fg:w="66"/><text x="22.2999%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 1.69%)</title><rect x="21.0557%" y="133" width="1.6852%" height="15" fill="rgb(251,61,25)" fg:x="3586" fg:w="287"/><text x="21.3487%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (79 instructions, 0.46%)</title><rect x="22.7409%" y="133" width="0.4639%" height="15" fill="rgb(217,186,40)" fg:x="3873" fg:w="79"/><text x="23.0339%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,717 instructions, 10.08%)</title><rect x="14.3033%" y="149" width="10.0816%" height="15" fill="rgb(217,32,31)" fg:x="2436" fg:w="1717"/><text x="14.5963%" y="159.50">binread::bin..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.39%)</title><rect x="24.3849%" y="149" width="0.3875%" height="15" fill="rgb(213,167,49)" fg:x="4153" fg:w="66"/><text x="24.6779%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.08%)</title><rect x="24.7725%" y="149" width="0.0763%" height="15" fill="rgb(213,111,15)" fg:x="4219" fg:w="13"/><text x="25.0654%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.08%)</title><rect x="24.8488%" y="149" width="0.0763%" height="15" fill="rgb(233,36,4)" fg:x="4232" fg:w="13"/><text x="25.1418%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.04%)</title><rect x="24.9251%" y="149" width="0.0411%" height="15" fill="rgb(232,212,43)" fg:x="4245" fg:w="7"/><text x="25.2181%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.09%)</title><rect x="24.9662%" y="149" width="0.0881%" height="15" fill="rgb(206,204,0)" fg:x="4252" fg:w="15"/><text x="25.2592%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="25.0543%" y="133" width="0.4462%" height="15" fill="rgb(205,186,4)" fg:x="4267" fg:w="76"/><text x="25.3473%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.93%)</title><rect x="25.0543%" y="149" width="0.9336%" height="15" fill="rgb(213,212,4)" fg:x="4267" fg:w="159"/><text x="25.3473%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="25.9879%" y="117" width="0.4462%" height="15" fill="rgb(224,210,2)" fg:x="4426" fg:w="76"/><text x="26.2809%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.65%)</title><rect x="25.9879%" y="133" width="0.6518%" height="15" fill="rgb(237,75,13)" fg:x="4426" fg:w="111"/><text x="26.2809%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (179 instructions, 1.05%)</title><rect x="25.9879%" y="149" width="1.0510%" height="15" fill="rgb(216,147,14)" fg:x="4426" fg:w="179"/><text x="26.2809%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="27.0389%" y="149" width="0.4462%" height="15" fill="rgb(205,13,28)" fg:x="4605" fg:w="76"/><text x="27.3319%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.48%)</title><rect x="27.4852%" y="149" width="0.4756%" height="15" fill="rgb(218,101,34)" fg:x="4681" fg:w="81"/><text x="27.7781%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="27.9608%" y="149" width="0.4462%" height="15" fill="rgb(234,188,9)" fg:x="4762" fg:w="76"/><text x="28.2537%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="28.4070%" y="149" width="0.4462%" height="15" fill="rgb(224,205,0)" fg:x="4838" fg:w="76"/><text x="28.7000%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 instructions, 0.01%)</title><rect x="28.8533%" y="149" width="0.0117%" height="15" fill="rgb(228,67,50)" fg:x="4914" fg:w="2"/><text x="29.1462%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.48%)</title><rect x="28.8650%" y="149" width="0.4756%" height="15" fill="rgb(239,42,43)" fg:x="4916" fg:w="81"/><text x="29.1580%" y="159.50"></text></g><g><title>memcpy (381 instructions, 2.24%)</title><rect x="29.3406%" y="149" width="2.2371%" height="15" fill="rgb(208,135,8)" fg:x="4997" fg:w="381"/><text x="29.6336%" y="159.50">m..</text></g><g><title>memcpy (381 instructions, 2.24%)</title><rect x="31.5777%" y="149" width="2.2371%" height="15" fill="rgb(213,94,35)" fg:x="5378" fg:w="381"/><text x="31.8707%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new (6,427 instructions, 37.74%)</title><rect x="1.4503%" y="165" width="37.7371%" height="15" fill="rgb(240,31,37)" fg:x="247" fg:w="6427"/><text x="1.7433%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (336 instructions, 1.97%)</title><rect x="39.1874%" y="165" width="1.9729%" height="15" fill="rgb(252,130,49)" fg:x="6674" fg:w="336"/><text x="39.4803%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="41.1602%" y="133" width="0.0294%" height="15" fill="rgb(238,69,25)" fg:x="7010" fg:w="5"/><text x="41.4532%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.23%)</title><rect x="41.1602%" y="149" width="0.2290%" height="15" fill="rgb(235,77,30)" fg:x="7010" fg:w="39"/><text x="41.4532%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="41.3892%" y="149" width="0.4462%" height="15" fill="rgb(215,105,18)" fg:x="7049" fg:w="76"/><text x="41.6822%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="41.8355%" y="133" width="0.0294%" height="15" fill="rgb(205,135,3)" fg:x="7125" fg:w="5"/><text x="42.1284%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="41.8648%" y="117" width="0.3112%" height="15" fill="rgb(208,40,44)" fg:x="7130" fg:w="53"/><text x="42.1578%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.52%)</title><rect x="42.1760%" y="117" width="0.5226%" height="15" fill="rgb(220,226,54)" fg:x="7183" fg:w="89"/><text x="42.4690%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.95%)</title><rect x="42.6986%" y="117" width="0.9453%" height="15" fill="rgb(226,119,40)" fg:x="7272" fg:w="161"/><text x="42.9916%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.17%)</title><rect x="41.8648%" y="133" width="3.1707%" height="15" fill="rgb(220,138,34)" fg:x="7130" fg:w="540"/><text x="42.1578%" y="143.50">co..</text></g><g><title>candid::types::internal::env_add (755 instructions, 4.43%)</title><rect x="41.8355%" y="149" width="4.4331%" height="15" fill="rgb(245,1,21)" fg:x="7125" fg:w="755"/><text x="42.1284%" y="159.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="46.2686%" y="149" width="0.4462%" height="15" fill="rgb(216,138,18)" fg:x="7880" fg:w="76"/><text x="46.5615%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="46.7148%" y="133" width="0.0294%" height="15" fill="rgb(244,75,20)" fg:x="7956" fg:w="5"/><text x="47.0078%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="46.7442%" y="117" width="0.3112%" height="15" fill="rgb(207,149,19)" fg:x="7961" fg:w="53"/><text x="47.0371%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.52%)</title><rect x="47.0554%" y="117" width="0.5226%" height="15" fill="rgb(232,153,41)" fg:x="8014" fg:w="89"/><text x="47.3483%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.95%)</title><rect x="47.5779%" y="117" width="0.9453%" height="15" fill="rgb(240,192,5)" fg:x="8103" fg:w="161"/><text x="47.8709%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.17%)</title><rect x="46.7442%" y="133" width="3.1707%" height="15" fill="rgb(223,147,17)" fg:x="7961" fg:w="540"/><text x="47.0371%" y="143.50">co..</text></g><g><title>memcmp (68 instructions, 0.40%)</title><rect x="49.9149%" y="133" width="0.3993%" height="15" fill="rgb(218,146,24)" fg:x="8501" fg:w="68"/><text x="50.2078%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.48%)</title><rect x="50.3141%" y="117" width="0.4756%" height="15" fill="rgb(253,135,41)" fg:x="8569" fg:w="81"/><text x="50.6071%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.63%)</title><rect x="50.3141%" y="133" width="0.6341%" height="15" fill="rgb(205,188,37)" fg:x="8569" fg:w="108"/><text x="50.6071%" y="143.50"></text></g><g><title>candid::types::internal::env_add (889 instructions, 5.22%)</title><rect x="46.7148%" y="149" width="5.2199%" height="15" fill="rgb(250,58,53)" fg:x="7956" fg:w="889"/><text x="47.0078%" y="159.50">candi..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="51.9347%" y="101" width="0.3112%" height="15" fill="rgb(224,207,19)" fg:x="8845" fg:w="53"/><text x="52.2277%" y="111.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.46%)</title><rect x="51.9347%" y="117" width="0.4639%" height="15" fill="rgb(231,160,0)" fg:x="8845" fg:w="79"/><text x="52.2277%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 1.71%)</title><rect x="51.9347%" y="133" width="1.7145%" height="15" fill="rgb(209,203,22)" fg:x="8845" fg:w="292"/><text x="52.2277%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.174 (15 instructions, 0.09%)</title><rect x="53.6492%" y="133" width="0.0881%" height="15" fill="rgb(237,109,33)" fg:x="9137" fg:w="15"/><text x="53.9422%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="53.7373%" y="133" width="0.0646%" height="15" fill="rgb(241,51,29)" fg:x="9152" fg:w="11"/><text x="54.0303%" y="143.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 2.81%)</title><rect x="51.9347%" y="149" width="2.8066%" height="15" fill="rgb(224,40,9)" fg:x="8845" fg:w="478"/><text x="52.2277%" y="159.50">ca..</text></g><g><title>candid::types::CandidType::ty (2,420 instructions, 14.21%)</title><rect x="41.1602%" y="165" width="14.2094%" height="15" fill="rgb(208,89,50)" fg:x="7010" fg:w="2420"/><text x="41.4532%" y="175.50">candid::types::Can..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.19%)</title><rect x="55.3696%" y="149" width="0.1938%" height="15" fill="rgb(223,128,13)" fg:x="9430" fg:w="33"/><text x="55.6626%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.72%)</title><rect x="55.5634%" y="133" width="0.7222%" height="15" fill="rgb(226,115,10)" fg:x="9463" fg:w="123"/><text x="55.8564%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.72%)</title><rect x="56.4441%" y="133" width="0.7222%" height="15" fill="rgb(250,46,35)" fg:x="9613" fg:w="123"/><text x="56.7371%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 1.76%)</title><rect x="55.5634%" y="149" width="1.7615%" height="15" fill="rgb(212,45,21)" fg:x="9463" fg:w="300"/><text x="55.8564%" y="159.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.16%)</title><rect x="57.3249%" y="133" width="0.1644%" height="15" fill="rgb(237,174,7)" fg:x="9763" fg:w="28"/><text x="57.6178%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1687 (15 instructions, 0.09%)</title><rect x="57.4893%" y="133" width="0.0881%" height="15" fill="rgb(223,151,46)" fg:x="9791" fg:w="15"/><text x="57.7823%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1687 (15 instructions, 0.09%)</title><rect x="57.5774%" y="133" width="0.0881%" height="15" fill="rgb(236,212,25)" fg:x="9806" fg:w="15"/><text x="57.8703%" y="143.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (133 instructions, 0.78%)</title><rect x="57.3249%" y="149" width="0.7809%" height="15" fill="rgb(210,89,18)" fg:x="9763" fg:w="133"/><text x="57.6178%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="58.1058%" y="149" width="0.0646%" height="15" fill="rgb(236,179,42)" fg:x="9896" fg:w="11"/><text x="58.3988%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="58.1704%" y="149" width="0.0646%" height="15" fill="rgb(241,201,27)" fg:x="9907" fg:w="11"/><text x="58.4634%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="58.2350%" y="149" width="0.0646%" height="15" fill="rgb(252,77,4)" fg:x="9918" fg:w="11"/><text x="58.5280%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::deserialize_with_type (665 instructions, 3.90%)</title><rect x="55.3696%" y="165" width="3.9046%" height="15" fill="rgb(217,115,25)" fg:x="9430" fg:w="665"/><text x="55.6626%" y="175.50">can..</text></g><g><title>memcpy (411 instructions, 2.41%)</title><rect x="59.2743%" y="165" width="2.4132%" height="15" fill="rgb(208,204,7)" fg:x="10095" fg:w="411"/><text x="59.5672%" y="175.50">m..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.07%)</title><rect x="61.6875%" y="133" width="0.0705%" height="15" fill="rgb(223,113,7)" fg:x="10506" fg:w="12"/><text x="61.9805%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.99%)</title><rect x="61.7580%" y="133" width="0.9864%" height="15" fill="rgb(254,161,52)" fg:x="10518" fg:w="168"/><text x="62.0509%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.37%)</title><rect x="62.7444%" y="101" width="0.3699%" height="15" fill="rgb(230,186,41)" fg:x="10686" fg:w="63"/><text x="63.0374%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (164 instructions, 0.96%)</title><rect x="62.7444%" y="117" width="0.9629%" height="15" fill="rgb(210,120,34)" fg:x="10686" fg:w="164"/><text x="63.0374%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (191 instructions, 1.12%)</title><rect x="62.7444%" y="133" width="1.1215%" height="15" fill="rgb(206,66,22)" fg:x="10686" fg:w="191"/><text x="63.0374%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="63.8659%" y="133" width="0.0646%" height="15" fill="rgb(206,217,24)" fg:x="10877" fg:w="11"/><text x="64.1589%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (424 instructions, 2.49%)</title><rect x="61.6875%" y="149" width="2.4896%" height="15" fill="rgb(217,59,35)" fg:x="10506" fg:w="424"/><text x="61.9805%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (458 instructions, 2.69%)</title><rect x="61.6875%" y="165" width="2.6892%" height="15" fill="rgb(219,121,8)" fg:x="10506" fg:w="458"/><text x="61.9805%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.32%)</title><rect x="64.3767%" y="149" width="0.3229%" height="15" fill="rgb(217,148,38)" fg:x="10964" fg:w="55"/><text x="64.6697%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.37%)</title><rect x="64.6997%" y="149" width="0.3699%" height="15" fill="rgb(235,26,18)" fg:x="11019" fg:w="63"/><text x="64.9926%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (200 instructions, 1.17%)</title><rect x="64.3767%" y="165" width="1.1743%" height="15" fill="rgb(251,90,23)" fg:x="10964" fg:w="200"/><text x="64.6697%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,150 instructions, 65.47%)</title><rect x="1.0041%" y="181" width="65.4689%" height="15" fill="rgb(234,200,0)" fg:x="171" fg:w="11150"/><text x="1.2970%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="66.4729%" y="149" width="0.0294%" height="15" fill="rgb(236,71,5)" fg:x="11321" fg:w="5"/><text x="66.7659%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.32%)</title><rect x="66.5023%" y="117" width="0.3229%" height="15" fill="rgb(216,134,54)" fg:x="11326" fg:w="55"/><text x="66.7952%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (136 instructions, 0.80%)</title><rect x="66.5023%" y="133" width="0.7985%" height="15" fill="rgb(244,216,3)" fg:x="11326" fg:w="136"/><text x="66.7952%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (163 instructions, 0.96%)</title><rect x="66.5023%" y="149" width="0.9571%" height="15" fill="rgb(207,171,40)" fg:x="11326" fg:w="163"/><text x="66.7952%" y="159.50"></text></g><g><title>memset (136 instructions, 0.80%)</title><rect x="67.4593%" y="149" width="0.7985%" height="15" fill="rgb(234,26,31)" fg:x="11489" fg:w="136"/><text x="67.7523%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (463 instructions, 2.72%)</title><rect x="66.4729%" y="165" width="2.7186%" height="15" fill="rgb(220,2,34)" fg:x="11321" fg:w="463"/><text x="66.7659%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.19%)</title><rect x="69.1915%" y="149" width="0.1879%" height="15" fill="rgb(250,25,4)" fg:x="11784" fg:w="32"/><text x="69.4844%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="69.3794%" y="117" width="0.4462%" height="15" fill="rgb(232,144,4)" fg:x="11816" fg:w="76"/><text x="69.6723%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.65%)</title><rect x="69.3794%" y="133" width="0.6518%" height="15" fill="rgb(244,129,3)" fg:x="11816" fg:w="111"/><text x="69.6723%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (176 instructions, 1.03%)</title><rect x="69.3794%" y="149" width="1.0334%" height="15" fill="rgb(231,142,36)" fg:x="11816" fg:w="176"/><text x="69.6723%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="70.4128%" y="149" width="0.0646%" height="15" fill="rgb(220,81,54)" fg:x="11992" fg:w="11"/><text x="70.7057%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="70.4774%" y="149" width="0.0646%" height="15" fill="rgb(254,115,18)" fg:x="12003" fg:w="11"/><text x="70.7703%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.18%)</title><rect x="70.5420%" y="149" width="0.1761%" height="15" fill="rgb(223,222,51)" fg:x="12014" fg:w="30"/><text x="70.8349%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.03%)</title><rect x="70.7181%" y="149" width="0.0294%" height="15" fill="rgb(222,207,46)" fg:x="12044" fg:w="5"/><text x="71.0111%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (472 instructions, 2.77%)</title><rect x="69.1915%" y="165" width="2.7714%" height="15" fill="rgb(218,161,20)" fg:x="11784" fg:w="472"/><text x="69.4844%" y="175.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="71.9629%" y="165" width="0.0294%" height="15" fill="rgb(244,103,18)" fg:x="12256" fg:w="5"/><text x="72.2559%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.32%)</title><rect x="71.9922%" y="165" width="0.3229%" height="15" fill="rgb(246,35,28)" fg:x="12261" fg:w="55"/><text x="72.2852%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,069 instructions, 6.28%)</title><rect x="66.4729%" y="181" width="6.2768%" height="15" fill="rgb(213,117,16)" fg:x="11321" fg:w="1069"/><text x="66.7659%" y="191.50">ic_cdk:..</text></g><g><title>hashmap::batch_get_5_::{{closure}} (16,569 instructions, 97.29%)</title><rect x="1.0041%" y="197" width="97.2873%" height="15" fill="rgb(244,219,52)" fg:x="171" fg:w="16569"/><text x="1.2970%" y="207.50">hashmap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.07%)</title><rect x="98.2914%" y="197" width="0.0705%" height="15" fill="rgb(210,93,20)" fg:x="16740" fg:w="12"/><text x="98.5843%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.48%)</title><rect x="98.3618%" y="197" width="0.4756%" height="15" fill="rgb(242,191,12)" fg:x="16752" fg:w="81"/><text x="98.6548%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.59%)</title><rect x="98.8374%" y="197" width="0.5872%" height="15" fill="rgb(208,175,2)" fg:x="16833" fg:w="100"/><text x="99.1304%" y="207.50"></text></g><g><title>all (17,031 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,164,22)" fg:x="0" fg:w="17031"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (17,031 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,177,23)" fg:x="0" fg:w="17031"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>