<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="21565"><g><title>ic_cdk::setup (24 instructions, 0.11%)</title><rect x="0.0000%" y="197" width="0.1113%" height="15" fill="rgb(232,223,29)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.38%)</title><rect x="0.1113%" y="197" width="0.3802%" height="15" fill="rgb(229,55,18)" fg:x="24" fg:w="82"/><text x="0.4043%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.38%)</title><rect x="0.4915%" y="197" width="0.3802%" height="15" fill="rgb(239,78,51)" fg:x="106" fg:w="82"/><text x="0.7845%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.38%)</title><rect x="0.8718%" y="165" width="0.3802%" height="15" fill="rgb(249,41,19)" fg:x="188" fg:w="82"/><text x="1.1648%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.38%)</title><rect x="1.2520%" y="149" width="0.3802%" height="15" fill="rgb(226,203,37)" fg:x="270" fg:w="82"/><text x="1.5450%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="1.6323%" y="133" width="0.0278%" height="15" fill="rgb(208,108,36)" fg:x="352" fg:w="6"/><text x="1.9252%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.05%)</title><rect x="1.6323%" y="149" width="2.0543%" height="15" fill="rgb(243,186,18)" fg:x="352" fg:w="443"/><text x="1.9252%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.44%)</title><rect x="3.6865%" y="149" width="0.4405%" height="15" fill="rgb(225,67,28)" fg:x="795" fg:w="95"/><text x="3.9795%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.28%)</title><rect x="4.1271%" y="149" width="0.2782%" height="15" fill="rgb(224,16,39)" fg:x="890" fg:w="60"/><text x="4.4200%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.28%)</title><rect x="4.4053%" y="149" width="0.2782%" height="15" fill="rgb(243,198,12)" fg:x="950" fg:w="60"/><text x="4.6983%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.28%)</title><rect x="4.6835%" y="149" width="0.2782%" height="15" fill="rgb(235,174,54)" fg:x="1010" fg:w="60"/><text x="4.9765%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.28%)</title><rect x="4.9617%" y="149" width="0.2782%" height="15" fill="rgb(238,204,30)" fg:x="1070" fg:w="60"/><text x="5.2547%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.38%)</title><rect x="5.2400%" y="149" width="0.3802%" height="15" fill="rgb(214,193,22)" fg:x="1130" fg:w="82"/><text x="5.5329%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.32%)</title><rect x="5.6202%" y="149" width="0.3246%" height="15" fill="rgb(236,10,16)" fg:x="1212" fg:w="70"/><text x="5.9132%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="5.9448%" y="133" width="0.0278%" height="15" fill="rgb(248,3,38)" fg:x="1282" fg:w="6"/><text x="6.2378%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.05%)</title><rect x="5.9448%" y="149" width="2.0543%" height="15" fill="rgb(216,101,50)" fg:x="1282" fg:w="443"/><text x="6.2378%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.09%)</title><rect x="7.9991%" y="149" width="0.0881%" height="15" fill="rgb(225,94,2)" fg:x="1725" fg:w="19"/><text x="8.2920%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.38%)</title><rect x="8.0872%" y="133" width="0.3802%" height="15" fill="rgb(251,72,45)" fg:x="1744" fg:w="82"/><text x="8.3801%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.31%)</title><rect x="8.4674%" y="101" width="0.3107%" height="15" fill="rgb(205,214,52)" fg:x="1826" fg:w="67"/><text x="8.7604%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.45%)</title><rect x="8.4674%" y="117" width="0.4452%" height="15" fill="rgb(230,218,22)" fg:x="1826" fg:w="96"/><text x="8.7604%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.05%)</title><rect x="8.9126%" y="69" width="0.0510%" height="15" fill="rgb(206,77,12)" fg:x="1922" fg:w="11"/><text x="9.2056%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.16%)</title><rect x="8.9636%" y="53" width="0.1623%" height="15" fill="rgb(247,212,35)" fg:x="1933" fg:w="35"/><text x="9.2566%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.30%)</title><rect x="8.9636%" y="69" width="0.2968%" height="15" fill="rgb(253,173,13)" fg:x="1933" fg:w="64"/><text x="9.2566%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.67%)</title><rect x="8.9126%" y="85" width="0.6677%" height="15" fill="rgb(228,79,4)" fg:x="1922" fg:w="144"/><text x="9.2056%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.97%)</title><rect x="8.9126%" y="101" width="0.9692%" height="15" fill="rgb(216,92,14)" fg:x="1922" fg:w="209"/><text x="9.2056%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.02%)</title><rect x="8.9126%" y="117" width="1.0155%" height="15" fill="rgb(236,122,49)" fg:x="1922" fg:w="219"/><text x="9.2056%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 2.12%)</title><rect x="8.4674%" y="133" width="2.1192%" height="15" fill="rgb(226,204,0)" fg:x="1826" fg:w="457"/><text x="8.7604%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 3.14%)</title><rect x="8.0872%" y="149" width="3.1393%" height="15" fill="rgb(228,81,1)" fg:x="1744" fg:w="677"/><text x="8.3801%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.44%)</title><rect x="11.2265%" y="149" width="0.4405%" height="15" fill="rgb(248,127,44)" fg:x="2421" fg:w="95"/><text x="11.5195%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.28%)</title><rect x="11.6671%" y="149" width="0.2782%" height="15" fill="rgb(206,104,8)" fg:x="2516" fg:w="60"/><text x="11.9600%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.35%)</title><rect x="11.9453%" y="149" width="0.3524%" height="15" fill="rgb(229,36,6)" fg:x="2576" fg:w="76"/><text x="12.2383%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.32%)</title><rect x="12.2977%" y="149" width="0.3246%" height="15" fill="rgb(208,185,47)" fg:x="2652" fg:w="70"/><text x="12.5907%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="12.6223%" y="117" width="0.0278%" height="15" fill="rgb(223,42,47)" fg:x="2722" fg:w="6"/><text x="12.9153%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.05%)</title><rect x="12.6223%" y="133" width="2.0543%" height="15" fill="rgb(241,99,38)" fg:x="2722" fg:w="443"/><text x="12.9153%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.09%)</title><rect x="14.6766%" y="133" width="0.0881%" height="15" fill="rgb(209,165,21)" fg:x="3165" fg:w="19"/><text x="14.9695%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.38%)</title><rect x="14.7647%" y="117" width="0.3802%" height="15" fill="rgb(239,208,25)" fg:x="3184" fg:w="82"/><text x="15.0576%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.31%)</title><rect x="15.1449%" y="85" width="0.3107%" height="15" fill="rgb(228,175,38)" fg:x="3266" fg:w="67"/><text x="15.4379%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.45%)</title><rect x="15.1449%" y="101" width="0.4452%" height="15" fill="rgb(247,18,41)" fg:x="3266" fg:w="96"/><text x="15.4379%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.05%)</title><rect x="15.5901%" y="53" width="0.0510%" height="15" fill="rgb(212,38,20)" fg:x="3362" fg:w="11"/><text x="15.8830%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.16%)</title><rect x="15.6411%" y="37" width="0.1623%" height="15" fill="rgb(235,229,29)" fg:x="3373" fg:w="35"/><text x="15.9341%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.30%)</title><rect x="15.6411%" y="53" width="0.2968%" height="15" fill="rgb(205,228,37)" fg:x="3373" fg:w="64"/><text x="15.9341%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.67%)</title><rect x="15.5901%" y="69" width="0.6677%" height="15" fill="rgb(243,203,17)" fg:x="3362" fg:w="144"/><text x="15.8830%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.97%)</title><rect x="15.5901%" y="85" width="0.9692%" height="15" fill="rgb(253,44,39)" fg:x="3362" fg:w="209"/><text x="15.8830%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.02%)</title><rect x="15.5901%" y="101" width="1.0155%" height="15" fill="rgb(241,166,40)" fg:x="3362" fg:w="219"/><text x="15.8830%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 2.12%)</title><rect x="15.1449%" y="117" width="2.1192%" height="15" fill="rgb(249,169,14)" fg:x="3266" fg:w="457"/><text x="15.4379%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 3.14%)</title><rect x="14.7647%" y="133" width="3.1393%" height="15" fill="rgb(239,158,10)" fg:x="3184" fg:w="677"/><text x="15.0576%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.44%)</title><rect x="17.9040%" y="133" width="0.4405%" height="15" fill="rgb(251,87,15)" fg:x="3861" fg:w="95"/><text x="18.1970%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.28%)</title><rect x="18.3445%" y="133" width="0.2782%" height="15" fill="rgb(205,181,25)" fg:x="3956" fg:w="60"/><text x="18.6375%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.38%)</title><rect x="18.6228%" y="117" width="0.3802%" height="15" fill="rgb(240,115,10)" fg:x="4016" fg:w="82"/><text x="18.9157%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.44%)</title><rect x="19.0030%" y="117" width="0.4405%" height="15" fill="rgb(224,189,2)" fg:x="4098" fg:w="95"/><text x="19.2960%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.35%)</title><rect x="19.4435%" y="117" width="0.3524%" height="15" fill="rgb(232,163,14)" fg:x="4193" fg:w="76"/><text x="19.7365%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 1.53%)</title><rect x="18.6228%" y="133" width="1.5303%" height="15" fill="rgb(216,153,19)" fg:x="4016" fg:w="330"/><text x="18.9157%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.38%)</title><rect x="20.1530%" y="133" width="0.3802%" height="15" fill="rgb(218,15,18)" fg:x="4346" fg:w="82"/><text x="20.4460%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,946 instructions, 9.02%)</title><rect x="12.6223%" y="149" width="9.0239%" height="15" fill="rgb(223,81,42)" fg:x="2722" fg:w="1946"/><text x="12.9153%" y="159.50">binread::bi..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.35%)</title><rect x="21.6462%" y="149" width="0.3524%" height="15" fill="rgb(235,162,44)" fg:x="4668" fg:w="76"/><text x="21.9392%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.07%)</title><rect x="21.9986%" y="149" width="0.0696%" height="15" fill="rgb(230,197,49)" fg:x="4744" fg:w="15"/><text x="22.2916%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.07%)</title><rect x="22.0682%" y="149" width="0.0696%" height="15" fill="rgb(227,144,3)" fg:x="4759" fg:w="15"/><text x="22.3611%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.07%)</title><rect x="22.1377%" y="149" width="0.0696%" height="15" fill="rgb(240,204,14)" fg:x="4774" fg:w="15"/><text x="22.4307%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="22.2073%" y="149" width="0.0325%" height="15" fill="rgb(238,225,4)" fg:x="4789" fg:w="7"/><text x="22.5002%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.38%)</title><rect x="22.2397%" y="133" width="0.3802%" height="15" fill="rgb(250,80,14)" fg:x="4796" fg:w="82"/><text x="22.5327%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.83%)</title><rect x="22.2397%" y="149" width="0.8254%" height="15" fill="rgb(209,0,25)" fg:x="4796" fg:w="178"/><text x="22.5327%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.38%)</title><rect x="23.0652%" y="117" width="0.3802%" height="15" fill="rgb(250,171,37)" fg:x="4974" fg:w="82"/><text x="23.3581%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.60%)</title><rect x="23.0652%" y="133" width="0.6028%" height="15" fill="rgb(208,142,19)" fg:x="4974" fg:w="130"/><text x="23.3581%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 1.00%)</title><rect x="23.0652%" y="149" width="0.9970%" height="15" fill="rgb(245,31,33)" fg:x="4974" fg:w="215"/><text x="23.3581%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.38%)</title><rect x="24.0621%" y="149" width="0.3802%" height="15" fill="rgb(251,221,43)" fg:x="5189" fg:w="82"/><text x="24.3551%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.41%)</title><rect x="24.4424%" y="149" width="0.4127%" height="15" fill="rgb(244,65,27)" fg:x="5271" fg:w="89"/><text x="24.7354%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.38%)</title><rect x="24.8551%" y="149" width="0.3802%" height="15" fill="rgb(211,68,25)" fg:x="5360" fg:w="82"/><text x="25.1481%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.38%)</title><rect x="25.2353%" y="149" width="0.3802%" height="15" fill="rgb(207,36,45)" fg:x="5442" fg:w="82"/><text x="25.5283%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="25.6156%" y="149" width="0.0185%" height="15" fill="rgb(215,13,6)" fg:x="5524" fg:w="4"/><text x="25.9085%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.41%)</title><rect x="25.6341%" y="149" width="0.4127%" height="15" fill="rgb(244,49,9)" fg:x="5528" fg:w="89"/><text x="25.9271%" y="159.50"></text></g><g><title>memcpy (392 instructions, 1.82%)</title><rect x="26.0468%" y="149" width="1.8178%" height="15" fill="rgb(213,115,40)" fg:x="5617" fg:w="392"/><text x="26.3398%" y="159.50"></text></g><g><title>memcpy (392 instructions, 1.82%)</title><rect x="27.8646%" y="149" width="1.8178%" height="15" fill="rgb(248,168,28)" fg:x="6009" fg:w="392"/><text x="28.1576%" y="159.50"></text></g><g><title>memcpy (504 instructions, 2.34%)</title><rect x="29.6824%" y="149" width="2.3371%" height="15" fill="rgb(221,172,11)" fg:x="6401" fg:w="504"/><text x="29.9753%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,844 instructions, 36.37%)</title><rect x="1.2520%" y="165" width="36.3738%" height="15" fill="rgb(224,210,1)" fg:x="270" fg:w="7844"/><text x="1.5450%" y="175.50">candid::de::IDLDeserialize::new_with_config</text></g><g><title>memcpy (344 instructions, 1.60%)</title><rect x="37.6258%" y="165" width="1.5952%" height="15" fill="rgb(229,124,34)" fg:x="8114" fg:w="344"/><text x="37.9188%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="39.2210%" y="149" width="0.0325%" height="15" fill="rgb(230,87,15)" fg:x="8458" fg:w="7"/><text x="39.5139%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.18%)</title><rect x="39.2210%" y="165" width="0.1808%" height="15" fill="rgb(212,178,6)" fg:x="8458" fg:w="39"/><text x="39.5139%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.38%)</title><rect x="39.4018%" y="165" width="0.3802%" height="15" fill="rgb(233,90,5)" fg:x="8497" fg:w="82"/><text x="39.6948%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="39.7821%" y="149" width="0.0325%" height="15" fill="rgb(212,170,35)" fg:x="8579" fg:w="7"/><text x="40.0750%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.27%)</title><rect x="39.8145%" y="133" width="0.2736%" height="15" fill="rgb(211,83,7)" fg:x="8586" fg:w="59"/><text x="40.1075%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.44%)</title><rect x="40.0881%" y="133" width="0.4359%" height="15" fill="rgb(216,212,51)" fg:x="8645" fg:w="94"/><text x="40.3811%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.80%)</title><rect x="40.5240%" y="133" width="0.8022%" height="15" fill="rgb(231,109,34)" fg:x="8739" fg:w="173"/><text x="40.8170%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.68%)</title><rect x="39.8145%" y="149" width="2.6849%" height="15" fill="rgb(240,87,44)" fg:x="8586" fg:w="579"/><text x="40.1075%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (797 instructions, 3.70%)</title><rect x="39.7821%" y="165" width="3.6958%" height="15" fill="rgb(215,28,38)" fg:x="8579" fg:w="797"/><text x="40.0750%" y="175.50">can..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (219 instructions, 1.02%)</title><rect x="43.4779%" y="165" width="1.0155%" height="15" fill="rgb(214,2,30)" fg:x="9376" fg:w="219"/><text x="43.7708%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="44.4934%" y="149" width="0.0325%" height="15" fill="rgb(214,57,36)" fg:x="9595" fg:w="7"/><text x="44.7864%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.27%)</title><rect x="44.5259%" y="133" width="0.2736%" height="15" fill="rgb(222,14,20)" fg:x="9602" fg:w="59"/><text x="44.8188%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.44%)</title><rect x="44.7994%" y="133" width="0.4359%" height="15" fill="rgb(246,36,39)" fg:x="9661" fg:w="94"/><text x="45.0924%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.80%)</title><rect x="45.2353%" y="133" width="0.8022%" height="15" fill="rgb(246,88,23)" fg:x="9755" fg:w="173"/><text x="45.5283%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.68%)</title><rect x="44.5259%" y="149" width="2.6849%" height="15" fill="rgb(249,25,28)" fg:x="9602" fg:w="579"/><text x="44.8188%" y="159.50">c..</text></g><g><title>memcmp (77 instructions, 0.36%)</title><rect x="47.2108%" y="149" width="0.3571%" height="15" fill="rgb(248,225,47)" fg:x="10181" fg:w="77"/><text x="47.5037%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.41%)</title><rect x="47.5678%" y="133" width="0.4127%" height="15" fill="rgb(240,179,40)" fg:x="10258" fg:w="89"/><text x="47.8608%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.62%)</title><rect x="47.5678%" y="149" width="0.6167%" height="15" fill="rgb(229,173,35)" fg:x="10258" fg:w="133"/><text x="47.8608%" y="159.50"></text></g><g><title>candid::types::internal::env_add (975 instructions, 4.52%)</title><rect x="44.4934%" y="165" width="4.5212%" height="15" fill="rgb(248,205,45)" fg:x="9595" fg:w="975"/><text x="44.7864%" y="175.50">cand..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.27%)</title><rect x="49.0146%" y="117" width="0.2736%" height="15" fill="rgb(212,83,39)" fg:x="10570" fg:w="59"/><text x="49.3076%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (102 instructions, 0.47%)</title><rect x="49.0146%" y="133" width="0.4730%" height="15" fill="rgb(225,9,28)" fg:x="10570" fg:w="102"/><text x="49.3076%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (323 instructions, 1.50%)</title><rect x="49.0146%" y="149" width="1.4978%" height="15" fill="rgb(215,61,15)" fg:x="10570" fg:w="323"/><text x="49.3076%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.305 (34 instructions, 0.16%)</title><rect x="50.5124%" y="149" width="0.1577%" height="15" fill="rgb(244,106,24)" fg:x="10893" fg:w="34"/><text x="50.8054%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="50.6701%" y="149" width="0.0603%" height="15" fill="rgb(217,94,4)" fg:x="10927" fg:w="13"/><text x="50.9630%" y="159.50"></text></g><g><title>candid::types::internal::env_id (555 instructions, 2.57%)</title><rect x="49.0146%" y="165" width="2.5736%" height="15" fill="rgb(245,84,1)" fg:x="10570" fg:w="555"/><text x="49.3076%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.23%)</title><rect x="51.5882%" y="165" width="0.2272%" height="15" fill="rgb(234,85,38)" fg:x="11125" fg:w="49"/><text x="51.8812%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.13%)</title><rect x="51.8154%" y="133" width="0.1252%" height="15" fill="rgb(237,83,16)" fg:x="11174" fg:w="27"/><text x="52.1084%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.66%)</title><rect x="51.8154%" y="149" width="0.6585%" height="15" fill="rgb(211,96,48)" fg:x="11174" fg:w="142"/><text x="52.1084%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.13%)</title><rect x="52.6780%" y="133" width="0.1252%" height="15" fill="rgb(220,207,32)" fg:x="11360" fg:w="27"/><text x="52.9709%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.66%)</title><rect x="52.6780%" y="149" width="0.6585%" height="15" fill="rgb(220,165,40)" fg:x="11360" fg:w="142"/><text x="52.9709%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (372 instructions, 1.73%)</title><rect x="51.8154%" y="165" width="1.7250%" height="15" fill="rgb(227,13,38)" fg:x="11174" fg:w="372"/><text x="52.1084%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.16%)</title><rect x="53.5405%" y="149" width="0.1623%" height="15" fill="rgb(224,80,43)" fg:x="11546" fg:w="35"/><text x="53.8334%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1145 (34 instructions, 0.16%)</title><rect x="53.7028%" y="149" width="0.1577%" height="15" fill="rgb(251,46,22)" fg:x="11581" fg:w="34"/><text x="53.9957%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1145 (34 instructions, 0.16%)</title><rect x="53.8604%" y="149" width="0.1577%" height="15" fill="rgb(252,189,38)" fg:x="11615" fg:w="34"/><text x="54.1534%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.15%)</title><rect x="54.0181%" y="149" width="0.1530%" height="15" fill="rgb(240,216,23)" fg:x="11649" fg:w="33"/><text x="54.3111%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 1.16%)</title><rect x="53.5405%" y="165" width="1.1593%" height="15" fill="rgb(239,78,6)" fg:x="11546" fg:w="250"/><text x="53.8334%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="54.6997%" y="165" width="0.0603%" height="15" fill="rgb(220,167,31)" fg:x="11796" fg:w="13"/><text x="54.9927%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="54.7600%" y="165" width="0.0603%" height="15" fill="rgb(230,153,28)" fg:x="11809" fg:w="13"/><text x="55.0530%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="54.8203%" y="165" width="0.0603%" height="15" fill="rgb(251,109,10)" fg:x="11822" fg:w="13"/><text x="55.1133%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.20%)</title><rect x="54.8806%" y="165" width="0.1994%" height="15" fill="rgb(210,71,22)" fg:x="11835" fg:w="43"/><text x="55.1736%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="55.0800%" y="149" width="0.0325%" height="15" fill="rgb(224,29,37)" fg:x="11878" fg:w="7"/><text x="55.3730%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.13%)</title><rect x="55.1125%" y="133" width="0.1252%" height="15" fill="rgb(214,88,49)" fg:x="11885" fg:w="27"/><text x="55.4054%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.13%)</title><rect x="55.2377%" y="133" width="0.1252%" height="15" fill="rgb(221,69,39)" fg:x="11912" fg:w="27"/><text x="55.5306%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.91%)</title><rect x="55.1125%" y="149" width="0.9135%" height="15" fill="rgb(249,186,4)" fg:x="11885" fg:w="197"/><text x="55.4054%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.13%)</title><rect x="56.0260%" y="117" width="0.1252%" height="15" fill="rgb(233,163,23)" fg:x="12082" fg:w="27"/><text x="56.3189%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.66%)</title><rect x="56.0260%" y="133" width="0.6585%" height="15" fill="rgb(240,51,22)" fg:x="12082" fg:w="142"/><text x="56.3189%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 0.86%)</title><rect x="56.0260%" y="149" width="0.8625%" height="15" fill="rgb(240,194,38)" fg:x="12082" fg:w="186"/><text x="56.3189%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="56.8885%" y="149" width="0.0603%" height="15" fill="rgb(239,50,11)" fg:x="12268" fg:w="13"/><text x="57.1814%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="56.9488%" y="149" width="0.0325%" height="15" fill="rgb(226,184,20)" fg:x="12281" fg:w="7"/><text x="57.2417%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (470 instructions, 2.18%)</title><rect x="55.0800%" y="165" width="2.1795%" height="15" fill="rgb(248,157,7)" fg:x="11878" fg:w="470"/><text x="55.3730%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.13%)</title><rect x="57.2594%" y="149" width="0.1252%" height="15" fill="rgb(209,99,28)" fg:x="12348" fg:w="27"/><text x="57.5524%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.66%)</title><rect x="57.2594%" y="165" width="0.6585%" height="15" fill="rgb(253,187,42)" fg:x="12348" fg:w="142"/><text x="57.5524%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,871 instructions, 64.32%)</title><rect x="0.8718%" y="181" width="64.3218%" height="15" fill="rgb(234,82,12)" fg:x="188" fg:w="13871"/><text x="1.1648%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="65.1936%" y="165" width="0.0325%" height="15" fill="rgb(220,37,33)" fg:x="14059" fg:w="7"/><text x="65.4866%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.28%)</title><rect x="65.2261%" y="149" width="0.2782%" height="15" fill="rgb(205,2,36)" fg:x="14066" fg:w="60"/><text x="65.5190%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 instructions, 0.48%)</title><rect x="65.2261%" y="165" width="0.4823%" height="15" fill="rgb(241,27,51)" fg:x="14066" fg:w="104"/><text x="65.5190%" y="175.50"></text></g><g><title>memset (152 instructions, 0.70%)</title><rect x="65.7083%" y="165" width="0.7048%" height="15" fill="rgb(207,180,51)" fg:x="14170" fg:w="152"/><text x="66.0013%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (437 instructions, 2.03%)</title><rect x="65.1936%" y="181" width="2.0264%" height="15" fill="rgb(248,118,42)" fg:x="14059" fg:w="437"/><text x="65.4866%" y="191.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 2.40%)</title><rect x="67.2200%" y="165" width="2.4020%" height="15" fill="rgb(254,114,48)" fg:x="14496" fg:w="518"/><text x="67.5130%" y="175.50">s..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.38%)</title><rect x="69.6221%" y="117" width="0.3802%" height="15" fill="rgb(248,207,24)" fg:x="15014" fg:w="82"/><text x="69.9150%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.60%)</title><rect x="69.6221%" y="133" width="0.6028%" height="15" fill="rgb(232,188,53)" fg:x="15014" fg:w="130"/><text x="69.9150%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 0.98%)</title><rect x="69.6221%" y="149" width="0.9831%" height="15" fill="rgb(234,65,39)" fg:x="15014" fg:w="212"/><text x="69.9150%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.07%)</title><rect x="70.6051%" y="149" width="0.0696%" height="15" fill="rgb(229,213,11)" fg:x="15226" fg:w="15"/><text x="70.8981%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.07%)</title><rect x="70.6747%" y="149" width="0.0696%" height="15" fill="rgb(211,9,45)" fg:x="15241" fg:w="15"/><text x="70.9677%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (430 instructions, 1.99%)</title><rect x="69.6221%" y="165" width="1.9940%" height="15" fill="rgb(229,220,24)" fg:x="15014" fg:w="430"/><text x="69.9150%" y="175.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 2.39%)</title><rect x="71.6160%" y="165" width="2.3928%" height="15" fill="rgb(229,139,23)" fg:x="15444" fg:w="516"/><text x="71.9090%" y="175.50">s..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.03%)</title><rect x="74.0088%" y="165" width="0.0325%" height="15" fill="rgb(224,217,12)" fg:x="15960" fg:w="7"/><text x="74.3018%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,568 instructions, 7.27%)</title><rect x="67.2200%" y="181" width="7.2710%" height="15" fill="rgb(232,0,27)" fg:x="14496" fg:w="1568"/><text x="67.5130%" y="191.50">candid::..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="74.4911%" y="165" width="0.0325%" height="15" fill="rgb(214,94,26)" fg:x="16064" fg:w="7"/><text x="74.7840%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.28%)</title><rect x="74.5235%" y="165" width="0.2782%" height="15" fill="rgb(210,43,14)" fg:x="16071" fg:w="60"/><text x="74.8165%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::ser::IDLBuilder&gt; (131 instructions, 0.61%)</title><rect x="74.4911%" y="181" width="0.6075%" height="15" fill="rgb(211,199,20)" fg:x="16064" fg:w="131"/><text x="74.7840%" y="191.50"></text></g><g><title>hashmap::__canister_method_batch_get::{{closure}} (20,885 instructions, 96.85%)</title><rect x="0.8718%" y="197" width="96.8467%" height="15" fill="rgb(233,205,31)" fg:x="188" fg:w="20885"/><text x="1.1648%" y="207.50">hashmap::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.06%)</title><rect x="97.7185%" y="197" width="0.0649%" height="15" fill="rgb(221,132,20)" fg:x="21073" fg:w="14"/><text x="98.0115%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.13%)</title><rect x="98.2008%" y="181" width="0.1252%" height="15" fill="rgb(240,177,31)" fg:x="21177" fg:w="27"/><text x="98.4938%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.13%)</title><rect x="98.3260%" y="181" width="0.1252%" height="15" fill="rgb(219,176,8)" fg:x="21204" fg:w="27"/><text x="98.6190%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.32%)</title><rect x="98.4512%" y="181" width="0.3153%" height="15" fill="rgb(231,166,26)" fg:x="21231" fg:w="68"/><text x="98.7442%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (333 instructions, 1.54%)</title><rect x="97.7881%" y="197" width="1.5442%" height="15" fill="rgb(244,210,47)" fg:x="21088" fg:w="333"/><text x="98.0811%" y="207.50"></text></g><g><title>all (21,565 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(212,141,37)" fg:x="0" fg:w="21565"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (21,565 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,134,1)" fg:x="0" fg:w="21565"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>