<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="18903"><g><title>ic_cdk::setup (7 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0370%" height="15" fill="rgb(206,40,12)" fg:x="0" fg:w="7"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.48%)</title><rect x="0.0370%" y="165" width="0.4761%" height="15" fill="rgb(215,177,13)" fg:x="7" fg:w="90"/><text x="0.3300%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.53%)</title><rect x="0.0370%" y="181" width="0.5290%" height="15" fill="rgb(218,21,39)" fg:x="7" fg:w="100"/><text x="0.3300%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.48%)</title><rect x="0.5819%" y="165" width="0.4761%" height="15" fill="rgb(233,173,1)" fg:x="110" fg:w="90"/><text x="0.8749%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.53%)</title><rect x="0.5819%" y="181" width="0.5290%" height="15" fill="rgb(251,73,29)" fg:x="110" fg:w="100"/><text x="0.8749%" y="191.50"></text></g><g><title>__rust_alloc (206 instructions, 1.09%)</title><rect x="0.0370%" y="197" width="1.0898%" height="15" fill="rgb(254,97,39)" fg:x="7" fg:w="206"/><text x="0.3300%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.48%)</title><rect x="1.1268%" y="133" width="0.4761%" height="15" fill="rgb(251,72,26)" fg:x="213" fg:w="90"/><text x="1.4198%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.53%)</title><rect x="1.1268%" y="149" width="0.5290%" height="15" fill="rgb(248,24,49)" fg:x="213" fg:w="100"/><text x="1.4198%" y="159.50"></text></g><g><title>__rust_alloc (103 instructions, 0.54%)</title><rect x="1.1268%" y="165" width="0.5449%" height="15" fill="rgb(233,180,3)" fg:x="213" fg:w="103"/><text x="1.4198%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (162 instructions, 0.86%)</title><rect x="1.1268%" y="181" width="0.8570%" height="15" fill="rgb(244,56,6)" fg:x="213" fg:w="162"/><text x="1.4198%" y="191.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.32%)</title><rect x="1.9838%" y="165" width="0.3227%" height="15" fill="rgb(212,59,53)" fg:x="375" fg:w="61"/><text x="2.2768%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="2.3065%" y="149" width="0.0212%" height="15" fill="rgb(252,22,41)" fg:x="436" fg:w="4"/><text x="2.5995%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 2.15%)</title><rect x="2.3065%" y="165" width="2.1531%" height="15" fill="rgb(219,182,28)" fg:x="436" fg:w="407"/><text x="2.5995%" y="175.50">c..</text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.39%)</title><rect x="4.4596%" y="165" width="0.3915%" height="15" fill="rgb(217,19,19)" fg:x="843" fg:w="74"/><text x="4.7526%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.29%)</title><rect x="4.8511%" y="165" width="0.2857%" height="15" fill="rgb(238,219,14)" fg:x="917" fg:w="54"/><text x="5.1441%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.29%)</title><rect x="5.1368%" y="165" width="0.2857%" height="15" fill="rgb(208,151,18)" fg:x="971" fg:w="54"/><text x="5.4297%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.29%)</title><rect x="5.4224%" y="165" width="0.2857%" height="15" fill="rgb(212,68,0)" fg:x="1025" fg:w="54"/><text x="5.7154%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.29%)</title><rect x="5.7081%" y="165" width="0.2857%" height="15" fill="rgb(226,200,6)" fg:x="1079" fg:w="54"/><text x="6.0011%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.32%)</title><rect x="5.9938%" y="165" width="0.3227%" height="15" fill="rgb(210,80,17)" fg:x="1133" fg:w="61"/><text x="6.2867%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.51%)</title><rect x="6.3165%" y="165" width="0.5131%" height="15" fill="rgb(223,157,19)" fg:x="1194" fg:w="97"/><text x="6.6094%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="6.8296%" y="149" width="0.0212%" height="15" fill="rgb(236,153,51)" fg:x="1291" fg:w="4"/><text x="7.1226%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 2.15%)</title><rect x="6.8296%" y="165" width="2.1531%" height="15" fill="rgb(221,45,42)" fg:x="1291" fg:w="407"/><text x="7.1226%" y="175.50">c..</text></g><g><title>memcmp (16 instructions, 0.08%)</title><rect x="8.9827%" y="165" width="0.0846%" height="15" fill="rgb(211,50,45)" fg:x="1698" fg:w="16"/><text x="9.2757%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.48%)</title><rect x="9.0673%" y="101" width="0.4761%" height="15" fill="rgb(243,227,8)" fg:x="1714" fg:w="90"/><text x="9.3603%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.53%)</title><rect x="9.0673%" y="117" width="0.5290%" height="15" fill="rgb(249,166,0)" fg:x="1714" fg:w="100"/><text x="9.3603%" y="127.50"></text></g><g><title>__rust_alloc (103 instructions, 0.54%)</title><rect x="9.0673%" y="133" width="0.5449%" height="15" fill="rgb(235,214,31)" fg:x="1714" fg:w="103"/><text x="9.3603%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.32%)</title><rect x="9.6122%" y="101" width="0.3174%" height="15" fill="rgb(242,43,41)" fg:x="1817" fg:w="60"/><text x="9.9052%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.45%)</title><rect x="9.6122%" y="117" width="0.4497%" height="15" fill="rgb(237,19,0)" fg:x="1817" fg:w="85"/><text x="9.9052%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="10.0619%" y="69" width="0.0476%" height="15" fill="rgb(244,169,3)" fg:x="1902" fg:w="9"/><text x="10.3549%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.16%)</title><rect x="10.1095%" y="53" width="0.1587%" height="15" fill="rgb(217,156,37)" fg:x="1911" fg:w="30"/><text x="10.4025%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.29%)</title><rect x="10.1095%" y="69" width="0.2910%" height="15" fill="rgb(249,106,9)" fg:x="1911" fg:w="55"/><text x="10.4025%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.61%)</title><rect x="10.0619%" y="85" width="0.6137%" height="15" fill="rgb(254,128,2)" fg:x="1902" fg:w="116"/><text x="10.3549%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.89%)</title><rect x="10.0619%" y="101" width="0.8940%" height="15" fill="rgb(250,123,5)" fg:x="1902" fg:w="169"/><text x="10.3549%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.92%)</title><rect x="10.0619%" y="117" width="0.9205%" height="15" fill="rgb(244,136,40)" fg:x="1902" fg:w="174"/><text x="10.3549%" y="127.50"></text></g><g><title>core::fmt::write (367 instructions, 1.94%)</title><rect x="9.6122%" y="133" width="1.9415%" height="15" fill="rgb(241,201,5)" fg:x="1817" fg:w="367"/><text x="9.9052%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (613 instructions, 3.24%)</title><rect x="9.0673%" y="149" width="3.2429%" height="15" fill="rgb(205,57,42)" fg:x="1714" fg:w="613"/><text x="9.3603%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.39%)</title><rect x="12.3102%" y="149" width="0.3915%" height="15" fill="rgb(216,116,37)" fg:x="2327" fg:w="74"/><text x="12.6032%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.29%)</title><rect x="12.7017%" y="149" width="0.2857%" height="15" fill="rgb(250,113,23)" fg:x="2401" fg:w="54"/><text x="12.9947%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (812 instructions, 4.30%)</title><rect x="9.0673%" y="165" width="4.2956%" height="15" fill="rgb(223,70,51)" fg:x="1714" fg:w="812"/><text x="9.3603%" y="175.50">binr..</text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.30%)</title><rect x="13.3630%" y="165" width="0.2962%" height="15" fill="rgb(221,113,39)" fg:x="2526" fg:w="56"/><text x="13.6559%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.51%)</title><rect x="13.6592%" y="165" width="0.5131%" height="15" fill="rgb(254,72,26)" fg:x="2582" fg:w="97"/><text x="13.9522%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="14.1724%" y="133" width="0.0212%" height="15" fill="rgb(216,15,5)" fg:x="2679" fg:w="4"/><text x="14.4653%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 2.15%)</title><rect x="14.1724%" y="149" width="2.1531%" height="15" fill="rgb(234,157,23)" fg:x="2679" fg:w="407"/><text x="14.4653%" y="159.50">c..</text></g><g><title>memcmp (16 instructions, 0.08%)</title><rect x="16.3255%" y="149" width="0.0846%" height="15" fill="rgb(220,77,19)" fg:x="3086" fg:w="16"/><text x="16.6184%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.48%)</title><rect x="16.4101%" y="85" width="0.4761%" height="15" fill="rgb(224,152,1)" fg:x="3102" fg:w="90"/><text x="16.7031%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.53%)</title><rect x="16.4101%" y="101" width="0.5290%" height="15" fill="rgb(234,66,37)" fg:x="3102" fg:w="100"/><text x="16.7031%" y="111.50"></text></g><g><title>__rust_alloc (103 instructions, 0.54%)</title><rect x="16.4101%" y="117" width="0.5449%" height="15" fill="rgb(223,194,50)" fg:x="3102" fg:w="103"/><text x="16.7031%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.32%)</title><rect x="16.9550%" y="85" width="0.3174%" height="15" fill="rgb(218,111,20)" fg:x="3205" fg:w="60"/><text x="17.2479%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.45%)</title><rect x="16.9550%" y="101" width="0.4497%" height="15" fill="rgb(230,162,2)" fg:x="3205" fg:w="85"/><text x="17.2479%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="17.4046%" y="53" width="0.0476%" height="15" fill="rgb(248,90,50)" fg:x="3290" fg:w="9"/><text x="17.6976%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.16%)</title><rect x="17.4523%" y="37" width="0.1587%" height="15" fill="rgb(211,119,7)" fg:x="3299" fg:w="30"/><text x="17.7452%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.29%)</title><rect x="17.4523%" y="53" width="0.2910%" height="15" fill="rgb(232,35,44)" fg:x="3299" fg:w="55"/><text x="17.7452%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.61%)</title><rect x="17.4046%" y="69" width="0.6137%" height="15" fill="rgb(207,201,13)" fg:x="3290" fg:w="116"/><text x="17.6976%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.89%)</title><rect x="17.4046%" y="85" width="0.8940%" height="15" fill="rgb(209,227,42)" fg:x="3290" fg:w="169"/><text x="17.6976%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.92%)</title><rect x="17.4046%" y="101" width="0.9205%" height="15" fill="rgb(224,58,41)" fg:x="3290" fg:w="174"/><text x="17.6976%" y="111.50"></text></g><g><title>core::fmt::write (367 instructions, 1.94%)</title><rect x="16.9550%" y="117" width="1.9415%" height="15" fill="rgb(237,151,7)" fg:x="3205" fg:w="367"/><text x="17.2479%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (613 instructions, 3.24%)</title><rect x="16.4101%" y="133" width="3.2429%" height="15" fill="rgb(253,60,14)" fg:x="3102" fg:w="613"/><text x="16.7031%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.39%)</title><rect x="19.6530%" y="133" width="0.3915%" height="15" fill="rgb(223,74,50)" fg:x="3715" fg:w="74"/><text x="19.9459%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.29%)</title><rect x="20.0444%" y="133" width="0.2857%" height="15" fill="rgb(205,73,38)" fg:x="3789" fg:w="54"/><text x="20.3374%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (812 instructions, 4.30%)</title><rect x="16.4101%" y="149" width="4.2956%" height="15" fill="rgb(218,131,11)" fg:x="3102" fg:w="812"/><text x="16.7031%" y="159.50">binr..</text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.32%)</title><rect x="20.7057%" y="133" width="0.3227%" height="15" fill="rgb(225,15,42)" fg:x="3914" fg:w="61"/><text x="20.9987%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (126 instructions, 0.67%)</title><rect x="21.0284%" y="133" width="0.6666%" height="15" fill="rgb(224,133,7)" fg:x="3975" fg:w="126"/><text x="21.3214%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.30%)</title><rect x="21.6950%" y="133" width="0.2962%" height="15" fill="rgb(232,141,40)" fg:x="4101" fg:w="56"/><text x="21.9879%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (305 instructions, 1.61%)</title><rect x="20.7057%" y="149" width="1.6135%" height="15" fill="rgb(240,177,18)" fg:x="3914" fg:w="305"/><text x="20.9987%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.48%)</title><rect x="22.3192%" y="117" width="0.4761%" height="15" fill="rgb(253,2,22)" fg:x="4219" fg:w="90"/><text x="22.6122%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.53%)</title><rect x="22.3192%" y="133" width="0.5290%" height="15" fill="rgb(250,114,19)" fg:x="4219" fg:w="100"/><text x="22.6122%" y="143.50"></text></g><g><title>__rust_alloc (103 instructions, 0.54%)</title><rect x="22.3192%" y="149" width="0.5449%" height="15" fill="rgb(209,85,28)" fg:x="4219" fg:w="103"/><text x="22.6122%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,868 instructions, 9.88%)</title><rect x="14.1724%" y="165" width="9.8820%" height="15" fill="rgb(205,113,16)" fg:x="2679" fg:w="1868"/><text x="14.4653%" y="175.50">binread::bin..</text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.30%)</title><rect x="24.0544%" y="165" width="0.2962%" height="15" fill="rgb(216,88,22)" fg:x="4547" fg:w="56"/><text x="24.3474%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.07%)</title><rect x="24.3506%" y="165" width="0.0688%" height="15" fill="rgb(212,77,48)" fg:x="4603" fg:w="13"/><text x="24.6436%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.07%)</title><rect x="24.4194%" y="165" width="0.0688%" height="15" fill="rgb(210,165,7)" fg:x="4616" fg:w="13"/><text x="24.7124%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.12%)</title><rect x="24.4882%" y="165" width="0.1164%" height="15" fill="rgb(232,129,33)" fg:x="4629" fg:w="22"/><text x="24.7811%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.48%)</title><rect x="24.6046%" y="117" width="0.4761%" height="15" fill="rgb(225,109,16)" fg:x="4651" fg:w="90"/><text x="24.8975%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.53%)</title><rect x="24.6046%" y="133" width="0.5290%" height="15" fill="rgb(230,70,26)" fg:x="4651" fg:w="100"/><text x="24.8975%" y="143.50"></text></g><g><title>__rust_alloc (103 instructions, 0.54%)</title><rect x="24.6046%" y="149" width="0.5449%" height="15" fill="rgb(245,73,5)" fg:x="4651" fg:w="103"/><text x="24.8975%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (183 instructions, 0.97%)</title><rect x="24.6046%" y="165" width="0.9681%" height="15" fill="rgb(216,116,14)" fg:x="4651" fg:w="183"/><text x="24.8975%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (94 instructions, 0.50%)</title><rect x="25.5727%" y="101" width="0.4973%" height="15" fill="rgb(233,10,25)" fg:x="4834" fg:w="94"/><text x="25.8656%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (104 instructions, 0.55%)</title><rect x="25.5727%" y="117" width="0.5502%" height="15" fill="rgb(244,63,47)" fg:x="4834" fg:w="104"/><text x="25.8656%" y="127.50"></text></g><g><title>__rust_alloc (107 instructions, 0.57%)</title><rect x="25.5727%" y="133" width="0.5660%" height="15" fill="rgb(207,114,41)" fg:x="4834" fg:w="107"/><text x="25.8656%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (137 instructions, 0.72%)</title><rect x="25.5727%" y="149" width="0.7248%" height="15" fill="rgb(240,87,22)" fg:x="4834" fg:w="137"/><text x="25.8656%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (205 instructions, 1.08%)</title><rect x="25.5727%" y="165" width="1.0845%" height="15" fill="rgb(251,84,20)" fg:x="4834" fg:w="205"/><text x="25.8656%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.48%)</title><rect x="26.6571%" y="133" width="0.4761%" height="15" fill="rgb(221,67,2)" fg:x="5039" fg:w="90"/><text x="26.9501%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.53%)</title><rect x="26.6571%" y="149" width="0.5290%" height="15" fill="rgb(207,9,30)" fg:x="5039" fg:w="100"/><text x="26.9501%" y="159.50"></text></g><g><title>__rust_alloc (103 instructions, 0.54%)</title><rect x="26.6571%" y="165" width="0.5449%" height="15" fill="rgb(221,61,36)" fg:x="5039" fg:w="103"/><text x="26.9501%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.43%)</title><rect x="27.2020%" y="165" width="0.4285%" height="15" fill="rgb(211,50,0)" fg:x="5142" fg:w="81"/><text x="27.4950%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.48%)</title><rect x="27.6305%" y="133" width="0.4761%" height="15" fill="rgb(217,192,4)" fg:x="5223" fg:w="90"/><text x="27.9235%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.53%)</title><rect x="27.6305%" y="149" width="0.5290%" height="15" fill="rgb(215,110,46)" fg:x="5223" fg:w="100"/><text x="27.9235%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.48%)</title><rect x="28.1754%" y="133" width="0.4761%" height="15" fill="rgb(211,214,36)" fg:x="5326" fg:w="90"/><text x="28.4684%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.53%)</title><rect x="28.1754%" y="149" width="0.5290%" height="15" fill="rgb(216,29,6)" fg:x="5326" fg:w="100"/><text x="28.4684%" y="159.50"></text></g><g><title>__rust_alloc (206 instructions, 1.09%)</title><rect x="27.6305%" y="165" width="1.0898%" height="15" fill="rgb(205,148,49)" fg:x="5223" fg:w="206"/><text x="27.9235%" y="175.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (14 instructions, 0.07%)</title><rect x="28.7203%" y="165" width="0.0741%" height="15" fill="rgb(239,202,13)" fg:x="5429" fg:w="14"/><text x="29.0133%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.43%)</title><rect x="28.7944%" y="165" width="0.4285%" height="15" fill="rgb(235,117,5)" fg:x="5443" fg:w="81"/><text x="29.0873%" y="175.50"></text></g><g><title>memcpy (411 instructions, 2.17%)</title><rect x="29.2229%" y="165" width="2.1743%" height="15" fill="rgb(244,132,37)" fg:x="5524" fg:w="411"/><text x="29.5158%" y="175.50">m..</text></g><g><title>memcpy (366 instructions, 1.94%)</title><rect x="31.3971%" y="165" width="1.9362%" height="15" fill="rgb(214,16,1)" fg:x="5935" fg:w="366"/><text x="31.6901%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,241 instructions, 38.31%)</title><rect x="1.9838%" y="181" width="38.3061%" height="15" fill="rgb(232,144,19)" fg:x="375" fg:w="7241"/><text x="2.2768%" y="191.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (381 instructions, 2.02%)</title><rect x="40.2899%" y="181" width="2.0156%" height="15" fill="rgb(208,198,44)" fg:x="7616" fg:w="381"/><text x="40.5829%" y="191.50"></text></g><g><title>memcpy (381 instructions, 2.02%)</title><rect x="42.3055%" y="181" width="2.0156%" height="15" fill="rgb(235,33,31)" fg:x="7997" fg:w="381"/><text x="42.5984%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 instructions, 0.03%)</title><rect x="44.3210%" y="149" width="0.0317%" height="15" fill="rgb(253,138,48)" fg:x="8378" fg:w="6"/><text x="44.6140%" y="159.50"></text></g><g><title>candid::types::internal::find_type (45 instructions, 0.24%)</title><rect x="44.3210%" y="165" width="0.2381%" height="15" fill="rgb(234,205,43)" fg:x="8378" fg:w="45"/><text x="44.6140%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.48%)</title><rect x="44.5591%" y="117" width="0.4761%" height="15" fill="rgb(251,76,21)" fg:x="8423" fg:w="90"/><text x="44.8520%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.53%)</title><rect x="44.5591%" y="133" width="0.5290%" height="15" fill="rgb(206,66,38)" fg:x="8423" fg:w="100"/><text x="44.8520%" y="143.50"></text></g><g><title>__rust_alloc (103 instructions, 0.54%)</title><rect x="44.5591%" y="149" width="0.5449%" height="15" fill="rgb(230,186,53)" fg:x="8423" fg:w="103"/><text x="44.8520%" y="159.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (149 instructions, 0.79%)</title><rect x="44.5591%" y="165" width="0.7882%" height="15" fill="rgb(253,90,6)" fg:x="8423" fg:w="149"/><text x="44.8520%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="45.3473%" y="133" width="0.0265%" height="15" fill="rgb(237,39,30)" fg:x="8572" fg:w="5"/><text x="45.6403%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.28%)</title><rect x="45.3738%" y="117" width="0.2804%" height="15" fill="rgb(247,170,24)" fg:x="8577" fg:w="53"/><text x="45.6667%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.47%)</title><rect x="45.6541%" y="117" width="0.4708%" height="15" fill="rgb(228,166,54)" fg:x="8630" fg:w="89"/><text x="45.9471%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.85%)</title><rect x="46.1250%" y="117" width="0.8517%" height="15" fill="rgb(210,32,27)" fg:x="8719" fg:w="161"/><text x="46.4179%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 2.89%)</title><rect x="45.3738%" y="133" width="2.8884%" height="15" fill="rgb(211,201,14)" fg:x="8577" fg:w="546"/><text x="45.6667%" y="143.50">co..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (796 instructions, 4.21%)</title><rect x="45.3473%" y="149" width="4.2110%" height="15" fill="rgb(218,114,26)" fg:x="8572" fg:w="796"/><text x="45.6403%" y="159.50">std:..</text></g><g><title>candid::types::internal::env_add (822 instructions, 4.35%)</title><rect x="45.3473%" y="165" width="4.3485%" height="15" fill="rgb(240,1,3)" fg:x="8572" fg:w="822"/><text x="45.6403%" y="175.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.48%)</title><rect x="49.6958%" y="133" width="0.4761%" height="15" fill="rgb(213,158,31)" fg:x="9394" fg:w="90"/><text x="49.9888%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.53%)</title><rect x="49.6958%" y="149" width="0.5290%" height="15" fill="rgb(238,37,37)" fg:x="9394" fg:w="100"/><text x="49.9888%" y="159.50"></text></g><g><title>__rust_alloc (103 instructions, 0.54%)</title><rect x="49.6958%" y="165" width="0.5449%" height="15" fill="rgb(234,144,49)" fg:x="9394" fg:w="103"/><text x="49.9888%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="50.2407%" y="133" width="0.0265%" height="15" fill="rgb(210,113,45)" fg:x="9497" fg:w="5"/><text x="50.5337%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.28%)</title><rect x="50.2672%" y="117" width="0.2804%" height="15" fill="rgb(232,95,7)" fg:x="9502" fg:w="53"/><text x="50.5601%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.47%)</title><rect x="50.5475%" y="117" width="0.4708%" height="15" fill="rgb(220,88,14)" fg:x="9555" fg:w="89"/><text x="50.8405%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.85%)</title><rect x="51.0184%" y="117" width="0.8517%" height="15" fill="rgb(240,94,6)" fg:x="9644" fg:w="161"/><text x="51.3113%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 2.89%)</title><rect x="50.2672%" y="133" width="2.8884%" height="15" fill="rgb(207,32,9)" fg:x="9502" fg:w="546"/><text x="50.5601%" y="143.50">co..</text></g><g><title>memcmp (68 instructions, 0.36%)</title><rect x="53.1556%" y="133" width="0.3597%" height="15" fill="rgb(209,188,34)" fg:x="10048" fg:w="68"/><text x="53.4486%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.43%)</title><rect x="53.5153%" y="117" width="0.4285%" height="15" fill="rgb(216,210,54)" fg:x="10116" fg:w="81"/><text x="53.8083%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (111 instructions, 0.59%)</title><rect x="53.5153%" y="133" width="0.5872%" height="15" fill="rgb(205,27,34)" fg:x="10116" fg:w="111"/><text x="53.8083%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (904 instructions, 4.78%)</title><rect x="50.2407%" y="149" width="4.7823%" height="15" fill="rgb(218,94,5)" fg:x="9497" fg:w="904"/><text x="50.5337%" y="159.50">std:..</text></g><g><title>candid::types::internal::env_add (930 instructions, 4.92%)</title><rect x="50.2407%" y="165" width="4.9199%" height="15" fill="rgb(211,146,30)" fg:x="9497" fg:w="930"/><text x="50.5337%" y="175.50">candi..</text></g><g><title>candid::types::internal::ID::__getit (5 instructions, 0.03%)</title><rect x="55.1606%" y="133" width="0.0265%" height="15" fill="rgb(242,40,9)" fg:x="10427" fg:w="5"/><text x="55.4535%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.28%)</title><rect x="55.1870%" y="101" width="0.2804%" height="15" fill="rgb(225,123,30)" fg:x="10432" fg:w="53"/><text x="55.4800%" y="111.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.41%)</title><rect x="55.1870%" y="117" width="0.4126%" height="15" fill="rgb(240,133,22)" fg:x="10432" fg:w="78"/><text x="55.4800%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (300 instructions, 1.59%)</title><rect x="55.1870%" y="133" width="1.5870%" height="15" fill="rgb(231,200,14)" fg:x="10432" fg:w="300"/><text x="55.4800%" y="143.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::PartialEq&gt;::eq (27 instructions, 0.14%)</title><rect x="56.7741%" y="133" width="0.1428%" height="15" fill="rgb(233,147,54)" fg:x="10732" fg:w="27"/><text x="57.0670%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="56.9169%" y="133" width="0.0582%" height="15" fill="rgb(218,23,13)" fg:x="10759" fg:w="11"/><text x="57.2099%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (515 instructions, 2.72%)</title><rect x="55.1606%" y="149" width="2.7244%" height="15" fill="rgb(230,44,30)" fg:x="10427" fg:w="515"/><text x="55.4535%" y="159.50">s..</text></g><g><title>candid::types::internal::env_id (552 instructions, 2.92%)</title><rect x="55.1606%" y="165" width="2.9202%" height="15" fill="rgb(240,57,31)" fg:x="10427" fg:w="552"/><text x="55.4535%" y="175.50">ca..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (37 instructions, 0.20%)</title><rect x="58.0807%" y="165" width="0.1957%" height="15" fill="rgb(229,92,43)" fg:x="10979" fg:w="37"/><text x="58.3737%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.65%)</title><rect x="58.2765%" y="149" width="0.6507%" height="15" fill="rgb(249,41,47)" fg:x="11016" fg:w="123"/><text x="58.5694%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.65%)</title><rect x="59.0859%" y="149" width="0.6507%" height="15" fill="rgb(225,137,44)" fg:x="11169" fg:w="123"/><text x="59.3788%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (306 instructions, 1.62%)</title><rect x="58.2765%" y="165" width="1.6188%" height="15" fill="rgb(241,141,8)" fg:x="11016" fg:w="306"/><text x="58.5694%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.15%)</title><rect x="59.8953%" y="149" width="0.1481%" height="15" fill="rgb(240,96,17)" fg:x="11322" fg:w="28"/><text x="60.1882%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.08%)</title><rect x="60.0434%" y="149" width="0.0794%" height="15" fill="rgb(224,161,6)" fg:x="11350" fg:w="15"/><text x="60.3363%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.08%)</title><rect x="60.1227%" y="149" width="0.0794%" height="15" fill="rgb(210,150,1)" fg:x="11365" fg:w="15"/><text x="60.4157%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (139 instructions, 0.74%)</title><rect x="59.8953%" y="165" width="0.7353%" height="15" fill="rgb(232,124,20)" fg:x="11322" fg:w="139"/><text x="60.1882%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="60.6306%" y="165" width="0.0582%" height="15" fill="rgb(249,186,40)" fg:x="11461" fg:w="11"/><text x="60.9236%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="60.6888%" y="165" width="0.0582%" height="15" fill="rgb(247,138,33)" fg:x="11472" fg:w="11"/><text x="60.9817%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="60.7470%" y="165" width="0.0582%" height="15" fill="rgb(235,40,47)" fg:x="11483" fg:w="11"/><text x="61.0399%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::get_value (3,394 instructions, 17.95%)</title><rect x="44.3210%" y="181" width="17.9548%" height="15" fill="rgb(231,128,16)" fg:x="8378" fg:w="3394"/><text x="44.6140%" y="191.50">candid::de::IDLDeserial..</text></g><g><title>memcpy (411 instructions, 2.17%)</title><rect x="62.2758%" y="181" width="2.1743%" height="15" fill="rgb(251,36,26)" fg:x="11772" fg:w="411"/><text x="62.5688%" y="191.50">m..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.12%)</title><rect x="64.4501%" y="165" width="0.1164%" height="15" fill="rgb(236,125,44)" fg:x="12183" fg:w="22"/><text x="64.7431%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.65%)</title><rect x="64.5665%" y="165" width="0.6507%" height="15" fill="rgb(233,151,21)" fg:x="12205" fg:w="123"/><text x="64.8594%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (71 instructions, 0.38%)</title><rect x="65.2172%" y="133" width="0.3756%" height="15" fill="rgb(239,73,50)" fg:x="12328" fg:w="71"/><text x="65.5101%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (216 instructions, 1.14%)</title><rect x="65.2172%" y="149" width="1.1427%" height="15" fill="rgb(219,99,2)" fg:x="12328" fg:w="216"/><text x="65.5101%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (246 instructions, 1.30%)</title><rect x="65.2172%" y="165" width="1.3014%" height="15" fill="rgb(206,8,1)" fg:x="12328" fg:w="246"/><text x="65.5101%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="66.5185%" y="165" width="0.0582%" height="15" fill="rgb(254,122,27)" fg:x="12574" fg:w="11"/><text x="66.8115%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="66.5767%" y="165" width="0.0265%" height="15" fill="rgb(254,36,32)" fg:x="12585" fg:w="5"/><text x="66.8697%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (501 instructions, 2.65%)</title><rect x="64.4501%" y="181" width="2.6504%" height="15" fill="rgb(212,121,53)" fg:x="12183" fg:w="501"/><text x="64.7431%" y="191.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.29%)</title><rect x="67.1005%" y="165" width="0.2857%" height="15" fill="rgb(223,19,16)" fg:x="12684" fg:w="54"/><text x="67.3934%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (71 instructions, 0.38%)</title><rect x="67.3861%" y="165" width="0.3756%" height="15" fill="rgb(241,116,32)" fg:x="12738" fg:w="71"/><text x="67.6791%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (205 instructions, 1.08%)</title><rect x="67.1005%" y="181" width="1.0845%" height="15" fill="rgb(244,22,24)" fg:x="12684" fg:w="205"/><text x="67.3934%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,808 instructions, 67.76%)</title><rect x="1.1268%" y="197" width="67.7564%" height="15" fill="rgb(252,209,18)" fg:x="213" fg:w="12808"/><text x="1.4198%" y="207.50">ic_cdk::api::call::arg_data</text></g><g><title>hashmap::MAP::__getit (13 instructions, 0.07%)</title><rect x="68.8832%" y="181" width="0.0688%" height="15" fill="rgb(239,80,17)" fg:x="13021" fg:w="13"/><text x="69.1762%" y="191.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4,373 instructions, 23.13%)</title><rect x="68.8832%" y="197" width="23.1339%" height="15" fill="rgb(207,204,22)" fg:x="13021" fg:w="4373"/><text x="69.1762%" y="207.50">std::thread::local::LocalKey&lt;T&gt;..</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="92.0171%" y="165" width="0.0265%" height="15" fill="rgb(247,200,8)" fg:x="17394" fg:w="5"/><text x="92.3101%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.29%)</title><rect x="92.0436%" y="133" width="0.2857%" height="15" fill="rgb(218,44,53)" fg:x="17399" fg:w="54"/><text x="92.3366%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.71%)</title><rect x="92.0436%" y="149" width="0.7142%" height="15" fill="rgb(225,167,44)" fg:x="17399" fg:w="135"/><text x="92.3366%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (165 instructions, 0.87%)</title><rect x="92.0436%" y="165" width="0.8729%" height="15" fill="rgb(245,105,9)" fg:x="17399" fg:w="165"/><text x="92.3366%" y="175.50"></text></g><g><title>memset (136 instructions, 0.72%)</title><rect x="92.9165%" y="165" width="0.7195%" height="15" fill="rgb(211,170,36)" fg:x="17564" fg:w="136"/><text x="93.2094%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (463 instructions, 2.45%)</title><rect x="92.0171%" y="181" width="2.4493%" height="15" fill="rgb(225,140,45)" fg:x="17394" fg:w="463"/><text x="92.3101%" y="191.50">c..</text></g><g><title>std::io::Write::write_all (78 instructions, 0.41%)</title><rect x="94.4665%" y="165" width="0.4126%" height="15" fill="rgb(253,87,4)" fg:x="17857" fg:w="78"/><text x="94.7595%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.48%)</title><rect x="94.8791%" y="101" width="0.4761%" height="15" fill="rgb(237,176,29)" fg:x="17935" fg:w="90"/><text x="95.1721%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.53%)</title><rect x="94.8791%" y="117" width="0.5290%" height="15" fill="rgb(249,198,37)" fg:x="17935" fg:w="100"/><text x="95.1721%" y="127.50"></text></g><g><title>__rust_alloc (103 instructions, 0.54%)</title><rect x="94.8791%" y="133" width="0.5449%" height="15" fill="rgb(231,135,37)" fg:x="17935" fg:w="103"/><text x="95.1721%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (133 instructions, 0.70%)</title><rect x="94.8791%" y="149" width="0.7036%" height="15" fill="rgb(245,85,43)" fg:x="17935" fg:w="133"/><text x="95.1721%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (198 instructions, 1.05%)</title><rect x="94.8791%" y="165" width="1.0475%" height="15" fill="rgb(220,4,35)" fg:x="17935" fg:w="198"/><text x="95.1721%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="95.9266%" y="165" width="0.0582%" height="15" fill="rgb(253,84,10)" fg:x="18133" fg:w="11"/><text x="96.2195%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="95.9848%" y="165" width="0.0582%" height="15" fill="rgb(209,15,51)" fg:x="18144" fg:w="11"/><text x="96.2777%" y="175.50"></text></g><g><title>std::io::Write::write_all (76 instructions, 0.40%)</title><rect x="96.0430%" y="165" width="0.4021%" height="15" fill="rgb(213,113,23)" fg:x="18155" fg:w="76"/><text x="96.3359%" y="175.50"></text></g><g><title>std::io::Write::write_all (14 instructions, 0.07%)</title><rect x="96.4450%" y="165" width="0.0741%" height="15" fill="rgb(230,64,32)" fg:x="18231" fg:w="14"/><text x="96.7380%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (670 instructions, 3.54%)</title><rect x="94.4665%" y="181" width="3.5444%" height="15" fill="rgb(207,37,54)" fg:x="17857" fg:w="670"/><text x="94.7595%" y="191.50">can..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="98.0109%" y="181" width="0.0265%" height="15" fill="rgb(214,204,4)" fg:x="18527" fg:w="5"/><text x="98.3039%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.29%)</title><rect x="98.0373%" y="181" width="0.2857%" height="15" fill="rgb(232,160,13)" fg:x="18532" fg:w="54"/><text x="98.3303%" y="191.50"></text></g><g><title>candid::utils::write_args (1,256 instructions, 6.64%)</title><rect x="92.0171%" y="197" width="6.6444%" height="15" fill="rgb(206,10,2)" fg:x="17394" fg:w="1256"/><text x="92.3101%" y="207.50">candid:..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.43%)</title><rect x="98.6616%" y="197" width="0.4285%" height="15" fill="rgb(211,216,17)" fg:x="18650" fg:w="81"/><text x="98.9546%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.53%)</title><rect x="99.0901%" y="197" width="0.5290%" height="15" fill="rgb(220,208,19)" fg:x="18731" fg:w="100"/><text x="99.3831%" y="207.50"></text></g><g><title>all (18,903 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,37,33)" fg:x="0" fg:w="18903"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (18,903 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(210,90,6)" fg:x="0" fg:w="18903"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>