<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="16851"><g><title>ic_cdk::setup (19 instructions, 0.11%)</title><rect x="0.0000%" y="197" width="0.1128%" height="15" fill="rgb(253,59,40)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="0.1128%" y="197" width="0.4510%" height="15" fill="rgb(221,61,8)" fg:x="19" fg:w="76"/><text x="0.4057%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="0.5638%" y="197" width="0.4510%" height="15" fill="rgb(206,164,19)" fg:x="95" fg:w="76"/><text x="0.8567%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="1.0148%" y="165" width="0.4510%" height="15" fill="rgb(233,11,43)" fg:x="171" fg:w="76"/><text x="1.3077%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.42%)</title><rect x="1.4658%" y="149" width="0.4213%" height="15" fill="rgb(236,90,29)" fg:x="247" fg:w="71"/><text x="1.7588%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.8871%" y="133" width="0.0237%" height="15" fill="rgb(248,80,37)" fg:x="318" fg:w="4"/><text x="2.1801%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 2.39%)</title><rect x="1.8871%" y="149" width="2.3856%" height="15" fill="rgb(208,84,50)" fg:x="318" fg:w="402"/><text x="2.1801%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.49%)</title><rect x="4.2727%" y="149" width="0.4926%" height="15" fill="rgb(230,157,18)" fg:x="720" fg:w="83"/><text x="4.5657%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.32%)</title><rect x="4.7653%" y="149" width="0.3205%" height="15" fill="rgb(219,106,53)" fg:x="803" fg:w="54"/><text x="5.0583%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.32%)</title><rect x="5.0858%" y="149" width="0.3205%" height="15" fill="rgb(242,111,20)" fg:x="857" fg:w="54"/><text x="5.3787%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.32%)</title><rect x="5.4062%" y="149" width="0.3205%" height="15" fill="rgb(241,8,17)" fg:x="911" fg:w="54"/><text x="5.6992%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.32%)</title><rect x="5.7267%" y="149" width="0.3205%" height="15" fill="rgb(216,158,44)" fg:x="965" fg:w="54"/><text x="6.0196%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.42%)</title><rect x="6.0471%" y="149" width="0.4213%" height="15" fill="rgb(220,55,13)" fg:x="1019" fg:w="71"/><text x="6.3401%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.39%)</title><rect x="6.4685%" y="149" width="0.3857%" height="15" fill="rgb(232,59,33)" fg:x="1090" fg:w="65"/><text x="6.7614%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="6.8542%" y="133" width="0.0237%" height="15" fill="rgb(230,4,25)" fg:x="1155" fg:w="4"/><text x="7.1472%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 2.39%)</title><rect x="6.8542%" y="149" width="2.3856%" height="15" fill="rgb(235,68,17)" fg:x="1155" fg:w="402"/><text x="7.1472%" y="159.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="9.2398%" y="149" width="0.0949%" height="15" fill="rgb(212,72,28)" fg:x="1557" fg:w="16"/><text x="9.5328%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="9.3348%" y="133" width="0.4510%" height="15" fill="rgb(231,77,18)" fg:x="1573" fg:w="76"/><text x="9.6277%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.36%)</title><rect x="9.7858%" y="101" width="0.3561%" height="15" fill="rgb(241,21,33)" fg:x="1649" fg:w="60"/><text x="10.0787%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.50%)</title><rect x="9.7858%" y="117" width="0.5044%" height="15" fill="rgb(224,200,13)" fg:x="1649" fg:w="85"/><text x="10.0787%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="10.2902%" y="69" width="0.0534%" height="15" fill="rgb(231,228,5)" fg:x="1734" fg:w="9"/><text x="10.5832%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.18%)</title><rect x="10.3436%" y="53" width="0.1780%" height="15" fill="rgb(242,182,11)" fg:x="1743" fg:w="30"/><text x="10.6366%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.33%)</title><rect x="10.3436%" y="69" width="0.3264%" height="15" fill="rgb(247,14,26)" fg:x="1743" fg:w="55"/><text x="10.6366%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.68%)</title><rect x="10.2902%" y="85" width="0.6765%" height="15" fill="rgb(227,97,25)" fg:x="1734" fg:w="114"/><text x="10.5832%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.99%)</title><rect x="10.2902%" y="101" width="0.9910%" height="15" fill="rgb(228,45,33)" fg:x="1734" fg:w="167"/><text x="10.5832%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 1.02%)</title><rect x="10.2902%" y="117" width="1.0207%" height="15" fill="rgb(223,127,34)" fg:x="1734" fg:w="172"/><text x="10.5832%" y="127.50"></text></g><g><title>core::fmt::write (368 instructions, 2.18%)</title><rect x="9.7858%" y="133" width="2.1838%" height="15" fill="rgb(231,173,41)" fg:x="1649" fg:w="368"/><text x="10.0787%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 3.35%)</title><rect x="9.3348%" y="149" width="3.3529%" height="15" fill="rgb(241,126,13)" fg:x="1573" fg:w="565"/><text x="9.6277%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.49%)</title><rect x="12.6877%" y="149" width="0.4926%" height="15" fill="rgb(232,18,24)" fg:x="2138" fg:w="83"/><text x="12.9806%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.33%)</title><rect x="13.1802%" y="149" width="0.3264%" height="15" fill="rgb(254,28,6)" fg:x="2221" fg:w="55"/><text x="13.4732%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.39%)</title><rect x="13.5066%" y="149" width="0.3857%" height="15" fill="rgb(206,171,37)" fg:x="2276" fg:w="65"/><text x="13.7996%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.39%)</title><rect x="13.8924%" y="149" width="0.3857%" height="15" fill="rgb(238,19,40)" fg:x="2341" fg:w="65"/><text x="14.1853%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="14.2781%" y="117" width="0.0237%" height="15" fill="rgb(212,4,41)" fg:x="2406" fg:w="4"/><text x="14.5711%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 2.39%)</title><rect x="14.2781%" y="133" width="2.3856%" height="15" fill="rgb(224,155,50)" fg:x="2406" fg:w="402"/><text x="14.5711%" y="143.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="16.6637%" y="133" width="0.0949%" height="15" fill="rgb(241,229,51)" fg:x="2808" fg:w="16"/><text x="16.9567%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="16.7586%" y="117" width="0.4510%" height="15" fill="rgb(217,71,35)" fg:x="2824" fg:w="76"/><text x="17.0516%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.36%)</title><rect x="17.2097%" y="85" width="0.3561%" height="15" fill="rgb(206,195,36)" fg:x="2900" fg:w="60"/><text x="17.5026%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.50%)</title><rect x="17.2097%" y="101" width="0.5044%" height="15" fill="rgb(214,174,47)" fg:x="2900" fg:w="85"/><text x="17.5026%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="17.7141%" y="53" width="0.0534%" height="15" fill="rgb(251,65,53)" fg:x="2985" fg:w="9"/><text x="18.0071%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.18%)</title><rect x="17.7675%" y="37" width="0.1780%" height="15" fill="rgb(241,136,26)" fg:x="2994" fg:w="30"/><text x="18.0605%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.33%)</title><rect x="17.7675%" y="53" width="0.3264%" height="15" fill="rgb(247,89,4)" fg:x="2994" fg:w="55"/><text x="18.0605%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.68%)</title><rect x="17.7141%" y="69" width="0.6765%" height="15" fill="rgb(240,196,46)" fg:x="2985" fg:w="114"/><text x="18.0071%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.99%)</title><rect x="17.7141%" y="85" width="0.9910%" height="15" fill="rgb(245,221,4)" fg:x="2985" fg:w="167"/><text x="18.0071%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 1.02%)</title><rect x="17.7141%" y="101" width="1.0207%" height="15" fill="rgb(225,131,32)" fg:x="2985" fg:w="172"/><text x="18.0071%" y="111.50"></text></g><g><title>core::fmt::write (368 instructions, 2.18%)</title><rect x="17.2097%" y="117" width="2.1838%" height="15" fill="rgb(216,157,7)" fg:x="2900" fg:w="368"/><text x="17.5026%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 3.35%)</title><rect x="16.7586%" y="133" width="3.3529%" height="15" fill="rgb(216,120,33)" fg:x="2824" fg:w="565"/><text x="17.0516%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.49%)</title><rect x="20.1116%" y="133" width="0.4926%" height="15" fill="rgb(220,173,1)" fg:x="3389" fg:w="83"/><text x="20.4045%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.33%)</title><rect x="20.6041%" y="133" width="0.3264%" height="15" fill="rgb(220,182,43)" fg:x="3472" fg:w="55"/><text x="20.8971%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.42%)</title><rect x="20.9305%" y="117" width="0.4213%" height="15" fill="rgb(249,157,51)" fg:x="3527" fg:w="71"/><text x="21.2235%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (90 instructions, 0.53%)</title><rect x="21.3518%" y="117" width="0.5341%" height="15" fill="rgb(210,161,54)" fg:x="3598" fg:w="90"/><text x="21.6448%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.39%)</title><rect x="21.8859%" y="117" width="0.3857%" height="15" fill="rgb(227,121,31)" fg:x="3688" fg:w="65"/><text x="22.1789%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (285 instructions, 1.69%)</title><rect x="20.9305%" y="133" width="1.6913%" height="15" fill="rgb(209,106,18)" fg:x="3527" fg:w="285"/><text x="21.2235%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.46%)</title><rect x="22.6218%" y="133" width="0.4629%" height="15" fill="rgb(247,110,24)" fg:x="3812" fg:w="78"/><text x="22.9148%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,687 instructions, 10.01%)</title><rect x="14.2781%" y="149" width="10.0113%" height="15" fill="rgb(243,97,29)" fg:x="2406" fg:w="1687"/><text x="14.5711%" y="159.50">binread::bin..</text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.39%)</title><rect x="24.2894%" y="149" width="0.3857%" height="15" fill="rgb(223,123,3)" fg:x="4093" fg:w="65"/><text x="24.5823%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.08%)</title><rect x="24.6751%" y="149" width="0.0771%" height="15" fill="rgb(224,35,50)" fg:x="4158" fg:w="13"/><text x="24.9681%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.08%)</title><rect x="24.7522%" y="149" width="0.0771%" height="15" fill="rgb(232,29,5)" fg:x="4171" fg:w="13"/><text x="25.0452%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.04%)</title><rect x="24.8294%" y="149" width="0.0415%" height="15" fill="rgb(252,52,13)" fg:x="4184" fg:w="7"/><text x="25.1224%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.09%)</title><rect x="24.8709%" y="149" width="0.0890%" height="15" fill="rgb(230,2,17)" fg:x="4191" fg:w="15"/><text x="25.1639%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="24.9599%" y="133" width="0.4510%" height="15" fill="rgb(225,32,26)" fg:x="4206" fg:w="76"/><text x="25.2529%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.94%)</title><rect x="24.9599%" y="149" width="0.9436%" height="15" fill="rgb(241,173,19)" fg:x="4206" fg:w="159"/><text x="25.2529%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="25.9035%" y="117" width="0.4510%" height="15" fill="rgb(251,9,31)" fg:x="4365" fg:w="76"/><text x="26.1965%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.65%)</title><rect x="25.9035%" y="133" width="0.6528%" height="15" fill="rgb(244,150,20)" fg:x="4365" fg:w="110"/><text x="26.1965%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (180 instructions, 1.07%)</title><rect x="25.9035%" y="149" width="1.0682%" height="15" fill="rgb(224,110,27)" fg:x="4365" fg:w="180"/><text x="26.1965%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="26.9717%" y="149" width="0.4510%" height="15" fill="rgb(236,198,50)" fg:x="4545" fg:w="76"/><text x="27.2647%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.48%)</title><rect x="27.4227%" y="149" width="0.4807%" height="15" fill="rgb(205,3,16)" fg:x="4621" fg:w="81"/><text x="27.7157%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="27.9034%" y="149" width="0.4510%" height="15" fill="rgb(235,89,16)" fg:x="4702" fg:w="76"/><text x="28.1964%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="28.3544%" y="149" width="0.4510%" height="15" fill="rgb(249,123,25)" fg:x="4778" fg:w="76"/><text x="28.6474%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 instructions, 0.01%)</title><rect x="28.8054%" y="149" width="0.0119%" height="15" fill="rgb(237,11,1)" fg:x="4854" fg:w="2"/><text x="29.0984%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.48%)</title><rect x="28.8173%" y="149" width="0.4807%" height="15" fill="rgb(230,51,27)" fg:x="4856" fg:w="81"/><text x="29.1102%" y="159.50"></text></g><g><title>memcpy (399 instructions, 2.37%)</title><rect x="29.2980%" y="149" width="2.3678%" height="15" fill="rgb(209,33,22)" fg:x="4937" fg:w="399"/><text x="29.5909%" y="159.50">m..</text></g><g><title>memcpy (399 instructions, 2.37%)</title><rect x="31.6658%" y="149" width="2.3678%" height="15" fill="rgb(221,69,29)" fg:x="5336" fg:w="399"/><text x="31.9587%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new (6,448 instructions, 38.26%)</title><rect x="1.4658%" y="165" width="38.2648%" height="15" fill="rgb(216,69,13)" fg:x="247" fg:w="6448"/><text x="1.7588%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (354 instructions, 2.10%)</title><rect x="39.7306%" y="165" width="2.1008%" height="15" fill="rgb(245,170,41)" fg:x="6695" fg:w="354"/><text x="40.0235%" y="175.50">m..</text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.07%)</title><rect x="41.8313%" y="149" width="0.0712%" height="15" fill="rgb(231,85,43)" fg:x="7049" fg:w="12"/><text x="42.1243%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.30%)</title><rect x="41.8313%" y="165" width="0.2967%" height="15" fill="rgb(234,63,50)" fg:x="7049" fg:w="50"/><text x="42.1243%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.33%)</title><rect x="42.1281%" y="149" width="0.3264%" height="15" fill="rgb(234,180,43)" fg:x="7099" fg:w="55"/><text x="42.4210%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (196 instructions, 1.16%)</title><rect x="42.1281%" y="165" width="1.1631%" height="15" fill="rgb(217,42,1)" fg:x="7099" fg:w="196"/><text x="42.4210%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.07%)</title><rect x="43.2912%" y="149" width="0.0712%" height="15" fill="rgb(220,214,13)" fg:x="7295" fg:w="12"/><text x="43.5842%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="43.3624%" y="133" width="0.3145%" height="15" fill="rgb(205,150,42)" fg:x="7307" fg:w="53"/><text x="43.6554%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.52%)</title><rect x="43.6769%" y="133" width="0.5222%" height="15" fill="rgb(223,216,12)" fg:x="7360" fg:w="88"/><text x="43.9699%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.96%)</title><rect x="44.1992%" y="133" width="0.9614%" height="15" fill="rgb(211,14,38)" fg:x="7448" fg:w="162"/><text x="44.4921%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.20%)</title><rect x="43.3624%" y="149" width="3.2046%" height="15" fill="rgb(224,92,18)" fg:x="7307" fg:w="540"/><text x="43.6554%" y="159.50">co..</text></g><g><title>candid::types::internal::env_add (760 instructions, 4.51%)</title><rect x="43.2912%" y="165" width="4.5101%" height="15" fill="rgb(209,192,4)" fg:x="7295" fg:w="760"/><text x="43.5842%" y="175.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="47.8013%" y="165" width="0.4510%" height="15" fill="rgb(249,86,3)" fg:x="8055" fg:w="76"/><text x="48.0943%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.07%)</title><rect x="48.2523%" y="149" width="0.0712%" height="15" fill="rgb(219,201,31)" fg:x="8131" fg:w="12"/><text x="48.5453%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="48.3235%" y="133" width="0.3145%" height="15" fill="rgb(217,185,11)" fg:x="8143" fg:w="53"/><text x="48.6165%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.52%)</title><rect x="48.6381%" y="133" width="0.5222%" height="15" fill="rgb(238,114,4)" fg:x="8196" fg:w="88"/><text x="48.9310%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.96%)</title><rect x="49.1603%" y="133" width="0.9614%" height="15" fill="rgb(230,192,5)" fg:x="8284" fg:w="162"/><text x="49.4533%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.20%)</title><rect x="48.3235%" y="149" width="3.2046%" height="15" fill="rgb(248,47,21)" fg:x="8143" fg:w="540"/><text x="48.6165%" y="159.50">co..</text></g><g><title>memcmp (68 instructions, 0.40%)</title><rect x="51.5281%" y="149" width="0.4035%" height="15" fill="rgb(208,180,2)" fg:x="8683" fg:w="68"/><text x="51.8211%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.48%)</title><rect x="51.9316%" y="133" width="0.4807%" height="15" fill="rgb(250,206,24)" fg:x="8751" fg:w="81"/><text x="52.2246%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.64%)</title><rect x="51.9316%" y="149" width="0.6409%" height="15" fill="rgb(210,219,0)" fg:x="8751" fg:w="108"/><text x="52.2246%" y="159.50"></text></g><g><title>candid::types::internal::env_add (895 instructions, 5.31%)</title><rect x="48.2523%" y="165" width="5.3113%" height="15" fill="rgb(232,118,28)" fg:x="8131" fg:w="895"/><text x="48.5453%" y="175.50">candi..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="53.5636%" y="117" width="0.3145%" height="15" fill="rgb(238,81,12)" fg:x="9026" fg:w="53"/><text x="53.8566%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.47%)</title><rect x="53.5636%" y="133" width="0.4688%" height="15" fill="rgb(237,173,22)" fg:x="9026" fg:w="79"/><text x="53.8566%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 1.73%)</title><rect x="53.5636%" y="149" width="1.7328%" height="15" fill="rgb(220,131,25)" fg:x="9026" fg:w="292"/><text x="53.8566%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.848 (15 instructions, 0.09%)</title><rect x="55.2964%" y="149" width="0.0890%" height="15" fill="rgb(223,203,44)" fg:x="9318" fg:w="15"/><text x="55.5894%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.07%)</title><rect x="55.3854%" y="149" width="0.0653%" height="15" fill="rgb(219,77,53)" fg:x="9333" fg:w="11"/><text x="55.6784%" y="159.50"></text></g><g><title>candid::types::internal::env_id (498 instructions, 2.96%)</title><rect x="53.5636%" y="165" width="2.9553%" height="15" fill="rgb(234,62,37)" fg:x="9026" fg:w="498"/><text x="53.8566%" y="175.50">ca..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (45 instructions, 0.27%)</title><rect x="56.5189%" y="165" width="0.2670%" height="15" fill="rgb(209,134,29)" fg:x="9524" fg:w="45"/><text x="56.8119%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (120 instructions, 0.71%)</title><rect x="56.7859%" y="149" width="0.7121%" height="15" fill="rgb(218,37,34)" fg:x="9569" fg:w="120"/><text x="57.0789%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.73%)</title><rect x="57.6583%" y="149" width="0.7299%" height="15" fill="rgb(233,100,26)" fg:x="9716" fg:w="123"/><text x="57.9513%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (297 instructions, 1.76%)</title><rect x="56.7859%" y="165" width="1.7625%" height="15" fill="rgb(251,172,34)" fg:x="9569" fg:w="297"/><text x="57.0789%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.17%)</title><rect x="58.5485%" y="149" width="0.1662%" height="15" fill="rgb(218,75,39)" fg:x="9866" fg:w="28"/><text x="58.8414%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1732 (15 instructions, 0.09%)</title><rect x="58.7146%" y="149" width="0.0890%" height="15" fill="rgb(232,179,0)" fg:x="9894" fg:w="15"/><text x="59.0076%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1732 (15 instructions, 0.09%)</title><rect x="58.8036%" y="149" width="0.0890%" height="15" fill="rgb(235,188,16)" fg:x="9909" fg:w="15"/><text x="59.0966%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.80%)</title><rect x="58.5485%" y="165" width="0.8011%" height="15" fill="rgb(214,167,28)" fg:x="9866" fg:w="135"/><text x="58.8414%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.07%)</title><rect x="59.3496%" y="165" width="0.0653%" height="15" fill="rgb(233,161,44)" fg:x="10001" fg:w="11"/><text x="59.6426%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.07%)</title><rect x="59.4149%" y="165" width="0.0653%" height="15" fill="rgb(244,183,7)" fg:x="10012" fg:w="11"/><text x="59.7078%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.07%)</title><rect x="59.4801%" y="165" width="0.0653%" height="15" fill="rgb(219,35,17)" fg:x="10023" fg:w="11"/><text x="59.7731%" y="175.50"></text></g><g><title>memcpy (410 instructions, 2.43%)</title><rect x="59.5454%" y="165" width="2.4331%" height="15" fill="rgb(251,221,19)" fg:x="10034" fg:w="410"/><text x="59.8384%" y="175.50">m..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (15 instructions, 0.09%)</title><rect x="61.9785%" y="133" width="0.0890%" height="15" fill="rgb(227,1,29)" fg:x="10444" fg:w="15"/><text x="62.2715%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 1.00%)</title><rect x="62.0675%" y="133" width="0.9970%" height="15" fill="rgb(226,222,47)" fg:x="10459" fg:w="168"/><text x="62.3605%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.37%)</title><rect x="63.0645%" y="101" width="0.3739%" height="15" fill="rgb(233,123,3)" fg:x="10627" fg:w="63"/><text x="63.3575%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (163 instructions, 0.97%)</title><rect x="63.0645%" y="117" width="0.9673%" height="15" fill="rgb(233,132,27)" fg:x="10627" fg:w="163"/><text x="63.3575%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (190 instructions, 1.13%)</title><rect x="63.0645%" y="133" width="1.1275%" height="15" fill="rgb(219,167,19)" fg:x="10627" fg:w="190"/><text x="63.3575%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.07%)</title><rect x="64.1920%" y="133" width="0.0653%" height="15" fill="rgb(240,52,43)" fg:x="10817" fg:w="11"/><text x="64.4850%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (424 instructions, 2.52%)</title><rect x="61.9785%" y="149" width="2.5162%" height="15" fill="rgb(231,218,14)" fg:x="10444" fg:w="424"/><text x="62.2715%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (461 instructions, 2.74%)</title><rect x="61.9785%" y="165" width="2.7357%" height="15" fill="rgb(217,224,13)" fg:x="10444" fg:w="461"/><text x="62.2715%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.33%)</title><rect x="64.7143%" y="149" width="0.3264%" height="15" fill="rgb(223,177,9)" fg:x="10905" fg:w="55"/><text x="65.0072%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.37%)</title><rect x="65.0407%" y="149" width="0.3739%" height="15" fill="rgb(226,193,7)" fg:x="10960" fg:w="63"/><text x="65.3336%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 1.18%)</title><rect x="64.7143%" y="165" width="1.1809%" height="15" fill="rgb(246,159,5)" fg:x="10905" fg:w="199"/><text x="65.0072%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,315 instructions, 67.15%)</title><rect x="1.0148%" y="181" width="67.1474%" height="15" fill="rgb(248,58,35)" fg:x="171" fg:w="11315"/><text x="1.3077%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.07%)</title><rect x="68.1621%" y="149" width="0.0712%" height="15" fill="rgb(253,189,38)" fg:x="11486" fg:w="12"/><text x="68.4551%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.59%)</title><rect x="68.2333%" y="133" width="0.5934%" height="15" fill="rgb(248,174,28)" fg:x="11498" fg:w="100"/><text x="68.5263%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (127 instructions, 0.75%)</title><rect x="68.2333%" y="149" width="0.7537%" height="15" fill="rgb(230,20,1)" fg:x="11498" fg:w="127"/><text x="68.5263%" y="159.50"></text></g><g><title>memset (136 instructions, 0.81%)</title><rect x="68.9870%" y="149" width="0.8071%" height="15" fill="rgb(242,97,22)" fg:x="11625" fg:w="136"/><text x="69.2800%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (433 instructions, 2.57%)</title><rect x="68.1621%" y="165" width="2.5696%" height="15" fill="rgb(249,210,17)" fg:x="11486" fg:w="433"/><text x="68.4551%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.19%)</title><rect x="70.7317%" y="149" width="0.1899%" height="15" fill="rgb(243,200,49)" fg:x="11919" fg:w="32"/><text x="71.0247%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.45%)</title><rect x="70.9216%" y="101" width="0.4510%" height="15" fill="rgb(246,208,52)" fg:x="11951" fg:w="76"/><text x="71.2146%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.65%)</title><rect x="70.9216%" y="117" width="0.6528%" height="15" fill="rgb(208,203,51)" fg:x="11951" fg:w="110"/><text x="71.2146%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (177 instructions, 1.05%)</title><rect x="70.9216%" y="133" width="1.0504%" height="15" fill="rgb(239,136,53)" fg:x="11951" fg:w="177"/><text x="71.2146%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.07%)</title><rect x="71.9720%" y="133" width="0.0653%" height="15" fill="rgb(254,93,0)" fg:x="12128" fg:w="11"/><text x="72.2650%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.07%)</title><rect x="72.0373%" y="133" width="0.0653%" height="15" fill="rgb(220,106,0)" fg:x="12139" fg:w="11"/><text x="72.3302%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (361 instructions, 2.14%)</title><rect x="70.9216%" y="149" width="2.1423%" height="15" fill="rgb(238,138,44)" fg:x="11951" fg:w="361"/><text x="71.2146%" y="159.50">c..</text></g><g><title>std::io::Write::write_all (30 instructions, 0.18%)</title><rect x="73.0639%" y="149" width="0.1780%" height="15" fill="rgb(215,225,0)" fg:x="12312" fg:w="30"/><text x="73.3569%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.03%)</title><rect x="73.2419%" y="149" width="0.0297%" height="15" fill="rgb(248,74,48)" fg:x="12342" fg:w="5"/><text x="73.5349%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (496 instructions, 2.94%)</title><rect x="70.7317%" y="165" width="2.9434%" height="15" fill="rgb(206,208,39)" fg:x="11919" fg:w="496"/><text x="71.0247%" y="175.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="73.6752%" y="165" width="0.0237%" height="15" fill="rgb(222,7,37)" fg:x="12415" fg:w="4"/><text x="73.9681%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.33%)</title><rect x="73.6989%" y="165" width="0.3264%" height="15" fill="rgb(207,14,48)" fg:x="12419" fg:w="55"/><text x="73.9919%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,062 instructions, 6.30%)</title><rect x="68.1621%" y="181" width="6.3023%" height="15" fill="rgb(241,191,18)" fg:x="11486" fg:w="1062"/><text x="68.4551%" y="191.50">ic_cdk:..</text></g><g><title>hashmap::batch_get_5_::{{closure}} (16,245 instructions, 96.40%)</title><rect x="1.0148%" y="197" width="96.4038%" height="15" fill="rgb(246,203,17)" fg:x="171" fg:w="16245"/><text x="1.3077%" y="207.50">hashmap::batch_get_5_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.07%)</title><rect x="97.4186%" y="197" width="0.0712%" height="15" fill="rgb(221,213,14)" fg:x="16416" fg:w="12"/><text x="97.7115%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.33%)</title><rect x="97.9704%" y="181" width="0.3264%" height="15" fill="rgb(248,7,7)" fg:x="16509" fg:w="55"/><text x="98.2634%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.37%)</title><rect x="98.2968%" y="181" width="0.3739%" height="15" fill="rgb(225,227,34)" fg:x="16564" fg:w="63"/><text x="98.5898%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (325 instructions, 1.93%)</title><rect x="97.4898%" y="197" width="1.9287%" height="15" fill="rgb(233,69,34)" fg:x="16428" fg:w="325"/><text x="97.7827%" y="207.50"></text></g><g><title>all (16,851 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,59,22)" fg:x="0" fg:w="16851"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (16,851 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(239,103,39)" fg:x="0" fg:w="16851"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>