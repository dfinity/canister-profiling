<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="16697"><g><title>ic_cdk::setup (19 instructions, 0.11%)</title><rect x="0.0000%" y="197" width="0.1138%" height="15" fill="rgb(251,212,22)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="0.1138%" y="197" width="0.4552%" height="15" fill="rgb(251,136,2)" fg:x="19" fg:w="76"/><text x="0.4068%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="0.5690%" y="197" width="0.4552%" height="15" fill="rgb(229,23,53)" fg:x="95" fg:w="76"/><text x="0.8619%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="1.0241%" y="165" width="0.4552%" height="15" fill="rgb(232,22,36)" fg:x="171" fg:w="76"/><text x="1.3171%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.41%)</title><rect x="1.4793%" y="149" width="0.4132%" height="15" fill="rgb(220,54,19)" fg:x="247" fg:w="69"/><text x="1.7723%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.8926%" y="133" width="0.0240%" height="15" fill="rgb(238,56,42)" fg:x="316" fg:w="4"/><text x="2.1855%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 2.43%)</title><rect x="1.8926%" y="149" width="2.4316%" height="15" fill="rgb(210,79,48)" fg:x="316" fg:w="406"/><text x="2.1855%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.49%)</title><rect x="4.3241%" y="149" width="0.4911%" height="15" fill="rgb(222,61,34)" fg:x="722" fg:w="82"/><text x="4.6171%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.32%)</title><rect x="4.8152%" y="149" width="0.3234%" height="15" fill="rgb(207,156,27)" fg:x="804" fg:w="54"/><text x="5.1082%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.32%)</title><rect x="5.1386%" y="149" width="0.3234%" height="15" fill="rgb(229,212,37)" fg:x="858" fg:w="54"/><text x="5.4316%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.32%)</title><rect x="5.4621%" y="149" width="0.3234%" height="15" fill="rgb(252,82,21)" fg:x="912" fg:w="54"/><text x="5.7550%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.32%)</title><rect x="5.7855%" y="149" width="0.3234%" height="15" fill="rgb(208,15,6)" fg:x="966" fg:w="54"/><text x="6.0784%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.41%)</title><rect x="6.1089%" y="149" width="0.4132%" height="15" fill="rgb(214,95,1)" fg:x="1020" fg:w="69"/><text x="6.4019%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.39%)</title><rect x="6.5221%" y="149" width="0.3893%" height="15" fill="rgb(247,70,33)" fg:x="1089" fg:w="65"/><text x="6.8151%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="6.9114%" y="133" width="0.0240%" height="15" fill="rgb(245,188,37)" fg:x="1154" fg:w="4"/><text x="7.2044%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 2.43%)</title><rect x="6.9114%" y="149" width="2.4316%" height="15" fill="rgb(210,160,43)" fg:x="1154" fg:w="406"/><text x="7.2044%" y="159.50">c..</text></g><g><title>memcmp (16 instructions, 0.10%)</title><rect x="9.3430%" y="149" width="0.0958%" height="15" fill="rgb(234,119,15)" fg:x="1560" fg:w="16"/><text x="9.6360%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="9.4388%" y="133" width="0.4552%" height="15" fill="rgb(240,66,54)" fg:x="1576" fg:w="76"/><text x="9.7318%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.36%)</title><rect x="9.8940%" y="101" width="0.3593%" height="15" fill="rgb(253,55,37)" fg:x="1652" fg:w="60"/><text x="10.1870%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.51%)</title><rect x="9.8940%" y="117" width="0.5091%" height="15" fill="rgb(225,205,27)" fg:x="1652" fg:w="85"/><text x="10.1870%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="10.4031%" y="69" width="0.0539%" height="15" fill="rgb(237,106,7)" fg:x="1737" fg:w="9"/><text x="10.6960%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.18%)</title><rect x="10.4570%" y="53" width="0.1797%" height="15" fill="rgb(223,168,15)" fg:x="1746" fg:w="30"/><text x="10.7499%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.33%)</title><rect x="10.4570%" y="69" width="0.3294%" height="15" fill="rgb(216,53,41)" fg:x="1746" fg:w="55"/><text x="10.7499%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.71%)</title><rect x="10.4031%" y="85" width="0.7067%" height="15" fill="rgb(239,188,10)" fg:x="1737" fg:w="118"/><text x="10.6960%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 1.02%)</title><rect x="10.4031%" y="101" width="1.0241%" height="15" fill="rgb(235,82,48)" fg:x="1737" fg:w="171"/><text x="10.6960%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 1.05%)</title><rect x="10.4031%" y="117" width="1.0541%" height="15" fill="rgb(210,103,35)" fg:x="1737" fg:w="176"/><text x="10.6960%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 2.23%)</title><rect x="9.8940%" y="133" width="2.2279%" height="15" fill="rgb(214,207,25)" fg:x="1652" fg:w="372"/><text x="10.1870%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 3.53%)</title><rect x="9.4388%" y="149" width="3.5276%" height="15" fill="rgb(218,6,48)" fg:x="1576" fg:w="589"/><text x="9.7318%" y="159.50">all..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.49%)</title><rect x="12.9664%" y="149" width="0.4911%" height="15" fill="rgb(243,81,34)" fg:x="2165" fg:w="82"/><text x="13.2594%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.33%)</title><rect x="13.4575%" y="149" width="0.3294%" height="15" fill="rgb(234,223,27)" fg:x="2247" fg:w="55"/><text x="13.7505%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.38%)</title><rect x="13.7869%" y="149" width="0.3773%" height="15" fill="rgb(227,171,7)" fg:x="2302" fg:w="63"/><text x="14.0799%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.39%)</title><rect x="14.1642%" y="149" width="0.3893%" height="15" fill="rgb(224,177,11)" fg:x="2365" fg:w="65"/><text x="14.4572%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="14.5535%" y="117" width="0.0240%" height="15" fill="rgb(207,46,20)" fg:x="2430" fg:w="4"/><text x="14.8465%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 2.43%)</title><rect x="14.5535%" y="133" width="2.4316%" height="15" fill="rgb(205,71,19)" fg:x="2430" fg:w="406"/><text x="14.8465%" y="143.50">c..</text></g><g><title>memcmp (16 instructions, 0.10%)</title><rect x="16.9851%" y="133" width="0.0958%" height="15" fill="rgb(242,85,7)" fg:x="2836" fg:w="16"/><text x="17.2781%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="17.0809%" y="117" width="0.4552%" height="15" fill="rgb(226,63,50)" fg:x="2852" fg:w="76"/><text x="17.3739%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.36%)</title><rect x="17.5361%" y="85" width="0.3593%" height="15" fill="rgb(215,84,51)" fg:x="2928" fg:w="60"/><text x="17.8291%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.51%)</title><rect x="17.5361%" y="101" width="0.5091%" height="15" fill="rgb(240,149,51)" fg:x="2928" fg:w="85"/><text x="17.8291%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="18.0452%" y="53" width="0.0539%" height="15" fill="rgb(240,128,36)" fg:x="3013" fg:w="9"/><text x="18.3381%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.18%)</title><rect x="18.0991%" y="37" width="0.1797%" height="15" fill="rgb(253,164,36)" fg:x="3022" fg:w="30"/><text x="18.3920%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.33%)</title><rect x="18.0991%" y="53" width="0.3294%" height="15" fill="rgb(205,19,34)" fg:x="3022" fg:w="55"/><text x="18.3920%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.71%)</title><rect x="18.0452%" y="69" width="0.7067%" height="15" fill="rgb(211,107,26)" fg:x="3013" fg:w="118"/><text x="18.3381%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 1.02%)</title><rect x="18.0452%" y="85" width="1.0241%" height="15" fill="rgb(212,120,0)" fg:x="3013" fg:w="171"/><text x="18.3381%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 1.05%)</title><rect x="18.0452%" y="101" width="1.0541%" height="15" fill="rgb(206,155,15)" fg:x="3013" fg:w="176"/><text x="18.3381%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 2.23%)</title><rect x="17.5361%" y="117" width="2.2279%" height="15" fill="rgb(218,9,32)" fg:x="2928" fg:w="372"/><text x="17.8291%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 3.53%)</title><rect x="17.0809%" y="133" width="3.5276%" height="15" fill="rgb(244,98,12)" fg:x="2852" fg:w="589"/><text x="17.3739%" y="143.50">all..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.49%)</title><rect x="20.6085%" y="133" width="0.4911%" height="15" fill="rgb(209,8,18)" fg:x="3441" fg:w="82"/><text x="20.9015%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.33%)</title><rect x="21.0996%" y="133" width="0.3294%" height="15" fill="rgb(205,217,13)" fg:x="3523" fg:w="55"/><text x="21.3926%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.41%)</title><rect x="21.4290%" y="117" width="0.4132%" height="15" fill="rgb(207,203,4)" fg:x="3578" fg:w="69"/><text x="21.7220%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.55%)</title><rect x="21.8422%" y="117" width="0.5450%" height="15" fill="rgb(253,205,51)" fg:x="3647" fg:w="91"/><text x="22.1352%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.38%)</title><rect x="22.3873%" y="117" width="0.3773%" height="15" fill="rgb(210,0,49)" fg:x="3738" fg:w="63"/><text x="22.6802%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 1.69%)</title><rect x="21.4290%" y="133" width="1.6889%" height="15" fill="rgb(245,29,0)" fg:x="3578" fg:w="282"/><text x="21.7220%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="23.1179%" y="133" width="0.4552%" height="15" fill="rgb(234,63,6)" fg:x="3860" fg:w="76"/><text x="23.4109%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,709 instructions, 10.24%)</title><rect x="14.5535%" y="149" width="10.2354%" height="15" fill="rgb(212,12,14)" fg:x="2430" fg:w="1709"/><text x="14.8465%" y="159.50">binread::bin..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.38%)</title><rect x="24.7889%" y="149" width="0.3773%" height="15" fill="rgb(207,204,41)" fg:x="4139" fg:w="63"/><text x="25.0819%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.08%)</title><rect x="25.1662%" y="149" width="0.0779%" height="15" fill="rgb(247,228,21)" fg:x="4202" fg:w="13"/><text x="25.4592%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.08%)</title><rect x="25.2441%" y="149" width="0.0779%" height="15" fill="rgb(241,181,25)" fg:x="4215" fg:w="13"/><text x="25.5370%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.04%)</title><rect x="25.3219%" y="149" width="0.0419%" height="15" fill="rgb(226,48,23)" fg:x="4228" fg:w="7"/><text x="25.6149%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.09%)</title><rect x="25.3638%" y="149" width="0.0898%" height="15" fill="rgb(210,102,38)" fg:x="4235" fg:w="15"/><text x="25.6568%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="25.4537%" y="133" width="0.4552%" height="15" fill="rgb(243,128,12)" fg:x="4250" fg:w="76"/><text x="25.7466%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.95%)</title><rect x="25.4537%" y="149" width="0.9523%" height="15" fill="rgb(219,29,3)" fg:x="4250" fg:w="159"/><text x="25.7466%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="26.4059%" y="117" width="0.4552%" height="15" fill="rgb(239,108,31)" fg:x="4409" fg:w="76"/><text x="26.6989%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.66%)</title><rect x="26.4059%" y="133" width="0.6588%" height="15" fill="rgb(227,10,25)" fg:x="4409" fg:w="110"/><text x="26.6989%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 1.07%)</title><rect x="26.4059%" y="149" width="1.0661%" height="15" fill="rgb(211,118,17)" fg:x="4409" fg:w="178"/><text x="26.6989%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="27.4720%" y="149" width="0.4552%" height="15" fill="rgb(208,108,25)" fg:x="4587" fg:w="76"/><text x="27.7650%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.49%)</title><rect x="27.9272%" y="149" width="0.4851%" height="15" fill="rgb(231,91,43)" fg:x="4663" fg:w="81"/><text x="28.2201%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="28.4123%" y="149" width="0.4552%" height="15" fill="rgb(245,205,43)" fg:x="4744" fg:w="76"/><text x="28.7053%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="28.8675%" y="149" width="0.4552%" height="15" fill="rgb(238,70,42)" fg:x="4820" fg:w="76"/><text x="29.1604%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 instructions, 0.01%)</title><rect x="29.3226%" y="149" width="0.0120%" height="15" fill="rgb(243,74,25)" fg:x="4896" fg:w="2"/><text x="29.6156%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.49%)</title><rect x="29.3346%" y="149" width="0.4851%" height="15" fill="rgb(220,92,24)" fg:x="4898" fg:w="81"/><text x="29.6276%" y="159.50"></text></g><g><title>memcpy (380 instructions, 2.28%)</title><rect x="29.8197%" y="149" width="2.2759%" height="15" fill="rgb(217,89,28)" fg:x="4979" fg:w="380"/><text x="30.1127%" y="159.50">m..</text></g><g><title>memcpy (380 instructions, 2.28%)</title><rect x="32.0956%" y="149" width="2.2759%" height="15" fill="rgb(224,220,2)" fg:x="5359" fg:w="380"/><text x="32.3886%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new (6,407 instructions, 38.37%)</title><rect x="1.4793%" y="165" width="38.3722%" height="15" fill="rgb(211,70,37)" fg:x="247" fg:w="6407"/><text x="1.7723%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (335 instructions, 2.01%)</title><rect x="39.8515%" y="165" width="2.0063%" height="15" fill="rgb(219,33,12)" fg:x="6654" fg:w="335"/><text x="40.1444%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.07%)</title><rect x="41.8578%" y="149" width="0.0719%" height="15" fill="rgb(224,91,44)" fg:x="6989" fg:w="12"/><text x="42.1508%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.30%)</title><rect x="41.8578%" y="165" width="0.2995%" height="15" fill="rgb(243,103,1)" fg:x="6989" fg:w="50"/><text x="42.1508%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (71 instructions, 0.43%)</title><rect x="42.1573%" y="165" width="0.4252%" height="15" fill="rgb(239,229,11)" fg:x="7039" fg:w="71"/><text x="42.4502%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.07%)</title><rect x="42.5825%" y="149" width="0.0719%" height="15" fill="rgb(252,8,54)" fg:x="7110" fg:w="12"/><text x="42.8755%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.32%)</title><rect x="42.6544%" y="133" width="0.3174%" height="15" fill="rgb(227,156,14)" fg:x="7122" fg:w="53"/><text x="42.9473%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.53%)</title><rect x="42.9718%" y="133" width="0.5270%" height="15" fill="rgb(207,33,10)" fg:x="7175" fg:w="88"/><text x="43.2648%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.97%)</title><rect x="43.4988%" y="133" width="0.9702%" height="15" fill="rgb(207,168,41)" fg:x="7263" fg:w="162"/><text x="43.7918%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.23%)</title><rect x="42.6544%" y="149" width="3.2341%" height="15" fill="rgb(227,121,1)" fg:x="7122" fg:w="540"/><text x="42.9473%" y="159.50">co..</text></g><g><title>candid::types::internal::env_add (772 instructions, 4.62%)</title><rect x="42.5825%" y="165" width="4.6236%" height="15" fill="rgb(212,21,42)" fg:x="7110" fg:w="772"/><text x="42.8755%" y="175.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.33%)</title><rect x="47.2061%" y="149" width="0.3294%" height="15" fill="rgb(232,183,14)" fg:x="7882" fg:w="55"/><text x="47.4991%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (163 instructions, 0.98%)</title><rect x="47.2061%" y="165" width="0.9762%" height="15" fill="rgb(230,219,2)" fg:x="7882" fg:w="163"/><text x="47.4991%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.07%)</title><rect x="48.1823%" y="149" width="0.0719%" height="15" fill="rgb(230,176,29)" fg:x="8045" fg:w="12"/><text x="48.4753%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.32%)</title><rect x="48.2542%" y="133" width="0.3174%" height="15" fill="rgb(237,208,33)" fg:x="8057" fg:w="53"/><text x="48.5471%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.53%)</title><rect x="48.5716%" y="133" width="0.5270%" height="15" fill="rgb(219,152,44)" fg:x="8110" fg:w="88"/><text x="48.8646%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.97%)</title><rect x="49.0986%" y="133" width="0.9702%" height="15" fill="rgb(222,216,25)" fg:x="8198" fg:w="162"/><text x="49.3916%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.23%)</title><rect x="48.2542%" y="149" width="3.2341%" height="15" fill="rgb(216,21,30)" fg:x="8057" fg:w="540"/><text x="48.5471%" y="159.50">co..</text></g><g><title>memcmp (68 instructions, 0.41%)</title><rect x="51.4883%" y="149" width="0.4073%" height="15" fill="rgb(208,195,35)" fg:x="8597" fg:w="68"/><text x="51.7813%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.49%)</title><rect x="51.8956%" y="133" width="0.4851%" height="15" fill="rgb(236,111,38)" fg:x="8665" fg:w="81"/><text x="52.1885%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.65%)</title><rect x="51.8956%" y="149" width="0.6468%" height="15" fill="rgb(230,227,23)" fg:x="8665" fg:w="108"/><text x="52.1885%" y="159.50"></text></g><g><title>candid::types::internal::env_add (912 instructions, 5.46%)</title><rect x="48.1823%" y="165" width="5.4621%" height="15" fill="rgb(236,150,32)" fg:x="8045" fg:w="912"/><text x="48.4753%" y="175.50">candi..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.32%)</title><rect x="53.6444%" y="117" width="0.3174%" height="15" fill="rgb(238,92,44)" fg:x="8957" fg:w="53"/><text x="53.9373%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.47%)</title><rect x="53.6444%" y="133" width="0.4731%" height="15" fill="rgb(244,117,34)" fg:x="8957" fg:w="79"/><text x="53.9373%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 1.75%)</title><rect x="53.6444%" y="149" width="1.7488%" height="15" fill="rgb(242,89,5)" fg:x="8957" fg:w="292"/><text x="53.9373%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1089 (15 instructions, 0.09%)</title><rect x="55.3932%" y="149" width="0.0898%" height="15" fill="rgb(243,228,44)" fg:x="9249" fg:w="15"/><text x="55.6862%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.07%)</title><rect x="55.4830%" y="149" width="0.0659%" height="15" fill="rgb(231,123,4)" fg:x="9264" fg:w="11"/><text x="55.7760%" y="159.50"></text></g><g><title>candid::types::internal::env_id (522 instructions, 3.13%)</title><rect x="53.6444%" y="165" width="3.1263%" height="15" fill="rgb(213,143,50)" fg:x="8957" fg:w="522"/><text x="53.9373%" y="175.50">ca..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (34 instructions, 0.20%)</title><rect x="56.7707%" y="165" width="0.2036%" height="15" fill="rgb(223,61,27)" fg:x="9479" fg:w="34"/><text x="57.0636%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.74%)</title><rect x="56.9743%" y="149" width="0.7367%" height="15" fill="rgb(239,224,14)" fg:x="9513" fg:w="123"/><text x="57.2673%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.74%)</title><rect x="57.8727%" y="149" width="0.7367%" height="15" fill="rgb(209,170,42)" fg:x="9663" fg:w="123"/><text x="58.1656%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 1.80%)</title><rect x="56.9743%" y="165" width="1.7967%" height="15" fill="rgb(219,28,0)" fg:x="9513" fg:w="300"/><text x="57.2673%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.17%)</title><rect x="58.7710%" y="149" width="0.1677%" height="15" fill="rgb(211,211,18)" fg:x="9813" fg:w="28"/><text x="59.0640%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.58%)</title><rect x="58.7710%" y="165" width="0.5809%" height="15" fill="rgb(252,221,24)" fg:x="9813" fg:w="97"/><text x="59.0640%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.07%)</title><rect x="59.3520%" y="165" width="0.0659%" height="15" fill="rgb(221,76,15)" fg:x="9910" fg:w="11"/><text x="59.6449%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.07%)</title><rect x="59.4179%" y="165" width="0.0659%" height="15" fill="rgb(243,217,50)" fg:x="9921" fg:w="11"/><text x="59.7108%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.07%)</title><rect x="59.4837%" y="165" width="0.0659%" height="15" fill="rgb(244,37,11)" fg:x="9932" fg:w="11"/><text x="59.7767%" y="175.50"></text></g><g><title>memcpy (410 instructions, 2.46%)</title><rect x="59.5496%" y="165" width="2.4555%" height="15" fill="rgb(235,191,41)" fg:x="9943" fg:w="410"/><text x="59.8426%" y="175.50">m..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.07%)</title><rect x="62.0052%" y="133" width="0.0719%" height="15" fill="rgb(219,76,43)" fg:x="10353" fg:w="12"/><text x="62.2981%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 1.01%)</title><rect x="62.0770%" y="133" width="1.0062%" height="15" fill="rgb(224,131,6)" fg:x="10365" fg:w="168"/><text x="62.3700%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.38%)</title><rect x="63.0832%" y="101" width="0.3773%" height="15" fill="rgb(227,120,54)" fg:x="10533" fg:w="63"/><text x="63.3762%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (208 instructions, 1.25%)</title><rect x="63.0832%" y="117" width="1.2457%" height="15" fill="rgb(233,64,33)" fg:x="10533" fg:w="208"/><text x="63.3762%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (235 instructions, 1.41%)</title><rect x="63.0832%" y="133" width="1.4074%" height="15" fill="rgb(249,76,4)" fg:x="10533" fg:w="235"/><text x="63.3762%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.07%)</title><rect x="64.4906%" y="133" width="0.0659%" height="15" fill="rgb(241,54,27)" fg:x="10768" fg:w="11"/><text x="64.7836%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (468 instructions, 2.80%)</title><rect x="62.0052%" y="149" width="2.8029%" height="15" fill="rgb(208,97,21)" fg:x="10353" fg:w="468"/><text x="62.2981%" y="159.50">co..</text></g><g><title>candid::de::IDLDeserialize::done (502 instructions, 3.01%)</title><rect x="62.0052%" y="165" width="3.0065%" height="15" fill="rgb(209,192,44)" fg:x="10353" fg:w="502"/><text x="62.2981%" y="175.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.33%)</title><rect x="65.0117%" y="149" width="0.3294%" height="15" fill="rgb(253,38,3)" fg:x="10855" fg:w="55"/><text x="65.3046%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.38%)</title><rect x="65.3411%" y="149" width="0.3773%" height="15" fill="rgb(239,191,24)" fg:x="10910" fg:w="63"/><text x="65.6340%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (199 instructions, 1.19%)</title><rect x="65.0117%" y="165" width="1.1918%" height="15" fill="rgb(246,171,41)" fg:x="10855" fg:w="199"/><text x="65.3046%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,274 instructions, 67.52%)</title><rect x="1.0241%" y="181" width="67.5211%" height="15" fill="rgb(219,211,31)" fg:x="171" fg:w="11274"/><text x="1.3171%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.07%)</title><rect x="68.5452%" y="149" width="0.0719%" height="15" fill="rgb(207,163,39)" fg:x="11445" fg:w="12"/><text x="68.8382%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.33%)</title><rect x="68.6171%" y="133" width="0.3294%" height="15" fill="rgb(217,215,17)" fg:x="11457" fg:w="55"/><text x="68.9101%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 instructions, 0.49%)</title><rect x="68.6171%" y="149" width="0.4911%" height="15" fill="rgb(207,109,2)" fg:x="11457" fg:w="82"/><text x="68.9101%" y="159.50"></text></g><g><title>memset (136 instructions, 0.81%)</title><rect x="69.1082%" y="149" width="0.8145%" height="15" fill="rgb(211,81,10)" fg:x="11539" fg:w="136"/><text x="69.4012%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (388 instructions, 2.32%)</title><rect x="68.5452%" y="165" width="2.3238%" height="15" fill="rgb(219,117,46)" fg:x="11445" fg:w="388"/><text x="68.8382%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.19%)</title><rect x="70.8690%" y="149" width="0.1917%" height="15" fill="rgb(214,14,25)" fg:x="11833" fg:w="32"/><text x="71.1620%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.46%)</title><rect x="71.0607%" y="117" width="0.4552%" height="15" fill="rgb(240,202,33)" fg:x="11865" fg:w="76"/><text x="71.3536%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.66%)</title><rect x="71.0607%" y="133" width="0.6588%" height="15" fill="rgb(237,118,28)" fg:x="11865" fg:w="110"/><text x="71.3536%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 1.05%)</title><rect x="71.0607%" y="149" width="1.0481%" height="15" fill="rgb(244,57,4)" fg:x="11865" fg:w="175"/><text x="71.3536%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.07%)</title><rect x="72.1088%" y="149" width="0.0659%" height="15" fill="rgb(213,64,20)" fg:x="12040" fg:w="11"/><text x="72.4017%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.07%)</title><rect x="72.1746%" y="149" width="0.0659%" height="15" fill="rgb(223,157,51)" fg:x="12051" fg:w="11"/><text x="72.4676%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.18%)</title><rect x="72.2405%" y="149" width="0.1797%" height="15" fill="rgb(207,27,34)" fg:x="12062" fg:w="30"/><text x="72.5335%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.03%)</title><rect x="72.4202%" y="149" width="0.0299%" height="15" fill="rgb(249,139,40)" fg:x="12092" fg:w="5"/><text x="72.7132%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (470 instructions, 2.81%)</title><rect x="70.8690%" y="165" width="2.8149%" height="15" fill="rgb(211,220,52)" fg:x="11833" fg:w="470"/><text x="71.1620%" y="175.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="73.6839%" y="165" width="0.0299%" height="15" fill="rgb(218,185,49)" fg:x="12303" fg:w="5"/><text x="73.9769%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.33%)</title><rect x="73.7138%" y="165" width="0.3294%" height="15" fill="rgb(228,58,45)" fg:x="12308" fg:w="55"/><text x="74.0068%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (992 instructions, 5.94%)</title><rect x="68.5452%" y="181" width="5.9412%" height="15" fill="rgb(246,102,12)" fg:x="11445" fg:w="992"/><text x="68.8382%" y="191.50">ic_cdk..</text></g><g><title>hashmap::batch_get_2_::{{closure}} (16,091 instructions, 96.37%)</title><rect x="1.0241%" y="197" width="96.3706%" height="15" fill="rgb(237,43,13)" fg:x="171" fg:w="16091"/><text x="1.3171%" y="207.50">hashmap::batch_get_2_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.07%)</title><rect x="97.3947%" y="197" width="0.0719%" height="15" fill="rgb(207,229,35)" fg:x="16262" fg:w="12"/><text x="97.6877%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.33%)</title><rect x="97.9517%" y="181" width="0.3294%" height="15" fill="rgb(239,209,5)" fg:x="16355" fg:w="55"/><text x="98.2447%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.38%)</title><rect x="98.2811%" y="181" width="0.3773%" height="15" fill="rgb(245,64,38)" fg:x="16410" fg:w="63"/><text x="98.5741%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (325 instructions, 1.95%)</title><rect x="97.4666%" y="197" width="1.9465%" height="15" fill="rgb(221,181,10)" fg:x="16274" fg:w="325"/><text x="97.7596%" y="207.50"></text></g><g><title>all (16,697 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(253,131,37)" fg:x="0" fg:w="16697"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (16,697 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,143,45)" fg:x="0" fg:w="16697"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>