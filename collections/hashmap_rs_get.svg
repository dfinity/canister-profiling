<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_get</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="20008"><g><title>ic_cdk::setup (24 instructions, 0.12%)</title><rect x="0.0000%" y="197" width="0.1200%" height="15" fill="rgb(225,99,34)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.41%)</title><rect x="0.1200%" y="197" width="0.4098%" height="15" fill="rgb(227,106,6)" fg:x="24" fg:w="82"/><text x="0.4129%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.41%)</title><rect x="0.5298%" y="197" width="0.4098%" height="15" fill="rgb(209,106,14)" fg:x="106" fg:w="82"/><text x="0.8228%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.41%)</title><rect x="0.9396%" y="165" width="0.4098%" height="15" fill="rgb(215,55,24)" fg:x="188" fg:w="82"/><text x="1.2326%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.41%)</title><rect x="1.3495%" y="149" width="0.4098%" height="15" fill="rgb(234,171,8)" fg:x="270" fg:w="82"/><text x="1.6424%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="1.7593%" y="133" width="0.0300%" height="15" fill="rgb(248,45,9)" fg:x="352" fg:w="6"/><text x="2.0523%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.21%)</title><rect x="1.7593%" y="149" width="2.2141%" height="15" fill="rgb(218,67,43)" fg:x="352" fg:w="443"/><text x="2.0523%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.47%)</title><rect x="3.9734%" y="149" width="0.4748%" height="15" fill="rgb(211,80,52)" fg:x="795" fg:w="95"/><text x="4.2664%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.30%)</title><rect x="4.4482%" y="149" width="0.2999%" height="15" fill="rgb(213,212,28)" fg:x="890" fg:w="60"/><text x="4.7412%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.30%)</title><rect x="4.7481%" y="149" width="0.2999%" height="15" fill="rgb(227,146,27)" fg:x="950" fg:w="60"/><text x="5.0411%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.30%)</title><rect x="5.0480%" y="149" width="0.2999%" height="15" fill="rgb(236,154,6)" fg:x="1010" fg:w="60"/><text x="5.3409%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.30%)</title><rect x="5.3479%" y="149" width="0.2999%" height="15" fill="rgb(236,166,20)" fg:x="1070" fg:w="60"/><text x="5.6408%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.41%)</title><rect x="5.6477%" y="149" width="0.4098%" height="15" fill="rgb(225,135,28)" fg:x="1130" fg:w="82"/><text x="5.9407%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.35%)</title><rect x="6.0576%" y="149" width="0.3499%" height="15" fill="rgb(221,124,8)" fg:x="1212" fg:w="70"/><text x="6.3505%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="6.4074%" y="133" width="0.0300%" height="15" fill="rgb(248,214,13)" fg:x="1282" fg:w="6"/><text x="6.7004%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.21%)</title><rect x="6.4074%" y="149" width="2.2141%" height="15" fill="rgb(224,225,25)" fg:x="1282" fg:w="443"/><text x="6.7004%" y="159.50">c..</text></g><g><title>memcmp (19 instructions, 0.09%)</title><rect x="8.6216%" y="149" width="0.0950%" height="15" fill="rgb(248,135,0)" fg:x="1725" fg:w="19"/><text x="8.9145%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.41%)</title><rect x="8.7165%" y="133" width="0.4098%" height="15" fill="rgb(233,211,10)" fg:x="1744" fg:w="82"/><text x="9.0095%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.33%)</title><rect x="9.1263%" y="101" width="0.3349%" height="15" fill="rgb(225,228,46)" fg:x="1826" fg:w="67"/><text x="9.4193%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.48%)</title><rect x="9.1263%" y="117" width="0.4798%" height="15" fill="rgb(249,174,15)" fg:x="1826" fg:w="96"/><text x="9.4193%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.05%)</title><rect x="9.6062%" y="69" width="0.0550%" height="15" fill="rgb(252,111,39)" fg:x="1922" fg:w="11"/><text x="9.8991%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.17%)</title><rect x="9.6611%" y="53" width="0.1749%" height="15" fill="rgb(209,131,12)" fg:x="1933" fg:w="35"/><text x="9.9541%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.32%)</title><rect x="9.6611%" y="69" width="0.3199%" height="15" fill="rgb(247,165,30)" fg:x="1933" fg:w="64"/><text x="9.9541%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.72%)</title><rect x="9.6062%" y="85" width="0.7197%" height="15" fill="rgb(250,61,43)" fg:x="1922" fg:w="144"/><text x="9.8991%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 1.04%)</title><rect x="9.6062%" y="101" width="1.0446%" height="15" fill="rgb(242,115,3)" fg:x="1922" fg:w="209"/><text x="9.8991%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.09%)</title><rect x="9.6062%" y="117" width="1.0946%" height="15" fill="rgb(206,116,18)" fg:x="1922" fg:w="219"/><text x="9.8991%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 2.28%)</title><rect x="9.1263%" y="133" width="2.2841%" height="15" fill="rgb(210,182,32)" fg:x="1826" fg:w="457"/><text x="9.4193%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 3.38%)</title><rect x="8.7165%" y="149" width="3.3836%" height="15" fill="rgb(208,158,0)" fg:x="1744" fg:w="677"/><text x="9.0095%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.47%)</title><rect x="12.1002%" y="149" width="0.4748%" height="15" fill="rgb(217,86,46)" fg:x="2421" fg:w="95"/><text x="12.3931%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.30%)</title><rect x="12.5750%" y="149" width="0.2999%" height="15" fill="rgb(235,152,26)" fg:x="2516" fg:w="60"/><text x="12.8679%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.38%)</title><rect x="12.8749%" y="149" width="0.3798%" height="15" fill="rgb(219,181,44)" fg:x="2576" fg:w="76"/><text x="13.1678%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.35%)</title><rect x="13.2547%" y="149" width="0.3499%" height="15" fill="rgb(206,16,39)" fg:x="2652" fg:w="70"/><text x="13.5477%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="13.6046%" y="117" width="0.0300%" height="15" fill="rgb(239,156,50)" fg:x="2722" fg:w="6"/><text x="13.8975%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.21%)</title><rect x="13.6046%" y="133" width="2.2141%" height="15" fill="rgb(226,1,5)" fg:x="2722" fg:w="443"/><text x="13.8975%" y="143.50">c..</text></g><g><title>memcmp (19 instructions, 0.09%)</title><rect x="15.8187%" y="133" width="0.0950%" height="15" fill="rgb(228,127,1)" fg:x="3165" fg:w="19"/><text x="16.1116%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.41%)</title><rect x="15.9136%" y="117" width="0.4098%" height="15" fill="rgb(253,136,44)" fg:x="3184" fg:w="82"/><text x="16.2066%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.33%)</title><rect x="16.3235%" y="85" width="0.3349%" height="15" fill="rgb(252,204,46)" fg:x="3266" fg:w="67"/><text x="16.6164%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.48%)</title><rect x="16.3235%" y="101" width="0.4798%" height="15" fill="rgb(213,182,8)" fg:x="3266" fg:w="96"/><text x="16.6164%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.05%)</title><rect x="16.8033%" y="53" width="0.0550%" height="15" fill="rgb(219,111,52)" fg:x="3362" fg:w="11"/><text x="17.0962%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.17%)</title><rect x="16.8583%" y="37" width="0.1749%" height="15" fill="rgb(205,205,31)" fg:x="3373" fg:w="35"/><text x="17.1512%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.32%)</title><rect x="16.8583%" y="53" width="0.3199%" height="15" fill="rgb(244,219,22)" fg:x="3373" fg:w="64"/><text x="17.1512%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.72%)</title><rect x="16.8033%" y="69" width="0.7197%" height="15" fill="rgb(205,61,12)" fg:x="3362" fg:w="144"/><text x="17.0962%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 1.04%)</title><rect x="16.8033%" y="85" width="1.0446%" height="15" fill="rgb(223,167,34)" fg:x="3362" fg:w="209"/><text x="17.0962%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.09%)</title><rect x="16.8033%" y="101" width="1.0946%" height="15" fill="rgb(209,126,32)" fg:x="3362" fg:w="219"/><text x="17.0962%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 2.28%)</title><rect x="16.3235%" y="117" width="2.2841%" height="15" fill="rgb(227,44,11)" fg:x="3266" fg:w="457"/><text x="16.6164%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 3.38%)</title><rect x="15.9136%" y="133" width="3.3836%" height="15" fill="rgb(217,195,54)" fg:x="3184" fg:w="677"/><text x="16.2066%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.47%)</title><rect x="19.2973%" y="133" width="0.4748%" height="15" fill="rgb(247,48,6)" fg:x="3861" fg:w="95"/><text x="19.5902%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.30%)</title><rect x="19.7721%" y="133" width="0.2999%" height="15" fill="rgb(205,127,3)" fg:x="3956" fg:w="60"/><text x="20.0651%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.41%)</title><rect x="20.0720%" y="117" width="0.4098%" height="15" fill="rgb(252,113,31)" fg:x="4016" fg:w="82"/><text x="20.3649%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.47%)</title><rect x="20.4818%" y="117" width="0.4748%" height="15" fill="rgb(235,106,18)" fg:x="4098" fg:w="95"/><text x="20.7748%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.38%)</title><rect x="20.9566%" y="117" width="0.3798%" height="15" fill="rgb(238,113,47)" fg:x="4193" fg:w="76"/><text x="21.2496%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 1.65%)</title><rect x="20.0720%" y="133" width="1.6493%" height="15" fill="rgb(205,130,25)" fg:x="4016" fg:w="330"/><text x="20.3649%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.41%)</title><rect x="21.7213%" y="133" width="0.4098%" height="15" fill="rgb(247,196,8)" fg:x="4346" fg:w="82"/><text x="22.0143%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,952 instructions, 9.76%)</title><rect x="13.6046%" y="149" width="9.7561%" height="15" fill="rgb(220,135,6)" fg:x="2722" fg:w="1952"/><text x="13.8975%" y="159.50">binread::bin..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.38%)</title><rect x="23.3607%" y="149" width="0.3798%" height="15" fill="rgb(227,36,23)" fg:x="4674" fg:w="76"/><text x="23.6536%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.07%)</title><rect x="23.7405%" y="149" width="0.0750%" height="15" fill="rgb(216,90,39)" fg:x="4750" fg:w="15"/><text x="24.0335%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.07%)</title><rect x="23.8155%" y="149" width="0.0750%" height="15" fill="rgb(254,115,30)" fg:x="4765" fg:w="15"/><text x="24.1084%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.07%)</title><rect x="23.8904%" y="149" width="0.0750%" height="15" fill="rgb(223,167,39)" fg:x="4780" fg:w="15"/><text x="24.1834%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 instructions, 0.03%)</title><rect x="23.9654%" y="149" width="0.0300%" height="15" fill="rgb(248,67,22)" fg:x="4795" fg:w="6"/><text x="24.2584%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.41%)</title><rect x="23.9954%" y="133" width="0.4098%" height="15" fill="rgb(246,48,32)" fg:x="4801" fg:w="82"/><text x="24.2884%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.89%)</title><rect x="23.9954%" y="149" width="0.8896%" height="15" fill="rgb(247,103,38)" fg:x="4801" fg:w="178"/><text x="24.2884%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.41%)</title><rect x="24.8850%" y="117" width="0.4098%" height="15" fill="rgb(213,122,32)" fg:x="4979" fg:w="82"/><text x="25.1780%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.65%)</title><rect x="24.8850%" y="133" width="0.6497%" height="15" fill="rgb(229,27,29)" fg:x="4979" fg:w="130"/><text x="25.1780%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 1.07%)</title><rect x="24.8850%" y="149" width="1.0746%" height="15" fill="rgb(252,176,41)" fg:x="4979" fg:w="215"/><text x="25.1780%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.41%)</title><rect x="25.9596%" y="149" width="0.4098%" height="15" fill="rgb(248,132,39)" fg:x="5194" fg:w="82"/><text x="26.2526%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.44%)</title><rect x="26.3695%" y="149" width="0.4448%" height="15" fill="rgb(249,7,49)" fg:x="5276" fg:w="89"/><text x="26.6624%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.41%)</title><rect x="26.8143%" y="149" width="0.4098%" height="15" fill="rgb(252,99,44)" fg:x="5365" fg:w="82"/><text x="27.1072%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.41%)</title><rect x="27.2241%" y="149" width="0.4098%" height="15" fill="rgb(247,80,33)" fg:x="5447" fg:w="82"/><text x="27.5171%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="27.6339%" y="149" width="0.0200%" height="15" fill="rgb(254,103,7)" fg:x="5529" fg:w="4"/><text x="27.9269%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.44%)</title><rect x="27.6539%" y="149" width="0.4448%" height="15" fill="rgb(206,106,7)" fg:x="5533" fg:w="89"/><text x="27.9469%" y="159.50"></text></g><g><title>memcpy (392 instructions, 1.96%)</title><rect x="28.0988%" y="149" width="1.9592%" height="15" fill="rgb(208,24,23)" fg:x="5622" fg:w="392"/><text x="28.3917%" y="159.50"></text></g><g><title>memcpy (392 instructions, 1.96%)</title><rect x="30.0580%" y="149" width="1.9592%" height="15" fill="rgb(234,110,48)" fg:x="6014" fg:w="392"/><text x="30.3509%" y="159.50"></text></g><g><title>memcpy (504 instructions, 2.52%)</title><rect x="32.0172%" y="149" width="2.5190%" height="15" fill="rgb(208,159,14)" fg:x="6406" fg:w="504"/><text x="32.3102%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,854 instructions, 39.25%)</title><rect x="1.3495%" y="165" width="39.2543%" height="15" fill="rgb(207,48,25)" fg:x="270" fg:w="7854"/><text x="1.6424%" y="175.50">candid::de::IDLDeserialize::new_with_config</text></g><g><title>memcpy (344 instructions, 1.72%)</title><rect x="40.6038%" y="165" width="1.7193%" height="15" fill="rgb(234,154,14)" fg:x="8124" fg:w="344"/><text x="40.8967%" y="175.50"></text></g><g><title>candid::types::internal::find_type (23 instructions, 0.11%)</title><rect x="42.3231%" y="165" width="0.1150%" height="15" fill="rgb(243,10,47)" fg:x="8468" fg:w="23"/><text x="42.6160%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.41%)</title><rect x="42.4380%" y="165" width="0.4098%" height="15" fill="rgb(250,123,36)" fg:x="8491" fg:w="82"/><text x="42.7310%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.41%)</title><rect x="42.8479%" y="149" width="0.4098%" height="15" fill="rgb(206,50,54)" fg:x="8573" fg:w="82"/><text x="43.1408%" y="159.50"></text></g><g><title>candid::types::internal::env_add (165 instructions, 0.82%)</title><rect x="42.8479%" y="165" width="0.8247%" height="15" fill="rgb(221,29,27)" fg:x="8573" fg:w="165"/><text x="43.1408%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (219 instructions, 1.09%)</title><rect x="43.6725%" y="165" width="1.0946%" height="15" fill="rgb(241,21,22)" fg:x="8738" fg:w="219"/><text x="43.9655%" y="175.50"></text></g><g><title>memcmp (77 instructions, 0.38%)</title><rect x="44.7671%" y="149" width="0.3848%" height="15" fill="rgb(242,2,48)" fg:x="8957" fg:w="77"/><text x="45.0601%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.44%)</title><rect x="45.1519%" y="133" width="0.4448%" height="15" fill="rgb(226,46,52)" fg:x="9034" fg:w="89"/><text x="45.4449%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.66%)</title><rect x="45.1519%" y="149" width="0.6647%" height="15" fill="rgb(225,229,10)" fg:x="9034" fg:w="133"/><text x="45.4449%" y="159.50"></text></g><g><title>candid::types::internal::env_add (382 instructions, 1.91%)</title><rect x="44.7671%" y="165" width="1.9092%" height="15" fill="rgb(242,151,11)" fg:x="8957" fg:w="382"/><text x="45.0601%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (51 instructions, 0.25%)</title><rect x="46.6763%" y="149" width="0.2549%" height="15" fill="rgb(233,50,45)" fg:x="9339" fg:w="51"/><text x="46.9693%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="46.9312%" y="149" width="0.0650%" height="15" fill="rgb(213,33,36)" fg:x="9390" fg:w="13"/><text x="47.2242%" y="159.50"></text></g><g><title>candid::types::internal::env_id (198 instructions, 0.99%)</title><rect x="46.6763%" y="165" width="0.9896%" height="15" fill="rgb(252,126,51)" fg:x="9339" fg:w="198"/><text x="46.9693%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.24%)</title><rect x="47.6659%" y="165" width="0.2449%" height="15" fill="rgb(232,104,40)" fg:x="9537" fg:w="49"/><text x="47.9589%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.41%)</title><rect x="47.9108%" y="149" width="0.4148%" height="15" fill="rgb(229,16,50)" fg:x="9586" fg:w="83"/><text x="48.2038%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.11%)</title><rect x="48.5456%" y="133" width="0.1150%" height="15" fill="rgb(228,145,50)" fg:x="9713" fg:w="23"/><text x="48.8386%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.69%)</title><rect x="48.5456%" y="149" width="0.6897%" height="15" fill="rgb(233,144,40)" fg:x="9713" fg:w="138"/><text x="48.8386%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 instructions, 1.54%)</title><rect x="47.9108%" y="165" width="1.5444%" height="15" fill="rgb(248,161,50)" fg:x="9586" fg:w="309"/><text x="48.2038%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.17%)</title><rect x="49.4552%" y="149" width="0.1749%" height="15" fill="rgb(250,19,16)" fg:x="9895" fg:w="35"/><text x="49.7482%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1131 (34 instructions, 0.17%)</title><rect x="49.6301%" y="149" width="0.1699%" height="15" fill="rgb(236,109,53)" fg:x="9930" fg:w="34"/><text x="49.9231%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1131 (34 instructions, 0.17%)</title><rect x="49.8001%" y="149" width="0.1699%" height="15" fill="rgb(211,219,27)" fg:x="9964" fg:w="34"/><text x="50.0930%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.16%)</title><rect x="49.9700%" y="149" width="0.1649%" height="15" fill="rgb(249,113,8)" fg:x="9998" fg:w="33"/><text x="50.2630%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 1.25%)</title><rect x="49.4552%" y="165" width="1.2495%" height="15" fill="rgb(235,170,35)" fg:x="9895" fg:w="250"/><text x="49.7482%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="50.7047%" y="165" width="0.0650%" height="15" fill="rgb(242,40,14)" fg:x="10145" fg:w="13"/><text x="50.9977%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="50.7697%" y="165" width="0.0650%" height="15" fill="rgb(247,133,41)" fg:x="10158" fg:w="13"/><text x="51.0627%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="50.8347%" y="165" width="0.0650%" height="15" fill="rgb(209,88,36)" fg:x="10171" fg:w="13"/><text x="51.1276%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.21%)</title><rect x="50.8996%" y="165" width="0.2149%" height="15" fill="rgb(236,223,16)" fg:x="10184" fg:w="43"/><text x="51.1926%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="51.1146%" y="149" width="0.0350%" height="15" fill="rgb(225,190,16)" fg:x="10227" fg:w="7"/><text x="51.4075%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.13%)</title><rect x="51.1495%" y="133" width="0.1349%" height="15" fill="rgb(224,172,17)" fg:x="10234" fg:w="27"/><text x="51.4425%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.13%)</title><rect x="51.2845%" y="133" width="0.1349%" height="15" fill="rgb(227,226,1)" fg:x="10261" fg:w="27"/><text x="51.5775%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.98%)</title><rect x="51.1495%" y="149" width="0.9846%" height="15" fill="rgb(205,123,1)" fg:x="10234" fg:w="197"/><text x="51.4425%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.13%)</title><rect x="52.1341%" y="117" width="0.1349%" height="15" fill="rgb(233,44,12)" fg:x="10431" fg:w="27"/><text x="52.4271%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.71%)</title><rect x="52.1341%" y="133" width="0.7097%" height="15" fill="rgb(254,13,42)" fg:x="10431" fg:w="142"/><text x="52.4271%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 0.93%)</title><rect x="52.1341%" y="149" width="0.9296%" height="15" fill="rgb(207,215,50)" fg:x="10431" fg:w="186"/><text x="52.4271%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="53.0638%" y="149" width="0.0650%" height="15" fill="rgb(253,57,47)" fg:x="10617" fg:w="13"/><text x="53.3567%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="53.1287%" y="149" width="0.0350%" height="15" fill="rgb(236,65,47)" fg:x="10630" fg:w="7"/><text x="53.4217%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (470 instructions, 2.35%)</title><rect x="51.1146%" y="165" width="2.3491%" height="15" fill="rgb(233,204,25)" fg:x="10227" fg:w="470"/><text x="51.4075%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.13%)</title><rect x="53.4636%" y="149" width="0.1349%" height="15" fill="rgb(205,110,15)" fg:x="10697" fg:w="27"/><text x="53.7566%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.71%)</title><rect x="53.4636%" y="165" width="0.7097%" height="15" fill="rgb(252,72,17)" fg:x="10697" fg:w="142"/><text x="53.7566%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,220 instructions, 61.08%)</title><rect x="0.9396%" y="181" width="61.0756%" height="15" fill="rgb(251,221,50)" fg:x="188" fg:w="12220"/><text x="1.2326%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.30%)</title><rect x="62.0152%" y="133" width="0.2999%" height="15" fill="rgb(212,175,46)" fg:x="12408" fg:w="60"/><text x="62.3082%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 instructions, 0.52%)</title><rect x="62.0152%" y="149" width="0.5198%" height="15" fill="rgb(233,107,0)" fg:x="12408" fg:w="104"/><text x="62.3082%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.13%)</title><rect x="62.5350%" y="133" width="0.1349%" height="15" fill="rgb(254,0,41)" fg:x="12512" fg:w="27"/><text x="62.8280%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.13%)</title><rect x="62.6699%" y="133" width="0.1349%" height="15" fill="rgb(220,154,51)" fg:x="12539" fg:w="27"/><text x="62.9629%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.34%)</title><rect x="62.8049%" y="133" width="0.3399%" height="15" fill="rgb(246,27,18)" fg:x="12566" fg:w="68"/><text x="63.0978%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (244 instructions, 1.22%)</title><rect x="62.5350%" y="149" width="1.2195%" height="15" fill="rgb(211,208,34)" fg:x="12512" fg:w="244"/><text x="62.8280%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (472 instructions, 2.36%)</title><rect x="62.0152%" y="165" width="2.3591%" height="15" fill="rgb(221,80,40)" fg:x="12408" fg:w="472"/><text x="62.3082%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (518 instructions, 2.59%)</title><rect x="64.3743%" y="149" width="2.5890%" height="15" fill="rgb(229,199,31)" fg:x="12880" fg:w="518"/><text x="64.6672%" y="159.50">s..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.41%)</title><rect x="66.9632%" y="101" width="0.4098%" height="15" fill="rgb(239,17,26)" fg:x="13398" fg:w="82"/><text x="67.2562%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.65%)</title><rect x="66.9632%" y="117" width="0.6497%" height="15" fill="rgb(237,131,47)" fg:x="13398" fg:w="130"/><text x="67.2562%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 1.06%)</title><rect x="66.9632%" y="133" width="1.0596%" height="15" fill="rgb(235,22,52)" fg:x="13398" fg:w="212"/><text x="67.2562%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.07%)</title><rect x="68.0228%" y="133" width="0.0750%" height="15" fill="rgb(250,170,6)" fg:x="13610" fg:w="15"/><text x="68.3158%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.07%)</title><rect x="68.0978%" y="133" width="0.0750%" height="15" fill="rgb(233,25,50)" fg:x="13625" fg:w="15"/><text x="68.3907%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 2.14%)</title><rect x="66.9632%" y="149" width="2.1391%" height="15" fill="rgb(209,30,14)" fg:x="13398" fg:w="428"/><text x="67.2562%" y="159.50">c..</text></g><g><title>std::io::Write::write_all (516 instructions, 2.58%)</title><rect x="69.1024%" y="149" width="2.5790%" height="15" fill="rgb(206,81,39)" fg:x="13826" fg:w="516"/><text x="69.3953%" y="159.50">s..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.03%)</title><rect x="71.6813%" y="149" width="0.0350%" height="15" fill="rgb(221,7,2)" fg:x="14342" fg:w="7"/><text x="71.9743%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,566 instructions, 7.83%)</title><rect x="64.3743%" y="165" width="7.8269%" height="15" fill="rgb(251,82,1)" fg:x="12880" fg:w="1566"/><text x="64.6672%" y="175.50">candid::s..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="72.2011%" y="165" width="0.0350%" height="15" fill="rgb(221,105,29)" fg:x="14446" fg:w="7"/><text x="72.4941%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="72.2361%" y="165" width="0.0350%" height="15" fill="rgb(221,163,38)" fg:x="14453" fg:w="7"/><text x="72.5291%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.30%)</title><rect x="72.2711%" y="165" width="0.2999%" height="15" fill="rgb(219,202,20)" fg:x="14460" fg:w="60"/><text x="72.5641%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,716 instructions, 13.57%)</title><rect x="62.0152%" y="181" width="13.5746%" height="15" fill="rgb(224,66,45)" fg:x="12408" fg:w="2716"/><text x="62.3082%" y="191.50">ic_cdk::api::call..</text></g><g><title>hashmap::__canister_method_batch_get::{{closure}} (19,286 instructions, 96.39%)</title><rect x="0.9396%" y="197" width="96.3914%" height="15" fill="rgb(214,167,10)" fg:x="188" fg:w="19286"/><text x="1.2326%" y="207.50">hashmap::__canister_method_batch_get::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.07%)</title><rect x="97.3311%" y="197" width="0.0700%" height="15" fill="rgb(217,150,37)" fg:x="19474" fg:w="14"/><text x="97.6240%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.13%)</title><rect x="97.8509%" y="181" width="0.1349%" height="15" fill="rgb(232,11,10)" fg:x="19578" fg:w="27"/><text x="98.1438%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (69 instructions, 0.34%)</title><rect x="97.9858%" y="181" width="0.3449%" height="15" fill="rgb(207,13,8)" fg:x="19605" fg:w="69"/><text x="98.2788%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (68 instructions, 0.34%)</title><rect x="98.3307%" y="181" width="0.3399%" height="15" fill="rgb(238,36,52)" fg:x="19674" fg:w="68"/><text x="98.6236%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (375 instructions, 1.87%)</title><rect x="97.4060%" y="197" width="1.8743%" height="15" fill="rgb(230,74,12)" fg:x="19489" fg:w="375"/><text x="97.6990%" y="207.50"></text></g><g><title>all (20,008 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(206,5,16)" fg:x="0" fg:w="20008"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_get (20,008 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,115,0)" fg:x="0" fg:w="20008"/><text x="0.2930%" y="223.50">canister_update batch_get</text></g></svg></svg>