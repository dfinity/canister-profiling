<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="18643"><g><title>ic_cdk::setup (19 instructions, 0.10%)</title><rect x="0.0000%" y="197" width="0.1019%" height="15" fill="rgb(229,17,49)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="0.1019%" y="197" width="0.4077%" height="15" fill="rgb(212,93,26)" fg:x="19" fg:w="76"/><text x="0.3949%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="0.5096%" y="197" width="0.4077%" height="15" fill="rgb(249,66,54)" fg:x="95" fg:w="76"/><text x="0.8025%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="0.9172%" y="165" width="0.4077%" height="15" fill="rgb(212,138,5)" fg:x="171" fg:w="76"/><text x="1.2102%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.38%)</title><rect x="1.3249%" y="149" width="0.3808%" height="15" fill="rgb(229,88,9)" fg:x="247" fg:w="71"/><text x="1.6179%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.7057%" y="133" width="0.0215%" height="15" fill="rgb(209,69,40)" fg:x="318" fg:w="4"/><text x="1.9987%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.15%)</title><rect x="1.7057%" y="149" width="2.1456%" height="15" fill="rgb(253,15,14)" fg:x="318" fg:w="400"/><text x="1.9987%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.46%)</title><rect x="3.8513%" y="149" width="0.4559%" height="15" fill="rgb(208,29,34)" fg:x="718" fg:w="85"/><text x="4.1443%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.29%)</title><rect x="4.3072%" y="149" width="0.2897%" height="15" fill="rgb(245,69,2)" fg:x="803" fg:w="54"/><text x="4.6002%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.29%)</title><rect x="4.5969%" y="149" width="0.2897%" height="15" fill="rgb(254,23,24)" fg:x="857" fg:w="54"/><text x="4.8899%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.29%)</title><rect x="4.8866%" y="149" width="0.2897%" height="15" fill="rgb(213,106,39)" fg:x="911" fg:w="54"/><text x="5.1795%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.29%)</title><rect x="5.1762%" y="149" width="0.2897%" height="15" fill="rgb(221,87,7)" fg:x="965" fg:w="54"/><text x="5.4692%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.38%)</title><rect x="5.4659%" y="149" width="0.3808%" height="15" fill="rgb(236,91,7)" fg:x="1019" fg:w="71"/><text x="5.7588%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.35%)</title><rect x="5.8467%" y="149" width="0.3487%" height="15" fill="rgb(236,52,6)" fg:x="1090" fg:w="65"/><text x="6.1397%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="6.1954%" y="133" width="0.0215%" height="15" fill="rgb(229,42,52)" fg:x="1155" fg:w="4"/><text x="6.4883%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.15%)</title><rect x="6.1954%" y="149" width="2.1456%" height="15" fill="rgb(214,106,0)" fg:x="1155" fg:w="400"/><text x="6.4883%" y="159.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="8.3409%" y="149" width="0.0858%" height="15" fill="rgb(250,122,11)" fg:x="1555" fg:w="16"/><text x="8.6339%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="8.4268%" y="133" width="0.4077%" height="15" fill="rgb(226,131,4)" fg:x="1571" fg:w="76"/><text x="8.7197%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.32%)</title><rect x="8.8344%" y="101" width="0.3218%" height="15" fill="rgb(229,27,10)" fg:x="1647" fg:w="60"/><text x="9.1274%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.46%)</title><rect x="8.8344%" y="117" width="0.4559%" height="15" fill="rgb(236,30,19)" fg:x="1647" fg:w="85"/><text x="9.1274%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="9.2904%" y="69" width="0.0483%" height="15" fill="rgb(216,91,0)" fg:x="1732" fg:w="9"/><text x="9.5833%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.16%)</title><rect x="9.3386%" y="53" width="0.1609%" height="15" fill="rgb(208,107,51)" fg:x="1741" fg:w="30"/><text x="9.6316%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.30%)</title><rect x="9.3386%" y="69" width="0.2950%" height="15" fill="rgb(227,180,50)" fg:x="1741" fg:w="55"/><text x="9.6316%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.63%)</title><rect x="9.2904%" y="85" width="0.6329%" height="15" fill="rgb(245,86,24)" fg:x="1732" fg:w="118"/><text x="9.5833%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.92%)</title><rect x="9.2904%" y="101" width="0.9172%" height="15" fill="rgb(223,76,36)" fg:x="1732" fg:w="171"/><text x="9.5833%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.94%)</title><rect x="9.2904%" y="117" width="0.9441%" height="15" fill="rgb(236,224,45)" fg:x="1732" fg:w="176"/><text x="9.5833%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 2.00%)</title><rect x="8.8344%" y="133" width="1.9954%" height="15" fill="rgb(210,107,45)" fg:x="1647" fg:w="372"/><text x="9.1274%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 3.19%)</title><rect x="8.4268%" y="149" width="3.1862%" height="15" fill="rgb(243,61,54)" fg:x="1571" fg:w="594"/><text x="8.7197%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.46%)</title><rect x="11.6129%" y="149" width="0.4559%" height="15" fill="rgb(214,94,49)" fg:x="2165" fg:w="85"/><text x="11.9059%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.30%)</title><rect x="12.0689%" y="149" width="0.2950%" height="15" fill="rgb(248,105,52)" fg:x="2250" fg:w="55"/><text x="12.3618%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.35%)</title><rect x="12.3639%" y="149" width="0.3540%" height="15" fill="rgb(239,141,52)" fg:x="2305" fg:w="66"/><text x="12.6569%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.35%)</title><rect x="12.7179%" y="149" width="0.3487%" height="15" fill="rgb(211,114,10)" fg:x="2371" fg:w="65"/><text x="13.0109%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="13.0666%" y="117" width="0.0215%" height="15" fill="rgb(242,145,10)" fg:x="2436" fg:w="4"/><text x="13.3595%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.15%)</title><rect x="13.0666%" y="133" width="2.1456%" height="15" fill="rgb(253,130,11)" fg:x="2436" fg:w="400"/><text x="13.3595%" y="143.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="15.2121%" y="133" width="0.0858%" height="15" fill="rgb(226,150,15)" fg:x="2836" fg:w="16"/><text x="15.5051%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="15.2980%" y="117" width="0.4077%" height="15" fill="rgb(218,171,2)" fg:x="2852" fg:w="76"/><text x="15.5909%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.32%)</title><rect x="15.7056%" y="85" width="0.3218%" height="15" fill="rgb(208,57,23)" fg:x="2928" fg:w="60"/><text x="15.9986%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.46%)</title><rect x="15.7056%" y="101" width="0.4559%" height="15" fill="rgb(209,16,51)" fg:x="2928" fg:w="85"/><text x="15.9986%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="16.1616%" y="53" width="0.0483%" height="15" fill="rgb(254,208,35)" fg:x="3013" fg:w="9"/><text x="16.4545%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.16%)</title><rect x="16.2098%" y="37" width="0.1609%" height="15" fill="rgb(251,36,28)" fg:x="3022" fg:w="30"/><text x="16.5028%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.30%)</title><rect x="16.2098%" y="53" width="0.2950%" height="15" fill="rgb(246,184,45)" fg:x="3022" fg:w="55"/><text x="16.5028%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.63%)</title><rect x="16.1616%" y="69" width="0.6329%" height="15" fill="rgb(231,69,16)" fg:x="3013" fg:w="118"/><text x="16.4545%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.92%)</title><rect x="16.1616%" y="85" width="0.9172%" height="15" fill="rgb(228,204,5)" fg:x="3013" fg:w="171"/><text x="16.4545%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.94%)</title><rect x="16.1616%" y="101" width="0.9441%" height="15" fill="rgb(230,42,38)" fg:x="3013" fg:w="176"/><text x="16.4545%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 2.00%)</title><rect x="15.7056%" y="117" width="1.9954%" height="15" fill="rgb(208,31,24)" fg:x="2928" fg:w="372"/><text x="15.9986%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 3.19%)</title><rect x="15.2980%" y="133" width="3.1862%" height="15" fill="rgb(224,176,47)" fg:x="2852" fg:w="594"/><text x="15.5909%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.46%)</title><rect x="18.4841%" y="133" width="0.4559%" height="15" fill="rgb(252,153,16)" fg:x="3446" fg:w="85"/><text x="18.7771%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.30%)</title><rect x="18.9401%" y="133" width="0.2950%" height="15" fill="rgb(239,9,39)" fg:x="3531" fg:w="55"/><text x="19.2331%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.38%)</title><rect x="19.2351%" y="117" width="0.3808%" height="15" fill="rgb(227,22,5)" fg:x="3586" fg:w="71"/><text x="19.5281%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.49%)</title><rect x="19.6159%" y="117" width="0.4881%" height="15" fill="rgb(210,105,28)" fg:x="3657" fg:w="91"/><text x="19.9089%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.35%)</title><rect x="20.1041%" y="117" width="0.3540%" height="15" fill="rgb(221,142,16)" fg:x="3748" fg:w="66"/><text x="20.3970%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 1.54%)</title><rect x="19.2351%" y="133" width="1.5395%" height="15" fill="rgb(245,138,25)" fg:x="3586" fg:w="287"/><text x="19.5281%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="20.7746%" y="133" width="0.4077%" height="15" fill="rgb(207,145,11)" fg:x="3873" fg:w="76"/><text x="21.0675%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,714 instructions, 9.19%)</title><rect x="13.0666%" y="149" width="9.1938%" height="15" fill="rgb(220,107,18)" fg:x="2436" fg:w="1714"/><text x="13.3595%" y="159.50">binread::bi..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.35%)</title><rect x="22.2604%" y="149" width="0.3540%" height="15" fill="rgb(224,163,35)" fg:x="4150" fg:w="66"/><text x="22.5533%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.07%)</title><rect x="22.6144%" y="149" width="0.0697%" height="15" fill="rgb(254,84,47)" fg:x="4216" fg:w="13"/><text x="22.9074%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.07%)</title><rect x="22.6841%" y="149" width="0.0697%" height="15" fill="rgb(227,78,9)" fg:x="4229" fg:w="13"/><text x="22.9771%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.04%)</title><rect x="22.7538%" y="149" width="0.0375%" height="15" fill="rgb(253,155,41)" fg:x="4242" fg:w="7"/><text x="23.0468%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.08%)</title><rect x="22.7914%" y="149" width="0.0805%" height="15" fill="rgb(236,20,53)" fg:x="4249" fg:w="15"/><text x="23.0844%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="22.8719%" y="133" width="0.4077%" height="15" fill="rgb(250,186,32)" fg:x="4264" fg:w="76"/><text x="23.1648%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.85%)</title><rect x="22.8719%" y="149" width="0.8529%" height="15" fill="rgb(222,111,35)" fg:x="4264" fg:w="159"/><text x="23.1648%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="23.7247%" y="117" width="0.4077%" height="15" fill="rgb(210,53,8)" fg:x="4423" fg:w="76"/><text x="24.0177%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (115 instructions, 0.62%)</title><rect x="23.7247%" y="133" width="0.6169%" height="15" fill="rgb(218,128,8)" fg:x="4423" fg:w="115"/><text x="24.0177%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (183 instructions, 0.98%)</title><rect x="23.7247%" y="149" width="0.9816%" height="15" fill="rgb(206,68,3)" fg:x="4423" fg:w="183"/><text x="24.0177%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="24.7063%" y="149" width="0.4077%" height="15" fill="rgb(215,131,1)" fg:x="4606" fg:w="76"/><text x="24.9993%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.43%)</title><rect x="25.1140%" y="149" width="0.4345%" height="15" fill="rgb(223,159,22)" fg:x="4682" fg:w="81"/><text x="25.4070%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="25.5485%" y="149" width="0.4077%" height="15" fill="rgb(209,188,50)" fg:x="4763" fg:w="76"/><text x="25.8414%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="25.9561%" y="149" width="0.4077%" height="15" fill="rgb(248,163,5)" fg:x="4839" fg:w="76"/><text x="26.2491%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 instructions, 0.01%)</title><rect x="26.3638%" y="149" width="0.0107%" height="15" fill="rgb(230,147,6)" fg:x="4915" fg:w="2"/><text x="26.6568%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.43%)</title><rect x="26.3745%" y="149" width="0.4345%" height="15" fill="rgb(242,56,16)" fg:x="4917" fg:w="81"/><text x="26.6675%" y="159.50"></text></g><g><title>memcpy (381 instructions, 2.04%)</title><rect x="26.8090%" y="149" width="2.0437%" height="15" fill="rgb(227,207,24)" fg:x="4998" fg:w="381"/><text x="27.1020%" y="159.50"></text></g><g><title>memcpy (381 instructions, 2.04%)</title><rect x="28.8527%" y="149" width="2.0437%" height="15" fill="rgb(245,181,6)" fg:x="5379" fg:w="381"/><text x="29.1456%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,428 instructions, 34.48%)</title><rect x="1.3249%" y="165" width="34.4794%" height="15" fill="rgb(205,104,22)" fg:x="247" fg:w="6428"/><text x="1.6179%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (336 instructions, 1.80%)</title><rect x="35.8043%" y="165" width="1.8023%" height="15" fill="rgb(241,83,27)" fg:x="6675" fg:w="336"/><text x="36.0973%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="37.6066%" y="149" width="0.0268%" height="15" fill="rgb(227,178,29)" fg:x="7011" fg:w="5"/><text x="37.8996%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.21%)</title><rect x="37.6066%" y="165" width="0.2092%" height="15" fill="rgb(248,134,53)" fg:x="7011" fg:w="39"/><text x="37.8996%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="37.8158%" y="165" width="0.4077%" height="15" fill="rgb(213,70,4)" fg:x="7050" fg:w="76"/><text x="38.1088%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="38.2235%" y="149" width="0.0268%" height="15" fill="rgb(249,109,27)" fg:x="7126" fg:w="5"/><text x="38.5164%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.28%)</title><rect x="38.2503%" y="133" width="0.2843%" height="15" fill="rgb(241,222,49)" fg:x="7131" fg:w="53"/><text x="38.5433%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.48%)</title><rect x="38.5346%" y="133" width="0.4774%" height="15" fill="rgb(233,169,1)" fg:x="7184" fg:w="89"/><text x="38.8275%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.86%)</title><rect x="39.0120%" y="133" width="0.8636%" height="15" fill="rgb(221,28,21)" fg:x="7273" fg:w="161"/><text x="39.3049%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.90%)</title><rect x="38.2503%" y="149" width="2.8965%" height="15" fill="rgb(245,174,45)" fg:x="7131" fg:w="540"/><text x="38.5433%" y="159.50">co..</text></g><g><title>candid::types::internal::env_add (755 instructions, 4.05%)</title><rect x="38.2235%" y="165" width="4.0498%" height="15" fill="rgb(233,38,21)" fg:x="7126" fg:w="755"/><text x="38.5164%" y="175.50">can..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="42.2732%" y="165" width="0.4077%" height="15" fill="rgb(240,106,6)" fg:x="7881" fg:w="76"/><text x="42.5662%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="42.6809%" y="149" width="0.0268%" height="15" fill="rgb(243,175,49)" fg:x="7957" fg:w="5"/><text x="42.9739%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.28%)</title><rect x="42.7077%" y="133" width="0.2843%" height="15" fill="rgb(244,129,40)" fg:x="7962" fg:w="53"/><text x="43.0007%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.48%)</title><rect x="42.9920%" y="133" width="0.4774%" height="15" fill="rgb(234,51,18)" fg:x="8015" fg:w="89"/><text x="43.2850%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.86%)</title><rect x="43.4694%" y="133" width="0.8636%" height="15" fill="rgb(205,136,24)" fg:x="8104" fg:w="161"/><text x="43.7624%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.90%)</title><rect x="42.7077%" y="149" width="2.8965%" height="15" fill="rgb(239,33,16)" fg:x="7962" fg:w="540"/><text x="43.0007%" y="159.50">co..</text></g><g><title>memcmp (68 instructions, 0.36%)</title><rect x="45.6042%" y="149" width="0.3647%" height="15" fill="rgb(238,204,27)" fg:x="8502" fg:w="68"/><text x="45.8972%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.43%)</title><rect x="45.9690%" y="133" width="0.4345%" height="15" fill="rgb(210,59,36)" fg:x="8570" fg:w="81"/><text x="46.2620%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.58%)</title><rect x="45.9690%" y="149" width="0.5793%" height="15" fill="rgb(243,10,12)" fg:x="8570" fg:w="108"/><text x="46.2620%" y="159.50"></text></g><g><title>candid::types::internal::env_add (889 instructions, 4.77%)</title><rect x="42.6809%" y="165" width="4.7685%" height="15" fill="rgb(251,192,1)" fg:x="7957" fg:w="889"/><text x="42.9739%" y="175.50">cand..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.28%)</title><rect x="47.4494%" y="117" width="0.2843%" height="15" fill="rgb(224,80,39)" fg:x="8846" fg:w="53"/><text x="47.7424%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.42%)</title><rect x="47.4494%" y="133" width="0.4238%" height="15" fill="rgb(229,51,28)" fg:x="8846" fg:w="79"/><text x="47.7424%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 1.57%)</title><rect x="47.4494%" y="149" width="1.5663%" height="15" fill="rgb(228,161,3)" fg:x="8846" fg:w="292"/><text x="47.7424%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.176 (15 instructions, 0.08%)</title><rect x="49.0157%" y="149" width="0.0805%" height="15" fill="rgb(228,25,36)" fg:x="9138" fg:w="15"/><text x="49.3087%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="49.0962%" y="149" width="0.0590%" height="15" fill="rgb(252,227,15)" fg:x="9153" fg:w="11"/><text x="49.3891%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 2.56%)</title><rect x="47.4494%" y="165" width="2.5640%" height="15" fill="rgb(218,107,1)" fg:x="8846" fg:w="478"/><text x="47.7424%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.18%)</title><rect x="50.0134%" y="165" width="0.1770%" height="15" fill="rgb(249,48,48)" fg:x="9324" fg:w="33"/><text x="50.3064%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.66%)</title><rect x="50.1904%" y="149" width="0.6598%" height="15" fill="rgb(230,5,20)" fg:x="9357" fg:w="123"/><text x="50.4834%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.66%)</title><rect x="50.9950%" y="149" width="0.6598%" height="15" fill="rgb(251,126,44)" fg:x="9507" fg:w="123"/><text x="51.2880%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 1.61%)</title><rect x="50.1904%" y="165" width="1.6092%" height="15" fill="rgb(248,118,43)" fg:x="9357" fg:w="300"/><text x="50.4834%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.15%)</title><rect x="51.7996%" y="149" width="0.1502%" height="15" fill="rgb(251,6,52)" fg:x="9657" fg:w="28"/><text x="52.0926%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.52%)</title><rect x="51.7996%" y="165" width="0.5203%" height="15" fill="rgb(230,82,51)" fg:x="9657" fg:w="97"/><text x="52.0926%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="52.3199%" y="165" width="0.0590%" height="15" fill="rgb(238,64,39)" fg:x="9754" fg:w="11"/><text x="52.6129%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="52.3789%" y="165" width="0.0590%" height="15" fill="rgb(211,63,18)" fg:x="9765" fg:w="11"/><text x="52.6719%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="52.4379%" y="165" width="0.0590%" height="15" fill="rgb(227,18,36)" fg:x="9776" fg:w="11"/><text x="52.7309%" y="175.50"></text></g><g><title>memcpy (411 instructions, 2.20%)</title><rect x="52.4969%" y="165" width="2.2046%" height="15" fill="rgb(218,163,10)" fg:x="9787" fg:w="411"/><text x="52.7899%" y="175.50">m..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.06%)</title><rect x="54.7015%" y="133" width="0.0644%" height="15" fill="rgb(232,39,23)" fg:x="10198" fg:w="12"/><text x="54.9945%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.90%)</title><rect x="54.7659%" y="133" width="0.9011%" height="15" fill="rgb(217,126,26)" fg:x="10210" fg:w="168"/><text x="55.0588%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.51%)</title><rect x="55.6670%" y="101" width="0.5096%" height="15" fill="rgb(207,3,4)" fg:x="10378" fg:w="95"/><text x="55.9600%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (241 instructions, 1.29%)</title><rect x="55.6670%" y="117" width="1.2927%" height="15" fill="rgb(227,66,32)" fg:x="10378" fg:w="241"/><text x="55.9600%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (268 instructions, 1.44%)</title><rect x="55.6670%" y="133" width="1.4375%" height="15" fill="rgb(237,76,47)" fg:x="10378" fg:w="268"/><text x="55.9600%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="57.1045%" y="133" width="0.0590%" height="15" fill="rgb(248,169,47)" fg:x="10646" fg:w="11"/><text x="57.3975%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (501 instructions, 2.69%)</title><rect x="54.7015%" y="149" width="2.6873%" height="15" fill="rgb(238,38,19)" fg:x="10198" fg:w="501"/><text x="54.9945%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (535 instructions, 2.87%)</title><rect x="54.7015%" y="165" width="2.8697%" height="15" fill="rgb(226,110,51)" fg:x="10198" fg:w="535"/><text x="54.9945%" y="175.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.29%)</title><rect x="57.5712%" y="149" width="0.2897%" height="15" fill="rgb(206,133,46)" fg:x="10733" fg:w="54"/><text x="57.8642%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.51%)</title><rect x="57.8609%" y="149" width="0.5096%" height="15" fill="rgb(223,44,38)" fg:x="10787" fg:w="95"/><text x="58.1538%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (231 instructions, 1.24%)</title><rect x="57.5712%" y="165" width="1.2391%" height="15" fill="rgb(251,140,30)" fg:x="10733" fg:w="231"/><text x="57.8642%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,184 instructions, 59.99%)</title><rect x="0.9172%" y="181" width="59.9903%" height="15" fill="rgb(253,224,10)" fg:x="171" fg:w="11184"/><text x="1.2102%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="60.9076%" y="149" width="0.0268%" height="15" fill="rgb(222,188,11)" fg:x="11355" fg:w="5"/><text x="61.2005%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.29%)</title><rect x="60.9344%" y="117" width="0.2897%" height="15" fill="rgb(219,117,19)" fg:x="11360" fg:w="54"/><text x="61.2274%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.72%)</title><rect x="60.9344%" y="133" width="0.7241%" height="15" fill="rgb(240,176,11)" fg:x="11360" fg:w="135"/><text x="61.2274%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.87%)</title><rect x="60.9344%" y="149" width="0.8690%" height="15" fill="rgb(214,4,49)" fg:x="11360" fg:w="162"/><text x="61.2274%" y="159.50"></text></g><g><title>memset (136 instructions, 0.73%)</title><rect x="61.8034%" y="149" width="0.7295%" height="15" fill="rgb(236,216,16)" fg:x="11522" fg:w="136"/><text x="62.0963%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (462 instructions, 2.48%)</title><rect x="60.9076%" y="165" width="2.4781%" height="15" fill="rgb(210,70,7)" fg:x="11355" fg:w="462"/><text x="61.2005%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.17%)</title><rect x="63.3857%" y="149" width="0.1716%" height="15" fill="rgb(233,125,32)" fg:x="11817" fg:w="32"/><text x="63.6787%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="63.5574%" y="117" width="0.4077%" height="15" fill="rgb(244,76,18)" fg:x="11849" fg:w="76"/><text x="63.8503%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (115 instructions, 0.62%)</title><rect x="63.5574%" y="133" width="0.6169%" height="15" fill="rgb(221,39,8)" fg:x="11849" fg:w="115"/><text x="63.8503%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (180 instructions, 0.97%)</title><rect x="63.5574%" y="149" width="0.9655%" height="15" fill="rgb(245,165,48)" fg:x="11849" fg:w="180"/><text x="63.8503%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="64.5229%" y="149" width="0.0590%" height="15" fill="rgb(225,33,20)" fg:x="12029" fg:w="11"/><text x="64.8158%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="64.5819%" y="149" width="0.0590%" height="15" fill="rgb(246,61,16)" fg:x="12040" fg:w="11"/><text x="64.8748%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.16%)</title><rect x="64.6409%" y="149" width="0.1609%" height="15" fill="rgb(249,80,6)" fg:x="12051" fg:w="30"/><text x="64.9339%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.03%)</title><rect x="64.8018%" y="149" width="0.0268%" height="15" fill="rgb(224,1,26)" fg:x="12081" fg:w="5"/><text x="65.0948%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (476 instructions, 2.55%)</title><rect x="63.3857%" y="165" width="2.5532%" height="15" fill="rgb(218,141,12)" fg:x="11817" fg:w="476"/><text x="63.6787%" y="175.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="65.9390%" y="165" width="0.0268%" height="15" fill="rgb(234,75,25)" fg:x="12293" fg:w="5"/><text x="66.2319%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.30%)</title><rect x="65.9658%" y="165" width="0.2950%" height="15" fill="rgb(205,158,46)" fg:x="12298" fg:w="55"/><text x="66.2587%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,072 instructions, 5.75%)</title><rect x="60.9076%" y="181" width="5.7501%" height="15" fill="rgb(241,32,28)" fg:x="11355" fg:w="1072"/><text x="61.2005%" y="191.50">ic_cdk..</text></g><g><title>heap::batch_put_3_::{{closure}} (18,181 instructions, 97.52%)</title><rect x="0.9172%" y="197" width="97.5219%" height="15" fill="rgb(254,13,50)" fg:x="171" fg:w="18181"/><text x="1.2102%" y="207.50">heap::batch_put_3_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.06%)</title><rect x="98.4391%" y="197" width="0.0644%" height="15" fill="rgb(253,62,11)" fg:x="18352" fg:w="12"/><text x="98.7321%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.43%)</title><rect x="98.5035%" y="197" width="0.4345%" height="15" fill="rgb(232,33,27)" fg:x="18364" fg:w="81"/><text x="98.7964%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.54%)</title><rect x="98.9379%" y="197" width="0.5364%" height="15" fill="rgb(234,191,19)" fg:x="18445" fg:w="100"/><text x="99.2309%" y="207.50"></text></g><g><title>all (18,643 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,118,39)" fg:x="0" fg:w="18643"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (18,643 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,179,6)" fg:x="0" fg:w="18643"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>