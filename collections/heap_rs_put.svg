<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="18138"><g><title>ic_cdk::setup (19 instructions, 0.10%)</title><rect x="0.0000%" y="197" width="0.1048%" height="15" fill="rgb(228,210,37)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.42%)</title><rect x="0.1048%" y="197" width="0.4190%" height="15" fill="rgb(205,53,4)" fg:x="19" fg:w="76"/><text x="0.3977%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.42%)</title><rect x="0.5238%" y="197" width="0.4190%" height="15" fill="rgb(244,7,30)" fg:x="95" fg:w="76"/><text x="0.8167%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.42%)</title><rect x="0.9428%" y="165" width="0.4190%" height="15" fill="rgb(233,48,29)" fg:x="171" fg:w="76"/><text x="1.2357%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.39%)</title><rect x="1.3618%" y="149" width="0.3914%" height="15" fill="rgb(254,41,28)" fg:x="247" fg:w="71"/><text x="1.6548%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.7532%" y="133" width="0.0221%" height="15" fill="rgb(211,208,12)" fg:x="318" fg:w="4"/><text x="2.0462%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.21%)</title><rect x="1.7532%" y="149" width="2.2053%" height="15" fill="rgb(252,196,38)" fg:x="318" fg:w="400"/><text x="2.0462%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.47%)</title><rect x="3.9585%" y="149" width="0.4686%" height="15" fill="rgb(223,37,6)" fg:x="718" fg:w="85"/><text x="4.2515%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.30%)</title><rect x="4.4272%" y="149" width="0.2977%" height="15" fill="rgb(207,22,10)" fg:x="803" fg:w="54"/><text x="4.7201%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.30%)</title><rect x="4.7249%" y="149" width="0.2977%" height="15" fill="rgb(227,71,50)" fg:x="857" fg:w="54"/><text x="5.0179%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.30%)</title><rect x="5.0226%" y="149" width="0.2977%" height="15" fill="rgb(237,85,4)" fg:x="911" fg:w="54"/><text x="5.3156%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.30%)</title><rect x="5.3203%" y="149" width="0.2977%" height="15" fill="rgb(224,54,23)" fg:x="965" fg:w="54"/><text x="5.6133%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.39%)</title><rect x="5.6180%" y="149" width="0.3914%" height="15" fill="rgb(214,180,37)" fg:x="1019" fg:w="71"/><text x="5.9110%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.36%)</title><rect x="6.0095%" y="149" width="0.3584%" height="15" fill="rgb(218,4,31)" fg:x="1090" fg:w="65"/><text x="6.3025%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="6.3678%" y="133" width="0.0221%" height="15" fill="rgb(228,53,45)" fg:x="1155" fg:w="4"/><text x="6.6608%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.21%)</title><rect x="6.3678%" y="149" width="2.2053%" height="15" fill="rgb(236,172,53)" fg:x="1155" fg:w="400"/><text x="6.6608%" y="159.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="8.5732%" y="149" width="0.0882%" height="15" fill="rgb(229,121,28)" fg:x="1555" fg:w="16"/><text x="8.8661%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.42%)</title><rect x="8.6614%" y="133" width="0.4190%" height="15" fill="rgb(230,28,12)" fg:x="1571" fg:w="76"/><text x="8.9543%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.33%)</title><rect x="9.0804%" y="101" width="0.3308%" height="15" fill="rgb(237,25,22)" fg:x="1647" fg:w="60"/><text x="9.3734%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.47%)</title><rect x="9.0804%" y="117" width="0.4686%" height="15" fill="rgb(246,48,40)" fg:x="1647" fg:w="85"/><text x="9.3734%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="9.5490%" y="69" width="0.0496%" height="15" fill="rgb(216,8,33)" fg:x="1732" fg:w="9"/><text x="9.8420%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.17%)</title><rect x="9.5986%" y="53" width="0.1654%" height="15" fill="rgb(239,71,52)" fg:x="1741" fg:w="30"/><text x="9.8916%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.30%)</title><rect x="9.5986%" y="69" width="0.3032%" height="15" fill="rgb(218,22,2)" fg:x="1741" fg:w="55"/><text x="9.8916%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.65%)</title><rect x="9.5490%" y="85" width="0.6506%" height="15" fill="rgb(232,55,46)" fg:x="1732" fg:w="118"/><text x="9.8420%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.94%)</title><rect x="9.5490%" y="101" width="0.9428%" height="15" fill="rgb(221,135,18)" fg:x="1732" fg:w="171"/><text x="9.8420%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.97%)</title><rect x="9.5490%" y="117" width="0.9703%" height="15" fill="rgb(236,81,48)" fg:x="1732" fg:w="176"/><text x="9.8420%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 2.05%)</title><rect x="9.0804%" y="133" width="2.0509%" height="15" fill="rgb(247,190,34)" fg:x="1647" fg:w="372"/><text x="9.3734%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 3.27%)</title><rect x="8.6614%" y="149" width="3.2749%" height="15" fill="rgb(248,51,3)" fg:x="1571" fg:w="594"/><text x="8.9543%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.47%)</title><rect x="11.9363%" y="149" width="0.4686%" height="15" fill="rgb(220,1,26)" fg:x="2165" fg:w="85"/><text x="12.2292%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.30%)</title><rect x="12.4049%" y="149" width="0.3032%" height="15" fill="rgb(242,148,28)" fg:x="2250" fg:w="55"/><text x="12.6979%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.36%)</title><rect x="12.7081%" y="149" width="0.3639%" height="15" fill="rgb(218,171,48)" fg:x="2305" fg:w="66"/><text x="13.0011%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.36%)</title><rect x="13.0720%" y="149" width="0.3584%" height="15" fill="rgb(239,35,10)" fg:x="2371" fg:w="65"/><text x="13.3650%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="13.4304%" y="117" width="0.0221%" height="15" fill="rgb(213,32,0)" fg:x="2436" fg:w="4"/><text x="13.7233%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.21%)</title><rect x="13.4304%" y="133" width="2.2053%" height="15" fill="rgb(205,104,52)" fg:x="2436" fg:w="400"/><text x="13.7233%" y="143.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="15.6357%" y="133" width="0.0882%" height="15" fill="rgb(226,202,26)" fg:x="2836" fg:w="16"/><text x="15.9287%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.42%)</title><rect x="15.7239%" y="117" width="0.4190%" height="15" fill="rgb(237,160,44)" fg:x="2852" fg:w="76"/><text x="16.0169%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.33%)</title><rect x="16.1429%" y="85" width="0.3308%" height="15" fill="rgb(237,161,30)" fg:x="2928" fg:w="60"/><text x="16.4359%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.47%)</title><rect x="16.1429%" y="101" width="0.4686%" height="15" fill="rgb(205,62,48)" fg:x="2928" fg:w="85"/><text x="16.4359%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="16.6115%" y="53" width="0.0496%" height="15" fill="rgb(240,116,49)" fg:x="3013" fg:w="9"/><text x="16.9045%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.17%)</title><rect x="16.6612%" y="37" width="0.1654%" height="15" fill="rgb(243,97,52)" fg:x="3022" fg:w="30"/><text x="16.9541%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.30%)</title><rect x="16.6612%" y="53" width="0.3032%" height="15" fill="rgb(214,188,39)" fg:x="3022" fg:w="55"/><text x="16.9541%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.65%)</title><rect x="16.6115%" y="69" width="0.6506%" height="15" fill="rgb(252,92,27)" fg:x="3013" fg:w="118"/><text x="16.9045%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.94%)</title><rect x="16.6115%" y="85" width="0.9428%" height="15" fill="rgb(239,4,24)" fg:x="3013" fg:w="171"/><text x="16.9045%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.97%)</title><rect x="16.6115%" y="101" width="0.9703%" height="15" fill="rgb(251,86,29)" fg:x="3013" fg:w="176"/><text x="16.9045%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 2.05%)</title><rect x="16.1429%" y="117" width="2.0509%" height="15" fill="rgb(219,77,2)" fg:x="2928" fg:w="372"/><text x="16.4359%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 3.27%)</title><rect x="15.7239%" y="133" width="3.2749%" height="15" fill="rgb(228,181,4)" fg:x="2852" fg:w="594"/><text x="16.0169%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.47%)</title><rect x="18.9988%" y="133" width="0.4686%" height="15" fill="rgb(253,83,45)" fg:x="3446" fg:w="85"/><text x="19.2918%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.30%)</title><rect x="19.4674%" y="133" width="0.3032%" height="15" fill="rgb(240,29,17)" fg:x="3531" fg:w="55"/><text x="19.7604%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.39%)</title><rect x="19.7706%" y="117" width="0.3914%" height="15" fill="rgb(214,28,20)" fg:x="3586" fg:w="71"/><text x="20.0636%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.50%)</title><rect x="20.1621%" y="117" width="0.5017%" height="15" fill="rgb(241,216,41)" fg:x="3657" fg:w="91"/><text x="20.4551%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.36%)</title><rect x="20.6638%" y="117" width="0.3639%" height="15" fill="rgb(246,120,16)" fg:x="3748" fg:w="66"/><text x="20.9568%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 1.58%)</title><rect x="19.7706%" y="133" width="1.5823%" height="15" fill="rgb(249,194,39)" fg:x="3586" fg:w="287"/><text x="20.0636%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.42%)</title><rect x="21.3530%" y="133" width="0.4190%" height="15" fill="rgb(205,115,12)" fg:x="3873" fg:w="76"/><text x="21.6459%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,714 instructions, 9.45%)</title><rect x="13.4304%" y="149" width="9.4498%" height="15" fill="rgb(231,28,14)" fg:x="2436" fg:w="1714"/><text x="13.7233%" y="159.50">binread::bi..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.36%)</title><rect x="22.8801%" y="149" width="0.3639%" height="15" fill="rgb(222,20,51)" fg:x="4150" fg:w="66"/><text x="23.1731%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.07%)</title><rect x="23.2440%" y="149" width="0.0717%" height="15" fill="rgb(210,181,15)" fg:x="4216" fg:w="13"/><text x="23.5370%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.07%)</title><rect x="23.3157%" y="149" width="0.0717%" height="15" fill="rgb(229,51,6)" fg:x="4229" fg:w="13"/><text x="23.6087%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.04%)</title><rect x="23.3874%" y="149" width="0.0386%" height="15" fill="rgb(244,227,48)" fg:x="4242" fg:w="7"/><text x="23.6803%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.08%)</title><rect x="23.4260%" y="149" width="0.0827%" height="15" fill="rgb(252,109,22)" fg:x="4249" fg:w="15"/><text x="23.7189%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.42%)</title><rect x="23.5087%" y="133" width="0.4190%" height="15" fill="rgb(219,79,2)" fg:x="4264" fg:w="76"/><text x="23.8016%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.88%)</title><rect x="23.5087%" y="149" width="0.8766%" height="15" fill="rgb(221,8,18)" fg:x="4264" fg:w="159"/><text x="23.8016%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.42%)</title><rect x="24.3853%" y="117" width="0.4190%" height="15" fill="rgb(237,35,13)" fg:x="4423" fg:w="76"/><text x="24.6782%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.61%)</title><rect x="24.3853%" y="133" width="0.6120%" height="15" fill="rgb(227,213,35)" fg:x="4423" fg:w="111"/><text x="24.6782%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (179 instructions, 0.99%)</title><rect x="24.3853%" y="149" width="0.9869%" height="15" fill="rgb(216,104,53)" fg:x="4423" fg:w="179"/><text x="24.6782%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.42%)</title><rect x="25.3721%" y="149" width="0.4190%" height="15" fill="rgb(249,103,24)" fg:x="4602" fg:w="76"/><text x="25.6651%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.45%)</title><rect x="25.7912%" y="149" width="0.4466%" height="15" fill="rgb(238,211,38)" fg:x="4678" fg:w="81"/><text x="26.0841%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.42%)</title><rect x="26.2377%" y="149" width="0.4190%" height="15" fill="rgb(248,70,13)" fg:x="4759" fg:w="76"/><text x="26.5307%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.42%)</title><rect x="26.6567%" y="149" width="0.4190%" height="15" fill="rgb(236,9,21)" fg:x="4835" fg:w="76"/><text x="26.9497%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 instructions, 0.01%)</title><rect x="27.0758%" y="149" width="0.0110%" height="15" fill="rgb(242,76,31)" fg:x="4911" fg:w="2"/><text x="27.3687%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.45%)</title><rect x="27.0868%" y="149" width="0.4466%" height="15" fill="rgb(222,47,7)" fg:x="4913" fg:w="81"/><text x="27.3797%" y="159.50"></text></g><g><title>memcpy (381 instructions, 2.10%)</title><rect x="27.5334%" y="149" width="2.1006%" height="15" fill="rgb(241,89,41)" fg:x="4994" fg:w="381"/><text x="27.8263%" y="159.50">m..</text></g><g><title>memcpy (381 instructions, 2.10%)</title><rect x="29.6339%" y="149" width="2.1006%" height="15" fill="rgb(248,35,3)" fg:x="5375" fg:w="381"/><text x="29.9269%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new (6,424 instructions, 35.42%)</title><rect x="1.3618%" y="165" width="35.4174%" height="15" fill="rgb(243,174,49)" fg:x="247" fg:w="6424"/><text x="1.6548%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (336 instructions, 1.85%)</title><rect x="36.7791%" y="165" width="1.8525%" height="15" fill="rgb(208,167,48)" fg:x="6671" fg:w="336"/><text x="37.0721%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="38.6316%" y="149" width="0.0276%" height="15" fill="rgb(228,142,30)" fg:x="7007" fg:w="5"/><text x="38.9246%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.22%)</title><rect x="38.6316%" y="165" width="0.2150%" height="15" fill="rgb(249,179,20)" fg:x="7007" fg:w="39"/><text x="38.9246%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.42%)</title><rect x="38.8466%" y="165" width="0.4190%" height="15" fill="rgb(207,116,23)" fg:x="7046" fg:w="76"/><text x="39.1396%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="39.2656%" y="149" width="0.0276%" height="15" fill="rgb(208,161,26)" fg:x="7122" fg:w="5"/><text x="39.5586%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.29%)</title><rect x="39.2932%" y="133" width="0.2922%" height="15" fill="rgb(250,38,39)" fg:x="7127" fg:w="53"/><text x="39.5862%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.49%)</title><rect x="39.5854%" y="133" width="0.4907%" height="15" fill="rgb(218,97,52)" fg:x="7180" fg:w="89"/><text x="39.8784%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.89%)</title><rect x="40.0761%" y="133" width="0.8876%" height="15" fill="rgb(220,176,0)" fg:x="7269" fg:w="161"/><text x="40.3691%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.98%)</title><rect x="39.2932%" y="149" width="2.9772%" height="15" fill="rgb(249,167,8)" fg:x="7127" fg:w="540"/><text x="39.5862%" y="159.50">co..</text></g><g><title>candid::types::internal::env_add (755 instructions, 4.16%)</title><rect x="39.2656%" y="165" width="4.1625%" height="15" fill="rgb(248,107,27)" fg:x="7122" fg:w="755"/><text x="39.5586%" y="175.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.42%)</title><rect x="43.4282%" y="165" width="0.4190%" height="15" fill="rgb(253,43,23)" fg:x="7877" fg:w="76"/><text x="43.7211%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="43.8472%" y="149" width="0.0276%" height="15" fill="rgb(217,75,48)" fg:x="7953" fg:w="5"/><text x="44.1401%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.29%)</title><rect x="43.8747%" y="133" width="0.2922%" height="15" fill="rgb(220,66,52)" fg:x="7958" fg:w="53"/><text x="44.1677%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.49%)</title><rect x="44.1669%" y="133" width="0.4907%" height="15" fill="rgb(216,177,50)" fg:x="8011" fg:w="89"/><text x="44.4599%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.89%)</title><rect x="44.6576%" y="133" width="0.8876%" height="15" fill="rgb(249,217,41)" fg:x="8100" fg:w="161"/><text x="44.9506%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.98%)</title><rect x="43.8747%" y="149" width="2.9772%" height="15" fill="rgb(224,184,46)" fg:x="7958" fg:w="540"/><text x="44.1677%" y="159.50">co..</text></g><g><title>memcmp (68 instructions, 0.37%)</title><rect x="46.8519%" y="149" width="0.3749%" height="15" fill="rgb(215,199,48)" fg:x="8498" fg:w="68"/><text x="47.1449%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.45%)</title><rect x="47.2268%" y="133" width="0.4466%" height="15" fill="rgb(223,179,27)" fg:x="8566" fg:w="81"/><text x="47.5198%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.60%)</title><rect x="47.2268%" y="149" width="0.5954%" height="15" fill="rgb(246,164,1)" fg:x="8566" fg:w="108"/><text x="47.5198%" y="159.50"></text></g><g><title>candid::types::internal::env_add (889 instructions, 4.90%)</title><rect x="43.8472%" y="165" width="4.9013%" height="15" fill="rgb(239,80,53)" fg:x="7953" fg:w="889"/><text x="44.1401%" y="175.50">candi..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.29%)</title><rect x="48.7485%" y="117" width="0.2922%" height="15" fill="rgb(240,62,32)" fg:x="8842" fg:w="53"/><text x="49.0415%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.44%)</title><rect x="48.7485%" y="133" width="0.4355%" height="15" fill="rgb(214,56,33)" fg:x="8842" fg:w="79"/><text x="49.0415%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 1.61%)</title><rect x="48.7485%" y="149" width="1.6099%" height="15" fill="rgb(252,34,41)" fg:x="8842" fg:w="292"/><text x="49.0415%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.176 (15 instructions, 0.08%)</title><rect x="50.3584%" y="149" width="0.0827%" height="15" fill="rgb(210,56,16)" fg:x="9134" fg:w="15"/><text x="50.6513%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="50.4411%" y="149" width="0.0606%" height="15" fill="rgb(244,178,52)" fg:x="9149" fg:w="11"/><text x="50.7340%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 2.64%)</title><rect x="48.7485%" y="165" width="2.6354%" height="15" fill="rgb(220,218,4)" fg:x="8842" fg:w="478"/><text x="49.0415%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.18%)</title><rect x="51.3838%" y="165" width="0.1819%" height="15" fill="rgb(253,8,22)" fg:x="9320" fg:w="33"/><text x="51.6768%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.68%)</title><rect x="51.5658%" y="149" width="0.6781%" height="15" fill="rgb(243,61,26)" fg:x="9353" fg:w="123"/><text x="51.8587%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.68%)</title><rect x="52.3928%" y="149" width="0.6781%" height="15" fill="rgb(224,78,13)" fg:x="9503" fg:w="123"/><text x="52.6857%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 1.65%)</title><rect x="51.5658%" y="165" width="1.6540%" height="15" fill="rgb(211,81,3)" fg:x="9353" fg:w="300"/><text x="51.8587%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.15%)</title><rect x="53.2198%" y="149" width="0.1544%" height="15" fill="rgb(215,225,7)" fg:x="9653" fg:w="28"/><text x="53.5127%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.53%)</title><rect x="53.2198%" y="165" width="0.5348%" height="15" fill="rgb(212,147,33)" fg:x="9653" fg:w="97"/><text x="53.5127%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="53.7545%" y="165" width="0.0606%" height="15" fill="rgb(215,61,13)" fg:x="9750" fg:w="11"/><text x="54.0475%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="53.8152%" y="165" width="0.0606%" height="15" fill="rgb(239,168,19)" fg:x="9761" fg:w="11"/><text x="54.1082%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="53.8758%" y="165" width="0.0606%" height="15" fill="rgb(207,200,22)" fg:x="9772" fg:w="11"/><text x="54.1688%" y="175.50"></text></g><g><title>memcpy (411 instructions, 2.27%)</title><rect x="53.9365%" y="165" width="2.2660%" height="15" fill="rgb(234,172,22)" fg:x="9783" fg:w="411"/><text x="54.2295%" y="175.50">m..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.07%)</title><rect x="56.2024%" y="133" width="0.0662%" height="15" fill="rgb(253,82,3)" fg:x="10194" fg:w="12"/><text x="56.4954%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.93%)</title><rect x="56.2686%" y="133" width="0.9262%" height="15" fill="rgb(208,179,9)" fg:x="10206" fg:w="168"/><text x="56.5616%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.52%)</title><rect x="57.1948%" y="101" width="0.5238%" height="15" fill="rgb(213,162,12)" fg:x="10374" fg:w="95"/><text x="57.4878%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (241 instructions, 1.33%)</title><rect x="57.1948%" y="117" width="1.3287%" height="15" fill="rgb(228,22,16)" fg:x="10374" fg:w="241"/><text x="57.4878%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (268 instructions, 1.48%)</title><rect x="57.1948%" y="133" width="1.4776%" height="15" fill="rgb(225,68,17)" fg:x="10374" fg:w="268"/><text x="57.4878%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="58.6724%" y="133" width="0.0606%" height="15" fill="rgb(211,24,44)" fg:x="10642" fg:w="11"/><text x="58.9654%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (501 instructions, 2.76%)</title><rect x="56.2024%" y="149" width="2.7622%" height="15" fill="rgb(208,138,0)" fg:x="10194" fg:w="501"/><text x="56.4954%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (535 instructions, 2.95%)</title><rect x="56.2024%" y="165" width="2.9496%" height="15" fill="rgb(209,107,4)" fg:x="10194" fg:w="535"/><text x="56.4954%" y="175.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.30%)</title><rect x="59.1521%" y="149" width="0.2977%" height="15" fill="rgb(253,29,1)" fg:x="10729" fg:w="54"/><text x="59.4450%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.52%)</title><rect x="59.4498%" y="149" width="0.5238%" height="15" fill="rgb(234,145,39)" fg:x="10783" fg:w="95"/><text x="59.7427%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (231 instructions, 1.27%)</title><rect x="59.1521%" y="165" width="1.2736%" height="15" fill="rgb(215,46,44)" fg:x="10729" fg:w="231"/><text x="59.4450%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,180 instructions, 61.64%)</title><rect x="0.9428%" y="181" width="61.6385%" height="15" fill="rgb(223,19,9)" fg:x="171" fg:w="11180"/><text x="1.2357%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="62.5813%" y="149" width="0.0276%" height="15" fill="rgb(244,122,18)" fg:x="11351" fg:w="5"/><text x="62.8743%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.30%)</title><rect x="62.6089%" y="117" width="0.2977%" height="15" fill="rgb(228,109,41)" fg:x="11356" fg:w="54"/><text x="62.9019%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.74%)</title><rect x="62.6089%" y="133" width="0.7443%" height="15" fill="rgb(230,138,6)" fg:x="11356" fg:w="135"/><text x="62.9019%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.89%)</title><rect x="62.6089%" y="149" width="0.8932%" height="15" fill="rgb(252,175,44)" fg:x="11356" fg:w="162"/><text x="62.9019%" y="159.50"></text></g><g><title>memset (136 instructions, 0.75%)</title><rect x="63.5020%" y="149" width="0.7498%" height="15" fill="rgb(214,102,40)" fg:x="11518" fg:w="136"/><text x="63.7950%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (462 instructions, 2.55%)</title><rect x="62.5813%" y="165" width="2.5471%" height="15" fill="rgb(207,60,48)" fg:x="11351" fg:w="462"/><text x="62.8743%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.18%)</title><rect x="65.1285%" y="149" width="0.1764%" height="15" fill="rgb(233,169,36)" fg:x="11813" fg:w="32"/><text x="65.4214%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.42%)</title><rect x="65.3049%" y="117" width="0.4190%" height="15" fill="rgb(213,148,35)" fg:x="11845" fg:w="76"/><text x="65.5979%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.61%)</title><rect x="65.3049%" y="133" width="0.6120%" height="15" fill="rgb(247,20,37)" fg:x="11845" fg:w="111"/><text x="65.5979%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (176 instructions, 0.97%)</title><rect x="65.3049%" y="149" width="0.9703%" height="15" fill="rgb(223,64,9)" fg:x="11845" fg:w="176"/><text x="65.5979%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="66.2752%" y="149" width="0.0606%" height="15" fill="rgb(238,10,14)" fg:x="12021" fg:w="11"/><text x="66.5682%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="66.3359%" y="149" width="0.0606%" height="15" fill="rgb(229,51,46)" fg:x="12032" fg:w="11"/><text x="66.6288%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.17%)</title><rect x="66.3965%" y="149" width="0.1654%" height="15" fill="rgb(213,153,27)" fg:x="12043" fg:w="30"/><text x="66.6895%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.03%)</title><rect x="66.5619%" y="149" width="0.0276%" height="15" fill="rgb(229,198,20)" fg:x="12073" fg:w="5"/><text x="66.8549%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (472 instructions, 2.60%)</title><rect x="65.1285%" y="165" width="2.6023%" height="15" fill="rgb(213,78,42)" fg:x="11813" fg:w="472"/><text x="65.4214%" y="175.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="67.7307%" y="165" width="0.0276%" height="15" fill="rgb(209,22,34)" fg:x="12285" fg:w="5"/><text x="68.0237%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.30%)</title><rect x="67.7583%" y="165" width="0.3032%" height="15" fill="rgb(224,216,28)" fg:x="12290" fg:w="55"/><text x="68.0513%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,068 instructions, 5.89%)</title><rect x="62.5813%" y="181" width="5.8882%" height="15" fill="rgb(244,122,20)" fg:x="11351" fg:w="1068"/><text x="62.8743%" y="191.50">ic_cdk..</text></g><g><title>heap::batch_put_3_::{{closure}} (17,676 instructions, 97.45%)</title><rect x="0.9428%" y="197" width="97.4529%" height="15" fill="rgb(205,17,3)" fg:x="171" fg:w="17676"/><text x="1.2357%" y="207.50">heap::batch_put_3_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.07%)</title><rect x="98.3956%" y="197" width="0.0662%" height="15" fill="rgb(234,187,17)" fg:x="17847" fg:w="12"/><text x="98.6886%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.45%)</title><rect x="98.4618%" y="197" width="0.4466%" height="15" fill="rgb(233,165,17)" fg:x="17859" fg:w="81"/><text x="98.7548%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.55%)</title><rect x="98.9084%" y="197" width="0.5513%" height="15" fill="rgb(236,100,39)" fg:x="17940" fg:w="100"/><text x="99.2013%" y="207.50"></text></g><g><title>all (18,138 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(225,153,28)" fg:x="0" fg:w="18138"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (18,138 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(225,140,3)" fg:x="0" fg:w="18138"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>