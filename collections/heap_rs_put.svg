<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="310" onload="init(evt)" viewBox="0 0 1024 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="293.00"> </text><svg id="frames" x="10" width="1004" total_samples="21870"><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.37%)</title><rect x="0.0000%" y="229" width="0.3749%" height="15" fill="rgb(212,57,13)" fg:x="0" fg:w="82"/><text x="0.2930%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.37%)</title><rect x="0.3749%" y="229" width="0.3749%" height="15" fill="rgb(234,5,16)" fg:x="82" fg:w="82"/><text x="0.6679%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.37%)</title><rect x="0.7499%" y="181" width="0.3749%" height="15" fill="rgb(205,24,53)" fg:x="164" fg:w="82"/><text x="1.0429%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (1,139 instructions, 5.21%)</title><rect x="0.7499%" y="197" width="5.2080%" height="15" fill="rgb(219,49,19)" fg:x="164" fg:w="1139"/><text x="1.0429%" y="207.50">ic_cd..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.23%)</title><rect x="5.9579%" y="165" width="0.2332%" height="15" fill="rgb(223,119,23)" fg:x="1303" fg:w="51"/><text x="6.2509%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="6.1911%" y="149" width="0.0274%" height="15" fill="rgb(252,71,49)" fg:x="1354" fg:w="6"/><text x="6.4841%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 2.00%)</title><rect x="6.1911%" y="165" width="1.9982%" height="15" fill="rgb(251,218,10)" fg:x="1354" fg:w="437"/><text x="6.4841%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.29%)</title><rect x="8.1893%" y="165" width="0.2926%" height="15" fill="rgb(210,145,52)" fg:x="1791" fg:w="64"/><text x="8.4823%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.35%)</title><rect x="8.4819%" y="165" width="0.3475%" height="15" fill="rgb(224,190,53)" fg:x="1855" fg:w="76"/><text x="8.7749%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.35%)</title><rect x="8.8294%" y="165" width="0.3475%" height="15" fill="rgb(213,213,23)" fg:x="1931" fg:w="76"/><text x="9.1224%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.35%)</title><rect x="9.1770%" y="165" width="0.3475%" height="15" fill="rgb(238,150,54)" fg:x="2007" fg:w="76"/><text x="9.4699%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.35%)</title><rect x="9.5245%" y="165" width="0.3475%" height="15" fill="rgb(248,222,31)" fg:x="2083" fg:w="76"/><text x="9.8174%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.23%)</title><rect x="9.8720%" y="165" width="0.2332%" height="15" fill="rgb(209,106,37)" fg:x="2159" fg:w="51"/><text x="10.1649%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.43%)</title><rect x="10.1052%" y="165" width="0.4344%" height="15" fill="rgb(239,95,29)" fg:x="2210" fg:w="95"/><text x="10.3981%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="10.5396%" y="149" width="0.0274%" height="15" fill="rgb(234,193,35)" fg:x="2305" fg:w="6"/><text x="10.8325%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 2.00%)</title><rect x="10.5396%" y="165" width="1.9982%" height="15" fill="rgb(215,200,51)" fg:x="2305" fg:w="437"/><text x="10.8325%" y="175.50"></text></g><g><title>memcmp (19 instructions, 0.09%)</title><rect x="12.5377%" y="165" width="0.0869%" height="15" fill="rgb(221,123,37)" fg:x="2742" fg:w="19"/><text x="12.8307%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.37%)</title><rect x="12.6246%" y="133" width="0.3749%" height="15" fill="rgb(227,60,31)" fg:x="2761" fg:w="82"/><text x="12.9176%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.31%)</title><rect x="12.9995%" y="101" width="0.3064%" height="15" fill="rgb(206,189,20)" fg:x="2843" fg:w="67"/><text x="13.2925%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.44%)</title><rect x="12.9995%" y="117" width="0.4390%" height="15" fill="rgb(216,196,53)" fg:x="2843" fg:w="96"/><text x="13.2925%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.05%)</title><rect x="13.4385%" y="69" width="0.0503%" height="15" fill="rgb(212,64,42)" fg:x="2939" fg:w="11"/><text x="13.7315%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.16%)</title><rect x="13.4888%" y="53" width="0.1600%" height="15" fill="rgb(246,3,50)" fg:x="2950" fg:w="35"/><text x="13.7818%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.29%)</title><rect x="13.4888%" y="69" width="0.2926%" height="15" fill="rgb(244,117,15)" fg:x="2950" fg:w="64"/><text x="13.7818%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.66%)</title><rect x="13.4385%" y="85" width="0.6584%" height="15" fill="rgb(251,139,19)" fg:x="2939" fg:w="144"/><text x="13.7315%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.96%)</title><rect x="13.4385%" y="101" width="0.9602%" height="15" fill="rgb(251,120,39)" fg:x="2939" fg:w="210"/><text x="13.7315%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 1.01%)</title><rect x="13.4385%" y="117" width="1.0059%" height="15" fill="rgb(206,208,28)" fg:x="2939" fg:w="220"/><text x="13.7315%" y="127.50"></text></g><g><title>core::fmt::write (449 instructions, 2.05%)</title><rect x="12.9995%" y="133" width="2.0530%" height="15" fill="rgb(219,133,36)" fg:x="2843" fg:w="449"/><text x="13.2925%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 3.05%)</title><rect x="12.6246%" y="149" width="3.0498%" height="15" fill="rgb(215,226,25)" fg:x="2761" fg:w="667"/><text x="12.9176%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.29%)</title><rect x="15.6744%" y="149" width="0.2926%" height="15" fill="rgb(206,167,40)" fg:x="3428" fg:w="64"/><text x="15.9674%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.28%)</title><rect x="15.9671%" y="149" width="0.2789%" height="15" fill="rgb(210,14,14)" fg:x="3492" fg:w="61"/><text x="16.2600%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 4.13%)</title><rect x="12.6246%" y="165" width="4.1289%" height="15" fill="rgb(247,103,8)" fg:x="2761" fg:w="903"/><text x="12.9176%" y="175.50">bin..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 instructions, 0.12%)</title><rect x="16.7535%" y="165" width="0.1235%" height="15" fill="rgb(210,134,16)" fg:x="3664" fg:w="27"/><text x="17.0465%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.21%)</title><rect x="16.8770%" y="165" width="0.2103%" height="15" fill="rgb(247,126,28)" fg:x="3691" fg:w="46"/><text x="17.1700%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.43%)</title><rect x="17.0873%" y="165" width="0.4344%" height="15" fill="rgb(254,114,50)" fg:x="3737" fg:w="95"/><text x="17.3803%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="17.5217%" y="133" width="0.0274%" height="15" fill="rgb(232,89,44)" fg:x="3832" fg:w="6"/><text x="17.8147%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 2.00%)</title><rect x="17.5217%" y="149" width="1.9982%" height="15" fill="rgb(231,121,12)" fg:x="3832" fg:w="437"/><text x="17.8147%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.09%)</title><rect x="19.5199%" y="149" width="0.0869%" height="15" fill="rgb(237,30,49)" fg:x="4269" fg:w="19"/><text x="19.8129%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.37%)</title><rect x="19.6068%" y="117" width="0.3749%" height="15" fill="rgb(249,112,34)" fg:x="4288" fg:w="82"/><text x="19.8997%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.31%)</title><rect x="19.9817%" y="85" width="0.3064%" height="15" fill="rgb(224,200,35)" fg:x="4370" fg:w="67"/><text x="20.2747%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.44%)</title><rect x="19.9817%" y="101" width="0.4390%" height="15" fill="rgb(215,79,35)" fg:x="4370" fg:w="96"/><text x="20.2747%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.05%)</title><rect x="20.4207%" y="53" width="0.0503%" height="15" fill="rgb(227,157,7)" fg:x="4466" fg:w="11"/><text x="20.7136%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.16%)</title><rect x="20.4710%" y="37" width="0.1600%" height="15" fill="rgb(254,130,45)" fg:x="4477" fg:w="35"/><text x="20.7639%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.29%)</title><rect x="20.4710%" y="53" width="0.2926%" height="15" fill="rgb(227,95,27)" fg:x="4477" fg:w="64"/><text x="20.7639%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.66%)</title><rect x="20.4207%" y="69" width="0.6584%" height="15" fill="rgb(237,48,7)" fg:x="4466" fg:w="144"/><text x="20.7136%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.96%)</title><rect x="20.4207%" y="85" width="0.9602%" height="15" fill="rgb(218,21,41)" fg:x="4466" fg:w="210"/><text x="20.7136%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 1.01%)</title><rect x="20.4207%" y="101" width="1.0059%" height="15" fill="rgb(253,70,9)" fg:x="4466" fg:w="220"/><text x="20.7136%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 2.05%)</title><rect x="19.9817%" y="117" width="2.0530%" height="15" fill="rgb(207,94,12)" fg:x="4370" fg:w="449"/><text x="20.2747%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 3.05%)</title><rect x="19.6068%" y="133" width="3.0498%" height="15" fill="rgb(251,222,50)" fg:x="4288" fg:w="667"/><text x="19.8997%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.29%)</title><rect x="22.6566%" y="133" width="0.2926%" height="15" fill="rgb(221,125,19)" fg:x="4955" fg:w="64"/><text x="22.9496%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.28%)</title><rect x="22.9492%" y="133" width="0.2789%" height="15" fill="rgb(207,88,43)" fg:x="5019" fg:w="61"/><text x="23.2422%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 4.13%)</title><rect x="19.6068%" y="149" width="4.1289%" height="15" fill="rgb(229,5,33)" fg:x="4288" fg:w="903"/><text x="19.8997%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.23%)</title><rect x="23.7357%" y="133" width="0.2332%" height="15" fill="rgb(209,174,47)" fg:x="5191" fg:w="51"/><text x="24.0287%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (118 instructions, 0.54%)</title><rect x="23.9689%" y="133" width="0.5396%" height="15" fill="rgb(239,119,34)" fg:x="5242" fg:w="118"/><text x="24.2619%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.21%)</title><rect x="24.5085%" y="133" width="0.2103%" height="15" fill="rgb(238,133,24)" fg:x="5360" fg:w="46"/><text x="24.8014%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 1.29%)</title><rect x="23.7357%" y="149" width="1.2940%" height="15" fill="rgb(212,197,22)" fg:x="5191" fg:w="283"/><text x="24.0287%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.37%)</title><rect x="25.0297%" y="149" width="0.3749%" height="15" fill="rgb(251,160,44)" fg:x="5474" fg:w="82"/><text x="25.3227%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,910 instructions, 8.73%)</title><rect x="17.5217%" y="165" width="8.7334%" height="15" fill="rgb(250,204,7)" fg:x="3832" fg:w="1910"/><text x="17.8147%" y="175.50">binread::b..</text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.21%)</title><rect x="26.2551%" y="165" width="0.2103%" height="15" fill="rgb(251,208,44)" fg:x="5742" fg:w="46"/><text x="26.5481%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.07%)</title><rect x="26.4655%" y="165" width="0.0686%" height="15" fill="rgb(206,129,39)" fg:x="5788" fg:w="15"/><text x="26.7584%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.04%)</title><rect x="26.5341%" y="165" width="0.0366%" height="15" fill="rgb(235,2,2)" fg:x="5803" fg:w="8"/><text x="26.8270%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.37%)</title><rect x="26.5706%" y="149" width="0.3749%" height="15" fill="rgb(215,21,21)" fg:x="5811" fg:w="82"/><text x="26.8636%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.81%)</title><rect x="26.5706%" y="165" width="0.8139%" height="15" fill="rgb(250,142,18)" fg:x="5811" fg:w="178"/><text x="26.8636%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.37%)</title><rect x="27.3845%" y="133" width="0.3749%" height="15" fill="rgb(215,75,0)" fg:x="5989" fg:w="82"/><text x="27.6775%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.56%)</title><rect x="27.3845%" y="149" width="0.5624%" height="15" fill="rgb(252,118,27)" fg:x="5989" fg:w="123"/><text x="27.6775%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (210 instructions, 0.96%)</title><rect x="27.3845%" y="165" width="0.9602%" height="15" fill="rgb(249,171,12)" fg:x="5989" fg:w="210"/><text x="27.6775%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.37%)</title><rect x="28.3448%" y="165" width="0.3749%" height="15" fill="rgb(228,222,34)" fg:x="6199" fg:w="82"/><text x="28.6377%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.41%)</title><rect x="28.7197%" y="165" width="0.4070%" height="15" fill="rgb(242,31,53)" fg:x="6281" fg:w="89"/><text x="29.0127%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.37%)</title><rect x="29.1267%" y="165" width="0.3749%" height="15" fill="rgb(239,192,43)" fg:x="6370" fg:w="82"/><text x="29.4196%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.37%)</title><rect x="29.5016%" y="165" width="0.3749%" height="15" fill="rgb(223,141,32)" fg:x="6452" fg:w="82"/><text x="29.7946%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="29.8765%" y="165" width="0.0229%" height="15" fill="rgb(217,90,29)" fg:x="6534" fg:w="5"/><text x="30.1695%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.41%)</title><rect x="29.8994%" y="165" width="0.4070%" height="15" fill="rgb(234,174,1)" fg:x="6539" fg:w="89"/><text x="30.1924%" y="175.50"></text></g><g><title>memcpy (392 instructions, 1.79%)</title><rect x="30.3064%" y="165" width="1.7924%" height="15" fill="rgb(236,41,33)" fg:x="6628" fg:w="392"/><text x="30.5993%" y="175.50"></text></g><g><title>memcpy (392 instructions, 1.79%)</title><rect x="32.0988%" y="165" width="1.7924%" height="15" fill="rgb(236,7,3)" fg:x="7020" fg:w="392"/><text x="32.3917%" y="175.50"></text></g><g><title>memcpy (504 instructions, 2.30%)</title><rect x="33.8912%" y="165" width="2.3045%" height="15" fill="rgb(232,94,12)" fg:x="7412" fg:w="504"/><text x="34.1841%" y="175.50">m..</text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,857 instructions, 35.93%)</title><rect x="5.9579%" y="181" width="35.9259%" height="15" fill="rgb(208,33,46)" fg:x="1303" fg:w="7857"/><text x="6.2509%" y="191.50">candid::de::IDLDeserialize::new_with_config</text></g><g><title>memcpy (408 instructions, 1.87%)</title><rect x="41.8839%" y="181" width="1.8656%" height="15" fill="rgb(248,68,22)" fg:x="9160" fg:w="408"/><text x="42.1768%" y="191.50"></text></g><g><title>memcpy (408 instructions, 1.87%)</title><rect x="43.7494%" y="181" width="1.8656%" height="15" fill="rgb(214,166,17)" fg:x="9568" fg:w="408"/><text x="44.0424%" y="191.50"></text></g><g><title>candid::types::internal::find_type (24 instructions, 0.11%)</title><rect x="45.6150%" y="181" width="0.1097%" height="15" fill="rgb(248,32,30)" fg:x="9976" fg:w="24"/><text x="45.9080%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.37%)</title><rect x="45.7247%" y="181" width="0.3749%" height="15" fill="rgb(207,150,54)" fg:x="10000" fg:w="82"/><text x="46.0177%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.37%)</title><rect x="46.0997%" y="165" width="0.3749%" height="15" fill="rgb(223,47,47)" fg:x="10082" fg:w="82"/><text x="46.3926%" y="175.50"></text></g><g><title>candid::types::internal::env_add (166 instructions, 0.76%)</title><rect x="46.0997%" y="181" width="0.7590%" height="15" fill="rgb(230,111,7)" fg:x="10082" fg:w="166"/><text x="46.3926%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.37%)</title><rect x="46.8587%" y="181" width="0.3749%" height="15" fill="rgb(247,122,36)" fg:x="10248" fg:w="82"/><text x="47.1517%" y="191.50"></text></g><g><title>memcmp (77 instructions, 0.35%)</title><rect x="47.2337%" y="165" width="0.3521%" height="15" fill="rgb(247,9,28)" fg:x="10330" fg:w="77"/><text x="47.5266%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.41%)</title><rect x="47.5857%" y="149" width="0.4070%" height="15" fill="rgb(244,166,16)" fg:x="10407" fg:w="89"/><text x="47.8787%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.73%)</title><rect x="47.5857%" y="165" width="0.7316%" height="15" fill="rgb(222,190,27)" fg:x="10407" fg:w="160"/><text x="47.8787%" y="175.50"></text></g><g><title>candid::types::internal::env_add (416 instructions, 1.90%)</title><rect x="47.2337%" y="181" width="1.9021%" height="15" fill="rgb(236,61,6)" fg:x="10330" fg:w="416"/><text x="47.5266%" y="191.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (49 instructions, 0.22%)</title><rect x="49.1358%" y="165" width="0.2241%" height="15" fill="rgb(211,86,19)" fg:x="10746" fg:w="49"/><text x="49.4288%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.06%)</title><rect x="49.3599%" y="165" width="0.0640%" height="15" fill="rgb(233,113,47)" fg:x="10795" fg:w="14"/><text x="49.6528%" y="175.50"></text></g><g><title>candid::types::internal::env_id (200 instructions, 0.91%)</title><rect x="49.1358%" y="181" width="0.9145%" height="15" fill="rgb(214,168,46)" fg:x="10746" fg:w="200"/><text x="49.4288%" y="191.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.22%)</title><rect x="50.0503%" y="181" width="0.2241%" height="15" fill="rgb(215,207,23)" fg:x="10946" fg:w="49"/><text x="50.3433%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.38%)</title><rect x="50.2743%" y="165" width="0.3795%" height="15" fill="rgb(218,155,31)" fg:x="10995" fg:w="83"/><text x="50.5673%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.11%)</title><rect x="50.9785%" y="149" width="0.1052%" height="15" fill="rgb(216,102,7)" fg:x="11149" fg:w="23"/><text x="51.2715%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.63%)</title><rect x="50.9785%" y="165" width="0.6310%" height="15" fill="rgb(250,78,39)" fg:x="11149" fg:w="138"/><text x="51.2715%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (363 instructions, 1.66%)</title><rect x="50.2743%" y="181" width="1.6598%" height="15" fill="rgb(240,227,5)" fg:x="10995" fg:w="363"/><text x="50.5673%" y="191.50"></text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.17%)</title><rect x="51.9342%" y="165" width="0.1692%" height="15" fill="rgb(225,62,8)" fg:x="11358" fg:w="37"/><text x="52.2271%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1191 (34 instructions, 0.16%)</title><rect x="52.1033%" y="165" width="0.1555%" height="15" fill="rgb(217,229,15)" fg:x="11395" fg:w="34"/><text x="52.3963%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1191 (34 instructions, 0.16%)</title><rect x="52.2588%" y="165" width="0.1555%" height="15" fill="rgb(212,65,52)" fg:x="11429" fg:w="34"/><text x="52.5518%" y="175.50"></text></g><g><title>candid::de::Deserializer::add_cost (31 instructions, 0.14%)</title><rect x="52.4143%" y="165" width="0.1417%" height="15" fill="rgb(205,229,33)" fg:x="11463" fg:w="31"/><text x="52.7072%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (261 instructions, 1.19%)</title><rect x="51.9342%" y="181" width="1.1934%" height="15" fill="rgb(235,223,14)" fg:x="11358" fg:w="261"/><text x="52.2271%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.06%)</title><rect x="53.1276%" y="181" width="0.0640%" height="15" fill="rgb(229,128,51)" fg:x="11619" fg:w="14"/><text x="53.4205%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.06%)</title><rect x="53.1916%" y="181" width="0.0640%" height="15" fill="rgb(244,42,28)" fg:x="11633" fg:w="14"/><text x="53.4846%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.06%)</title><rect x="53.2556%" y="181" width="0.0640%" height="15" fill="rgb(249,68,44)" fg:x="11647" fg:w="14"/><text x="53.5486%" y="191.50"></text></g><g><title>candid::de::IDLDeserialize::done (37 instructions, 0.17%)</title><rect x="53.3196%" y="181" width="0.1692%" height="15" fill="rgb(242,6,21)" fg:x="11661" fg:w="37"/><text x="53.6126%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.04%)</title><rect x="53.4888%" y="165" width="0.0366%" height="15" fill="rgb(226,168,30)" fg:x="11698" fg:w="8"/><text x="53.7818%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="53.5254%" y="149" width="0.1235%" height="15" fill="rgb(229,181,3)" fg:x="11706" fg:w="27"/><text x="53.8183%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="53.6488%" y="149" width="0.1235%" height="15" fill="rgb(217,161,52)" fg:x="11733" fg:w="27"/><text x="53.9418%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.90%)</title><rect x="53.5254%" y="165" width="0.9008%" height="15" fill="rgb(246,93,52)" fg:x="11706" fg:w="197"/><text x="53.8183%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="54.4262%" y="133" width="0.1235%" height="15" fill="rgb(214,17,26)" fg:x="11903" fg:w="27"/><text x="54.7191%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.65%)</title><rect x="54.4262%" y="149" width="0.6493%" height="15" fill="rgb(239,106,30)" fg:x="11903" fg:w="142"/><text x="54.7191%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (213 instructions, 0.97%)</title><rect x="54.4262%" y="165" width="0.9739%" height="15" fill="rgb(225,89,41)" fg:x="11903" fg:w="213"/><text x="54.7191%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.06%)</title><rect x="55.4001%" y="165" width="0.0640%" height="15" fill="rgb(218,197,38)" fg:x="12116" fg:w="14"/><text x="55.6931%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="55.4641%" y="165" width="0.0320%" height="15" fill="rgb(211,184,30)" fg:x="12130" fg:w="7"/><text x="55.7571%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (529 instructions, 2.42%)</title><rect x="53.4888%" y="181" width="2.4188%" height="15" fill="rgb(212,143,0)" fg:x="11698" fg:w="529"/><text x="53.7818%" y="191.50">c..</text></g><g><title>candid::utils::decode_args_with_config_debug (11,356 instructions, 51.93%)</title><rect x="5.9579%" y="197" width="51.9250%" height="15" fill="rgb(243,213,0)" fg:x="1303" fg:w="11356"/><text x="6.2509%" y="207.50">candid::utils::decode_args_with_config_debug</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="57.8829%" y="181" width="0.1235%" height="15" fill="rgb(206,165,5)" fg:x="12659" fg:w="27"/><text x="58.1759%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.65%)</title><rect x="57.8829%" y="197" width="0.6493%" height="15" fill="rgb(218,97,36)" fg:x="12659" fg:w="142"/><text x="58.1759%" y="207.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,744 instructions, 58.27%)</title><rect x="0.7499%" y="213" width="58.2716%" height="15" fill="rgb(228,30,38)" fg:x="164" fg:w="12744"/><text x="1.0429%" y="223.50">ic_cdk::api::call::arg_data</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.28%)</title><rect x="59.0215%" y="165" width="0.2789%" height="15" fill="rgb(249,202,10)" fg:x="12908" fg:w="61"/><text x="59.3145%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (132 instructions, 0.60%)</title><rect x="59.0215%" y="181" width="0.6036%" height="15" fill="rgb(210,135,22)" fg:x="12908" fg:w="132"/><text x="59.3145%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="59.6251%" y="165" width="0.1235%" height="15" fill="rgb(235,30,13)" fg:x="13040" fg:w="27"/><text x="59.9180%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (116 instructions, 0.53%)</title><rect x="59.6251%" y="181" width="0.5304%" height="15" fill="rgb(241,152,46)" fg:x="13040" fg:w="116"/><text x="59.9180%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::new (424 instructions, 1.94%)</title><rect x="59.0215%" y="197" width="1.9387%" height="15" fill="rgb(239,119,30)" fg:x="12908" fg:w="424"/><text x="59.3145%" y="207.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 2.37%)</title><rect x="60.9602%" y="181" width="2.3685%" height="15" fill="rgb(208,35,18)" fg:x="13332" fg:w="518"/><text x="61.2532%" y="191.50">s..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.37%)</title><rect x="63.3288%" y="133" width="0.3749%" height="15" fill="rgb(212,178,15)" fg:x="13850" fg:w="82"/><text x="63.6217%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.56%)</title><rect x="63.3288%" y="149" width="0.5624%" height="15" fill="rgb(232,211,14)" fg:x="13850" fg:w="123"/><text x="63.6217%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 0.94%)</title><rect x="63.3288%" y="165" width="0.9419%" height="15" fill="rgb(240,121,1)" fg:x="13850" fg:w="206"/><text x="63.6217%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.07%)</title><rect x="64.2707%" y="165" width="0.0686%" height="15" fill="rgb(208,201,3)" fg:x="14056" fg:w="15"/><text x="64.5637%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.07%)</title><rect x="64.3393%" y="165" width="0.0686%" height="15" fill="rgb(209,2,24)" fg:x="14071" fg:w="15"/><text x="64.6322%" y="175.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 1.96%)</title><rect x="63.3288%" y="181" width="1.9570%" height="15" fill="rgb(247,135,7)" fg:x="13850" fg:w="428"/><text x="63.6217%" y="191.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 2.36%)</title><rect x="65.2858%" y="181" width="2.3594%" height="15" fill="rgb(221,61,50)" fg:x="14278" fg:w="516"/><text x="65.5787%" y="191.50">s..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.03%)</title><rect x="67.6452%" y="181" width="0.0320%" height="15" fill="rgb(226,49,6)" fg:x="14794" fg:w="7"/><text x="67.9381%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,546 instructions, 7.07%)</title><rect x="60.9602%" y="197" width="7.0690%" height="15" fill="rgb(252,88,36)" fg:x="13332" fg:w="1546"/><text x="61.2532%" y="207.50">candid::..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.04%)</title><rect x="68.0293%" y="197" width="0.0366%" height="15" fill="rgb(240,137,17)" fg:x="14878" fg:w="8"/><text x="68.3222%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.04%)</title><rect x="68.0658%" y="197" width="0.0366%" height="15" fill="rgb(231,33,6)" fg:x="14886" fg:w="8"/><text x="68.3588%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.28%)</title><rect x="68.1024%" y="197" width="0.2789%" height="15" fill="rgb(244,119,9)" fg:x="14894" fg:w="61"/><text x="68.3954%" y="207.50"></text></g><g><title>ic_cdk::api::call::reply (2,680 instructions, 12.25%)</title><rect x="59.0215%" y="213" width="12.2542%" height="15" fill="rgb(218,38,29)" fg:x="12908" fg:w="2680"/><text x="59.3145%" y="223.50">ic_cdk::api::ca..</text></g><g><title>heap::__canister_method_batch_put::{{closure}} (21,272 instructions, 97.27%)</title><rect x="0.7499%" y="229" width="97.2657%" height="15" fill="rgb(237,170,34)" fg:x="164" fg:w="21272"/><text x="1.0429%" y="239.50">heap::__canister_method_batch_put::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (15 instructions, 0.07%)</title><rect x="98.0155%" y="229" width="0.0686%" height="15" fill="rgb(222,206,19)" fg:x="21436" fg:w="15"/><text x="98.3085%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="98.4957%" y="197" width="0.1235%" height="15" fill="rgb(250,59,44)" fg:x="21541" fg:w="27"/><text x="98.7886%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (205 instructions, 0.94%)</title><rect x="98.0887%" y="213" width="0.9374%" height="15" fill="rgb(247,0,1)" fg:x="21452" fg:w="205"/><text x="98.3817%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (323 instructions, 1.48%)</title><rect x="98.0841%" y="229" width="1.4769%" height="15" fill="rgb(238,74,35)" fg:x="21451" fg:w="323"/><text x="98.3771%" y="239.50"></text></g><g><title>all (21,870 instructions, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(219,224,39)" fg:x="0" fg:w="21870"/><text x="0.2930%" y="271.50"></text></g><g><title>canister_update batch_put (21,870 instructions, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(210,212,13)" fg:x="0" fg:w="21870"/><text x="0.2930%" y="255.50">canister_update batch_put</text></g></svg></svg>