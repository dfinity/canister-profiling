<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="23239"><g><title>ic_cdk::setup (24 instructions, 0.10%)</title><rect x="0.0000%" y="197" width="0.1033%" height="15" fill="rgb(213,218,43)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="0.1033%" y="197" width="0.3529%" height="15" fill="rgb(239,44,45)" fg:x="24" fg:w="82"/><text x="0.3962%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="0.4561%" y="197" width="0.3529%" height="15" fill="rgb(246,65,13)" fg:x="106" fg:w="82"/><text x="0.7491%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="0.8090%" y="165" width="0.3529%" height="15" fill="rgb(234,41,30)" fg:x="188" fg:w="82"/><text x="1.1020%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.35%)</title><rect x="1.1618%" y="149" width="0.3529%" height="15" fill="rgb(222,182,3)" fg:x="270" fg:w="82"/><text x="1.4548%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="1.5147%" y="133" width="0.0258%" height="15" fill="rgb(235,143,36)" fg:x="352" fg:w="6"/><text x="1.8077%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.91%)</title><rect x="1.5147%" y="149" width="1.9063%" height="15" fill="rgb(217,106,20)" fg:x="352" fg:w="443"/><text x="1.8077%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.41%)</title><rect x="3.4210%" y="149" width="0.4088%" height="15" fill="rgb(232,144,36)" fg:x="795" fg:w="95"/><text x="3.7139%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.26%)</title><rect x="3.8298%" y="149" width="0.2582%" height="15" fill="rgb(242,133,13)" fg:x="890" fg:w="60"/><text x="4.1227%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.26%)</title><rect x="4.0880%" y="149" width="0.2582%" height="15" fill="rgb(215,68,16)" fg:x="950" fg:w="60"/><text x="4.3809%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.26%)</title><rect x="4.3461%" y="149" width="0.2582%" height="15" fill="rgb(211,74,52)" fg:x="1010" fg:w="60"/><text x="4.6391%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.26%)</title><rect x="4.6043%" y="149" width="0.2582%" height="15" fill="rgb(207,137,20)" fg:x="1070" fg:w="60"/><text x="4.8973%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.35%)</title><rect x="4.8625%" y="149" width="0.3529%" height="15" fill="rgb(240,100,25)" fg:x="1130" fg:w="82"/><text x="5.1555%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.30%)</title><rect x="5.2154%" y="149" width="0.3012%" height="15" fill="rgb(254,69,26)" fg:x="1212" fg:w="70"/><text x="5.5083%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="5.5166%" y="133" width="0.0258%" height="15" fill="rgb(251,83,15)" fg:x="1282" fg:w="6"/><text x="5.8096%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.91%)</title><rect x="5.5166%" y="149" width="1.9063%" height="15" fill="rgb(250,63,31)" fg:x="1282" fg:w="443"/><text x="5.8096%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.08%)</title><rect x="7.4229%" y="149" width="0.0818%" height="15" fill="rgb(244,181,28)" fg:x="1725" fg:w="19"/><text x="7.7158%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="7.5046%" y="133" width="0.3529%" height="15" fill="rgb(240,44,51)" fg:x="1744" fg:w="82"/><text x="7.7976%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.29%)</title><rect x="7.8575%" y="101" width="0.2883%" height="15" fill="rgb(245,132,0)" fg:x="1826" fg:w="67"/><text x="8.1504%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.41%)</title><rect x="7.8575%" y="117" width="0.4131%" height="15" fill="rgb(206,45,36)" fg:x="1826" fg:w="96"/><text x="8.1504%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.05%)</title><rect x="8.2706%" y="69" width="0.0473%" height="15" fill="rgb(215,193,48)" fg:x="1922" fg:w="11"/><text x="8.5635%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.15%)</title><rect x="8.3179%" y="53" width="0.1506%" height="15" fill="rgb(207,116,30)" fg:x="1933" fg:w="35"/><text x="8.6109%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.28%)</title><rect x="8.3179%" y="69" width="0.2754%" height="15" fill="rgb(253,54,6)" fg:x="1933" fg:w="64"/><text x="8.6109%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.62%)</title><rect x="8.2706%" y="85" width="0.6196%" height="15" fill="rgb(243,203,32)" fg:x="1922" fg:w="144"/><text x="8.5635%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.90%)</title><rect x="8.2706%" y="101" width="0.8994%" height="15" fill="rgb(217,209,15)" fg:x="1922" fg:w="209"/><text x="8.5635%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.94%)</title><rect x="8.2706%" y="117" width="0.9424%" height="15" fill="rgb(238,160,22)" fg:x="1922" fg:w="219"/><text x="8.5635%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 1.97%)</title><rect x="7.8575%" y="133" width="1.9665%" height="15" fill="rgb(220,28,8)" fg:x="1826" fg:w="457"/><text x="8.1504%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 2.91%)</title><rect x="7.5046%" y="149" width="2.9132%" height="15" fill="rgb(251,130,6)" fg:x="1744" fg:w="677"/><text x="7.7976%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.41%)</title><rect x="10.4178%" y="149" width="0.4088%" height="15" fill="rgb(218,222,1)" fg:x="2421" fg:w="95"/><text x="10.7108%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.26%)</title><rect x="10.8266%" y="149" width="0.2582%" height="15" fill="rgb(236,68,5)" fg:x="2516" fg:w="60"/><text x="11.1196%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.33%)</title><rect x="11.0848%" y="149" width="0.3270%" height="15" fill="rgb(247,109,44)" fg:x="2576" fg:w="76"/><text x="11.3778%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.30%)</title><rect x="11.4119%" y="149" width="0.3012%" height="15" fill="rgb(240,94,50)" fg:x="2652" fg:w="70"/><text x="11.7048%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="11.7131%" y="117" width="0.0258%" height="15" fill="rgb(211,146,40)" fg:x="2722" fg:w="6"/><text x="12.0060%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.91%)</title><rect x="11.7131%" y="133" width="1.9063%" height="15" fill="rgb(215,160,23)" fg:x="2722" fg:w="443"/><text x="12.0060%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.08%)</title><rect x="13.6193%" y="133" width="0.0818%" height="15" fill="rgb(240,195,38)" fg:x="3165" fg:w="19"/><text x="13.9123%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="13.7011%" y="117" width="0.3529%" height="15" fill="rgb(207,44,40)" fg:x="3184" fg:w="82"/><text x="13.9941%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.29%)</title><rect x="14.0540%" y="85" width="0.2883%" height="15" fill="rgb(222,116,30)" fg:x="3266" fg:w="67"/><text x="14.3469%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.41%)</title><rect x="14.0540%" y="101" width="0.4131%" height="15" fill="rgb(225,173,2)" fg:x="3266" fg:w="96"/><text x="14.3469%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.05%)</title><rect x="14.4671%" y="53" width="0.0473%" height="15" fill="rgb(226,68,21)" fg:x="3362" fg:w="11"/><text x="14.7600%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.15%)</title><rect x="14.5144%" y="37" width="0.1506%" height="15" fill="rgb(216,172,34)" fg:x="3373" fg:w="35"/><text x="14.8074%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.28%)</title><rect x="14.5144%" y="53" width="0.2754%" height="15" fill="rgb(213,222,49)" fg:x="3373" fg:w="64"/><text x="14.8074%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.62%)</title><rect x="14.4671%" y="69" width="0.6196%" height="15" fill="rgb(205,152,1)" fg:x="3362" fg:w="144"/><text x="14.7600%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.90%)</title><rect x="14.4671%" y="85" width="0.8994%" height="15" fill="rgb(221,180,36)" fg:x="3362" fg:w="209"/><text x="14.7600%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.94%)</title><rect x="14.4671%" y="101" width="0.9424%" height="15" fill="rgb(231,97,49)" fg:x="3362" fg:w="219"/><text x="14.7600%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 1.97%)</title><rect x="14.0540%" y="117" width="1.9665%" height="15" fill="rgb(247,156,18)" fg:x="3266" fg:w="457"/><text x="14.3469%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 2.91%)</title><rect x="13.7011%" y="133" width="2.9132%" height="15" fill="rgb(220,165,37)" fg:x="3184" fg:w="677"/><text x="13.9941%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.41%)</title><rect x="16.6143%" y="133" width="0.4088%" height="15" fill="rgb(230,43,8)" fg:x="3861" fg:w="95"/><text x="16.9073%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.26%)</title><rect x="17.0231%" y="133" width="0.2582%" height="15" fill="rgb(210,105,34)" fg:x="3956" fg:w="60"/><text x="17.3161%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.35%)</title><rect x="17.2813%" y="117" width="0.3529%" height="15" fill="rgb(235,23,39)" fg:x="4016" fg:w="82"/><text x="17.5743%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.41%)</title><rect x="17.6341%" y="117" width="0.4088%" height="15" fill="rgb(253,139,52)" fg:x="4098" fg:w="95"/><text x="17.9271%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.33%)</title><rect x="18.0429%" y="117" width="0.3270%" height="15" fill="rgb(231,73,19)" fg:x="4193" fg:w="76"/><text x="18.3359%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 1.42%)</title><rect x="17.2813%" y="133" width="1.4200%" height="15" fill="rgb(206,77,49)" fg:x="4016" fg:w="330"/><text x="17.5743%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="18.7013%" y="133" width="0.3529%" height="15" fill="rgb(238,93,39)" fg:x="4346" fg:w="82"/><text x="18.9943%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,946 instructions, 8.37%)</title><rect x="11.7131%" y="149" width="8.3739%" height="15" fill="rgb(254,46,16)" fg:x="2722" fg:w="1946"/><text x="12.0060%" y="159.50">binread::b..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.33%)</title><rect x="20.0869%" y="149" width="0.3270%" height="15" fill="rgb(247,65,49)" fg:x="4668" fg:w="76"/><text x="20.3799%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="20.4140%" y="149" width="0.0645%" height="15" fill="rgb(208,182,50)" fg:x="4744" fg:w="15"/><text x="20.7069%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="20.4785%" y="149" width="0.0645%" height="15" fill="rgb(216,109,33)" fg:x="4759" fg:w="15"/><text x="20.7715%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="20.5431%" y="149" width="0.0645%" height="15" fill="rgb(233,156,21)" fg:x="4774" fg:w="15"/><text x="20.8360%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="20.6076%" y="149" width="0.0301%" height="15" fill="rgb(230,194,7)" fg:x="4789" fg:w="7"/><text x="20.9006%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="20.6377%" y="133" width="0.3529%" height="15" fill="rgb(231,1,25)" fg:x="4796" fg:w="82"/><text x="20.9307%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.77%)</title><rect x="20.6377%" y="149" width="0.7660%" height="15" fill="rgb(214,78,11)" fg:x="4796" fg:w="178"/><text x="20.9307%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="21.4037%" y="117" width="0.3529%" height="15" fill="rgb(223,131,8)" fg:x="4974" fg:w="82"/><text x="21.6966%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.56%)</title><rect x="21.4037%" y="133" width="0.5594%" height="15" fill="rgb(253,229,53)" fg:x="4974" fg:w="130"/><text x="21.6966%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 0.93%)</title><rect x="21.4037%" y="149" width="0.9252%" height="15" fill="rgb(236,157,6)" fg:x="4974" fg:w="215"/><text x="21.6966%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="22.3288%" y="149" width="0.3529%" height="15" fill="rgb(205,212,49)" fg:x="5189" fg:w="82"/><text x="22.6218%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.38%)</title><rect x="22.6817%" y="149" width="0.3830%" height="15" fill="rgb(222,225,39)" fg:x="5271" fg:w="89"/><text x="22.9747%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="23.0647%" y="149" width="0.3529%" height="15" fill="rgb(215,3,13)" fg:x="5360" fg:w="82"/><text x="23.3576%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="23.4175%" y="149" width="0.3529%" height="15" fill="rgb(246,118,54)" fg:x="5442" fg:w="82"/><text x="23.7105%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="23.7704%" y="149" width="0.0172%" height="15" fill="rgb(225,208,1)" fg:x="5524" fg:w="4"/><text x="24.0634%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.38%)</title><rect x="23.7876%" y="149" width="0.3830%" height="15" fill="rgb(213,109,19)" fg:x="5528" fg:w="89"/><text x="24.0806%" y="159.50"></text></g><g><title>memcpy (392 instructions, 1.69%)</title><rect x="24.1706%" y="149" width="1.6868%" height="15" fill="rgb(247,219,23)" fg:x="5617" fg:w="392"/><text x="24.4635%" y="159.50"></text></g><g><title>memcpy (392 instructions, 1.69%)</title><rect x="25.8574%" y="149" width="1.6868%" height="15" fill="rgb(233,169,30)" fg:x="6009" fg:w="392"/><text x="26.1504%" y="159.50"></text></g><g><title>memcpy (504 instructions, 2.17%)</title><rect x="27.5442%" y="149" width="2.1688%" height="15" fill="rgb(241,68,11)" fg:x="6401" fg:w="504"/><text x="27.8372%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,844 instructions, 33.75%)</title><rect x="1.1618%" y="165" width="33.7536%" height="15" fill="rgb(208,138,28)" fg:x="270" fg:w="7844"/><text x="1.4548%" y="175.50">candid::de::IDLDeserialize::new_with_config</text></g><g><title>memcpy (344 instructions, 1.48%)</title><rect x="34.9154%" y="165" width="1.4803%" height="15" fill="rgb(232,181,42)" fg:x="8114" fg:w="344"/><text x="35.2084%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="36.3957%" y="149" width="0.0301%" height="15" fill="rgb(208,8,19)" fg:x="8458" fg:w="7"/><text x="36.6887%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.17%)</title><rect x="36.3957%" y="165" width="0.1678%" height="15" fill="rgb(215,70,20)" fg:x="8458" fg:w="39"/><text x="36.6887%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="36.5635%" y="165" width="0.3529%" height="15" fill="rgb(205,101,47)" fg:x="8497" fg:w="82"/><text x="36.8565%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="36.9164%" y="149" width="0.0301%" height="15" fill="rgb(237,90,32)" fg:x="8579" fg:w="7"/><text x="37.2094%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.25%)</title><rect x="36.9465%" y="133" width="0.2539%" height="15" fill="rgb(231,179,2)" fg:x="8586" fg:w="59"/><text x="37.2395%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.40%)</title><rect x="37.2004%" y="133" width="0.4045%" height="15" fill="rgb(224,90,45)" fg:x="8645" fg:w="94"/><text x="37.4934%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.74%)</title><rect x="37.6049%" y="133" width="0.7444%" height="15" fill="rgb(220,189,48)" fg:x="8739" fg:w="173"/><text x="37.8979%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.49%)</title><rect x="36.9465%" y="149" width="2.4915%" height="15" fill="rgb(242,158,15)" fg:x="8586" fg:w="579"/><text x="37.2395%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (797 instructions, 3.43%)</title><rect x="36.9164%" y="165" width="3.4296%" height="15" fill="rgb(247,113,36)" fg:x="8579" fg:w="797"/><text x="37.2094%" y="175.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="40.3460%" y="165" width="0.3529%" height="15" fill="rgb(240,34,17)" fg:x="9376" fg:w="82"/><text x="40.6389%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="40.6988%" y="149" width="0.0301%" height="15" fill="rgb(213,181,49)" fg:x="9458" fg:w="7"/><text x="40.9918%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.25%)</title><rect x="40.7289%" y="133" width="0.2539%" height="15" fill="rgb(251,188,17)" fg:x="9465" fg:w="59"/><text x="41.0219%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.40%)</title><rect x="40.9828%" y="133" width="0.4045%" height="15" fill="rgb(233,69,8)" fg:x="9524" fg:w="94"/><text x="41.2758%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.74%)</title><rect x="41.3873%" y="133" width="0.7444%" height="15" fill="rgb(217,94,15)" fg:x="9618" fg:w="173"/><text x="41.6803%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.49%)</title><rect x="40.7289%" y="149" width="2.4915%" height="15" fill="rgb(240,176,48)" fg:x="9465" fg:w="579"/><text x="41.0219%" y="159.50">c..</text></g><g><title>memcmp (77 instructions, 0.33%)</title><rect x="43.2204%" y="149" width="0.3313%" height="15" fill="rgb(220,46,12)" fg:x="10044" fg:w="77"/><text x="43.5134%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.38%)</title><rect x="43.5518%" y="133" width="0.3830%" height="15" fill="rgb(206,70,24)" fg:x="10121" fg:w="89"/><text x="43.8448%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.57%)</title><rect x="43.5518%" y="149" width="0.5723%" height="15" fill="rgb(213,39,42)" fg:x="10121" fg:w="133"/><text x="43.8448%" y="159.50"></text></g><g><title>candid::types::internal::env_add (975 instructions, 4.20%)</title><rect x="40.6988%" y="165" width="4.1955%" height="15" fill="rgb(241,79,1)" fg:x="9458" fg:w="975"/><text x="40.9918%" y="175.50">cand..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.25%)</title><rect x="44.8944%" y="117" width="0.2539%" height="15" fill="rgb(217,115,34)" fg:x="10433" fg:w="59"/><text x="45.1873%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (102 instructions, 0.44%)</title><rect x="44.8944%" y="133" width="0.4389%" height="15" fill="rgb(209,36,52)" fg:x="10433" fg:w="102"/><text x="45.1873%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (323 instructions, 1.39%)</title><rect x="44.8944%" y="149" width="1.3899%" height="15" fill="rgb(226,11,32)" fg:x="10433" fg:w="323"/><text x="45.1873%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.307 (34 instructions, 0.15%)</title><rect x="46.2843%" y="149" width="0.1463%" height="15" fill="rgb(238,20,13)" fg:x="10756" fg:w="34"/><text x="46.5772%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="46.4306%" y="149" width="0.0559%" height="15" fill="rgb(221,79,41)" fg:x="10790" fg:w="13"/><text x="46.7235%" y="159.50"></text></g><g><title>candid::types::internal::env_id (555 instructions, 2.39%)</title><rect x="44.8944%" y="165" width="2.3882%" height="15" fill="rgb(252,225,12)" fg:x="10433" fg:w="555"/><text x="45.1873%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.21%)</title><rect x="47.2826%" y="165" width="0.2109%" height="15" fill="rgb(207,52,52)" fg:x="10988" fg:w="49"/><text x="47.5756%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.36%)</title><rect x="47.4934%" y="149" width="0.3572%" height="15" fill="rgb(229,162,23)" fg:x="11037" fg:w="83"/><text x="47.7864%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.10%)</title><rect x="48.0399%" y="133" width="0.0990%" height="15" fill="rgb(243,53,34)" fg:x="11164" fg:w="23"/><text x="48.3329%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.59%)</title><rect x="48.0399%" y="149" width="0.5938%" height="15" fill="rgb(244,124,46)" fg:x="11164" fg:w="138"/><text x="48.3329%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 instructions, 1.33%)</title><rect x="47.4934%" y="165" width="1.3297%" height="15" fill="rgb(207,33,17)" fg:x="11037" fg:w="309"/><text x="47.7864%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.15%)</title><rect x="48.8231%" y="149" width="0.1506%" height="15" fill="rgb(233,80,48)" fg:x="11346" fg:w="35"/><text x="49.1161%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1145 (34 instructions, 0.15%)</title><rect x="48.9737%" y="149" width="0.1463%" height="15" fill="rgb(220,54,44)" fg:x="11381" fg:w="34"/><text x="49.2667%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1145 (34 instructions, 0.15%)</title><rect x="49.1200%" y="149" width="0.1463%" height="15" fill="rgb(225,9,40)" fg:x="11415" fg:w="34"/><text x="49.4130%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.14%)</title><rect x="49.2663%" y="149" width="0.1420%" height="15" fill="rgb(208,115,12)" fg:x="11449" fg:w="33"/><text x="49.5593%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 1.08%)</title><rect x="48.8231%" y="165" width="1.0758%" height="15" fill="rgb(211,33,44)" fg:x="11346" fg:w="250"/><text x="49.1161%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="49.8989%" y="165" width="0.0559%" height="15" fill="rgb(209,107,5)" fg:x="11596" fg:w="13"/><text x="50.1918%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="49.9548%" y="165" width="0.0559%" height="15" fill="rgb(241,17,7)" fg:x="11609" fg:w="13"/><text x="50.2478%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="50.0108%" y="165" width="0.0559%" height="15" fill="rgb(219,68,29)" fg:x="11622" fg:w="13"/><text x="50.3037%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.19%)</title><rect x="50.0667%" y="165" width="0.1850%" height="15" fill="rgb(208,210,34)" fg:x="11635" fg:w="43"/><text x="50.3597%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="50.2517%" y="149" width="0.0301%" height="15" fill="rgb(206,103,15)" fg:x="11678" fg:w="7"/><text x="50.5447%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="50.2819%" y="133" width="0.1162%" height="15" fill="rgb(225,121,12)" fg:x="11685" fg:w="27"/><text x="50.5748%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="50.3980%" y="133" width="0.1162%" height="15" fill="rgb(218,89,21)" fg:x="11712" fg:w="27"/><text x="50.6910%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.85%)</title><rect x="50.2819%" y="149" width="0.8477%" height="15" fill="rgb(221,54,48)" fg:x="11685" fg:w="197"/><text x="50.5748%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="51.1296%" y="117" width="0.1162%" height="15" fill="rgb(232,33,36)" fg:x="11882" fg:w="27"/><text x="51.4225%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.61%)</title><rect x="51.1296%" y="133" width="0.6110%" height="15" fill="rgb(246,53,18)" fg:x="11882" fg:w="142"/><text x="51.4225%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 0.80%)</title><rect x="51.1296%" y="149" width="0.8004%" height="15" fill="rgb(226,28,23)" fg:x="11882" fg:w="186"/><text x="51.4225%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="51.9299%" y="149" width="0.0559%" height="15" fill="rgb(228,18,51)" fg:x="12068" fg:w="13"/><text x="52.2229%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="51.9859%" y="149" width="0.0301%" height="15" fill="rgb(222,84,26)" fg:x="12081" fg:w="7"/><text x="52.2789%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (470 instructions, 2.02%)</title><rect x="50.2517%" y="165" width="2.0225%" height="15" fill="rgb(236,219,16)" fg:x="11678" fg:w="470"/><text x="50.5447%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="52.2742%" y="149" width="0.1162%" height="15" fill="rgb(205,144,27)" fg:x="12148" fg:w="27"/><text x="52.5672%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.61%)</title><rect x="52.2742%" y="165" width="0.6110%" height="15" fill="rgb(224,156,51)" fg:x="12148" fg:w="142"/><text x="52.5672%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,671 instructions, 58.83%)</title><rect x="0.8090%" y="181" width="58.8278%" height="15" fill="rgb(223,134,10)" fg:x="188" fg:w="13671"/><text x="1.1020%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="59.6368%" y="165" width="0.0301%" height="15" fill="rgb(211,167,45)" fg:x="13859" fg:w="7"/><text x="59.9298%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="59.6669%" y="133" width="0.1162%" height="15" fill="rgb(249,156,2)" fg:x="13866" fg:w="27"/><text x="59.9599%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (115 instructions, 0.49%)</title><rect x="59.6669%" y="149" width="0.4949%" height="15" fill="rgb(224,122,29)" fg:x="13866" fg:w="115"/><text x="59.9599%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (159 instructions, 0.68%)</title><rect x="59.6669%" y="165" width="0.6842%" height="15" fill="rgb(226,79,12)" fg:x="13866" fg:w="159"/><text x="59.9599%" y="175.50"></text></g><g><title>memset (152 instructions, 0.65%)</title><rect x="60.3511%" y="165" width="0.6541%" height="15" fill="rgb(224,139,48)" fg:x="14025" fg:w="152"/><text x="60.6441%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (492 instructions, 2.12%)</title><rect x="59.6368%" y="181" width="2.1171%" height="15" fill="rgb(233,196,40)" fg:x="13859" fg:w="492"/><text x="59.9298%" y="191.50">c..</text></g><g><title>std::io::Write::write_all (518 instructions, 2.23%)</title><rect x="61.7539%" y="165" width="2.2290%" height="15" fill="rgb(210,170,27)" fg:x="14351" fg:w="518"/><text x="62.0469%" y="175.50">s..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="63.9830%" y="117" width="0.3529%" height="15" fill="rgb(247,213,7)" fg:x="14869" fg:w="82"/><text x="64.2759%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.56%)</title><rect x="63.9830%" y="133" width="0.5594%" height="15" fill="rgb(212,10,42)" fg:x="14869" fg:w="130"/><text x="64.2759%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 0.91%)</title><rect x="63.9830%" y="149" width="0.9123%" height="15" fill="rgb(245,169,20)" fg:x="14869" fg:w="212"/><text x="64.2759%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="64.8952%" y="149" width="0.0645%" height="15" fill="rgb(251,33,47)" fg:x="15081" fg:w="15"/><text x="65.1882%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="64.9598%" y="149" width="0.0645%" height="15" fill="rgb(238,10,0)" fg:x="15096" fg:w="15"/><text x="65.2527%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (430 instructions, 1.85%)</title><rect x="63.9830%" y="165" width="1.8503%" height="15" fill="rgb(248,229,6)" fg:x="14869" fg:w="430"/><text x="64.2759%" y="175.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 2.22%)</title><rect x="65.8333%" y="165" width="2.2204%" height="15" fill="rgb(231,82,9)" fg:x="15299" fg:w="516"/><text x="66.1263%" y="175.50">s..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.03%)</title><rect x="68.0537%" y="165" width="0.0301%" height="15" fill="rgb(250,198,4)" fg:x="15815" fg:w="7"/><text x="68.3467%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,568 instructions, 6.75%)</title><rect x="61.7539%" y="181" width="6.7473%" height="15" fill="rgb(209,147,54)" fg:x="14351" fg:w="1568"/><text x="62.0469%" y="191.50">candid:..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="68.5012%" y="165" width="0.0301%" height="15" fill="rgb(235,214,49)" fg:x="15919" fg:w="7"/><text x="68.7942%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.26%)</title><rect x="68.5313%" y="165" width="0.2582%" height="15" fill="rgb(221,13,50)" fg:x="15926" fg:w="60"/><text x="68.8243%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::ser::IDLBuilder&gt; (131 instructions, 0.56%)</title><rect x="68.5012%" y="181" width="0.5637%" height="15" fill="rgb(218,59,38)" fg:x="15919" fg:w="131"/><text x="68.7942%" y="191.50"></text></g><g><title>heap::__canister_method_batch_put::{{closure}} (22,688 instructions, 97.63%)</title><rect x="0.8090%" y="197" width="97.6290%" height="15" fill="rgb(222,40,45)" fg:x="188" fg:w="22688"/><text x="1.1020%" y="207.50">heap::__canister_method_batch_put::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.06%)</title><rect x="98.4380%" y="197" width="0.0602%" height="15" fill="rgb(225,98,23)" fg:x="22876" fg:w="14"/><text x="98.7309%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="98.8855%" y="181" width="0.1162%" height="15" fill="rgb(230,191,50)" fg:x="22980" fg:w="27"/><text x="99.1785%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 0.88%)</title><rect x="98.5025%" y="197" width="0.8778%" height="15" fill="rgb(216,62,49)" fg:x="22891" fg:w="204"/><text x="98.7955%" y="207.50"></text></g><g><title>all (23,239 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,73,40)" fg:x="0" fg:w="23239"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (23,239 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,207,44)" fg:x="0" fg:w="23239"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>