<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="23299"><g><title>ic_cdk::setup (24 instructions, 0.10%)</title><rect x="0.0000%" y="197" width="0.1030%" height="15" fill="rgb(235,66,45)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.36%)</title><rect x="0.1030%" y="197" width="0.3562%" height="15" fill="rgb(242,95,15)" fg:x="24" fg:w="83"/><text x="0.3960%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.36%)</title><rect x="0.4592%" y="197" width="0.3562%" height="15" fill="rgb(246,166,5)" fg:x="107" fg:w="83"/><text x="0.7522%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.36%)</title><rect x="0.8155%" y="165" width="0.3562%" height="15" fill="rgb(221,196,15)" fg:x="190" fg:w="83"/><text x="1.1085%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.35%)</title><rect x="1.1717%" y="149" width="0.3519%" height="15" fill="rgb(237,61,39)" fg:x="273" fg:w="82"/><text x="1.4647%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="1.5237%" y="133" width="0.0258%" height="15" fill="rgb(233,94,39)" fg:x="355" fg:w="6"/><text x="1.8166%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.90%)</title><rect x="1.5237%" y="149" width="1.9014%" height="15" fill="rgb(230,132,32)" fg:x="355" fg:w="443"/><text x="1.8166%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.41%)</title><rect x="3.4250%" y="149" width="0.4077%" height="15" fill="rgb(217,122,27)" fg:x="798" fg:w="95"/><text x="3.7180%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.26%)</title><rect x="3.8328%" y="149" width="0.2575%" height="15" fill="rgb(250,151,32)" fg:x="893" fg:w="60"/><text x="4.1258%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.26%)</title><rect x="4.0903%" y="149" width="0.2575%" height="15" fill="rgb(253,22,8)" fg:x="953" fg:w="60"/><text x="4.3833%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.26%)</title><rect x="4.3478%" y="149" width="0.2575%" height="15" fill="rgb(227,15,11)" fg:x="1013" fg:w="60"/><text x="4.6408%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.26%)</title><rect x="4.6053%" y="149" width="0.2575%" height="15" fill="rgb(217,73,53)" fg:x="1073" fg:w="60"/><text x="4.8983%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.35%)</title><rect x="4.8629%" y="149" width="0.3519%" height="15" fill="rgb(249,102,22)" fg:x="1133" fg:w="82"/><text x="5.1558%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.30%)</title><rect x="5.2148%" y="149" width="0.3004%" height="15" fill="rgb(232,110,28)" fg:x="1215" fg:w="70"/><text x="5.5078%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="5.5153%" y="133" width="0.0258%" height="15" fill="rgb(251,43,50)" fg:x="1285" fg:w="6"/><text x="5.8082%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.90%)</title><rect x="5.5153%" y="149" width="1.9014%" height="15" fill="rgb(228,120,40)" fg:x="1285" fg:w="443"/><text x="5.8082%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.08%)</title><rect x="7.4166%" y="149" width="0.0815%" height="15" fill="rgb(213,199,12)" fg:x="1728" fg:w="19"/><text x="7.7096%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.36%)</title><rect x="7.4982%" y="133" width="0.3562%" height="15" fill="rgb(238,41,53)" fg:x="1747" fg:w="83"/><text x="7.7911%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.29%)</title><rect x="7.8544%" y="101" width="0.2876%" height="15" fill="rgb(216,22,53)" fg:x="1830" fg:w="67"/><text x="8.1474%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.41%)</title><rect x="7.8544%" y="117" width="0.4120%" height="15" fill="rgb(226,66,17)" fg:x="1830" fg:w="96"/><text x="8.1474%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.05%)</title><rect x="8.2664%" y="69" width="0.0472%" height="15" fill="rgb(250,168,7)" fg:x="1926" fg:w="11"/><text x="8.5594%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.15%)</title><rect x="8.3137%" y="53" width="0.1502%" height="15" fill="rgb(247,64,16)" fg:x="1937" fg:w="35"/><text x="8.6066%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.27%)</title><rect x="8.3137%" y="69" width="0.2747%" height="15" fill="rgb(242,151,15)" fg:x="1937" fg:w="64"/><text x="8.6066%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.62%)</title><rect x="8.2664%" y="85" width="0.6181%" height="15" fill="rgb(250,27,23)" fg:x="1926" fg:w="144"/><text x="8.5594%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.90%)</title><rect x="8.2664%" y="101" width="0.8970%" height="15" fill="rgb(240,55,42)" fg:x="1926" fg:w="209"/><text x="8.5594%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.94%)</title><rect x="8.2664%" y="117" width="0.9400%" height="15" fill="rgb(231,113,48)" fg:x="1926" fg:w="219"/><text x="8.5594%" y="127.50"></text></g><g><title>core::fmt::write (453 instructions, 1.94%)</title><rect x="7.8544%" y="133" width="1.9443%" height="15" fill="rgb(208,42,38)" fg:x="1830" fg:w="453"/><text x="8.1474%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 2.89%)</title><rect x="7.4982%" y="149" width="2.8928%" height="15" fill="rgb(242,196,1)" fg:x="1747" fg:w="674"/><text x="7.7911%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.41%)</title><rect x="10.3910%" y="149" width="0.4077%" height="15" fill="rgb(223,113,53)" fg:x="2421" fg:w="95"/><text x="10.6840%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.26%)</title><rect x="10.7987%" y="149" width="0.2575%" height="15" fill="rgb(253,202,41)" fg:x="2516" fg:w="60"/><text x="11.0917%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.33%)</title><rect x="11.0563%" y="149" width="0.3262%" height="15" fill="rgb(253,3,4)" fg:x="2576" fg:w="76"/><text x="11.3492%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.30%)</title><rect x="11.3825%" y="149" width="0.3004%" height="15" fill="rgb(243,68,47)" fg:x="2652" fg:w="70"/><text x="11.6754%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="11.6829%" y="117" width="0.0258%" height="15" fill="rgb(210,229,39)" fg:x="2722" fg:w="6"/><text x="11.9759%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.90%)</title><rect x="11.6829%" y="133" width="1.9014%" height="15" fill="rgb(207,219,24)" fg:x="2722" fg:w="443"/><text x="11.9759%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.08%)</title><rect x="13.5843%" y="133" width="0.0815%" height="15" fill="rgb(224,184,13)" fg:x="3165" fg:w="19"/><text x="13.8772%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.36%)</title><rect x="13.6658%" y="117" width="0.3562%" height="15" fill="rgb(248,203,39)" fg:x="3184" fg:w="83"/><text x="13.9588%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.29%)</title><rect x="14.0221%" y="85" width="0.2876%" height="15" fill="rgb(240,11,18)" fg:x="3267" fg:w="67"/><text x="14.3150%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.41%)</title><rect x="14.0221%" y="101" width="0.4120%" height="15" fill="rgb(225,152,37)" fg:x="3267" fg:w="96"/><text x="14.3150%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.05%)</title><rect x="14.4341%" y="53" width="0.0472%" height="15" fill="rgb(239,32,47)" fg:x="3363" fg:w="11"/><text x="14.7271%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.15%)</title><rect x="14.4813%" y="37" width="0.1502%" height="15" fill="rgb(205,50,18)" fg:x="3374" fg:w="35"/><text x="14.7743%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.27%)</title><rect x="14.4813%" y="53" width="0.2747%" height="15" fill="rgb(212,136,13)" fg:x="3374" fg:w="64"/><text x="14.7743%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.62%)</title><rect x="14.4341%" y="69" width="0.6181%" height="15" fill="rgb(229,150,11)" fg:x="3363" fg:w="144"/><text x="14.7271%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.90%)</title><rect x="14.4341%" y="85" width="0.8970%" height="15" fill="rgb(207,164,14)" fg:x="3363" fg:w="209"/><text x="14.7271%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.94%)</title><rect x="14.4341%" y="101" width="0.9400%" height="15" fill="rgb(231,162,50)" fg:x="3363" fg:w="219"/><text x="14.7271%" y="111.50"></text></g><g><title>core::fmt::write (453 instructions, 1.94%)</title><rect x="14.0221%" y="117" width="1.9443%" height="15" fill="rgb(215,36,44)" fg:x="3267" fg:w="453"/><text x="14.3150%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (674 instructions, 2.89%)</title><rect x="13.6658%" y="133" width="2.8928%" height="15" fill="rgb(234,203,49)" fg:x="3184" fg:w="674"/><text x="13.9588%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.41%)</title><rect x="16.5587%" y="133" width="0.4077%" height="15" fill="rgb(254,23,42)" fg:x="3858" fg:w="95"/><text x="16.8516%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.26%)</title><rect x="16.9664%" y="133" width="0.2575%" height="15" fill="rgb(231,74,49)" fg:x="3953" fg:w="60"/><text x="17.2594%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.35%)</title><rect x="17.2239%" y="117" width="0.3519%" height="15" fill="rgb(217,79,14)" fg:x="4013" fg:w="82"/><text x="17.5169%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.41%)</title><rect x="17.5759%" y="117" width="0.4077%" height="15" fill="rgb(239,165,46)" fg:x="4095" fg:w="95"/><text x="17.8688%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.33%)</title><rect x="17.9836%" y="117" width="0.3262%" height="15" fill="rgb(241,131,5)" fg:x="4190" fg:w="76"/><text x="18.2766%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 1.42%)</title><rect x="17.2239%" y="133" width="1.4164%" height="15" fill="rgb(251,142,39)" fg:x="4013" fg:w="330"/><text x="17.5169%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.36%)</title><rect x="18.6403%" y="133" width="0.3562%" height="15" fill="rgb(229,53,49)" fg:x="4343" fg:w="83"/><text x="18.9333%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,947 instructions, 8.36%)</title><rect x="11.6829%" y="149" width="8.3566%" height="15" fill="rgb(206,61,20)" fg:x="2722" fg:w="1947"/><text x="11.9759%" y="159.50">binread::b..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.33%)</title><rect x="20.0395%" y="149" width="0.3262%" height="15" fill="rgb(227,144,0)" fg:x="4669" fg:w="76"/><text x="20.3325%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="20.3657%" y="149" width="0.0644%" height="15" fill="rgb(236,148,39)" fg:x="4745" fg:w="15"/><text x="20.6586%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="20.4301%" y="149" width="0.0644%" height="15" fill="rgb(245,60,32)" fg:x="4760" fg:w="15"/><text x="20.7230%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.04%)</title><rect x="20.4944%" y="149" width="0.0386%" height="15" fill="rgb(208,202,45)" fg:x="4775" fg:w="9"/><text x="20.7874%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 instructions, 0.07%)</title><rect x="20.5331%" y="149" width="0.0687%" height="15" fill="rgb(254,57,28)" fg:x="4784" fg:w="16"/><text x="20.8260%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.36%)</title><rect x="20.6017%" y="133" width="0.3562%" height="15" fill="rgb(243,1,42)" fg:x="4800" fg:w="83"/><text x="20.8947%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.77%)</title><rect x="20.6017%" y="149" width="0.7683%" height="15" fill="rgb(208,170,27)" fg:x="4800" fg:w="179"/><text x="20.8947%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.36%)</title><rect x="21.3700%" y="117" width="0.3562%" height="15" fill="rgb(214,5,16)" fg:x="4979" fg:w="83"/><text x="21.6630%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.54%)</title><rect x="21.3700%" y="133" width="0.5408%" height="15" fill="rgb(205,104,34)" fg:x="4979" fg:w="126"/><text x="21.6630%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (211 instructions, 0.91%)</title><rect x="21.3700%" y="149" width="0.9056%" height="15" fill="rgb(208,48,14)" fg:x="4979" fg:w="211"/><text x="21.6630%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.36%)</title><rect x="22.2756%" y="149" width="0.3562%" height="15" fill="rgb(212,5,51)" fg:x="5190" fg:w="83"/><text x="22.5686%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.38%)</title><rect x="22.6319%" y="149" width="0.3820%" height="15" fill="rgb(249,23,21)" fg:x="5273" fg:w="89"/><text x="22.9248%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.36%)</title><rect x="23.0139%" y="149" width="0.3562%" height="15" fill="rgb(216,206,6)" fg:x="5362" fg:w="83"/><text x="23.3068%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.36%)</title><rect x="23.3701%" y="149" width="0.3562%" height="15" fill="rgb(222,130,12)" fg:x="5445" fg:w="83"/><text x="23.6631%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="23.7263%" y="149" width="0.0172%" height="15" fill="rgb(206,64,28)" fg:x="5528" fg:w="4"/><text x="24.0193%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.38%)</title><rect x="23.7435%" y="149" width="0.3820%" height="15" fill="rgb(205,152,9)" fg:x="5532" fg:w="89"/><text x="24.0365%" y="159.50"></text></g><g><title>memcpy (428 instructions, 1.84%)</title><rect x="24.1255%" y="149" width="1.8370%" height="15" fill="rgb(250,28,30)" fg:x="5621" fg:w="428"/><text x="24.4185%" y="159.50"></text></g><g><title>memcpy (428 instructions, 1.84%)</title><rect x="25.9625%" y="149" width="1.8370%" height="15" fill="rgb(231,182,31)" fg:x="6049" fg:w="428"/><text x="26.2555%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,393 instructions, 31.73%)</title><rect x="1.1717%" y="165" width="31.7310%" height="15" fill="rgb(209,228,49)" fg:x="273" fg:w="7393"/><text x="1.4647%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (380 instructions, 1.63%)</title><rect x="32.9027%" y="165" width="1.6310%" height="15" fill="rgb(231,200,5)" fg:x="7666" fg:w="380"/><text x="33.1957%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="34.5337%" y="149" width="0.0300%" height="15" fill="rgb(205,120,31)" fg:x="8046" fg:w="7"/><text x="34.8266%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.17%)</title><rect x="34.5337%" y="165" width="0.1674%" height="15" fill="rgb(253,6,21)" fg:x="8046" fg:w="39"/><text x="34.8266%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.36%)</title><rect x="34.7011%" y="165" width="0.3562%" height="15" fill="rgb(214,177,36)" fg:x="8085" fg:w="83"/><text x="34.9940%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="35.0573%" y="149" width="0.0300%" height="15" fill="rgb(244,177,30)" fg:x="8168" fg:w="7"/><text x="35.3503%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.25%)</title><rect x="35.0873%" y="133" width="0.2532%" height="15" fill="rgb(223,109,6)" fg:x="8175" fg:w="59"/><text x="35.3803%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.40%)</title><rect x="35.3406%" y="133" width="0.4035%" height="15" fill="rgb(213,22,20)" fg:x="8234" fg:w="94"/><text x="35.6335%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.74%)</title><rect x="35.7440%" y="133" width="0.7425%" height="15" fill="rgb(237,130,54)" fg:x="8328" fg:w="173"/><text x="36.0370%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.49%)</title><rect x="35.0873%" y="149" width="2.4851%" height="15" fill="rgb(221,157,31)" fg:x="8175" fg:w="579"/><text x="35.3803%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (798 instructions, 3.43%)</title><rect x="35.0573%" y="165" width="3.4250%" height="15" fill="rgb(207,111,29)" fg:x="8168" fg:w="798"/><text x="35.3503%" y="175.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.36%)</title><rect x="38.4823%" y="165" width="0.3562%" height="15" fill="rgb(242,75,18)" fg:x="8966" fg:w="83"/><text x="38.7753%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="38.8386%" y="149" width="0.0300%" height="15" fill="rgb(254,213,50)" fg:x="9049" fg:w="7"/><text x="39.1315%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.25%)</title><rect x="38.8686%" y="133" width="0.2532%" height="15" fill="rgb(253,79,23)" fg:x="9056" fg:w="59"/><text x="39.1616%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.40%)</title><rect x="39.1219%" y="133" width="0.4035%" height="15" fill="rgb(235,164,53)" fg:x="9115" fg:w="94"/><text x="39.4148%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.74%)</title><rect x="39.5253%" y="133" width="0.7425%" height="15" fill="rgb(242,59,40)" fg:x="9209" fg:w="173"/><text x="39.8183%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.49%)</title><rect x="38.8686%" y="149" width="2.4851%" height="15" fill="rgb(232,12,52)" fg:x="9056" fg:w="579"/><text x="39.1616%" y="159.50">c..</text></g><g><title>memcmp (77 instructions, 0.33%)</title><rect x="41.3537%" y="149" width="0.3305%" height="15" fill="rgb(244,113,37)" fg:x="9635" fg:w="77"/><text x="41.6467%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.38%)</title><rect x="41.6842%" y="133" width="0.3820%" height="15" fill="rgb(240,51,50)" fg:x="9712" fg:w="89"/><text x="41.9772%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (124 instructions, 0.53%)</title><rect x="41.6842%" y="149" width="0.5322%" height="15" fill="rgb(253,226,23)" fg:x="9712" fg:w="124"/><text x="41.9772%" y="159.50"></text></g><g><title>candid::types::internal::env_add (965 instructions, 4.14%)</title><rect x="38.8386%" y="165" width="4.1418%" height="15" fill="rgb(213,197,3)" fg:x="9049" fg:w="965"/><text x="39.1315%" y="175.50">can..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.25%)</title><rect x="42.9804%" y="117" width="0.2532%" height="15" fill="rgb(243,83,4)" fg:x="10014" fg:w="59"/><text x="43.2734%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (93 instructions, 0.40%)</title><rect x="42.9804%" y="133" width="0.3992%" height="15" fill="rgb(239,177,28)" fg:x="10014" fg:w="93"/><text x="43.2734%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (316 instructions, 1.36%)</title><rect x="42.9804%" y="149" width="1.3563%" height="15" fill="rgb(237,192,34)" fg:x="10014" fg:w="316"/><text x="43.2734%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.324 (18 instructions, 0.08%)</title><rect x="44.3367%" y="149" width="0.0773%" height="15" fill="rgb(238,167,24)" fg:x="10330" fg:w="18"/><text x="44.6296%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="44.4139%" y="149" width="0.0558%" height="15" fill="rgb(224,93,16)" fg:x="10348" fg:w="13"/><text x="44.7069%" y="159.50"></text></g><g><title>candid::types::internal::env_id (529 instructions, 2.27%)</title><rect x="42.9804%" y="165" width="2.2705%" height="15" fill="rgb(236,207,11)" fg:x="10014" fg:w="529"/><text x="43.2734%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.23%)</title><rect x="45.2509%" y="165" width="0.2275%" height="15" fill="rgb(226,109,10)" fg:x="10543" fg:w="53"/><text x="45.5438%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="45.4783%" y="133" width="0.1159%" height="15" fill="rgb(212,61,41)" fg:x="10596" fg:w="27"/><text x="45.7713%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.61%)</title><rect x="45.4783%" y="149" width="0.6095%" height="15" fill="rgb(207,128,8)" fg:x="10596" fg:w="142"/><text x="45.7713%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="46.2380%" y="133" width="0.1159%" height="15" fill="rgb(221,67,43)" fg:x="10773" fg:w="27"/><text x="46.5310%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.61%)</title><rect x="46.2380%" y="149" width="0.6095%" height="15" fill="rgb(226,66,21)" fg:x="10773" fg:w="142"/><text x="46.5310%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (354 instructions, 1.52%)</title><rect x="45.4783%" y="165" width="1.5194%" height="15" fill="rgb(229,18,3)" fg:x="10596" fg:w="354"/><text x="45.7713%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.15%)</title><rect x="46.9977%" y="149" width="0.1459%" height="15" fill="rgb(245,76,6)" fg:x="10950" fg:w="34"/><text x="47.2907%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1166 (18 instructions, 0.08%)</title><rect x="47.1437%" y="149" width="0.0773%" height="15" fill="rgb(240,105,34)" fg:x="10984" fg:w="18"/><text x="47.4366%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1166 (18 instructions, 0.08%)</title><rect x="47.2209%" y="149" width="0.0773%" height="15" fill="rgb(234,136,0)" fg:x="11002" fg:w="18"/><text x="47.5139%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (167 instructions, 0.72%)</title><rect x="46.9977%" y="165" width="0.7168%" height="15" fill="rgb(212,8,26)" fg:x="10950" fg:w="167"/><text x="47.2907%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="47.7145%" y="165" width="0.0558%" height="15" fill="rgb(241,62,23)" fg:x="11117" fg:w="13"/><text x="48.0075%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="47.7703%" y="165" width="0.0558%" height="15" fill="rgb(250,151,42)" fg:x="11130" fg:w="13"/><text x="48.0633%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="47.8261%" y="165" width="0.0558%" height="15" fill="rgb(231,116,54)" fg:x="11143" fg:w="13"/><text x="48.1191%" y="175.50"></text></g><g><title>memcpy (440 instructions, 1.89%)</title><rect x="47.8819%" y="165" width="1.8885%" height="15" fill="rgb(244,61,21)" fg:x="11156" fg:w="440"/><text x="48.1749%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="49.7704%" y="133" width="0.0300%" height="15" fill="rgb(239,2,40)" fg:x="11596" fg:w="7"/><text x="50.0633%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="49.8004%" y="117" width="0.1159%" height="15" fill="rgb(215,102,48)" fg:x="11603" fg:w="27"/><text x="50.0934%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="49.9163%" y="117" width="0.1159%" height="15" fill="rgb(222,117,31)" fg:x="11630" fg:w="27"/><text x="50.2093%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.85%)</title><rect x="49.8004%" y="133" width="0.8455%" height="15" fill="rgb(209,24,32)" fg:x="11603" fg:w="197"/><text x="50.0934%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="50.6460%" y="101" width="0.1159%" height="15" fill="rgb(239,102,35)" fg:x="11800" fg:w="27"/><text x="50.9389%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (99 instructions, 0.42%)</title><rect x="50.7618%" y="101" width="0.4249%" height="15" fill="rgb(208,15,9)" fg:x="11827" fg:w="99"/><text x="51.0548%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (220 instructions, 0.94%)</title><rect x="50.6460%" y="117" width="0.9442%" height="15" fill="rgb(236,134,34)" fg:x="11800" fg:w="220"/><text x="50.9389%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (255 instructions, 1.09%)</title><rect x="50.6460%" y="133" width="1.0945%" height="15" fill="rgb(207,225,26)" fg:x="11800" fg:w="255"/><text x="50.9389%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="51.7404%" y="133" width="0.0558%" height="15" fill="rgb(216,201,41)" fg:x="12055" fg:w="13"/><text x="52.0334%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (534 instructions, 2.29%)</title><rect x="49.7704%" y="149" width="2.2919%" height="15" fill="rgb(240,161,44)" fg:x="11596" fg:w="534"/><text x="50.0633%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (583 instructions, 2.50%)</title><rect x="49.7704%" y="165" width="2.5023%" height="15" fill="rgb(222,26,26)" fg:x="11596" fg:w="583"/><text x="50.0633%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (67 instructions, 0.29%)</title><rect x="52.2726%" y="149" width="0.2876%" height="15" fill="rgb(223,158,32)" fg:x="12179" fg:w="67"/><text x="52.5656%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (99 instructions, 0.42%)</title><rect x="52.5602%" y="149" width="0.4249%" height="15" fill="rgb(210,61,39)" fg:x="12246" fg:w="99"/><text x="52.8532%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (260 instructions, 1.12%)</title><rect x="52.2726%" y="165" width="1.1159%" height="15" fill="rgb(240,102,7)" fg:x="12179" fg:w="260"/><text x="52.5656%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,719 instructions, 58.88%)</title><rect x="0.8155%" y="181" width="58.8824%" height="15" fill="rgb(229,55,0)" fg:x="190" fg:w="13719"/><text x="1.1085%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="59.6978%" y="149" width="0.0300%" height="15" fill="rgb(232,7,19)" fg:x="13909" fg:w="7"/><text x="59.9908%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (67 instructions, 0.29%)</title><rect x="59.7279%" y="117" width="0.2876%" height="15" fill="rgb(213,218,8)" fg:x="13916" fg:w="67"/><text x="60.0209%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (155 instructions, 0.67%)</title><rect x="59.7279%" y="133" width="0.6653%" height="15" fill="rgb(232,37,8)" fg:x="13916" fg:w="155"/><text x="60.0209%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (190 instructions, 0.82%)</title><rect x="59.7279%" y="149" width="0.8155%" height="15" fill="rgb(241,213,53)" fg:x="13916" fg:w="190"/><text x="60.0209%" y="159.50"></text></g><g><title>memset (152 instructions, 0.65%)</title><rect x="60.5434%" y="149" width="0.6524%" height="15" fill="rgb(225,16,30)" fg:x="14106" fg:w="152"/><text x="60.8363%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (520 instructions, 2.23%)</title><rect x="59.6978%" y="165" width="2.2319%" height="15" fill="rgb(246,104,32)" fg:x="13909" fg:w="520"/><text x="59.9908%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (518 instructions, 2.22%)</title><rect x="61.9297%" y="149" width="2.2233%" height="15" fill="rgb(214,147,38)" fg:x="14429" fg:w="518"/><text x="62.2227%" y="159.50">s..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.36%)</title><rect x="64.1530%" y="101" width="0.3562%" height="15" fill="rgb(236,51,37)" fg:x="14947" fg:w="83"/><text x="64.4459%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.54%)</title><rect x="64.1530%" y="117" width="0.5408%" height="15" fill="rgb(247,162,25)" fg:x="14947" fg:w="126"/><text x="64.4459%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (208 instructions, 0.89%)</title><rect x="64.1530%" y="133" width="0.8927%" height="15" fill="rgb(223,180,33)" fg:x="14947" fg:w="208"/><text x="64.4459%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="65.0457%" y="133" width="0.0644%" height="15" fill="rgb(216,31,11)" fg:x="15155" fg:w="15"/><text x="65.3387%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="65.1101%" y="133" width="0.0644%" height="15" fill="rgb(231,120,19)" fg:x="15170" fg:w="15"/><text x="65.4031%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (426 instructions, 1.83%)</title><rect x="64.1530%" y="149" width="1.8284%" height="15" fill="rgb(244,121,16)" fg:x="14947" fg:w="426"/><text x="64.4459%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 2.21%)</title><rect x="65.9814%" y="149" width="2.2147%" height="15" fill="rgb(243,136,41)" fg:x="15373" fg:w="516"/><text x="66.2743%" y="159.50">s..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.03%)</title><rect x="68.1961%" y="149" width="0.0300%" height="15" fill="rgb(226,3,23)" fg:x="15889" fg:w="7"/><text x="68.4890%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,560 instructions, 6.70%)</title><rect x="61.9297%" y="165" width="6.6956%" height="15" fill="rgb(218,185,37)" fg:x="14429" fg:w="1560"/><text x="62.2227%" y="175.50">candid:..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="68.6253%" y="165" width="0.0300%" height="15" fill="rgb(243,48,34)" fg:x="15989" fg:w="7"/><text x="68.9182%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.26%)</title><rect x="68.6553%" y="165" width="0.2575%" height="15" fill="rgb(235,11,33)" fg:x="15996" fg:w="60"/><text x="68.9483%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,753 instructions, 11.82%)</title><rect x="59.6978%" y="181" width="11.8160%" height="15" fill="rgb(212,49,7)" fg:x="13909" fg:w="2753"/><text x="59.9908%" y="191.50">ic_cdk::api::ca..</text></g><g><title>heap::__canister_method_batch_put::{{closure}} (22,746 instructions, 97.63%)</title><rect x="0.8155%" y="197" width="97.6265%" height="15" fill="rgb(249,56,51)" fg:x="190" fg:w="22746"/><text x="1.1085%" y="207.50">heap::__canister_method_batch_put::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.06%)</title><rect x="98.4420%" y="197" width="0.0601%" height="15" fill="rgb(214,128,34)" fg:x="22936" fg:w="14"/><text x="98.7350%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="98.8884%" y="181" width="0.1159%" height="15" fill="rgb(212,28,38)" fg:x="23040" fg:w="27"/><text x="99.1813%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 0.88%)</title><rect x="98.5064%" y="197" width="0.8756%" height="15" fill="rgb(242,47,37)" fg:x="22951" fg:w="204"/><text x="98.7993%" y="207.50"></text></g><g><title>all (23,299 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,5,11)" fg:x="0" fg:w="23299"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (23,299 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,227,22)" fg:x="0" fg:w="23299"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>