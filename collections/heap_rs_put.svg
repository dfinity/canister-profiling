<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="20578"><g><title>ic_cdk::setup (7 instructions, 0.03%)</title><rect x="0.0000%" y="197" width="0.0340%" height="15" fill="rgb(244,130,35)" fg:x="0" fg:w="7"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.44%)</title><rect x="0.0340%" y="165" width="0.4374%" height="15" fill="rgb(253,80,17)" fg:x="7" fg:w="90"/><text x="0.3270%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.49%)</title><rect x="0.0340%" y="181" width="0.4860%" height="15" fill="rgb(212,155,9)" fg:x="7" fg:w="100"/><text x="0.3270%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.44%)</title><rect x="0.5346%" y="165" width="0.4374%" height="15" fill="rgb(241,206,12)" fg:x="110" fg:w="90"/><text x="0.8275%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.49%)</title><rect x="0.5346%" y="181" width="0.4860%" height="15" fill="rgb(231,92,13)" fg:x="110" fg:w="100"/><text x="0.8275%" y="191.50"></text></g><g><title>__rust_alloc (206 instructions, 1.00%)</title><rect x="0.0340%" y="197" width="1.0011%" height="15" fill="rgb(253,134,47)" fg:x="7" fg:w="206"/><text x="0.3270%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.44%)</title><rect x="1.0351%" y="133" width="0.4374%" height="15" fill="rgb(208,227,24)" fg:x="213" fg:w="90"/><text x="1.3281%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.49%)</title><rect x="1.0351%" y="149" width="0.4860%" height="15" fill="rgb(244,199,0)" fg:x="213" fg:w="100"/><text x="1.3281%" y="159.50"></text></g><g><title>__rust_alloc (103 instructions, 0.50%)</title><rect x="1.0351%" y="165" width="0.5005%" height="15" fill="rgb(249,16,50)" fg:x="213" fg:w="103"/><text x="1.3281%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (162 instructions, 0.79%)</title><rect x="1.0351%" y="181" width="0.7872%" height="15" fill="rgb(252,30,44)" fg:x="213" fg:w="162"/><text x="1.3281%" y="191.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.30%)</title><rect x="1.8223%" y="165" width="0.2964%" height="15" fill="rgb(230,4,18)" fg:x="375" fg:w="61"/><text x="2.1153%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="2.1188%" y="149" width="0.0194%" height="15" fill="rgb(250,158,30)" fg:x="436" fg:w="4"/><text x="2.4117%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 1.98%)</title><rect x="2.1188%" y="165" width="1.9778%" height="15" fill="rgb(232,53,19)" fg:x="436" fg:w="407"/><text x="2.4117%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.36%)</title><rect x="4.0966%" y="165" width="0.3596%" height="15" fill="rgb(213,226,6)" fg:x="843" fg:w="74"/><text x="4.3896%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.26%)</title><rect x="4.4562%" y="165" width="0.2624%" height="15" fill="rgb(217,176,20)" fg:x="917" fg:w="54"/><text x="4.7492%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.26%)</title><rect x="4.7186%" y="165" width="0.2624%" height="15" fill="rgb(225,54,37)" fg:x="971" fg:w="54"/><text x="5.0116%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.26%)</title><rect x="4.9810%" y="165" width="0.2624%" height="15" fill="rgb(214,205,0)" fg:x="1025" fg:w="54"/><text x="5.2740%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.26%)</title><rect x="5.2435%" y="165" width="0.2624%" height="15" fill="rgb(245,132,47)" fg:x="1079" fg:w="54"/><text x="5.5364%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.30%)</title><rect x="5.5059%" y="165" width="0.2964%" height="15" fill="rgb(210,47,1)" fg:x="1133" fg:w="61"/><text x="5.7988%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.47%)</title><rect x="5.8023%" y="165" width="0.4714%" height="15" fill="rgb(227,221,22)" fg:x="1194" fg:w="97"/><text x="6.0953%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="6.2737%" y="149" width="0.0194%" height="15" fill="rgb(206,57,54)" fg:x="1291" fg:w="4"/><text x="6.5667%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 1.98%)</title><rect x="6.2737%" y="165" width="1.9778%" height="15" fill="rgb(226,58,41)" fg:x="1291" fg:w="407"/><text x="6.5667%" y="175.50"></text></g><g><title>memcmp (16 instructions, 0.08%)</title><rect x="8.2515%" y="165" width="0.0778%" height="15" fill="rgb(247,21,53)" fg:x="1698" fg:w="16"/><text x="8.5445%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.44%)</title><rect x="8.3293%" y="101" width="0.4374%" height="15" fill="rgb(244,23,37)" fg:x="1714" fg:w="90"/><text x="8.6223%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.49%)</title><rect x="8.3293%" y="117" width="0.4860%" height="15" fill="rgb(216,131,33)" fg:x="1714" fg:w="100"/><text x="8.6223%" y="127.50"></text></g><g><title>__rust_alloc (103 instructions, 0.50%)</title><rect x="8.3293%" y="133" width="0.5005%" height="15" fill="rgb(212,168,37)" fg:x="1714" fg:w="103"/><text x="8.6223%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.29%)</title><rect x="8.8298%" y="101" width="0.2916%" height="15" fill="rgb(221,9,27)" fg:x="1817" fg:w="60"/><text x="9.1228%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.41%)</title><rect x="8.8298%" y="117" width="0.4131%" height="15" fill="rgb(205,86,21)" fg:x="1817" fg:w="85"/><text x="9.1228%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.04%)</title><rect x="9.2429%" y="69" width="0.0437%" height="15" fill="rgb(221,59,3)" fg:x="1902" fg:w="9"/><text x="9.5358%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.15%)</title><rect x="9.2866%" y="53" width="0.1458%" height="15" fill="rgb(247,105,42)" fg:x="1911" fg:w="30"/><text x="9.5796%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.27%)</title><rect x="9.2866%" y="69" width="0.2673%" height="15" fill="rgb(236,89,35)" fg:x="1911" fg:w="55"/><text x="9.5796%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.56%)</title><rect x="9.2429%" y="85" width="0.5637%" height="15" fill="rgb(236,58,39)" fg:x="1902" fg:w="116"/><text x="9.5358%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.82%)</title><rect x="9.2429%" y="101" width="0.8213%" height="15" fill="rgb(246,56,4)" fg:x="1902" fg:w="169"/><text x="9.5358%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.85%)</title><rect x="9.2429%" y="117" width="0.8456%" height="15" fill="rgb(209,147,29)" fg:x="1902" fg:w="174"/><text x="9.5358%" y="127.50"></text></g><g><title>core::fmt::write (367 instructions, 1.78%)</title><rect x="8.8298%" y="133" width="1.7835%" height="15" fill="rgb(231,180,44)" fg:x="1817" fg:w="367"/><text x="9.1228%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (613 instructions, 2.98%)</title><rect x="8.3293%" y="149" width="2.9789%" height="15" fill="rgb(252,225,34)" fg:x="1714" fg:w="613"/><text x="8.6223%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.36%)</title><rect x="11.3082%" y="149" width="0.3596%" height="15" fill="rgb(219,50,10)" fg:x="2327" fg:w="74"/><text x="11.6012%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.26%)</title><rect x="11.6678%" y="149" width="0.2624%" height="15" fill="rgb(217,192,54)" fg:x="2401" fg:w="54"/><text x="11.9608%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (812 instructions, 3.95%)</title><rect x="8.3293%" y="165" width="3.9460%" height="15" fill="rgb(223,40,49)" fg:x="1714" fg:w="812"/><text x="8.6223%" y="175.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.27%)</title><rect x="12.2752%" y="165" width="0.2721%" height="15" fill="rgb(254,69,24)" fg:x="2526" fg:w="56"/><text x="12.5682%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.47%)</title><rect x="12.5474%" y="165" width="0.4714%" height="15" fill="rgb(214,213,4)" fg:x="2582" fg:w="97"/><text x="12.8403%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="13.0188%" y="133" width="0.0194%" height="15" fill="rgb(223,171,1)" fg:x="2679" fg:w="4"/><text x="13.3117%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 1.98%)</title><rect x="13.0188%" y="149" width="1.9778%" height="15" fill="rgb(231,88,51)" fg:x="2679" fg:w="407"/><text x="13.3117%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.08%)</title><rect x="14.9966%" y="149" width="0.0778%" height="15" fill="rgb(248,57,42)" fg:x="3086" fg:w="16"/><text x="15.2896%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.44%)</title><rect x="15.0744%" y="85" width="0.4374%" height="15" fill="rgb(234,101,33)" fg:x="3102" fg:w="90"/><text x="15.3673%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.49%)</title><rect x="15.0744%" y="101" width="0.4860%" height="15" fill="rgb(252,203,38)" fg:x="3102" fg:w="100"/><text x="15.3673%" y="111.50"></text></g><g><title>__rust_alloc (103 instructions, 0.50%)</title><rect x="15.0744%" y="117" width="0.5005%" height="15" fill="rgb(239,47,23)" fg:x="3102" fg:w="103"/><text x="15.3673%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.29%)</title><rect x="15.5749%" y="85" width="0.2916%" height="15" fill="rgb(217,190,39)" fg:x="3205" fg:w="60"/><text x="15.8679%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.41%)</title><rect x="15.5749%" y="101" width="0.4131%" height="15" fill="rgb(218,31,13)" fg:x="3205" fg:w="85"/><text x="15.8679%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.04%)</title><rect x="15.9879%" y="53" width="0.0437%" height="15" fill="rgb(214,45,28)" fg:x="3290" fg:w="9"/><text x="16.2809%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.15%)</title><rect x="16.0317%" y="37" width="0.1458%" height="15" fill="rgb(232,89,48)" fg:x="3299" fg:w="30"/><text x="16.3247%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.27%)</title><rect x="16.0317%" y="53" width="0.2673%" height="15" fill="rgb(219,20,54)" fg:x="3299" fg:w="55"/><text x="16.3247%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.56%)</title><rect x="15.9879%" y="69" width="0.5637%" height="15" fill="rgb(219,181,24)" fg:x="3290" fg:w="116"/><text x="16.2809%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.82%)</title><rect x="15.9879%" y="85" width="0.8213%" height="15" fill="rgb(216,104,51)" fg:x="3290" fg:w="169"/><text x="16.2809%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.85%)</title><rect x="15.9879%" y="101" width="0.8456%" height="15" fill="rgb(242,186,26)" fg:x="3290" fg:w="174"/><text x="16.2809%" y="111.50"></text></g><g><title>core::fmt::write (367 instructions, 1.78%)</title><rect x="15.5749%" y="117" width="1.7835%" height="15" fill="rgb(248,150,40)" fg:x="3205" fg:w="367"/><text x="15.8679%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (613 instructions, 2.98%)</title><rect x="15.0744%" y="133" width="2.9789%" height="15" fill="rgb(216,223,24)" fg:x="3102" fg:w="613"/><text x="15.3673%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.36%)</title><rect x="18.0533%" y="133" width="0.3596%" height="15" fill="rgb(229,34,36)" fg:x="3715" fg:w="74"/><text x="18.3462%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.26%)</title><rect x="18.4129%" y="133" width="0.2624%" height="15" fill="rgb(228,120,15)" fg:x="3789" fg:w="54"/><text x="18.7058%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (812 instructions, 3.95%)</title><rect x="15.0744%" y="149" width="3.9460%" height="15" fill="rgb(236,38,21)" fg:x="3102" fg:w="812"/><text x="15.3673%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.30%)</title><rect x="19.0203%" y="133" width="0.2964%" height="15" fill="rgb(217,51,0)" fg:x="3914" fg:w="61"/><text x="19.3133%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (126 instructions, 0.61%)</title><rect x="19.3167%" y="133" width="0.6123%" height="15" fill="rgb(218,102,33)" fg:x="3975" fg:w="126"/><text x="19.6097%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.27%)</title><rect x="19.9291%" y="133" width="0.2721%" height="15" fill="rgb(234,177,16)" fg:x="4101" fg:w="56"/><text x="20.2220%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (305 instructions, 1.48%)</title><rect x="19.0203%" y="149" width="1.4822%" height="15" fill="rgb(241,33,14)" fg:x="3914" fg:w="305"/><text x="19.3133%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.44%)</title><rect x="20.5025%" y="117" width="0.4374%" height="15" fill="rgb(242,40,4)" fg:x="4219" fg:w="90"/><text x="20.7954%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.49%)</title><rect x="20.5025%" y="133" width="0.4860%" height="15" fill="rgb(205,117,35)" fg:x="4219" fg:w="100"/><text x="20.7954%" y="143.50"></text></g><g><title>__rust_alloc (103 instructions, 0.50%)</title><rect x="20.5025%" y="149" width="0.5005%" height="15" fill="rgb(251,108,13)" fg:x="4219" fg:w="103"/><text x="20.7954%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,868 instructions, 9.08%)</title><rect x="13.0188%" y="165" width="9.0777%" height="15" fill="rgb(249,81,52)" fg:x="2679" fg:w="1868"/><text x="13.3117%" y="175.50">binread::bi..</text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.27%)</title><rect x="22.0964%" y="165" width="0.2721%" height="15" fill="rgb(208,7,11)" fg:x="4547" fg:w="56"/><text x="22.3894%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.06%)</title><rect x="22.3685%" y="165" width="0.0632%" height="15" fill="rgb(246,33,49)" fg:x="4603" fg:w="13"/><text x="22.6615%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.06%)</title><rect x="22.4317%" y="165" width="0.0632%" height="15" fill="rgb(233,54,27)" fg:x="4616" fg:w="13"/><text x="22.7247%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.11%)</title><rect x="22.4949%" y="165" width="0.1069%" height="15" fill="rgb(221,162,39)" fg:x="4629" fg:w="22"/><text x="22.7879%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.44%)</title><rect x="22.6018%" y="117" width="0.4374%" height="15" fill="rgb(214,206,37)" fg:x="4651" fg:w="90"/><text x="22.8948%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.49%)</title><rect x="22.6018%" y="133" width="0.4860%" height="15" fill="rgb(228,208,35)" fg:x="4651" fg:w="100"/><text x="22.8948%" y="143.50"></text></g><g><title>__rust_alloc (103 instructions, 0.50%)</title><rect x="22.6018%" y="149" width="0.5005%" height="15" fill="rgb(224,178,26)" fg:x="4651" fg:w="103"/><text x="22.8948%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (183 instructions, 0.89%)</title><rect x="22.6018%" y="165" width="0.8893%" height="15" fill="rgb(205,105,31)" fg:x="4651" fg:w="183"/><text x="22.8948%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.44%)</title><rect x="23.4911%" y="101" width="0.4374%" height="15" fill="rgb(235,59,21)" fg:x="4834" fg:w="90"/><text x="23.7841%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.49%)</title><rect x="23.4911%" y="117" width="0.4860%" height="15" fill="rgb(211,34,11)" fg:x="4834" fg:w="100"/><text x="23.7841%" y="127.50"></text></g><g><title>__rust_alloc (103 instructions, 0.50%)</title><rect x="23.4911%" y="133" width="0.5005%" height="15" fill="rgb(250,37,32)" fg:x="4834" fg:w="103"/><text x="23.7841%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (133 instructions, 0.65%)</title><rect x="23.4911%" y="149" width="0.6463%" height="15" fill="rgb(230,13,43)" fg:x="4834" fg:w="133"/><text x="23.7841%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (201 instructions, 0.98%)</title><rect x="23.4911%" y="165" width="0.9768%" height="15" fill="rgb(233,183,21)" fg:x="4834" fg:w="201"/><text x="23.7841%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.44%)</title><rect x="24.4679%" y="133" width="0.4374%" height="15" fill="rgb(248,216,9)" fg:x="5035" fg:w="90"/><text x="24.7608%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.49%)</title><rect x="24.4679%" y="149" width="0.4860%" height="15" fill="rgb(205,162,49)" fg:x="5035" fg:w="100"/><text x="24.7608%" y="159.50"></text></g><g><title>__rust_alloc (103 instructions, 0.50%)</title><rect x="24.4679%" y="165" width="0.5005%" height="15" fill="rgb(248,150,15)" fg:x="5035" fg:w="103"/><text x="24.7608%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.39%)</title><rect x="24.9684%" y="165" width="0.3936%" height="15" fill="rgb(206,71,32)" fg:x="5138" fg:w="81"/><text x="25.2614%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.44%)</title><rect x="25.3620%" y="133" width="0.4374%" height="15" fill="rgb(247,97,53)" fg:x="5219" fg:w="90"/><text x="25.6550%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.49%)</title><rect x="25.3620%" y="149" width="0.4860%" height="15" fill="rgb(213,211,49)" fg:x="5219" fg:w="100"/><text x="25.6550%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.44%)</title><rect x="25.8626%" y="133" width="0.4374%" height="15" fill="rgb(219,107,10)" fg:x="5322" fg:w="90"/><text x="26.1555%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.49%)</title><rect x="25.8626%" y="149" width="0.4860%" height="15" fill="rgb(244,145,30)" fg:x="5322" fg:w="100"/><text x="26.1555%" y="159.50"></text></g><g><title>__rust_alloc (206 instructions, 1.00%)</title><rect x="25.3620%" y="165" width="1.0011%" height="15" fill="rgb(232,1,34)" fg:x="5219" fg:w="206"/><text x="25.6550%" y="175.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (14 instructions, 0.07%)</title><rect x="26.3631%" y="165" width="0.0680%" height="15" fill="rgb(245,177,37)" fg:x="5425" fg:w="14"/><text x="26.6561%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.39%)</title><rect x="26.4311%" y="165" width="0.3936%" height="15" fill="rgb(215,113,7)" fg:x="5439" fg:w="81"/><text x="26.7241%" y="175.50"></text></g><g><title>memcpy (411 instructions, 2.00%)</title><rect x="26.8248%" y="165" width="1.9973%" height="15" fill="rgb(208,2,21)" fg:x="5520" fg:w="411"/><text x="27.1177%" y="175.50"></text></g><g><title>memcpy (366 instructions, 1.78%)</title><rect x="28.8220%" y="165" width="1.7786%" height="15" fill="rgb(205,155,42)" fg:x="5931" fg:w="366"/><text x="29.1150%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,237 instructions, 35.17%)</title><rect x="1.8223%" y="181" width="35.1686%" height="15" fill="rgb(229,38,31)" fg:x="375" fg:w="7237"/><text x="2.1153%" y="191.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (381 instructions, 1.85%)</title><rect x="36.9910%" y="181" width="1.8515%" height="15" fill="rgb(239,71,53)" fg:x="7612" fg:w="381"/><text x="37.2839%" y="191.50"></text></g><g><title>memcpy (381 instructions, 1.85%)</title><rect x="38.8425%" y="181" width="1.8515%" height="15" fill="rgb(225,195,29)" fg:x="7993" fg:w="381"/><text x="39.1354%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 instructions, 0.03%)</title><rect x="40.6939%" y="165" width="0.0292%" height="15" fill="rgb(221,15,43)" fg:x="8374" fg:w="6"/><text x="40.9869%" y="175.50"></text></g><g><title>candid::types::internal::find_type (45 instructions, 0.22%)</title><rect x="40.6939%" y="181" width="0.2187%" height="15" fill="rgb(231,60,24)" fg:x="8374" fg:w="45"/><text x="40.9869%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.44%)</title><rect x="40.9126%" y="133" width="0.4374%" height="15" fill="rgb(251,134,39)" fg:x="8419" fg:w="90"/><text x="41.2056%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.49%)</title><rect x="40.9126%" y="149" width="0.4860%" height="15" fill="rgb(253,58,6)" fg:x="8419" fg:w="100"/><text x="41.2056%" y="159.50"></text></g><g><title>__rust_alloc (103 instructions, 0.50%)</title><rect x="40.9126%" y="165" width="0.5005%" height="15" fill="rgb(216,28,44)" fg:x="8419" fg:w="103"/><text x="41.2056%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (149 instructions, 0.72%)</title><rect x="40.9126%" y="181" width="0.7241%" height="15" fill="rgb(244,125,18)" fg:x="8419" fg:w="149"/><text x="41.2056%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="41.6367%" y="149" width="0.0243%" height="15" fill="rgb(225,69,25)" fg:x="8568" fg:w="5"/><text x="41.9297%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.26%)</title><rect x="41.6610%" y="133" width="0.2576%" height="15" fill="rgb(251,218,25)" fg:x="8573" fg:w="53"/><text x="41.9540%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.43%)</title><rect x="41.9186%" y="133" width="0.4325%" height="15" fill="rgb(253,87,43)" fg:x="8626" fg:w="89"/><text x="42.2115%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.78%)</title><rect x="42.3511%" y="133" width="0.7824%" height="15" fill="rgb(249,69,50)" fg:x="8715" fg:w="161"/><text x="42.6440%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 2.65%)</title><rect x="41.6610%" y="149" width="2.6533%" height="15" fill="rgb(216,86,9)" fg:x="8573" fg:w="546"/><text x="41.9540%" y="159.50">c..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (796 instructions, 3.87%)</title><rect x="41.6367%" y="165" width="3.8682%" height="15" fill="rgb(253,75,17)" fg:x="8568" fg:w="796"/><text x="41.9297%" y="175.50">std..</text></g><g><title>candid::types::internal::env_add (822 instructions, 3.99%)</title><rect x="41.6367%" y="181" width="3.9946%" height="15" fill="rgb(238,97,26)" fg:x="8568" fg:w="822"/><text x="41.9297%" y="191.50">can..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.44%)</title><rect x="45.6313%" y="149" width="0.4374%" height="15" fill="rgb(219,39,33)" fg:x="9390" fg:w="90"/><text x="45.9242%" y="159.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.49%)</title><rect x="45.6313%" y="165" width="0.4860%" height="15" fill="rgb(227,11,6)" fg:x="9390" fg:w="100"/><text x="45.9242%" y="175.50"></text></g><g><title>__rust_alloc (103 instructions, 0.50%)</title><rect x="45.6313%" y="181" width="0.5005%" height="15" fill="rgb(213,136,9)" fg:x="9390" fg:w="103"/><text x="45.9242%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="46.1318%" y="149" width="0.0243%" height="15" fill="rgb(245,169,36)" fg:x="9493" fg:w="5"/><text x="46.4248%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.26%)</title><rect x="46.1561%" y="133" width="0.2576%" height="15" fill="rgb(225,25,50)" fg:x="9498" fg:w="53"/><text x="46.4491%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.43%)</title><rect x="46.4136%" y="133" width="0.4325%" height="15" fill="rgb(222,83,19)" fg:x="9551" fg:w="89"/><text x="46.7066%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.78%)</title><rect x="46.8461%" y="133" width="0.7824%" height="15" fill="rgb(212,167,41)" fg:x="9640" fg:w="161"/><text x="47.1391%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 2.65%)</title><rect x="46.1561%" y="149" width="2.6533%" height="15" fill="rgb(232,9,33)" fg:x="9498" fg:w="546"/><text x="46.4491%" y="159.50">c..</text></g><g><title>memcmp (68 instructions, 0.33%)</title><rect x="48.8094%" y="149" width="0.3304%" height="15" fill="rgb(244,178,15)" fg:x="10044" fg:w="68"/><text x="49.1024%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.39%)</title><rect x="49.1399%" y="133" width="0.3936%" height="15" fill="rgb(236,126,50)" fg:x="10112" fg:w="81"/><text x="49.4328%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (111 instructions, 0.54%)</title><rect x="49.1399%" y="149" width="0.5394%" height="15" fill="rgb(219,17,2)" fg:x="10112" fg:w="111"/><text x="49.4328%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (904 instructions, 4.39%)</title><rect x="46.1318%" y="165" width="4.3930%" height="15" fill="rgb(245,209,10)" fg:x="9493" fg:w="904"/><text x="46.4248%" y="175.50">std:..</text></g><g><title>candid::types::internal::env_add (930 instructions, 4.52%)</title><rect x="46.1318%" y="181" width="4.5194%" height="15" fill="rgb(234,175,37)" fg:x="9493" fg:w="930"/><text x="46.4248%" y="191.50">cand..</text></g><g><title>candid::types::internal::ID::__getit (5 instructions, 0.02%)</title><rect x="50.6512%" y="149" width="0.0243%" height="15" fill="rgb(254,65,4)" fg:x="10423" fg:w="5"/><text x="50.9441%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.26%)</title><rect x="50.6755%" y="117" width="0.2576%" height="15" fill="rgb(221,108,4)" fg:x="10428" fg:w="53"/><text x="50.9684%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.38%)</title><rect x="50.6755%" y="133" width="0.3790%" height="15" fill="rgb(221,182,35)" fg:x="10428" fg:w="78"/><text x="50.9684%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (300 instructions, 1.46%)</title><rect x="50.6755%" y="149" width="1.4579%" height="15" fill="rgb(210,55,22)" fg:x="10428" fg:w="300"/><text x="50.9684%" y="159.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::PartialEq&gt;::eq (27 instructions, 0.13%)</title><rect x="52.1333%" y="149" width="0.1312%" height="15" fill="rgb(232,59,17)" fg:x="10728" fg:w="27"/><text x="52.4263%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="52.2646%" y="149" width="0.0535%" height="15" fill="rgb(252,78,29)" fg:x="10755" fg:w="11"/><text x="52.5575%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (515 instructions, 2.50%)</title><rect x="50.6512%" y="165" width="2.5027%" height="15" fill="rgb(221,208,19)" fg:x="10423" fg:w="515"/><text x="50.9441%" y="175.50">s..</text></g><g><title>candid::types::internal::env_id (552 instructions, 2.68%)</title><rect x="50.6512%" y="181" width="2.6825%" height="15" fill="rgb(206,150,53)" fg:x="10423" fg:w="552"/><text x="50.9441%" y="191.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (37 instructions, 0.18%)</title><rect x="53.3337%" y="181" width="0.1798%" height="15" fill="rgb(241,225,22)" fg:x="10975" fg:w="37"/><text x="53.6266%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.60%)</title><rect x="53.5135%" y="165" width="0.5977%" height="15" fill="rgb(220,195,13)" fg:x="11012" fg:w="123"/><text x="53.8064%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.60%)</title><rect x="54.2570%" y="165" width="0.5977%" height="15" fill="rgb(242,90,11)" fg:x="11165" fg:w="123"/><text x="54.5499%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (306 instructions, 1.49%)</title><rect x="53.5135%" y="181" width="1.4870%" height="15" fill="rgb(207,199,19)" fg:x="11012" fg:w="306"/><text x="53.8064%" y="191.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (104 instructions, 0.51%)</title><rect x="55.0005%" y="181" width="0.5054%" height="15" fill="rgb(236,97,18)" fg:x="11318" fg:w="104"/><text x="55.2935%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="55.5059%" y="181" width="0.0535%" height="15" fill="rgb(254,163,49)" fg:x="11422" fg:w="11"/><text x="55.7988%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="55.5593%" y="181" width="0.0535%" height="15" fill="rgb(239,120,53)" fg:x="11433" fg:w="11"/><text x="55.8523%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="55.6128%" y="181" width="0.0535%" height="15" fill="rgb(209,64,23)" fg:x="11444" fg:w="11"/><text x="55.9058%" y="191.50"></text></g><g><title>memcpy (411 instructions, 2.00%)</title><rect x="55.6662%" y="181" width="1.9973%" height="15" fill="rgb(222,180,17)" fg:x="11455" fg:w="411"/><text x="55.9592%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.11%)</title><rect x="57.6635%" y="165" width="0.1069%" height="15" fill="rgb(218,179,9)" fg:x="11866" fg:w="22"/><text x="57.9565%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (169 instructions, 0.82%)</title><rect x="57.7704%" y="165" width="0.8213%" height="15" fill="rgb(235,101,7)" fg:x="11888" fg:w="169"/><text x="58.0634%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (103 instructions, 0.50%)</title><rect x="58.5917%" y="133" width="0.5005%" height="15" fill="rgb(254,225,12)" fg:x="12057" fg:w="103"/><text x="58.8847%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (248 instructions, 1.21%)</title><rect x="58.5917%" y="149" width="1.2052%" height="15" fill="rgb(245,66,1)" fg:x="12057" fg:w="248"/><text x="58.8847%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (278 instructions, 1.35%)</title><rect x="58.5917%" y="165" width="1.3510%" height="15" fill="rgb(250,74,42)" fg:x="12057" fg:w="278"/><text x="58.8847%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="59.9427%" y="165" width="0.0535%" height="15" fill="rgb(246,46,29)" fg:x="12335" fg:w="11"/><text x="60.2356%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="59.9961%" y="165" width="0.0243%" height="15" fill="rgb(207,46,42)" fg:x="12346" fg:w="5"/><text x="60.2891%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (579 instructions, 2.81%)</title><rect x="57.6635%" y="181" width="2.8137%" height="15" fill="rgb(245,180,40)" fg:x="11866" fg:w="579"/><text x="57.9565%" y="191.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (53 instructions, 0.26%)</title><rect x="60.4772%" y="165" width="0.2576%" height="15" fill="rgb(252,23,5)" fg:x="12445" fg:w="53"/><text x="60.7702%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (103 instructions, 0.50%)</title><rect x="60.7348%" y="165" width="0.5005%" height="15" fill="rgb(237,83,30)" fg:x="12498" fg:w="103"/><text x="61.0277%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (236 instructions, 1.15%)</title><rect x="60.4772%" y="181" width="1.1469%" height="15" fill="rgb(245,70,2)" fg:x="12445" fg:w="236"/><text x="60.7702%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,875 instructions, 62.57%)</title><rect x="1.0351%" y="197" width="62.5668%" height="15" fill="rgb(231,150,13)" fg:x="213" fg:w="12875"/><text x="1.3281%" y="207.50">ic_cdk::api::call::arg_data</text></g><g><title>heap::MAP::__getit (5 instructions, 0.02%)</title><rect x="63.6019%" y="181" width="0.0243%" height="15" fill="rgb(224,182,50)" fg:x="13088" fg:w="5"/><text x="63.8949%" y="191.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,982 instructions, 29.07%)</title><rect x="63.6019%" y="197" width="29.0699%" height="15" fill="rgb(240,125,40)" fg:x="13088" fg:w="5982"/><text x="63.8949%" y="207.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.02%)</title><rect x="92.6718%" y="165" width="0.0243%" height="15" fill="rgb(215,162,39)" fg:x="19070" fg:w="5"/><text x="92.9648%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (53 instructions, 0.26%)</title><rect x="92.6961%" y="133" width="0.2576%" height="15" fill="rgb(214,137,16)" fg:x="19075" fg:w="53"/><text x="92.9891%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (134 instructions, 0.65%)</title><rect x="92.6961%" y="149" width="0.6512%" height="15" fill="rgb(206,31,23)" fg:x="19075" fg:w="134"/><text x="92.9891%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (164 instructions, 0.80%)</title><rect x="92.6961%" y="165" width="0.7970%" height="15" fill="rgb(250,170,31)" fg:x="19075" fg:w="164"/><text x="92.9891%" y="175.50"></text></g><g><title>memset (136 instructions, 0.66%)</title><rect x="93.4931%" y="165" width="0.6609%" height="15" fill="rgb(207,185,31)" fg:x="19239" fg:w="136"/><text x="93.7860%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (462 instructions, 2.25%)</title><rect x="92.6718%" y="181" width="2.2451%" height="15" fill="rgb(216,56,24)" fg:x="19070" fg:w="462"/><text x="92.9648%" y="191.50">c..</text></g><g><title>std::io::Write::write_all (78 instructions, 0.38%)</title><rect x="94.9169%" y="165" width="0.3790%" height="15" fill="rgb(221,206,18)" fg:x="19532" fg:w="78"/><text x="95.2099%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.44%)</title><rect x="95.2959%" y="101" width="0.4374%" height="15" fill="rgb(229,37,31)" fg:x="19610" fg:w="90"/><text x="95.5889%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.49%)</title><rect x="95.2959%" y="117" width="0.4860%" height="15" fill="rgb(235,146,6)" fg:x="19610" fg:w="100"/><text x="95.5889%" y="127.50"></text></g><g><title>__rust_alloc (103 instructions, 0.50%)</title><rect x="95.2959%" y="133" width="0.5005%" height="15" fill="rgb(249,3,35)" fg:x="19610" fg:w="103"/><text x="95.5889%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (133 instructions, 0.65%)</title><rect x="95.2959%" y="149" width="0.6463%" height="15" fill="rgb(254,104,34)" fg:x="19610" fg:w="133"/><text x="95.5889%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (198 instructions, 0.96%)</title><rect x="95.2959%" y="165" width="0.9622%" height="15" fill="rgb(251,219,27)" fg:x="19610" fg:w="198"/><text x="95.5889%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.05%)</title><rect x="96.2581%" y="165" width="0.0535%" height="15" fill="rgb(206,27,51)" fg:x="19808" fg:w="11"/><text x="96.5511%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.05%)</title><rect x="96.3116%" y="165" width="0.0535%" height="15" fill="rgb(235,202,13)" fg:x="19819" fg:w="11"/><text x="96.6046%" y="175.50"></text></g><g><title>std::io::Write::write_all (76 instructions, 0.37%)</title><rect x="96.3651%" y="165" width="0.3693%" height="15" fill="rgb(206,206,22)" fg:x="19830" fg:w="76"/><text x="96.6580%" y="175.50"></text></g><g><title>std::io::Write::write_all (14 instructions, 0.07%)</title><rect x="96.7344%" y="165" width="0.0680%" height="15" fill="rgb(211,175,47)" fg:x="19906" fg:w="14"/><text x="97.0273%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (670 instructions, 3.26%)</title><rect x="94.9169%" y="181" width="3.2559%" height="15" fill="rgb(211,23,49)" fg:x="19532" fg:w="670"/><text x="95.2099%" y="191.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="98.1728%" y="181" width="0.0243%" height="15" fill="rgb(219,107,25)" fg:x="20202" fg:w="5"/><text x="98.4658%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.26%)</title><rect x="98.1971%" y="181" width="0.2624%" height="15" fill="rgb(215,113,14)" fg:x="20207" fg:w="54"/><text x="98.4901%" y="191.50"></text></g><g><title>candid::utils::write_args (1,255 instructions, 6.10%)</title><rect x="92.6718%" y="197" width="6.0987%" height="15" fill="rgb(210,37,47)" fg:x="19070" fg:w="1255"/><text x="92.9648%" y="207.50">candid..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.39%)</title><rect x="98.7705%" y="197" width="0.3936%" height="15" fill="rgb(210,107,13)" fg:x="20325" fg:w="81"/><text x="99.0635%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.49%)</title><rect x="99.1642%" y="197" width="0.4860%" height="15" fill="rgb(232,38,23)" fg:x="20406" fg:w="100"/><text x="99.4571%" y="207.50"></text></g><g><title>all (20,578 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(248,124,47)" fg:x="0" fg:w="20578"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (20,578 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(212,206,5)" fg:x="0" fg:w="20578"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>