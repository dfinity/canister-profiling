<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">heap_rs.batch_put</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="18496"><g><title>ic_cdk::setup (19 instructions, 0.10%)</title><rect x="0.0000%" y="197" width="0.1027%" height="15" fill="rgb(239,129,11)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="0.1027%" y="197" width="0.4109%" height="15" fill="rgb(220,149,24)" fg:x="19" fg:w="76"/><text x="0.3957%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="0.5136%" y="197" width="0.4109%" height="15" fill="rgb(226,181,16)" fg:x="95" fg:w="76"/><text x="0.8066%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="0.9245%" y="165" width="0.4109%" height="15" fill="rgb(235,88,7)" fg:x="171" fg:w="76"/><text x="1.2175%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.37%)</title><rect x="1.3354%" y="149" width="0.3731%" height="15" fill="rgb(222,75,53)" fg:x="247" fg:w="69"/><text x="1.6284%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.7085%" y="133" width="0.0216%" height="15" fill="rgb(208,212,50)" fg:x="316" fg:w="4"/><text x="2.0014%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 2.20%)</title><rect x="1.7085%" y="149" width="2.1951%" height="15" fill="rgb(245,62,25)" fg:x="316" fg:w="406"/><text x="2.0014%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.44%)</title><rect x="3.9035%" y="149" width="0.4433%" height="15" fill="rgb(233,218,10)" fg:x="722" fg:w="82"/><text x="4.1965%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.29%)</title><rect x="4.3469%" y="149" width="0.2920%" height="15" fill="rgb(226,178,11)" fg:x="804" fg:w="54"/><text x="4.6399%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.29%)</title><rect x="4.6388%" y="149" width="0.2920%" height="15" fill="rgb(253,147,51)" fg:x="858" fg:w="54"/><text x="4.9318%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.29%)</title><rect x="4.9308%" y="149" width="0.2920%" height="15" fill="rgb(244,201,50)" fg:x="912" fg:w="54"/><text x="5.2238%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.29%)</title><rect x="5.2228%" y="149" width="0.2920%" height="15" fill="rgb(212,203,34)" fg:x="966" fg:w="54"/><text x="5.5157%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.37%)</title><rect x="5.5147%" y="149" width="0.3731%" height="15" fill="rgb(235,188,2)" fg:x="1020" fg:w="69"/><text x="5.8077%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.35%)</title><rect x="5.8878%" y="149" width="0.3514%" height="15" fill="rgb(249,162,1)" fg:x="1089" fg:w="65"/><text x="6.1807%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="6.2392%" y="133" width="0.0216%" height="15" fill="rgb(253,182,51)" fg:x="1154" fg:w="4"/><text x="6.5322%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 2.20%)</title><rect x="6.2392%" y="149" width="2.1951%" height="15" fill="rgb(244,228,19)" fg:x="1154" fg:w="406"/><text x="6.5322%" y="159.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="8.4343%" y="149" width="0.0865%" height="15" fill="rgb(252,18,10)" fg:x="1560" fg:w="16"/><text x="8.7272%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="8.5208%" y="133" width="0.4109%" height="15" fill="rgb(222,131,44)" fg:x="1576" fg:w="76"/><text x="8.8137%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.32%)</title><rect x="8.9317%" y="101" width="0.3244%" height="15" fill="rgb(215,141,7)" fg:x="1652" fg:w="60"/><text x="9.2246%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.46%)</title><rect x="8.9317%" y="117" width="0.4596%" height="15" fill="rgb(226,3,44)" fg:x="1652" fg:w="85"/><text x="9.2246%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="9.3912%" y="69" width="0.0487%" height="15" fill="rgb(208,212,38)" fg:x="1737" fg:w="9"/><text x="9.6842%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.16%)</title><rect x="9.4399%" y="53" width="0.1622%" height="15" fill="rgb(216,140,27)" fg:x="1746" fg:w="30"/><text x="9.7328%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.30%)</title><rect x="9.4399%" y="69" width="0.2974%" height="15" fill="rgb(241,5,9)" fg:x="1746" fg:w="55"/><text x="9.7328%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.64%)</title><rect x="9.3912%" y="85" width="0.6380%" height="15" fill="rgb(252,123,49)" fg:x="1737" fg:w="118"/><text x="9.6842%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.92%)</title><rect x="9.3912%" y="101" width="0.9245%" height="15" fill="rgb(209,173,52)" fg:x="1737" fg:w="171"/><text x="9.6842%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.95%)</title><rect x="9.3912%" y="117" width="0.9516%" height="15" fill="rgb(243,53,34)" fg:x="1737" fg:w="176"/><text x="9.6842%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 2.01%)</title><rect x="8.9317%" y="133" width="2.0112%" height="15" fill="rgb(214,160,23)" fg:x="1652" fg:w="372"/><text x="9.2246%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 3.18%)</title><rect x="8.5208%" y="149" width="3.1845%" height="15" fill="rgb(214,212,35)" fg:x="1576" fg:w="589"/><text x="8.8137%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.44%)</title><rect x="11.7052%" y="149" width="0.4433%" height="15" fill="rgb(222,74,51)" fg:x="2165" fg:w="82"/><text x="11.9982%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.30%)</title><rect x="12.1486%" y="149" width="0.2974%" height="15" fill="rgb(222,189,10)" fg:x="2247" fg:w="55"/><text x="12.4415%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.34%)</title><rect x="12.4459%" y="149" width="0.3406%" height="15" fill="rgb(227,109,31)" fg:x="2302" fg:w="63"/><text x="12.7389%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.35%)</title><rect x="12.7865%" y="149" width="0.3514%" height="15" fill="rgb(205,186,18)" fg:x="2365" fg:w="65"/><text x="13.0795%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="13.1380%" y="117" width="0.0216%" height="15" fill="rgb(211,2,31)" fg:x="2430" fg:w="4"/><text x="13.4309%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 2.20%)</title><rect x="13.1380%" y="133" width="2.1951%" height="15" fill="rgb(245,212,6)" fg:x="2430" fg:w="406"/><text x="13.4309%" y="143.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="15.3330%" y="133" width="0.0865%" height="15" fill="rgb(227,135,37)" fg:x="2836" fg:w="16"/><text x="15.6260%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="15.4196%" y="117" width="0.4109%" height="15" fill="rgb(213,214,9)" fg:x="2852" fg:w="76"/><text x="15.7125%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.32%)</title><rect x="15.8304%" y="85" width="0.3244%" height="15" fill="rgb(211,180,18)" fg:x="2928" fg:w="60"/><text x="16.1234%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.46%)</title><rect x="15.8304%" y="101" width="0.4596%" height="15" fill="rgb(212,51,52)" fg:x="2928" fg:w="85"/><text x="16.1234%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="16.2900%" y="53" width="0.0487%" height="15" fill="rgb(213,194,21)" fg:x="3013" fg:w="9"/><text x="16.5830%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.16%)</title><rect x="16.3387%" y="37" width="0.1622%" height="15" fill="rgb(236,77,12)" fg:x="3022" fg:w="30"/><text x="16.6316%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.30%)</title><rect x="16.3387%" y="53" width="0.2974%" height="15" fill="rgb(214,55,0)" fg:x="3022" fg:w="55"/><text x="16.6316%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.64%)</title><rect x="16.2900%" y="69" width="0.6380%" height="15" fill="rgb(223,167,51)" fg:x="3013" fg:w="118"/><text x="16.5830%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.92%)</title><rect x="16.2900%" y="85" width="0.9245%" height="15" fill="rgb(246,161,12)" fg:x="3013" fg:w="171"/><text x="16.5830%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.95%)</title><rect x="16.2900%" y="101" width="0.9516%" height="15" fill="rgb(243,187,47)" fg:x="3013" fg:w="176"/><text x="16.5830%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 2.01%)</title><rect x="15.8304%" y="117" width="2.0112%" height="15" fill="rgb(249,10,47)" fg:x="2928" fg:w="372"/><text x="16.1234%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 3.18%)</title><rect x="15.4196%" y="133" width="3.1845%" height="15" fill="rgb(244,177,53)" fg:x="2852" fg:w="589"/><text x="15.7125%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.44%)</title><rect x="18.6040%" y="133" width="0.4433%" height="15" fill="rgb(250,107,53)" fg:x="3441" fg:w="82"/><text x="18.8970%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.30%)</title><rect x="19.0474%" y="133" width="0.2974%" height="15" fill="rgb(251,144,17)" fg:x="3523" fg:w="55"/><text x="19.3403%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.37%)</title><rect x="19.3447%" y="117" width="0.3731%" height="15" fill="rgb(236,53,36)" fg:x="3578" fg:w="69"/><text x="19.6377%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.49%)</title><rect x="19.7178%" y="117" width="0.4920%" height="15" fill="rgb(209,216,43)" fg:x="3647" fg:w="91"/><text x="20.0107%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.34%)</title><rect x="20.2098%" y="117" width="0.3406%" height="15" fill="rgb(215,0,8)" fg:x="3738" fg:w="63"/><text x="20.5027%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 1.52%)</title><rect x="19.3447%" y="133" width="1.5247%" height="15" fill="rgb(244,210,45)" fg:x="3578" fg:w="282"/><text x="19.6377%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.42%)</title><rect x="20.8694%" y="133" width="0.4217%" height="15" fill="rgb(251,130,46)" fg:x="3860" fg:w="78"/><text x="21.1623%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,711 instructions, 9.25%)</title><rect x="13.1380%" y="149" width="9.2506%" height="15" fill="rgb(247,209,41)" fg:x="2430" fg:w="1711"/><text x="13.4309%" y="159.50">binread::bi..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.34%)</title><rect x="22.3886%" y="149" width="0.3406%" height="15" fill="rgb(240,8,14)" fg:x="4141" fg:w="63"/><text x="22.6816%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.07%)</title><rect x="22.7292%" y="149" width="0.0703%" height="15" fill="rgb(208,85,13)" fg:x="4204" fg:w="13"/><text x="23.0222%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.07%)</title><rect x="22.7995%" y="149" width="0.0703%" height="15" fill="rgb(209,170,36)" fg:x="4217" fg:w="13"/><text x="23.0925%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.04%)</title><rect x="22.8698%" y="149" width="0.0378%" height="15" fill="rgb(227,98,16)" fg:x="4230" fg:w="7"/><text x="23.1628%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.08%)</title><rect x="22.9077%" y="149" width="0.0811%" height="15" fill="rgb(206,217,30)" fg:x="4237" fg:w="15"/><text x="23.2006%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="22.9888%" y="133" width="0.4109%" height="15" fill="rgb(222,200,46)" fg:x="4252" fg:w="76"/><text x="23.2817%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.86%)</title><rect x="22.9888%" y="149" width="0.8596%" height="15" fill="rgb(228,223,41)" fg:x="4252" fg:w="159"/><text x="23.2817%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="23.8484%" y="117" width="0.4109%" height="15" fill="rgb(231,174,5)" fg:x="4411" fg:w="76"/><text x="24.1414%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.59%)</title><rect x="23.8484%" y="133" width="0.5947%" height="15" fill="rgb(230,75,28)" fg:x="4411" fg:w="110"/><text x="24.1414%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 0.96%)</title><rect x="23.8484%" y="149" width="0.9624%" height="15" fill="rgb(252,66,29)" fg:x="4411" fg:w="178"/><text x="24.1414%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="24.8108%" y="149" width="0.4109%" height="15" fill="rgb(211,53,33)" fg:x="4589" fg:w="76"/><text x="25.1037%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.44%)</title><rect x="25.2217%" y="149" width="0.4379%" height="15" fill="rgb(211,139,5)" fg:x="4665" fg:w="81"/><text x="25.5146%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="25.6596%" y="149" width="0.4109%" height="15" fill="rgb(237,132,44)" fg:x="4746" fg:w="76"/><text x="25.9526%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="26.0705%" y="149" width="0.4109%" height="15" fill="rgb(243,102,43)" fg:x="4822" fg:w="76"/><text x="26.3635%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 instructions, 0.01%)</title><rect x="26.4814%" y="149" width="0.0108%" height="15" fill="rgb(212,2,22)" fg:x="4898" fg:w="2"/><text x="26.7744%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.44%)</title><rect x="26.4922%" y="149" width="0.4379%" height="15" fill="rgb(242,91,49)" fg:x="4900" fg:w="81"/><text x="26.7852%" y="159.50"></text></g><g><title>memcpy (399 instructions, 2.16%)</title><rect x="26.9301%" y="149" width="2.1572%" height="15" fill="rgb(238,85,15)" fg:x="4981" fg:w="399"/><text x="27.2231%" y="159.50">m..</text></g><g><title>memcpy (399 instructions, 2.16%)</title><rect x="29.0874%" y="149" width="2.1572%" height="15" fill="rgb(206,158,6)" fg:x="5380" fg:w="399"/><text x="29.3803%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new (6,459 instructions, 34.92%)</title><rect x="1.3354%" y="165" width="34.9211%" height="15" fill="rgb(207,26,49)" fg:x="247" fg:w="6459"/><text x="1.6284%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (354 instructions, 1.91%)</title><rect x="36.2565%" y="165" width="1.9139%" height="15" fill="rgb(224,24,5)" fg:x="6706" fg:w="354"/><text x="36.5495%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="38.1704%" y="149" width="0.0270%" height="15" fill="rgb(254,166,22)" fg:x="7060" fg:w="5"/><text x="38.4634%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.21%)</title><rect x="38.1704%" y="165" width="0.2109%" height="15" fill="rgb(246,29,28)" fg:x="7060" fg:w="39"/><text x="38.4634%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="38.3813%" y="165" width="0.4109%" height="15" fill="rgb(232,121,50)" fg:x="7099" fg:w="76"/><text x="38.6742%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="38.7922%" y="149" width="0.0270%" height="15" fill="rgb(237,17,21)" fg:x="7175" fg:w="5"/><text x="39.0851%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.29%)</title><rect x="38.8192%" y="133" width="0.2865%" height="15" fill="rgb(230,104,32)" fg:x="7180" fg:w="53"/><text x="39.1122%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.48%)</title><rect x="39.1058%" y="133" width="0.4758%" height="15" fill="rgb(207,54,22)" fg:x="7233" fg:w="88"/><text x="39.3987%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.88%)</title><rect x="39.5815%" y="133" width="0.8759%" height="15" fill="rgb(234,99,13)" fg:x="7321" fg:w="162"/><text x="39.8745%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.92%)</title><rect x="38.8192%" y="149" width="2.9196%" height="15" fill="rgb(228,72,24)" fg:x="7180" fg:w="540"/><text x="39.1122%" y="159.50">co..</text></g><g><title>candid::types::internal::env_add (749 instructions, 4.05%)</title><rect x="38.7922%" y="165" width="4.0495%" height="15" fill="rgb(228,19,24)" fg:x="7175" fg:w="749"/><text x="39.0851%" y="175.50">can..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="42.8417%" y="165" width="0.4109%" height="15" fill="rgb(219,26,16)" fg:x="7924" fg:w="76"/><text x="43.1347%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="43.2526%" y="149" width="0.0270%" height="15" fill="rgb(240,50,9)" fg:x="8000" fg:w="5"/><text x="43.5456%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.29%)</title><rect x="43.2796%" y="133" width="0.2865%" height="15" fill="rgb(212,172,51)" fg:x="8005" fg:w="53"/><text x="43.5726%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.48%)</title><rect x="43.5662%" y="133" width="0.4758%" height="15" fill="rgb(217,7,7)" fg:x="8058" fg:w="88"/><text x="43.8591%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.88%)</title><rect x="44.0420%" y="133" width="0.8759%" height="15" fill="rgb(236,57,47)" fg:x="8146" fg:w="162"/><text x="44.3349%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.92%)</title><rect x="43.2796%" y="149" width="2.9196%" height="15" fill="rgb(231,80,54)" fg:x="8005" fg:w="540"/><text x="43.5726%" y="159.50">co..</text></g><g><title>memcmp (68 instructions, 0.37%)</title><rect x="46.1992%" y="149" width="0.3676%" height="15" fill="rgb(220,190,3)" fg:x="8545" fg:w="68"/><text x="46.4921%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.44%)</title><rect x="46.5668%" y="133" width="0.4379%" height="15" fill="rgb(208,84,8)" fg:x="8613" fg:w="81"/><text x="46.8598%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.58%)</title><rect x="46.5668%" y="149" width="0.5839%" height="15" fill="rgb(228,216,12)" fg:x="8613" fg:w="108"/><text x="46.8598%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 4.81%)</title><rect x="43.2526%" y="165" width="4.8119%" height="15" fill="rgb(246,67,52)" fg:x="8000" fg:w="890"/><text x="43.5456%" y="175.50">cand..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.29%)</title><rect x="48.0644%" y="117" width="0.2865%" height="15" fill="rgb(247,83,42)" fg:x="8890" fg:w="53"/><text x="48.3574%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.42%)</title><rect x="48.0644%" y="133" width="0.4217%" height="15" fill="rgb(231,103,39)" fg:x="8890" fg:w="78"/><text x="48.3574%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 1.58%)</title><rect x="48.0644%" y="149" width="1.5841%" height="15" fill="rgb(222,14,26)" fg:x="8890" fg:w="293"/><text x="48.3574%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1318 (15 instructions, 0.08%)</title><rect x="49.6486%" y="149" width="0.0811%" height="15" fill="rgb(227,56,27)" fg:x="9183" fg:w="15"/><text x="49.9415%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="49.7297%" y="149" width="0.0595%" height="15" fill="rgb(251,57,11)" fg:x="9198" fg:w="11"/><text x="50.0226%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 2.58%)</title><rect x="48.0644%" y="165" width="2.5843%" height="15" fill="rgb(250,163,45)" fg:x="8890" fg:w="478"/><text x="48.3574%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.25%)</title><rect x="50.6488%" y="165" width="0.2541%" height="15" fill="rgb(236,63,15)" fg:x="9368" fg:w="47"/><text x="50.9418%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.67%)</title><rect x="50.9029%" y="149" width="0.6650%" height="15" fill="rgb(237,73,1)" fg:x="9415" fg:w="123"/><text x="51.1959%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.67%)</title><rect x="51.7139%" y="149" width="0.6650%" height="15" fill="rgb(246,100,21)" fg:x="9565" fg:w="123"/><text x="52.0069%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 1.62%)</title><rect x="50.9029%" y="165" width="1.6220%" height="15" fill="rgb(253,42,33)" fg:x="9415" fg:w="300"/><text x="51.1959%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.15%)</title><rect x="52.5249%" y="149" width="0.1514%" height="15" fill="rgb(226,154,32)" fg:x="9715" fg:w="28"/><text x="52.8178%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1724 (15 instructions, 0.08%)</title><rect x="52.6763%" y="149" width="0.0811%" height="15" fill="rgb(205,29,3)" fg:x="9743" fg:w="15"/><text x="52.9692%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1724 (15 instructions, 0.08%)</title><rect x="52.7574%" y="149" width="0.0811%" height="15" fill="rgb(223,46,41)" fg:x="9758" fg:w="15"/><text x="53.0503%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.73%)</title><rect x="52.5249%" y="165" width="0.7299%" height="15" fill="rgb(239,103,17)" fg:x="9715" fg:w="135"/><text x="52.8178%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="53.2548%" y="165" width="0.0595%" height="15" fill="rgb(252,43,2)" fg:x="9850" fg:w="11"/><text x="53.5477%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="53.3142%" y="165" width="0.0595%" height="15" fill="rgb(251,48,10)" fg:x="9861" fg:w="11"/><text x="53.6072%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="53.3737%" y="165" width="0.0595%" height="15" fill="rgb(205,133,25)" fg:x="9872" fg:w="11"/><text x="53.6667%" y="175.50"></text></g><g><title>memcpy (410 instructions, 2.22%)</title><rect x="53.4332%" y="165" width="2.2167%" height="15" fill="rgb(209,103,26)" fg:x="9883" fg:w="410"/><text x="53.7261%" y="175.50">m..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.06%)</title><rect x="55.6499%" y="133" width="0.0649%" height="15" fill="rgb(211,112,40)" fg:x="10293" fg:w="12"/><text x="55.9428%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.91%)</title><rect x="55.7147%" y="133" width="0.9083%" height="15" fill="rgb(235,115,17)" fg:x="10305" fg:w="168"/><text x="56.0077%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.51%)</title><rect x="56.6231%" y="101" width="0.5136%" height="15" fill="rgb(225,105,7)" fg:x="10473" fg:w="95"/><text x="56.9160%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (195 instructions, 1.05%)</title><rect x="56.6231%" y="117" width="1.0543%" height="15" fill="rgb(250,28,9)" fg:x="10473" fg:w="195"/><text x="56.9160%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (222 instructions, 1.20%)</title><rect x="56.6231%" y="133" width="1.2003%" height="15" fill="rgb(228,130,39)" fg:x="10473" fg:w="222"/><text x="56.9160%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="57.8233%" y="133" width="0.0595%" height="15" fill="rgb(225,119,47)" fg:x="10695" fg:w="11"/><text x="58.1163%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (453 instructions, 2.45%)</title><rect x="55.6499%" y="149" width="2.4492%" height="15" fill="rgb(219,173,41)" fg:x="10293" fg:w="453"/><text x="55.9428%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (491 instructions, 2.65%)</title><rect x="55.6499%" y="165" width="2.6546%" height="15" fill="rgb(235,159,27)" fg:x="10293" fg:w="491"/><text x="55.9428%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.29%)</title><rect x="58.3045%" y="149" width="0.2920%" height="15" fill="rgb(244,79,17)" fg:x="10784" fg:w="54"/><text x="58.5975%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.51%)</title><rect x="58.5965%" y="149" width="0.5136%" height="15" fill="rgb(252,196,12)" fg:x="10838" fg:w="95"/><text x="58.8894%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 1.24%)</title><rect x="58.3045%" y="165" width="1.2435%" height="15" fill="rgb(207,81,40)" fg:x="10784" fg:w="230"/><text x="58.5975%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,236 instructions, 60.75%)</title><rect x="0.9245%" y="181" width="60.7483%" height="15" fill="rgb(252,165,4)" fg:x="171" fg:w="11236"/><text x="1.2175%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="61.6728%" y="149" width="0.0270%" height="15" fill="rgb(208,48,24)" fg:x="11407" fg:w="5"/><text x="61.9658%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.29%)</title><rect x="61.6998%" y="117" width="0.2920%" height="15" fill="rgb(217,107,43)" fg:x="11412" fg:w="54"/><text x="61.9928%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.73%)</title><rect x="61.6998%" y="133" width="0.7299%" height="15" fill="rgb(227,28,12)" fg:x="11412" fg:w="135"/><text x="61.9928%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.88%)</title><rect x="61.6998%" y="149" width="0.8759%" height="15" fill="rgb(216,179,34)" fg:x="11412" fg:w="162"/><text x="61.9928%" y="159.50"></text></g><g><title>memset (136 instructions, 0.74%)</title><rect x="62.5757%" y="149" width="0.7353%" height="15" fill="rgb(245,168,33)" fg:x="11574" fg:w="136"/><text x="62.8687%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (463 instructions, 2.50%)</title><rect x="61.6728%" y="165" width="2.5032%" height="15" fill="rgb(215,228,31)" fg:x="11407" fg:w="463"/><text x="61.9658%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.17%)</title><rect x="64.1760%" y="149" width="0.1730%" height="15" fill="rgb(254,211,37)" fg:x="11870" fg:w="32"/><text x="64.4690%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.41%)</title><rect x="64.3490%" y="101" width="0.4109%" height="15" fill="rgb(246,81,43)" fg:x="11902" fg:w="76"/><text x="64.6420%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.59%)</title><rect x="64.3490%" y="117" width="0.5947%" height="15" fill="rgb(245,223,27)" fg:x="11902" fg:w="110"/><text x="64.6420%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.95%)</title><rect x="64.3490%" y="133" width="0.9462%" height="15" fill="rgb(232,52,16)" fg:x="11902" fg:w="175"/><text x="64.6420%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="65.2952%" y="133" width="0.0595%" height="15" fill="rgb(223,216,44)" fg:x="12077" fg:w="11"/><text x="65.5882%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="65.3547%" y="133" width="0.0595%" height="15" fill="rgb(226,115,41)" fg:x="12088" fg:w="11"/><text x="65.6476%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (359 instructions, 1.94%)</title><rect x="64.3490%" y="149" width="1.9410%" height="15" fill="rgb(218,139,1)" fg:x="11902" fg:w="359"/><text x="64.6420%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.16%)</title><rect x="66.2900%" y="149" width="0.1622%" height="15" fill="rgb(228,108,14)" fg:x="12261" fg:w="30"/><text x="66.5830%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.03%)</title><rect x="66.4522%" y="149" width="0.0270%" height="15" fill="rgb(221,217,15)" fg:x="12291" fg:w="5"/><text x="66.7452%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (494 instructions, 2.67%)</title><rect x="64.1760%" y="165" width="2.6708%" height="15" fill="rgb(237,168,32)" fg:x="11870" fg:w="494"/><text x="64.4690%" y="175.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="66.8469%" y="165" width="0.0270%" height="15" fill="rgb(221,131,6)" fg:x="12364" fg:w="5"/><text x="67.1399%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.30%)</title><rect x="66.8739%" y="165" width="0.2974%" height="15" fill="rgb(230,55,32)" fg:x="12369" fg:w="55"/><text x="67.1669%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,091 instructions, 5.90%)</title><rect x="61.6728%" y="181" width="5.8986%" height="15" fill="rgb(230,208,43)" fg:x="11407" fg:w="1091"/><text x="61.9658%" y="191.50">ic_cdk..</text></g><g><title>heap::batch_put_6_::{{closure}} (18,034 instructions, 97.50%)</title><rect x="0.9245%" y="197" width="97.5022%" height="15" fill="rgb(234,30,37)" fg:x="171" fg:w="18034"/><text x="1.2175%" y="207.50">heap::batch_put_6_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.06%)</title><rect x="98.4267%" y="197" width="0.0649%" height="15" fill="rgb(221,205,52)" fg:x="18205" fg:w="12"/><text x="98.7197%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.44%)</title><rect x="98.4916%" y="197" width="0.4379%" height="15" fill="rgb(224,2,11)" fg:x="18217" fg:w="81"/><text x="98.7845%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.54%)</title><rect x="98.9295%" y="197" width="0.5407%" height="15" fill="rgb(244,148,33)" fg:x="18298" fg:w="100"/><text x="99.2225%" y="207.50"></text></g><g><title>all (18,496 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,33,34)" fg:x="0" fg:w="18496"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_put (18,496 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,194,22)" fg:x="0" fg:w="18496"/><text x="0.2930%" y="223.50">canister_update batch_put</text></g></svg></svg>