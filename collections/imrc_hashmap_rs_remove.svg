<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="36791"><g><title>ic_cdk::setup (7 instructions, 0.02%)</title><rect x="0.0000%" y="197" width="0.0190%" height="15" fill="rgb(222,208,23)" fg:x="0" fg:w="7"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.24%)</title><rect x="0.0190%" y="165" width="0.2446%" height="15" fill="rgb(219,152,37)" fg:x="7" fg:w="90"/><text x="0.3120%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.27%)</title><rect x="0.0190%" y="181" width="0.2718%" height="15" fill="rgb(216,102,24)" fg:x="7" fg:w="100"/><text x="0.3120%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.24%)</title><rect x="0.2990%" y="165" width="0.2446%" height="15" fill="rgb(218,59,36)" fg:x="110" fg:w="90"/><text x="0.5920%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.27%)</title><rect x="0.2990%" y="181" width="0.2718%" height="15" fill="rgb(244,186,46)" fg:x="110" fg:w="100"/><text x="0.5920%" y="191.50"></text></g><g><title>__rust_alloc (206 instructions, 0.56%)</title><rect x="0.0190%" y="197" width="0.5599%" height="15" fill="rgb(229,177,14)" fg:x="7" fg:w="206"/><text x="0.3120%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (89 instructions, 0.24%)</title><rect x="0.5789%" y="133" width="0.2419%" height="15" fill="rgb(232,164,36)" fg:x="213" fg:w="89"/><text x="0.8719%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (99 instructions, 0.27%)</title><rect x="0.5789%" y="149" width="0.2691%" height="15" fill="rgb(235,8,20)" fg:x="213" fg:w="99"/><text x="0.8719%" y="159.50"></text></g><g><title>__rust_alloc (102 instructions, 0.28%)</title><rect x="0.5789%" y="165" width="0.2772%" height="15" fill="rgb(222,174,18)" fg:x="213" fg:w="102"/><text x="0.8719%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (161 instructions, 0.44%)</title><rect x="0.5789%" y="181" width="0.4376%" height="15" fill="rgb(227,108,45)" fg:x="213" fg:w="161"/><text x="0.8719%" y="191.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.17%)</title><rect x="1.0166%" y="165" width="0.1658%" height="15" fill="rgb(210,174,31)" fg:x="374" fg:w="61"/><text x="1.3095%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="1.1824%" y="149" width="0.0109%" height="15" fill="rgb(225,153,17)" fg:x="435" fg:w="4"/><text x="1.4753%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 1.11%)</title><rect x="1.1824%" y="165" width="1.1062%" height="15" fill="rgb(239,60,52)" fg:x="435" fg:w="407"/><text x="1.4753%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.20%)</title><rect x="2.2886%" y="165" width="0.2011%" height="15" fill="rgb(210,42,29)" fg:x="842" fg:w="74"/><text x="2.5816%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.15%)</title><rect x="2.4897%" y="165" width="0.1468%" height="15" fill="rgb(224,43,29)" fg:x="916" fg:w="54"/><text x="2.7827%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.15%)</title><rect x="2.6365%" y="165" width="0.1468%" height="15" fill="rgb(238,178,46)" fg:x="970" fg:w="54"/><text x="2.9295%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.15%)</title><rect x="2.7833%" y="165" width="0.1468%" height="15" fill="rgb(237,6,54)" fg:x="1024" fg:w="54"/><text x="3.0763%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.15%)</title><rect x="2.9301%" y="165" width="0.1468%" height="15" fill="rgb(233,177,36)" fg:x="1078" fg:w="54"/><text x="3.2230%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.17%)</title><rect x="3.0768%" y="165" width="0.1658%" height="15" fill="rgb(219,209,6)" fg:x="1132" fg:w="61"/><text x="3.3698%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.26%)</title><rect x="3.2426%" y="165" width="0.2637%" height="15" fill="rgb(248,11,37)" fg:x="1193" fg:w="97"/><text x="3.5356%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="3.5063%" y="149" width="0.0109%" height="15" fill="rgb(205,18,4)" fg:x="1290" fg:w="4"/><text x="3.7993%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 1.11%)</title><rect x="3.5063%" y="165" width="1.1062%" height="15" fill="rgb(246,14,12)" fg:x="1290" fg:w="407"/><text x="3.7993%" y="175.50"></text></g><g><title>memcmp (16 instructions, 0.04%)</title><rect x="4.6125%" y="165" width="0.0435%" height="15" fill="rgb(207,196,33)" fg:x="1697" fg:w="16"/><text x="4.9055%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (136 instructions, 0.37%)</title><rect x="4.6560%" y="101" width="0.3697%" height="15" fill="rgb(231,49,9)" fg:x="1713" fg:w="136"/><text x="4.9490%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (146 instructions, 0.40%)</title><rect x="4.6560%" y="117" width="0.3968%" height="15" fill="rgb(250,115,24)" fg:x="1713" fg:w="146"/><text x="4.9490%" y="127.50"></text></g><g><title>__rust_alloc (149 instructions, 0.40%)</title><rect x="4.6560%" y="133" width="0.4050%" height="15" fill="rgb(254,111,42)" fg:x="1713" fg:w="149"/><text x="4.9490%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.16%)</title><rect x="5.0610%" y="101" width="0.1631%" height="15" fill="rgb(208,6,31)" fg:x="1862" fg:w="60"/><text x="5.3540%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.23%)</title><rect x="5.0610%" y="117" width="0.2310%" height="15" fill="rgb(251,93,1)" fg:x="1862" fg:w="85"/><text x="5.3540%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="5.2921%" y="69" width="0.0245%" height="15" fill="rgb(227,53,15)" fg:x="1947" fg:w="9"/><text x="5.5850%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.08%)</title><rect x="5.3165%" y="53" width="0.0815%" height="15" fill="rgb(222,7,54)" fg:x="1956" fg:w="30"/><text x="5.6095%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.15%)</title><rect x="5.3165%" y="69" width="0.1495%" height="15" fill="rgb(242,42,40)" fg:x="1956" fg:w="55"/><text x="5.6095%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.32%)</title><rect x="5.2921%" y="85" width="0.3153%" height="15" fill="rgb(222,177,31)" fg:x="1947" fg:w="116"/><text x="5.5850%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.46%)</title><rect x="5.2921%" y="101" width="0.4594%" height="15" fill="rgb(207,46,37)" fg:x="1947" fg:w="169"/><text x="5.5850%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.47%)</title><rect x="5.2921%" y="117" width="0.4729%" height="15" fill="rgb(237,171,15)" fg:x="1947" fg:w="174"/><text x="5.5850%" y="127.50"></text></g><g><title>core::fmt::write (367 instructions, 1.00%)</title><rect x="5.0610%" y="133" width="0.9975%" height="15" fill="rgb(254,197,19)" fg:x="1862" fg:w="367"/><text x="5.3540%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (659 instructions, 1.79%)</title><rect x="4.6560%" y="149" width="1.7912%" height="15" fill="rgb(207,82,25)" fg:x="1713" fg:w="659"/><text x="4.9490%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.20%)</title><rect x="6.4472%" y="149" width="0.2011%" height="15" fill="rgb(216,136,36)" fg:x="2372" fg:w="74"/><text x="6.7402%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.15%)</title><rect x="6.6484%" y="149" width="0.1468%" height="15" fill="rgb(236,160,23)" fg:x="2446" fg:w="54"/><text x="6.9413%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (858 instructions, 2.33%)</title><rect x="4.6560%" y="165" width="2.3321%" height="15" fill="rgb(241,163,17)" fg:x="1713" fg:w="858"/><text x="4.9490%" y="175.50">b..</text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.15%)</title><rect x="6.9881%" y="165" width="0.1522%" height="15" fill="rgb(236,200,34)" fg:x="2571" fg:w="56"/><text x="7.2811%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.26%)</title><rect x="7.1403%" y="165" width="0.2637%" height="15" fill="rgb(230,76,31)" fg:x="2627" fg:w="97"/><text x="7.4333%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="7.4040%" y="133" width="0.0109%" height="15" fill="rgb(240,86,18)" fg:x="2724" fg:w="4"/><text x="7.6970%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 1.11%)</title><rect x="7.4040%" y="149" width="1.1062%" height="15" fill="rgb(237,190,26)" fg:x="2724" fg:w="407"/><text x="7.6970%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.04%)</title><rect x="8.5102%" y="149" width="0.0435%" height="15" fill="rgb(222,88,1)" fg:x="3131" fg:w="16"/><text x="8.8032%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.24%)</title><rect x="8.5537%" y="85" width="0.2446%" height="15" fill="rgb(249,182,18)" fg:x="3147" fg:w="90"/><text x="8.8467%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.27%)</title><rect x="8.5537%" y="101" width="0.2718%" height="15" fill="rgb(252,204,8)" fg:x="3147" fg:w="100"/><text x="8.8467%" y="111.50"></text></g><g><title>__rust_alloc (103 instructions, 0.28%)</title><rect x="8.5537%" y="117" width="0.2800%" height="15" fill="rgb(210,106,5)" fg:x="3147" fg:w="103"/><text x="8.8467%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.16%)</title><rect x="8.8337%" y="85" width="0.1631%" height="15" fill="rgb(226,193,13)" fg:x="3250" fg:w="60"/><text x="9.1267%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.23%)</title><rect x="8.8337%" y="101" width="0.2310%" height="15" fill="rgb(214,217,20)" fg:x="3250" fg:w="85"/><text x="9.1267%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="9.0647%" y="53" width="0.0245%" height="15" fill="rgb(243,146,32)" fg:x="3335" fg:w="9"/><text x="9.3577%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.08%)</title><rect x="9.0892%" y="37" width="0.0815%" height="15" fill="rgb(221,167,40)" fg:x="3344" fg:w="30"/><text x="9.3821%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.15%)</title><rect x="9.0892%" y="53" width="0.1495%" height="15" fill="rgb(236,20,23)" fg:x="3344" fg:w="55"/><text x="9.3821%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.32%)</title><rect x="9.0647%" y="69" width="0.3153%" height="15" fill="rgb(226,160,32)" fg:x="3335" fg:w="116"/><text x="9.3577%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.46%)</title><rect x="9.0647%" y="85" width="0.4594%" height="15" fill="rgb(225,193,15)" fg:x="3335" fg:w="169"/><text x="9.3577%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.47%)</title><rect x="9.0647%" y="101" width="0.4729%" height="15" fill="rgb(225,137,48)" fg:x="3335" fg:w="174"/><text x="9.3577%" y="111.50"></text></g><g><title>core::fmt::write (367 instructions, 1.00%)</title><rect x="8.8337%" y="117" width="0.9975%" height="15" fill="rgb(222,88,39)" fg:x="3250" fg:w="367"/><text x="9.1267%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (613 instructions, 1.67%)</title><rect x="8.5537%" y="133" width="1.6662%" height="15" fill="rgb(210,64,19)" fg:x="3147" fg:w="613"/><text x="8.8467%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.20%)</title><rect x="10.2199%" y="133" width="0.2011%" height="15" fill="rgb(218,63,51)" fg:x="3760" fg:w="74"/><text x="10.5129%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.15%)</title><rect x="10.4210%" y="133" width="0.1468%" height="15" fill="rgb(222,114,7)" fg:x="3834" fg:w="54"/><text x="10.7140%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (812 instructions, 2.21%)</title><rect x="8.5537%" y="149" width="2.2071%" height="15" fill="rgb(222,69,40)" fg:x="3147" fg:w="812"/><text x="8.8467%" y="159.50">b..</text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.17%)</title><rect x="10.7608%" y="133" width="0.1658%" height="15" fill="rgb(242,83,48)" fg:x="3959" fg:w="61"/><text x="11.0538%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (126 instructions, 0.34%)</title><rect x="10.9266%" y="133" width="0.3425%" height="15" fill="rgb(209,210,30)" fg:x="4020" fg:w="126"/><text x="11.2196%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.15%)</title><rect x="11.2691%" y="133" width="0.1522%" height="15" fill="rgb(220,57,21)" fg:x="4146" fg:w="56"/><text x="11.5620%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (305 instructions, 0.83%)</title><rect x="10.7608%" y="149" width="0.8290%" height="15" fill="rgb(222,137,51)" fg:x="3959" fg:w="305"/><text x="11.0538%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.25%)</title><rect x="11.5898%" y="117" width="0.2528%" height="15" fill="rgb(226,21,16)" fg:x="4264" fg:w="93"/><text x="11.8828%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.28%)</title><rect x="11.5898%" y="133" width="0.2800%" height="15" fill="rgb(250,33,21)" fg:x="4264" fg:w="103"/><text x="11.8828%" y="143.50"></text></g><g><title>__rust_alloc (106 instructions, 0.29%)</title><rect x="11.5898%" y="149" width="0.2881%" height="15" fill="rgb(210,195,9)" fg:x="4264" fg:w="106"/><text x="11.8828%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,871 instructions, 5.09%)</title><rect x="7.4040%" y="165" width="5.0855%" height="15" fill="rgb(228,190,2)" fg:x="2724" fg:w="1871"/><text x="7.6970%" y="175.50">binre..</text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.15%)</title><rect x="12.4895%" y="165" width="0.1522%" height="15" fill="rgb(210,50,35)" fg:x="4595" fg:w="56"/><text x="12.7824%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="12.6417%" y="165" width="0.0353%" height="15" fill="rgb(240,98,20)" fg:x="4651" fg:w="13"/><text x="12.9346%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="12.6770%" y="165" width="0.0353%" height="15" fill="rgb(207,124,1)" fg:x="4664" fg:w="13"/><text x="12.9700%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.06%)</title><rect x="12.7123%" y="165" width="0.0598%" height="15" fill="rgb(228,83,27)" fg:x="4677" fg:w="22"/><text x="13.0053%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.25%)</title><rect x="12.7721%" y="117" width="0.2528%" height="15" fill="rgb(245,193,16)" fg:x="4699" fg:w="93"/><text x="13.0651%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.28%)</title><rect x="12.7721%" y="133" width="0.2800%" height="15" fill="rgb(222,169,9)" fg:x="4699" fg:w="103"/><text x="13.0651%" y="143.50"></text></g><g><title>__rust_alloc (106 instructions, 0.29%)</title><rect x="12.7721%" y="149" width="0.2881%" height="15" fill="rgb(253,40,36)" fg:x="4699" fg:w="106"/><text x="13.0651%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (186 instructions, 0.51%)</title><rect x="12.7721%" y="165" width="0.5056%" height="15" fill="rgb(210,225,51)" fg:x="4699" fg:w="186"/><text x="13.0651%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (89 instructions, 0.24%)</title><rect x="13.2777%" y="101" width="0.2419%" height="15" fill="rgb(218,82,0)" fg:x="4885" fg:w="89"/><text x="13.5707%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (99 instructions, 0.27%)</title><rect x="13.2777%" y="117" width="0.2691%" height="15" fill="rgb(216,179,24)" fg:x="4885" fg:w="99"/><text x="13.5707%" y="127.50"></text></g><g><title>__rust_alloc (102 instructions, 0.28%)</title><rect x="13.2777%" y="133" width="0.2772%" height="15" fill="rgb(218,180,6)" fg:x="4885" fg:w="102"/><text x="13.5707%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (132 instructions, 0.36%)</title><rect x="13.2777%" y="149" width="0.3588%" height="15" fill="rgb(239,70,22)" fg:x="4885" fg:w="132"/><text x="13.5707%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (200 instructions, 0.54%)</title><rect x="13.2777%" y="165" width="0.5436%" height="15" fill="rgb(219,2,10)" fg:x="4885" fg:w="200"/><text x="13.5707%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.25%)</title><rect x="13.8213%" y="133" width="0.2528%" height="15" fill="rgb(240,220,10)" fg:x="5085" fg:w="93"/><text x="14.1143%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.28%)</title><rect x="13.8213%" y="149" width="0.2800%" height="15" fill="rgb(208,153,25)" fg:x="5085" fg:w="103"/><text x="14.1143%" y="159.50"></text></g><g><title>__rust_alloc (106 instructions, 0.29%)</title><rect x="13.8213%" y="165" width="0.2881%" height="15" fill="rgb(235,6,53)" fg:x="5085" fg:w="106"/><text x="14.1143%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.22%)</title><rect x="14.1094%" y="165" width="0.2202%" height="15" fill="rgb(228,159,54)" fg:x="5191" fg:w="81"/><text x="14.4024%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.25%)</title><rect x="14.3296%" y="133" width="0.2528%" height="15" fill="rgb(224,105,14)" fg:x="5272" fg:w="93"/><text x="14.6226%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.28%)</title><rect x="14.3296%" y="149" width="0.2800%" height="15" fill="rgb(239,221,16)" fg:x="5272" fg:w="103"/><text x="14.6226%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.25%)</title><rect x="14.6177%" y="133" width="0.2528%" height="15" fill="rgb(230,150,7)" fg:x="5378" fg:w="93"/><text x="14.9107%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.28%)</title><rect x="14.6177%" y="149" width="0.2800%" height="15" fill="rgb(208,189,25)" fg:x="5378" fg:w="103"/><text x="14.9107%" y="159.50"></text></g><g><title>__rust_alloc (212 instructions, 0.58%)</title><rect x="14.3296%" y="165" width="0.5762%" height="15" fill="rgb(217,201,12)" fg:x="5272" fg:w="212"/><text x="14.6226%" y="175.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (14 instructions, 0.04%)</title><rect x="14.9058%" y="165" width="0.0381%" height="15" fill="rgb(238,116,49)" fg:x="5484" fg:w="14"/><text x="15.1988%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.22%)</title><rect x="14.9439%" y="165" width="0.2202%" height="15" fill="rgb(207,84,45)" fg:x="5498" fg:w="81"/><text x="15.2368%" y="175.50"></text></g><g><title>memcpy (411 instructions, 1.12%)</title><rect x="15.1640%" y="165" width="1.1171%" height="15" fill="rgb(216,152,10)" fg:x="5579" fg:w="411"/><text x="15.4570%" y="175.50"></text></g><g><title>memcpy (366 instructions, 0.99%)</title><rect x="16.2812%" y="165" width="0.9948%" height="15" fill="rgb(224,226,30)" fg:x="5990" fg:w="366"/><text x="16.5741%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,297 instructions, 19.83%)</title><rect x="1.0166%" y="181" width="19.8337%" height="15" fill="rgb(224,135,11)" fg:x="374" fg:w="7297"/><text x="1.3095%" y="191.50">candid::de::IDLDeserialize..</text></g><g><title>memcpy (321 instructions, 0.87%)</title><rect x="20.8502%" y="181" width="0.8725%" height="15" fill="rgb(229,142,25)" fg:x="7671" fg:w="321"/><text x="21.1432%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 instructions, 0.02%)</title><rect x="21.7227%" y="149" width="0.0163%" height="15" fill="rgb(251,17,2)" fg:x="7992" fg:w="6"/><text x="22.0157%" y="159.50"></text></g><g><title>candid::types::internal::find_type (45 instructions, 0.12%)</title><rect x="21.7227%" y="165" width="0.1223%" height="15" fill="rgb(250,16,24)" fg:x="7992" fg:w="45"/><text x="22.0157%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.25%)</title><rect x="21.8450%" y="117" width="0.2528%" height="15" fill="rgb(221,179,24)" fg:x="8037" fg:w="93"/><text x="22.1380%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.28%)</title><rect x="21.8450%" y="133" width="0.2800%" height="15" fill="rgb(253,114,23)" fg:x="8037" fg:w="103"/><text x="22.1380%" y="143.50"></text></g><g><title>__rust_alloc (106 instructions, 0.29%)</title><rect x="21.8450%" y="149" width="0.2881%" height="15" fill="rgb(249,199,10)" fg:x="8037" fg:w="106"/><text x="22.1380%" y="159.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (152 instructions, 0.41%)</title><rect x="21.8450%" y="165" width="0.4131%" height="15" fill="rgb(254,125,35)" fg:x="8037" fg:w="152"/><text x="22.1380%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="22.2582%" y="133" width="0.0136%" height="15" fill="rgb(217,0,38)" fg:x="8189" fg:w="5"/><text x="22.5511%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.14%)</title><rect x="22.2718%" y="117" width="0.1441%" height="15" fill="rgb(221,106,1)" fg:x="8194" fg:w="53"/><text x="22.5647%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.24%)</title><rect x="22.4158%" y="117" width="0.2419%" height="15" fill="rgb(229,97,39)" fg:x="8247" fg:w="89"/><text x="22.7088%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.44%)</title><rect x="22.6577%" y="117" width="0.4376%" height="15" fill="rgb(248,132,6)" fg:x="8336" fg:w="161"/><text x="22.9507%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 1.48%)</title><rect x="22.2718%" y="133" width="1.4841%" height="15" fill="rgb(237,136,35)" fg:x="8194" fg:w="546"/><text x="22.5647%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (796 instructions, 2.16%)</title><rect x="22.2582%" y="149" width="2.1636%" height="15" fill="rgb(238,1,23)" fg:x="8189" fg:w="796"/><text x="22.5511%" y="159.50">s..</text></g><g><title>candid::types::internal::env_add (822 instructions, 2.23%)</title><rect x="22.2582%" y="165" width="2.2342%" height="15" fill="rgb(243,124,42)" fg:x="8189" fg:w="822"/><text x="22.5511%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (93 instructions, 0.25%)</title><rect x="24.4924%" y="133" width="0.2528%" height="15" fill="rgb(237,136,54)" fg:x="9011" fg:w="93"/><text x="24.7854%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (103 instructions, 0.28%)</title><rect x="24.4924%" y="149" width="0.2800%" height="15" fill="rgb(215,69,49)" fg:x="9011" fg:w="103"/><text x="24.7854%" y="159.50"></text></g><g><title>__rust_alloc (106 instructions, 0.29%)</title><rect x="24.4924%" y="165" width="0.2881%" height="15" fill="rgb(215,9,0)" fg:x="9011" fg:w="106"/><text x="24.7854%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="24.7805%" y="133" width="0.0136%" height="15" fill="rgb(221,162,42)" fg:x="9117" fg:w="5"/><text x="25.0735%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.14%)</title><rect x="24.7941%" y="117" width="0.1441%" height="15" fill="rgb(248,22,39)" fg:x="9122" fg:w="53"/><text x="25.0871%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.24%)</title><rect x="24.9382%" y="117" width="0.2419%" height="15" fill="rgb(207,9,44)" fg:x="9175" fg:w="89"/><text x="25.2311%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.44%)</title><rect x="25.1801%" y="117" width="0.4376%" height="15" fill="rgb(237,209,38)" fg:x="9264" fg:w="161"/><text x="25.4730%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 1.48%)</title><rect x="24.7941%" y="133" width="1.4841%" height="15" fill="rgb(207,30,26)" fg:x="9122" fg:w="546"/><text x="25.0871%" y="143.50"></text></g><g><title>memcmp (68 instructions, 0.18%)</title><rect x="26.2782%" y="133" width="0.1848%" height="15" fill="rgb(243,62,1)" fg:x="9668" fg:w="68"/><text x="26.5711%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.22%)</title><rect x="26.4630%" y="117" width="0.2202%" height="15" fill="rgb(233,116,25)" fg:x="9736" fg:w="81"/><text x="26.7560%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (111 instructions, 0.30%)</title><rect x="26.4630%" y="133" width="0.3017%" height="15" fill="rgb(245,213,38)" fg:x="9736" fg:w="111"/><text x="26.7560%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (904 instructions, 2.46%)</title><rect x="24.7805%" y="149" width="2.4571%" height="15" fill="rgb(237,46,42)" fg:x="9117" fg:w="904"/><text x="25.0735%" y="159.50">s..</text></g><g><title>candid::types::internal::env_add (930 instructions, 2.53%)</title><rect x="24.7805%" y="165" width="2.5278%" height="15" fill="rgb(239,65,45)" fg:x="9117" fg:w="930"/><text x="25.0735%" y="175.50">c..</text></g><g><title>candid::types::internal::ID::__getit (5 instructions, 0.01%)</title><rect x="27.3083%" y="133" width="0.0136%" height="15" fill="rgb(228,97,21)" fg:x="10047" fg:w="5"/><text x="27.6013%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.14%)</title><rect x="27.3219%" y="101" width="0.1441%" height="15" fill="rgb(217,10,15)" fg:x="10052" fg:w="53"/><text x="27.6149%" y="111.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.21%)</title><rect x="27.3219%" y="117" width="0.2120%" height="15" fill="rgb(235,89,2)" fg:x="10052" fg:w="78"/><text x="27.6149%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (300 instructions, 0.82%)</title><rect x="27.3219%" y="133" width="0.8154%" height="15" fill="rgb(241,131,52)" fg:x="10052" fg:w="300"/><text x="27.6149%" y="143.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::PartialEq&gt;::eq (27 instructions, 0.07%)</title><rect x="28.1373%" y="133" width="0.0734%" height="15" fill="rgb(219,219,37)" fg:x="10352" fg:w="27"/><text x="28.4303%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="28.2107%" y="133" width="0.0299%" height="15" fill="rgb(207,3,30)" fg:x="10379" fg:w="11"/><text x="28.5037%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (515 instructions, 1.40%)</title><rect x="27.3083%" y="149" width="1.3998%" height="15" fill="rgb(249,8,18)" fg:x="10047" fg:w="515"/><text x="27.6013%" y="159.50"></text></g><g><title>candid::types::internal::env_id (552 instructions, 1.50%)</title><rect x="27.3083%" y="165" width="1.5004%" height="15" fill="rgb(222,50,39)" fg:x="10047" fg:w="552"/><text x="27.6013%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (37 instructions, 0.10%)</title><rect x="28.8087%" y="165" width="0.1006%" height="15" fill="rgb(248,89,18)" fg:x="10599" fg:w="37"/><text x="29.1016%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.33%)</title><rect x="28.9092%" y="149" width="0.3343%" height="15" fill="rgb(243,228,10)" fg:x="10636" fg:w="123"/><text x="29.2022%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.33%)</title><rect x="29.3251%" y="149" width="0.3343%" height="15" fill="rgb(233,23,28)" fg:x="10789" fg:w="123"/><text x="29.6181%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (306 instructions, 0.83%)</title><rect x="28.9092%" y="165" width="0.8317%" height="15" fill="rgb(213,97,41)" fg:x="10636" fg:w="306"/><text x="29.2022%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.08%)</title><rect x="29.7410%" y="149" width="0.0761%" height="15" fill="rgb(245,204,14)" fg:x="10942" fg:w="28"/><text x="30.0339%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.04%)</title><rect x="29.8171%" y="149" width="0.0435%" height="15" fill="rgb(253,98,28)" fg:x="10970" fg:w="16"/><text x="30.1100%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (16 instructions, 0.04%)</title><rect x="29.8606%" y="149" width="0.0435%" height="15" fill="rgb(241,138,8)" fg:x="10986" fg:w="16"/><text x="30.1535%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (141 instructions, 0.38%)</title><rect x="29.7410%" y="165" width="0.3832%" height="15" fill="rgb(242,44,0)" fg:x="10942" fg:w="141"/><text x="30.0339%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.1242%" y="165" width="0.0299%" height="15" fill="rgb(226,33,54)" fg:x="11083" fg:w="11"/><text x="30.4172%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.1541%" y="165" width="0.0299%" height="15" fill="rgb(206,83,0)" fg:x="11094" fg:w="11"/><text x="30.4471%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.1840%" y="165" width="0.0299%" height="15" fill="rgb(244,15,13)" fg:x="11105" fg:w="11"/><text x="30.4770%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::get_value (3,402 instructions, 9.25%)</title><rect x="21.7227%" y="181" width="9.2468%" height="15" fill="rgb(235,118,52)" fg:x="7992" fg:w="3402"/><text x="22.0157%" y="191.50">candid::de:..</text></g><g><title>memcpy (411 instructions, 1.12%)</title><rect x="30.9695%" y="181" width="1.1171%" height="15" fill="rgb(225,59,7)" fg:x="11394" fg:w="411"/><text x="31.2625%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.06%)</title><rect x="32.0867%" y="165" width="0.0598%" height="15" fill="rgb(231,1,2)" fg:x="11805" fg:w="22"/><text x="32.3796%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.33%)</title><rect x="32.1464%" y="165" width="0.3343%" height="15" fill="rgb(249,178,32)" fg:x="11827" fg:w="123"/><text x="32.4394%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (71 instructions, 0.19%)</title><rect x="32.4808%" y="133" width="0.1930%" height="15" fill="rgb(236,126,12)" fg:x="11950" fg:w="71"/><text x="32.7737%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (216 instructions, 0.59%)</title><rect x="32.4808%" y="149" width="0.5871%" height="15" fill="rgb(206,193,36)" fg:x="11950" fg:w="216"/><text x="32.7737%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (246 instructions, 0.67%)</title><rect x="32.4808%" y="165" width="0.6686%" height="15" fill="rgb(229,206,36)" fg:x="11950" fg:w="246"/><text x="32.7737%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="33.1494%" y="165" width="0.0299%" height="15" fill="rgb(233,36,0)" fg:x="12196" fg:w="11"/><text x="33.4424%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="33.1793%" y="165" width="0.0136%" height="15" fill="rgb(215,183,34)" fg:x="12207" fg:w="5"/><text x="33.4723%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (501 instructions, 1.36%)</title><rect x="32.0867%" y="181" width="1.3617%" height="15" fill="rgb(226,128,44)" fg:x="11805" fg:w="501"/><text x="32.3796%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.22%)</title><rect x="33.4484%" y="181" width="0.2202%" height="15" fill="rgb(205,60,38)" fg:x="12306" fg:w="81"/><text x="33.7414%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,287 instructions, 33.40%)</title><rect x="0.5789%" y="197" width="33.3968%" height="15" fill="rgb(222,11,4)" fg:x="213" fg:w="12287"/><text x="0.8719%" y="207.50">ic_cdk::api::call::arg_data</text></g><g><title>imrc_hashmap::MAP::__getit (6 instructions, 0.02%)</title><rect x="33.9757%" y="181" width="0.0163%" height="15" fill="rgb(251,73,15)" fg:x="12500" fg:w="6"/><text x="34.2687%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="33.9920%" y="133" width="0.1386%" height="15" fill="rgb(214,166,29)" fg:x="12506" fg:w="51"/><text x="34.2850%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="33.9920%" y="149" width="0.3533%" height="15" fill="rgb(236,102,32)" fg:x="12506" fg:w="130"/><text x="34.2850%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="33.9920%" y="165" width="0.5681%" height="15" fill="rgb(210,203,42)" fg:x="12506" fg:w="209"/><text x="34.2850%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="35.1363%" y="133" width="0.1386%" height="15" fill="rgb(220,39,3)" fg:x="12927" fg:w="51"/><text x="35.4293%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="35.1363%" y="149" width="0.3533%" height="15" fill="rgb(211,207,52)" fg:x="12927" fg:w="130"/><text x="35.4293%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="35.1363%" y="165" width="0.5681%" height="15" fill="rgb(223,181,8)" fg:x="12927" fg:w="209"/><text x="35.4293%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="36.2806%" y="117" width="0.1006%" height="15" fill="rgb(252,115,33)" fg:x="13348" fg:w="37"/><text x="36.5736%" y="127.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="36.2806%" y="133" width="0.3153%" height="15" fill="rgb(208,69,31)" fg:x="13348" fg:w="116"/><text x="36.5736%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="36.2806%" y="149" width="0.5300%" height="15" fill="rgb(214,74,18)" fg:x="13348" fg:w="195"/><text x="36.5736%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (274 instructions, 0.74%)</title><rect x="36.2806%" y="165" width="0.7447%" height="15" fill="rgb(239,116,36)" fg:x="13348" fg:w="274"/><text x="36.5736%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="37.6016%" y="133" width="0.1006%" height="15" fill="rgb(252,98,35)" fg:x="13834" fg:w="37"/><text x="37.8946%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="37.6016%" y="149" width="0.3153%" height="15" fill="rgb(207,213,47)" fg:x="13834" fg:w="116"/><text x="37.8946%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="37.6016%" y="165" width="0.5300%" height="15" fill="rgb(248,133,16)" fg:x="13834" fg:w="195"/><text x="37.8946%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="38.7078%" y="133" width="0.1006%" height="15" fill="rgb(210,202,39)" fg:x="14241" fg:w="37"/><text x="39.0008%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="38.7078%" y="149" width="0.3153%" height="15" fill="rgb(248,154,14)" fg:x="14241" fg:w="116"/><text x="39.0008%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="38.7078%" y="165" width="0.5300%" height="15" fill="rgb(208,136,28)" fg:x="14241" fg:w="195"/><text x="39.0008%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="39.8141%" y="133" width="0.1006%" height="15" fill="rgb(243,225,34)" fg:x="14648" fg:w="37"/><text x="40.1071%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="39.8141%" y="149" width="0.3153%" height="15" fill="rgb(237,19,14)" fg:x="14648" fg:w="116"/><text x="40.1071%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="39.8141%" y="165" width="0.5300%" height="15" fill="rgb(244,115,34)" fg:x="14648" fg:w="195"/><text x="40.1071%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="40.9203%" y="117" width="0.1006%" height="15" fill="rgb(237,57,51)" fg:x="15055" fg:w="37"/><text x="41.2133%" y="127.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="40.9203%" y="133" width="0.3153%" height="15" fill="rgb(205,154,4)" fg:x="15055" fg:w="116"/><text x="41.2133%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="40.9203%" y="149" width="0.5300%" height="15" fill="rgb(215,167,3)" fg:x="15055" fg:w="195"/><text x="41.2133%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (274 instructions, 0.74%)</title><rect x="40.9203%" y="165" width="0.7447%" height="15" fill="rgb(207,213,4)" fg:x="15055" fg:w="274"/><text x="41.2133%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="42.2413%" y="133" width="0.1386%" height="15" fill="rgb(242,130,47)" fg:x="15541" fg:w="51"/><text x="42.5343%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="42.2413%" y="149" width="0.3533%" height="15" fill="rgb(253,186,35)" fg:x="15541" fg:w="130"/><text x="42.5343%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="42.2413%" y="165" width="0.5681%" height="15" fill="rgb(231,42,26)" fg:x="15541" fg:w="209"/><text x="42.5343%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="43.3856%" y="133" width="0.1006%" height="15" fill="rgb(250,36,13)" fg:x="15962" fg:w="37"/><text x="43.6786%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="43.3856%" y="149" width="0.3153%" height="15" fill="rgb(207,192,32)" fg:x="15962" fg:w="116"/><text x="43.6786%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="43.3856%" y="165" width="0.5300%" height="15" fill="rgb(253,3,18)" fg:x="15962" fg:w="195"/><text x="43.6786%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="44.4919%" y="133" width="0.1006%" height="15" fill="rgb(240,82,0)" fg:x="16369" fg:w="37"/><text x="44.7848%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="44.4919%" y="149" width="0.3153%" height="15" fill="rgb(217,86,1)" fg:x="16369" fg:w="116"/><text x="44.7848%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="44.4919%" y="165" width="0.5300%" height="15" fill="rgb(252,224,5)" fg:x="16369" fg:w="195"/><text x="44.7848%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="45.5981%" y="133" width="0.1006%" height="15" fill="rgb(208,5,34)" fg:x="16776" fg:w="37"/><text x="45.8911%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="45.5981%" y="149" width="0.3153%" height="15" fill="rgb(228,229,0)" fg:x="16776" fg:w="116"/><text x="45.8911%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="45.5981%" y="165" width="0.5300%" height="15" fill="rgb(210,225,18)" fg:x="16776" fg:w="195"/><text x="45.8911%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="46.7044%" y="133" width="0.1006%" height="15" fill="rgb(220,27,39)" fg:x="17183" fg:w="37"/><text x="46.9973%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="46.7044%" y="149" width="0.3153%" height="15" fill="rgb(239,192,6)" fg:x="17183" fg:w="116"/><text x="46.9973%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="46.7044%" y="165" width="0.5300%" height="15" fill="rgb(217,129,25)" fg:x="17183" fg:w="195"/><text x="46.9973%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="47.8106%" y="133" width="0.1006%" height="15" fill="rgb(244,93,45)" fg:x="17590" fg:w="37"/><text x="48.1036%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="47.8106%" y="149" width="0.3153%" height="15" fill="rgb(252,80,3)" fg:x="17590" fg:w="116"/><text x="48.1036%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="47.8106%" y="165" width="0.5300%" height="15" fill="rgb(213,59,30)" fg:x="17590" fg:w="195"/><text x="48.1036%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="48.9169%" y="117" width="0.1006%" height="15" fill="rgb(210,165,47)" fg:x="17997" fg:w="37"/><text x="49.2098%" y="127.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="48.9169%" y="133" width="0.3153%" height="15" fill="rgb(222,15,18)" fg:x="17997" fg:w="116"/><text x="49.2098%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="48.9169%" y="149" width="0.5300%" height="15" fill="rgb(243,124,54)" fg:x="17997" fg:w="195"/><text x="49.2098%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (274 instructions, 0.74%)</title><rect x="48.9169%" y="165" width="0.7447%" height="15" fill="rgb(224,166,12)" fg:x="17997" fg:w="274"/><text x="49.2098%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="50.2378%" y="133" width="0.1386%" height="15" fill="rgb(229,184,42)" fg:x="18483" fg:w="51"/><text x="50.5308%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="50.2378%" y="149" width="0.3533%" height="15" fill="rgb(229,131,40)" fg:x="18483" fg:w="130"/><text x="50.5308%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="50.2378%" y="165" width="0.5681%" height="15" fill="rgb(230,202,45)" fg:x="18483" fg:w="209"/><text x="50.5308%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="51.3821%" y="133" width="0.1006%" height="15" fill="rgb(249,85,43)" fg:x="18904" fg:w="37"/><text x="51.6751%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="51.3821%" y="149" width="0.3153%" height="15" fill="rgb(239,181,2)" fg:x="18904" fg:w="116"/><text x="51.6751%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="51.3821%" y="165" width="0.5300%" height="15" fill="rgb(226,184,53)" fg:x="18904" fg:w="195"/><text x="51.6751%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="52.4884%" y="133" width="0.1006%" height="15" fill="rgb(210,118,37)" fg:x="19311" fg:w="37"/><text x="52.7813%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="52.4884%" y="149" width="0.3153%" height="15" fill="rgb(246,118,30)" fg:x="19311" fg:w="116"/><text x="52.7813%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="52.4884%" y="165" width="0.5300%" height="15" fill="rgb(231,173,14)" fg:x="19311" fg:w="195"/><text x="52.7813%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="53.5946%" y="133" width="0.1386%" height="15" fill="rgb(235,128,32)" fg:x="19718" fg:w="51"/><text x="53.8876%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="53.5946%" y="149" width="0.3533%" height="15" fill="rgb(237,70,38)" fg:x="19718" fg:w="130"/><text x="53.8876%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="53.5946%" y="165" width="0.5681%" height="15" fill="rgb(228,26,47)" fg:x="19718" fg:w="209"/><text x="53.8876%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="54.7389%" y="133" width="0.1006%" height="15" fill="rgb(237,53,41)" fg:x="20139" fg:w="37"/><text x="55.0319%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="54.7389%" y="149" width="0.3153%" height="15" fill="rgb(236,184,40)" fg:x="20139" fg:w="116"/><text x="55.0319%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="54.7389%" y="165" width="0.5300%" height="15" fill="rgb(239,74,52)" fg:x="20139" fg:w="195"/><text x="55.0319%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="55.8452%" y="133" width="0.1386%" height="15" fill="rgb(210,20,20)" fg:x="20546" fg:w="51"/><text x="56.1381%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="55.8452%" y="149" width="0.3533%" height="15" fill="rgb(246,45,33)" fg:x="20546" fg:w="130"/><text x="56.1381%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="55.8452%" y="165" width="0.5681%" height="15" fill="rgb(222,17,27)" fg:x="20546" fg:w="209"/><text x="56.1381%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="56.9895%" y="133" width="0.1006%" height="15" fill="rgb(222,168,6)" fg:x="20967" fg:w="37"/><text x="57.2824%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="56.9895%" y="149" width="0.3153%" height="15" fill="rgb(254,101,6)" fg:x="20967" fg:w="116"/><text x="57.2824%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="56.9895%" y="165" width="0.5300%" height="15" fill="rgb(252,49,46)" fg:x="20967" fg:w="195"/><text x="57.2824%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="58.0957%" y="133" width="0.1006%" height="15" fill="rgb(210,35,1)" fg:x="21374" fg:w="37"/><text x="58.3887%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="58.0957%" y="149" width="0.3153%" height="15" fill="rgb(218,179,38)" fg:x="21374" fg:w="116"/><text x="58.3887%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="58.0957%" y="165" width="0.5300%" height="15" fill="rgb(243,136,1)" fg:x="21374" fg:w="195"/><text x="58.3887%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="59.2020%" y="133" width="0.1006%" height="15" fill="rgb(253,11,50)" fg:x="21781" fg:w="37"/><text x="59.4949%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="59.2020%" y="149" width="0.3153%" height="15" fill="rgb(243,174,47)" fg:x="21781" fg:w="116"/><text x="59.4949%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="59.2020%" y="165" width="0.5300%" height="15" fill="rgb(223,128,23)" fg:x="21781" fg:w="195"/><text x="59.4949%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="60.3082%" y="133" width="0.1006%" height="15" fill="rgb(245,23,25)" fg:x="22188" fg:w="37"/><text x="60.6012%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="60.3082%" y="149" width="0.3153%" height="15" fill="rgb(218,224,26)" fg:x="22188" fg:w="116"/><text x="60.6012%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="60.3082%" y="165" width="0.5300%" height="15" fill="rgb(231,25,49)" fg:x="22188" fg:w="195"/><text x="60.6012%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="61.4145%" y="133" width="0.1386%" height="15" fill="rgb(226,117,0)" fg:x="22595" fg:w="51"/><text x="61.7074%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="61.4145%" y="149" width="0.3533%" height="15" fill="rgb(247,190,22)" fg:x="22595" fg:w="130"/><text x="61.7074%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="61.4145%" y="165" width="0.5681%" height="15" fill="rgb(230,121,14)" fg:x="22595" fg:w="209"/><text x="61.7074%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="62.5588%" y="133" width="0.1386%" height="15" fill="rgb(252,172,1)" fg:x="23016" fg:w="51"/><text x="62.8517%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="62.5588%" y="149" width="0.3533%" height="15" fill="rgb(208,89,16)" fg:x="23016" fg:w="130"/><text x="62.8517%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="62.5588%" y="165" width="0.5681%" height="15" fill="rgb(249,161,32)" fg:x="23016" fg:w="209"/><text x="62.8517%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="63.7031%" y="133" width="0.1386%" height="15" fill="rgb(227,51,18)" fg:x="23437" fg:w="51"/><text x="63.9960%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="63.7031%" y="149" width="0.3533%" height="15" fill="rgb(227,139,9)" fg:x="23437" fg:w="130"/><text x="63.9960%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="63.7031%" y="165" width="0.5681%" height="15" fill="rgb(233,151,43)" fg:x="23437" fg:w="209"/><text x="63.9960%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="64.8474%" y="133" width="0.1006%" height="15" fill="rgb(216,131,47)" fg:x="23858" fg:w="37"/><text x="65.1403%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="64.8474%" y="149" width="0.3153%" height="15" fill="rgb(242,22,17)" fg:x="23858" fg:w="116"/><text x="65.1403%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="64.8474%" y="165" width="0.5300%" height="15" fill="rgb(210,210,11)" fg:x="23858" fg:w="195"/><text x="65.1403%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="65.9536%" y="133" width="0.1006%" height="15" fill="rgb(227,227,18)" fg:x="24265" fg:w="37"/><text x="66.2466%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="65.9536%" y="149" width="0.3153%" height="15" fill="rgb(241,21,7)" fg:x="24265" fg:w="116"/><text x="66.2466%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="65.9536%" y="165" width="0.5300%" height="15" fill="rgb(240,133,5)" fg:x="24265" fg:w="195"/><text x="66.2466%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="67.0599%" y="133" width="0.1386%" height="15" fill="rgb(212,118,54)" fg:x="24672" fg:w="51"/><text x="67.3528%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="67.0599%" y="149" width="0.3533%" height="15" fill="rgb(223,134,9)" fg:x="24672" fg:w="130"/><text x="67.3528%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="67.0599%" y="165" width="0.5681%" height="15" fill="rgb(254,13,14)" fg:x="24672" fg:w="209"/><text x="67.3528%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="68.2042%" y="133" width="0.1386%" height="15" fill="rgb(237,83,13)" fg:x="25093" fg:w="51"/><text x="68.4971%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="68.2042%" y="149" width="0.3533%" height="15" fill="rgb(234,208,0)" fg:x="25093" fg:w="130"/><text x="68.4971%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="68.2042%" y="165" width="0.5681%" height="15" fill="rgb(228,71,20)" fg:x="25093" fg:w="209"/><text x="68.4971%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="69.3485%" y="133" width="0.1386%" height="15" fill="rgb(243,44,20)" fg:x="25514" fg:w="51"/><text x="69.6415%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="69.3485%" y="149" width="0.3533%" height="15" fill="rgb(205,148,48)" fg:x="25514" fg:w="130"/><text x="69.6415%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="69.3485%" y="165" width="0.5681%" height="15" fill="rgb(216,138,50)" fg:x="25514" fg:w="209"/><text x="69.6415%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="70.4928%" y="133" width="0.1006%" height="15" fill="rgb(245,74,42)" fg:x="25935" fg:w="37"/><text x="70.7858%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="70.4928%" y="149" width="0.3153%" height="15" fill="rgb(205,186,41)" fg:x="25935" fg:w="116"/><text x="70.7858%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="70.4928%" y="165" width="0.5300%" height="15" fill="rgb(249,2,26)" fg:x="25935" fg:w="195"/><text x="70.7858%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="71.5990%" y="133" width="0.1006%" height="15" fill="rgb(219,3,37)" fg:x="26342" fg:w="37"/><text x="71.8920%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="71.5990%" y="149" width="0.3153%" height="15" fill="rgb(224,223,47)" fg:x="26342" fg:w="116"/><text x="71.8920%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="71.5990%" y="165" width="0.5300%" height="15" fill="rgb(249,181,54)" fg:x="26342" fg:w="195"/><text x="71.8920%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="72.7053%" y="133" width="0.1386%" height="15" fill="rgb(220,97,10)" fg:x="26749" fg:w="51"/><text x="72.9982%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="72.7053%" y="149" width="0.3533%" height="15" fill="rgb(248,177,6)" fg:x="26749" fg:w="130"/><text x="72.9982%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="72.7053%" y="165" width="0.5681%" height="15" fill="rgb(222,89,28)" fg:x="26749" fg:w="209"/><text x="72.9982%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="73.8496%" y="133" width="0.1006%" height="15" fill="rgb(219,58,46)" fg:x="27170" fg:w="37"/><text x="74.1426%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="73.8496%" y="149" width="0.3153%" height="15" fill="rgb(211,121,19)" fg:x="27170" fg:w="116"/><text x="74.1426%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="73.8496%" y="165" width="0.5300%" height="15" fill="rgb(229,15,37)" fg:x="27170" fg:w="195"/><text x="74.1426%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="74.9558%" y="133" width="0.1006%" height="15" fill="rgb(235,43,46)" fg:x="27577" fg:w="37"/><text x="75.2488%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="74.9558%" y="149" width="0.3153%" height="15" fill="rgb(248,5,10)" fg:x="27577" fg:w="116"/><text x="75.2488%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="74.9558%" y="165" width="0.5300%" height="15" fill="rgb(213,37,35)" fg:x="27577" fg:w="195"/><text x="75.2488%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="76.0621%" y="133" width="0.1386%" height="15" fill="rgb(251,12,28)" fg:x="27984" fg:w="51"/><text x="76.3550%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="76.0621%" y="149" width="0.3533%" height="15" fill="rgb(253,124,2)" fg:x="27984" fg:w="130"/><text x="76.3550%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="76.0621%" y="165" width="0.5681%" height="15" fill="rgb(225,169,43)" fg:x="27984" fg:w="209"/><text x="76.3550%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="77.2064%" y="133" width="0.1386%" height="15" fill="rgb(254,157,42)" fg:x="28405" fg:w="51"/><text x="77.4994%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="77.2064%" y="149" width="0.3533%" height="15" fill="rgb(222,156,28)" fg:x="28405" fg:w="130"/><text x="77.4994%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="77.2064%" y="165" width="0.5681%" height="15" fill="rgb(227,180,28)" fg:x="28405" fg:w="209"/><text x="77.4994%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="78.3507%" y="133" width="0.1386%" height="15" fill="rgb(226,48,28)" fg:x="28826" fg:w="51"/><text x="78.6437%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="78.3507%" y="149" width="0.3533%" height="15" fill="rgb(248,206,17)" fg:x="28826" fg:w="130"/><text x="78.6437%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="78.3507%" y="165" width="0.5681%" height="15" fill="rgb(226,198,44)" fg:x="28826" fg:w="209"/><text x="78.6437%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="79.4950%" y="133" width="0.1006%" height="15" fill="rgb(207,61,9)" fg:x="29247" fg:w="37"/><text x="79.7880%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="79.4950%" y="149" width="0.3153%" height="15" fill="rgb(251,217,34)" fg:x="29247" fg:w="116"/><text x="79.7880%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="79.4950%" y="165" width="0.5300%" height="15" fill="rgb(228,147,45)" fg:x="29247" fg:w="195"/><text x="79.7880%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="80.6012%" y="133" width="0.1006%" height="15" fill="rgb(240,201,35)" fg:x="29654" fg:w="37"/><text x="80.8942%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="80.6012%" y="149" width="0.3153%" height="15" fill="rgb(237,122,34)" fg:x="29654" fg:w="116"/><text x="80.8942%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="80.6012%" y="165" width="0.5300%" height="15" fill="rgb(249,181,8)" fg:x="29654" fg:w="195"/><text x="80.8942%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="81.7075%" y="133" width="0.1006%" height="15" fill="rgb(245,160,34)" fg:x="30061" fg:w="37"/><text x="82.0005%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="81.7075%" y="149" width="0.3153%" height="15" fill="rgb(230,187,52)" fg:x="30061" fg:w="116"/><text x="82.0005%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="81.7075%" y="165" width="0.5300%" height="15" fill="rgb(254,217,33)" fg:x="30061" fg:w="195"/><text x="82.0005%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="82.8137%" y="133" width="0.1386%" height="15" fill="rgb(221,134,22)" fg:x="30468" fg:w="51"/><text x="83.1067%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="82.8137%" y="149" width="0.3533%" height="15" fill="rgb(246,90,31)" fg:x="30468" fg:w="130"/><text x="83.1067%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="82.8137%" y="165" width="0.5681%" height="15" fill="rgb(245,66,4)" fg:x="30468" fg:w="209"/><text x="83.1067%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="83.9580%" y="133" width="0.1006%" height="15" fill="rgb(226,7,38)" fg:x="30889" fg:w="37"/><text x="84.2510%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="83.9580%" y="149" width="0.3153%" height="15" fill="rgb(238,18,14)" fg:x="30889" fg:w="116"/><text x="84.2510%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="83.9580%" y="165" width="0.5300%" height="15" fill="rgb(254,224,11)" fg:x="30889" fg:w="195"/><text x="84.2510%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="85.0643%" y="133" width="0.1006%" height="15" fill="rgb(246,127,25)" fg:x="31296" fg:w="37"/><text x="85.3573%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="85.0643%" y="149" width="0.3153%" height="15" fill="rgb(222,164,20)" fg:x="31296" fg:w="116"/><text x="85.3573%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="85.0643%" y="165" width="0.5300%" height="15" fill="rgb(250,202,41)" fg:x="31296" fg:w="195"/><text x="85.3573%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="86.1705%" y="133" width="0.1006%" height="15" fill="rgb(212,81,5)" fg:x="31703" fg:w="37"/><text x="86.4635%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="86.1705%" y="149" width="0.3153%" height="15" fill="rgb(205,133,47)" fg:x="31703" fg:w="116"/><text x="86.4635%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="86.1705%" y="165" width="0.5300%" height="15" fill="rgb(227,72,47)" fg:x="31703" fg:w="195"/><text x="86.4635%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (51 instructions, 0.14%)</title><rect x="87.2768%" y="133" width="0.1386%" height="15" fill="rgb(210,67,10)" fg:x="32110" fg:w="51"/><text x="87.5697%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (130 instructions, 0.35%)</title><rect x="87.2768%" y="149" width="0.3533%" height="15" fill="rgb(208,137,27)" fg:x="32110" fg:w="130"/><text x="87.5697%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (209 instructions, 0.57%)</title><rect x="87.2768%" y="165" width="0.5681%" height="15" fill="rgb(214,174,15)" fg:x="32110" fg:w="209"/><text x="87.5697%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="88.4211%" y="133" width="0.1006%" height="15" fill="rgb(229,149,18)" fg:x="32531" fg:w="37"/><text x="88.7140%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="88.4211%" y="149" width="0.3153%" height="15" fill="rgb(205,77,25)" fg:x="32531" fg:w="116"/><text x="88.7140%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="88.4211%" y="165" width="0.5300%" height="15" fill="rgb(210,174,25)" fg:x="32531" fg:w="195"/><text x="88.7140%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (37 instructions, 0.10%)</title><rect x="89.5273%" y="117" width="0.1006%" height="15" fill="rgb(248,8,9)" fg:x="32938" fg:w="37"/><text x="89.8203%" y="127.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (116 instructions, 0.32%)</title><rect x="89.5273%" y="133" width="0.3153%" height="15" fill="rgb(231,138,13)" fg:x="32938" fg:w="116"/><text x="89.8203%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (195 instructions, 0.53%)</title><rect x="89.5273%" y="149" width="0.5300%" height="15" fill="rgb(241,85,45)" fg:x="32938" fg:w="195"/><text x="89.8203%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (274 instructions, 0.74%)</title><rect x="89.5273%" y="165" width="0.7447%" height="15" fill="rgb(233,169,30)" fg:x="32938" fg:w="274"/><text x="89.8203%" y="175.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::remove (20,918 instructions, 56.86%)</title><rect x="33.9920%" y="181" width="56.8563%" height="15" fill="rgb(241,29,36)" fg:x="12506" fg:w="20918"/><text x="34.2850%" y="191.50">im_rc::hash::map::HashMap&lt;K,V,S&gt;::remove</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (22,678 instructions, 61.64%)</title><rect x="33.9757%" y="197" width="61.6401%" height="15" fill="rgb(218,154,6)" fg:x="12500" fg:w="22678"/><text x="34.2687%" y="207.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="95.6158%" y="165" width="0.0136%" height="15" fill="rgb(251,108,38)" fg:x="35178" fg:w="5"/><text x="95.9087%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.15%)</title><rect x="95.6294%" y="133" width="0.1468%" height="15" fill="rgb(234,193,0)" fg:x="35183" fg:w="54"/><text x="95.9223%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (136 instructions, 0.37%)</title><rect x="95.6294%" y="149" width="0.3697%" height="15" fill="rgb(217,100,30)" fg:x="35183" fg:w="136"/><text x="95.9223%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (166 instructions, 0.45%)</title><rect x="95.6294%" y="165" width="0.4512%" height="15" fill="rgb(238,72,23)" fg:x="35183" fg:w="166"/><text x="95.9223%" y="175.50"></text></g><g><title>memset (136 instructions, 0.37%)</title><rect x="96.0806%" y="165" width="0.3697%" height="15" fill="rgb(225,226,53)" fg:x="35349" fg:w="136"/><text x="96.3735%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (464 instructions, 1.26%)</title><rect x="95.6158%" y="181" width="1.2612%" height="15" fill="rgb(239,190,25)" fg:x="35178" fg:w="464"/><text x="95.9087%" y="191.50"></text></g><g><title>std::io::Write::write_all (78 instructions, 0.21%)</title><rect x="96.8770%" y="165" width="0.2120%" height="15" fill="rgb(243,19,40)" fg:x="35642" fg:w="78"/><text x="97.1699%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (94 instructions, 0.26%)</title><rect x="97.0890%" y="101" width="0.2555%" height="15" fill="rgb(225,78,25)" fg:x="35720" fg:w="94"/><text x="97.3819%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (104 instructions, 0.28%)</title><rect x="97.0890%" y="117" width="0.2827%" height="15" fill="rgb(236,207,46)" fg:x="35720" fg:w="104"/><text x="97.3819%" y="127.50"></text></g><g><title>__rust_alloc (107 instructions, 0.29%)</title><rect x="97.0890%" y="133" width="0.2908%" height="15" fill="rgb(233,229,13)" fg:x="35720" fg:w="107"/><text x="97.3819%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (137 instructions, 0.37%)</title><rect x="97.0890%" y="149" width="0.3724%" height="15" fill="rgb(217,180,34)" fg:x="35720" fg:w="137"/><text x="97.3819%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (202 instructions, 0.55%)</title><rect x="97.0890%" y="165" width="0.5490%" height="15" fill="rgb(237,203,47)" fg:x="35720" fg:w="202"/><text x="97.3819%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.03%)</title><rect x="97.6380%" y="165" width="0.0299%" height="15" fill="rgb(216,36,31)" fg:x="35922" fg:w="11"/><text x="97.9310%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.03%)</title><rect x="97.6679%" y="165" width="0.0299%" height="15" fill="rgb(235,85,24)" fg:x="35933" fg:w="11"/><text x="97.9609%" y="175.50"></text></g><g><title>std::io::Write::write_all (76 instructions, 0.21%)</title><rect x="97.6978%" y="165" width="0.2066%" height="15" fill="rgb(242,97,17)" fg:x="35944" fg:w="76"/><text x="97.9908%" y="175.50"></text></g><g><title>std::io::Write::write_all (14 instructions, 0.04%)</title><rect x="97.9044%" y="165" width="0.0381%" height="15" fill="rgb(246,110,21)" fg:x="36020" fg:w="14"/><text x="98.1973%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (674 instructions, 1.83%)</title><rect x="96.8770%" y="181" width="1.8320%" height="15" fill="rgb(242,159,22)" fg:x="35642" fg:w="674"/><text x="97.1699%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="98.7089%" y="181" width="0.0136%" height="15" fill="rgb(218,223,27)" fg:x="36316" fg:w="5"/><text x="99.0019%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.22%)</title><rect x="98.7225%" y="181" width="0.2202%" height="15" fill="rgb(254,121,52)" fg:x="36321" fg:w="81"/><text x="99.0155%" y="191.50"></text></g><g><title>ic_cdk::api::call::reply (1,300 instructions, 3.53%)</title><rect x="95.6158%" y="197" width="3.5335%" height="15" fill="rgb(250,188,0)" fg:x="35178" fg:w="1300"/><text x="95.9087%" y="207.50">ic_..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.22%)</title><rect x="99.1492%" y="197" width="0.2202%" height="15" fill="rgb(206,31,38)" fg:x="36478" fg:w="81"/><text x="99.4422%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (169 instructions, 0.46%)</title><rect x="99.3694%" y="197" width="0.4594%" height="15" fill="rgb(246,64,50)" fg:x="36559" fg:w="169"/><text x="99.6624%" y="207.50"></text></g><g><title>all (36,791 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,200,11)" fg:x="0" fg:w="36791"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (36,791 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,158,50)" fg:x="0" fg:w="36791"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>