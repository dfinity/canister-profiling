<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="36283"><g><title>ic_cdk::setup (19 instructions, 0.05%)</title><rect x="0.0000%" y="197" width="0.0524%" height="15" fill="rgb(254,151,54)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.21%)</title><rect x="0.0524%" y="197" width="0.2095%" height="15" fill="rgb(243,93,17)" fg:x="19" fg:w="76"/><text x="0.3453%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.20%)</title><rect x="0.2618%" y="197" width="0.2012%" height="15" fill="rgb(254,138,11)" fg:x="95" fg:w="73"/><text x="0.5548%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.33%)</title><rect x="0.4630%" y="165" width="0.3252%" height="15" fill="rgb(245,168,26)" fg:x="168" fg:w="118"/><text x="0.7560%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.20%)</title><rect x="0.7882%" y="149" width="0.1957%" height="15" fill="rgb(245,182,34)" fg:x="286" fg:w="71"/><text x="1.0812%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="0.9839%" y="133" width="0.0110%" height="15" fill="rgb(206,55,37)" fg:x="357" fg:w="4"/><text x="1.2769%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 1.10%)</title><rect x="0.9839%" y="149" width="1.1024%" height="15" fill="rgb(225,201,24)" fg:x="357" fg:w="400"/><text x="1.2769%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.23%)</title><rect x="2.0864%" y="149" width="0.2343%" height="15" fill="rgb(243,167,13)" fg:x="757" fg:w="85"/><text x="2.3793%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.15%)</title><rect x="2.3206%" y="149" width="0.1488%" height="15" fill="rgb(221,136,9)" fg:x="842" fg:w="54"/><text x="2.6136%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.15%)</title><rect x="2.4695%" y="149" width="0.1488%" height="15" fill="rgb(238,73,26)" fg:x="896" fg:w="54"/><text x="2.7624%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.15%)</title><rect x="2.6183%" y="149" width="0.1488%" height="15" fill="rgb(217,22,22)" fg:x="950" fg:w="54"/><text x="2.9113%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.15%)</title><rect x="2.7671%" y="149" width="0.1488%" height="15" fill="rgb(209,54,16)" fg:x="1004" fg:w="54"/><text x="3.0601%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.20%)</title><rect x="2.9160%" y="149" width="0.1957%" height="15" fill="rgb(244,62,6)" fg:x="1058" fg:w="71"/><text x="3.2089%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.18%)</title><rect x="3.1117%" y="149" width="0.1791%" height="15" fill="rgb(246,74,11)" fg:x="1129" fg:w="65"/><text x="3.4046%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="3.2908%" y="133" width="0.0110%" height="15" fill="rgb(215,0,11)" fg:x="1194" fg:w="4"/><text x="3.5838%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 1.10%)</title><rect x="3.2908%" y="149" width="1.1024%" height="15" fill="rgb(226,163,20)" fg:x="1194" fg:w="400"/><text x="3.5838%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.04%)</title><rect x="4.3932%" y="149" width="0.0441%" height="15" fill="rgb(253,109,20)" fg:x="1594" fg:w="16"/><text x="4.6862%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.21%)</title><rect x="4.4373%" y="133" width="0.2095%" height="15" fill="rgb(224,29,11)" fg:x="1610" fg:w="76"/><text x="4.7303%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.17%)</title><rect x="4.6468%" y="101" width="0.1654%" height="15" fill="rgb(253,177,49)" fg:x="1686" fg:w="60"/><text x="4.9398%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.23%)</title><rect x="4.6468%" y="117" width="0.2343%" height="15" fill="rgb(225,28,45)" fg:x="1686" fg:w="85"/><text x="4.9398%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="4.8811%" y="69" width="0.0248%" height="15" fill="rgb(251,90,41)" fg:x="1771" fg:w="9"/><text x="5.1740%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.08%)</title><rect x="4.9059%" y="53" width="0.0827%" height="15" fill="rgb(212,94,14)" fg:x="1780" fg:w="30"/><text x="5.1988%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.15%)</title><rect x="4.9059%" y="69" width="0.1516%" height="15" fill="rgb(206,187,24)" fg:x="1780" fg:w="55"/><text x="5.1988%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.33%)</title><rect x="4.8811%" y="85" width="0.3252%" height="15" fill="rgb(247,86,19)" fg:x="1771" fg:w="118"/><text x="5.1740%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.47%)</title><rect x="4.8811%" y="101" width="0.4713%" height="15" fill="rgb(250,156,21)" fg:x="1771" fg:w="171"/><text x="5.1740%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.49%)</title><rect x="4.8811%" y="117" width="0.4851%" height="15" fill="rgb(225,6,45)" fg:x="1771" fg:w="176"/><text x="5.1740%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 1.03%)</title><rect x="4.6468%" y="133" width="1.0253%" height="15" fill="rgb(233,167,6)" fg:x="1686" fg:w="372"/><text x="4.9398%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 1.64%)</title><rect x="4.4373%" y="149" width="1.6371%" height="15" fill="rgb(213,227,40)" fg:x="1610" fg:w="594"/><text x="4.7303%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.23%)</title><rect x="6.0745%" y="149" width="0.2343%" height="15" fill="rgb(248,181,42)" fg:x="2204" fg:w="85"/><text x="6.3674%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.15%)</title><rect x="6.3087%" y="149" width="0.1516%" height="15" fill="rgb(207,65,52)" fg:x="2289" fg:w="55"/><text x="6.6017%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.18%)</title><rect x="6.4603%" y="149" width="0.1819%" height="15" fill="rgb(238,68,49)" fg:x="2344" fg:w="66"/><text x="6.7533%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.18%)</title><rect x="6.6422%" y="149" width="0.1791%" height="15" fill="rgb(208,176,15)" fg:x="2410" fg:w="65"/><text x="6.9352%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="6.8214%" y="117" width="0.0110%" height="15" fill="rgb(249,119,26)" fg:x="2475" fg:w="4"/><text x="7.1143%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 1.10%)</title><rect x="6.8214%" y="133" width="1.1024%" height="15" fill="rgb(205,4,10)" fg:x="2475" fg:w="400"/><text x="7.1143%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.04%)</title><rect x="7.9238%" y="133" width="0.0441%" height="15" fill="rgb(252,177,34)" fg:x="2875" fg:w="16"/><text x="8.2168%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.21%)</title><rect x="7.9679%" y="117" width="0.2095%" height="15" fill="rgb(236,145,20)" fg:x="2891" fg:w="76"/><text x="8.2609%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.17%)</title><rect x="8.1774%" y="85" width="0.1654%" height="15" fill="rgb(221,180,26)" fg:x="2967" fg:w="60"/><text x="8.4704%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.23%)</title><rect x="8.1774%" y="101" width="0.2343%" height="15" fill="rgb(231,32,12)" fg:x="2967" fg:w="85"/><text x="8.4704%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="8.4117%" y="53" width="0.0248%" height="15" fill="rgb(217,103,21)" fg:x="3052" fg:w="9"/><text x="8.7046%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.08%)</title><rect x="8.4365%" y="37" width="0.0827%" height="15" fill="rgb(219,74,49)" fg:x="3061" fg:w="30"/><text x="8.7294%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.15%)</title><rect x="8.4365%" y="53" width="0.1516%" height="15" fill="rgb(208,146,24)" fg:x="3061" fg:w="55"/><text x="8.7294%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.33%)</title><rect x="8.4117%" y="69" width="0.3252%" height="15" fill="rgb(232,183,3)" fg:x="3052" fg:w="118"/><text x="8.7046%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.47%)</title><rect x="8.4117%" y="85" width="0.4713%" height="15" fill="rgb(226,194,1)" fg:x="3052" fg:w="171"/><text x="8.7046%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.49%)</title><rect x="8.4117%" y="101" width="0.4851%" height="15" fill="rgb(241,51,20)" fg:x="3052" fg:w="176"/><text x="8.7046%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 1.03%)</title><rect x="8.1774%" y="117" width="1.0253%" height="15" fill="rgb(214,194,19)" fg:x="2967" fg:w="372"/><text x="8.4704%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 1.64%)</title><rect x="7.9679%" y="133" width="1.6371%" height="15" fill="rgb(251,35,18)" fg:x="2891" fg:w="594"/><text x="8.2609%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.23%)</title><rect x="9.6050%" y="133" width="0.2343%" height="15" fill="rgb(247,157,21)" fg:x="3485" fg:w="85"/><text x="9.8980%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.15%)</title><rect x="9.8393%" y="133" width="0.1516%" height="15" fill="rgb(240,161,1)" fg:x="3570" fg:w="55"/><text x="10.1323%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.20%)</title><rect x="9.9909%" y="117" width="0.1957%" height="15" fill="rgb(238,126,11)" fg:x="3625" fg:w="71"/><text x="10.2839%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.25%)</title><rect x="10.1866%" y="117" width="0.2508%" height="15" fill="rgb(250,116,24)" fg:x="3696" fg:w="91"/><text x="10.4796%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.18%)</title><rect x="10.4374%" y="117" width="0.1819%" height="15" fill="rgb(217,47,8)" fg:x="3787" fg:w="66"/><text x="10.7304%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 0.79%)</title><rect x="9.9909%" y="133" width="0.7910%" height="15" fill="rgb(235,40,5)" fg:x="3625" fg:w="287"/><text x="10.2839%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="10.7819%" y="133" width="0.2260%" height="15" fill="rgb(238,225,50)" fg:x="3912" fg:w="82"/><text x="11.0749%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,720 instructions, 4.74%)</title><rect x="6.8214%" y="149" width="4.7405%" height="15" fill="rgb(230,3,32)" fg:x="2475" fg:w="1720"/><text x="7.1143%" y="159.50">binr..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.18%)</title><rect x="11.5619%" y="149" width="0.1819%" height="15" fill="rgb(211,143,9)" fg:x="4195" fg:w="66"/><text x="11.8549%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="11.7438%" y="149" width="0.0358%" height="15" fill="rgb(241,212,22)" fg:x="4261" fg:w="13"/><text x="12.0368%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="11.7796%" y="149" width="0.0358%" height="15" fill="rgb(253,161,13)" fg:x="4274" fg:w="13"/><text x="12.0726%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.02%)</title><rect x="11.8155%" y="149" width="0.0193%" height="15" fill="rgb(234,60,15)" fg:x="4287" fg:w="7"/><text x="12.1084%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.04%)</title><rect x="11.8347%" y="149" width="0.0413%" height="15" fill="rgb(241,140,12)" fg:x="4294" fg:w="15"/><text x="12.1277%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="11.8761%" y="133" width="0.2260%" height="15" fill="rgb(218,48,26)" fg:x="4309" fg:w="82"/><text x="12.1691%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (165 instructions, 0.45%)</title><rect x="11.8761%" y="149" width="0.4548%" height="15" fill="rgb(206,165,15)" fg:x="4309" fg:w="165"/><text x="12.1691%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.20%)</title><rect x="12.3308%" y="117" width="0.2012%" height="15" fill="rgb(206,139,46)" fg:x="4474" fg:w="73"/><text x="12.6238%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (108 instructions, 0.30%)</title><rect x="12.3308%" y="133" width="0.2977%" height="15" fill="rgb(250,7,8)" fg:x="4474" fg:w="108"/><text x="12.6238%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (176 instructions, 0.49%)</title><rect x="12.3308%" y="149" width="0.4851%" height="15" fill="rgb(252,146,44)" fg:x="4474" fg:w="176"/><text x="12.6238%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="12.8159%" y="149" width="0.2260%" height="15" fill="rgb(249,116,29)" fg:x="4650" fg:w="82"/><text x="13.1089%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.22%)</title><rect x="13.0419%" y="149" width="0.2232%" height="15" fill="rgb(251,175,1)" fg:x="4732" fg:w="81"/><text x="13.3349%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="13.2652%" y="149" width="0.2260%" height="15" fill="rgb(230,223,3)" fg:x="4813" fg:w="82"/><text x="13.5581%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="13.4912%" y="149" width="0.2260%" height="15" fill="rgb(241,113,19)" fg:x="4895" fg:w="82"/><text x="13.7841%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.22%)</title><rect x="13.7227%" y="149" width="0.2232%" height="15" fill="rgb(233,81,46)" fg:x="4979" fg:w="81"/><text x="14.0156%" y="159.50"></text></g><g><title>memcpy (381 instructions, 1.05%)</title><rect x="13.9459%" y="149" width="1.0501%" height="15" fill="rgb(228,186,18)" fg:x="5060" fg:w="381"/><text x="14.2389%" y="159.50"></text></g><g><title>memcpy (381 instructions, 1.05%)</title><rect x="14.9960%" y="149" width="1.0501%" height="15" fill="rgb(232,126,12)" fg:x="5441" fg:w="381"/><text x="15.2890%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,450 instructions, 17.78%)</title><rect x="0.7882%" y="165" width="17.7769%" height="15" fill="rgb(212,218,25)" fg:x="286" fg:w="6450"/><text x="1.0812%" y="175.50">candid::de::IDLDeserial..</text></g><g><title>memcpy (336 instructions, 0.93%)</title><rect x="18.5652%" y="165" width="0.9261%" height="15" fill="rgb(233,168,17)" fg:x="6736" fg:w="336"/><text x="18.8581%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="19.4912%" y="133" width="0.0138%" height="15" fill="rgb(247,200,36)" fg:x="7072" fg:w="5"/><text x="19.7842%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.11%)</title><rect x="19.4912%" y="149" width="0.1075%" height="15" fill="rgb(216,124,27)" fg:x="7072" fg:w="39"/><text x="19.7842%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="19.5987%" y="149" width="0.2260%" height="15" fill="rgb(215,105,43)" fg:x="7111" fg:w="82"/><text x="19.8917%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="19.8247%" y="133" width="0.0138%" height="15" fill="rgb(235,114,37)" fg:x="7193" fg:w="5"/><text x="20.1177%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.15%)</title><rect x="19.8385%" y="117" width="0.1461%" height="15" fill="rgb(247,162,24)" fg:x="7198" fg:w="53"/><text x="20.1315%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.25%)</title><rect x="19.9846%" y="117" width="0.2453%" height="15" fill="rgb(249,46,34)" fg:x="7251" fg:w="89"/><text x="20.2775%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.44%)</title><rect x="20.2299%" y="117" width="0.4437%" height="15" fill="rgb(205,102,0)" fg:x="7340" fg:w="161"/><text x="20.5228%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.49%)</title><rect x="19.8385%" y="133" width="1.4883%" height="15" fill="rgb(223,13,49)" fg:x="7198" fg:w="540"/><text x="20.1315%" y="143.50"></text></g><g><title>candid::types::internal::env_add (755 instructions, 2.08%)</title><rect x="19.8247%" y="149" width="2.0809%" height="15" fill="rgb(206,193,17)" fg:x="7193" fg:w="755"/><text x="20.1177%" y="159.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="21.9056%" y="149" width="0.2260%" height="15" fill="rgb(228,39,37)" fg:x="7948" fg:w="82"/><text x="22.1985%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="22.1316%" y="133" width="0.0138%" height="15" fill="rgb(224,117,42)" fg:x="8030" fg:w="5"/><text x="22.4245%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.15%)</title><rect x="22.1454%" y="117" width="0.1461%" height="15" fill="rgb(221,61,1)" fg:x="8035" fg:w="53"/><text x="22.4383%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.25%)</title><rect x="22.2914%" y="117" width="0.2453%" height="15" fill="rgb(221,151,41)" fg:x="8088" fg:w="89"/><text x="22.5844%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.44%)</title><rect x="22.5367%" y="117" width="0.4437%" height="15" fill="rgb(233,140,6)" fg:x="8177" fg:w="161"/><text x="22.8297%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.49%)</title><rect x="22.1454%" y="133" width="1.4883%" height="15" fill="rgb(222,176,12)" fg:x="8035" fg:w="540"/><text x="22.4383%" y="143.50"></text></g><g><title>memcmp (68 instructions, 0.19%)</title><rect x="23.6337%" y="133" width="0.1874%" height="15" fill="rgb(237,151,37)" fg:x="8575" fg:w="68"/><text x="23.9266%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.22%)</title><rect x="23.8211%" y="117" width="0.2232%" height="15" fill="rgb(232,179,44)" fg:x="8643" fg:w="81"/><text x="24.1140%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.30%)</title><rect x="23.8211%" y="133" width="0.2977%" height="15" fill="rgb(247,174,19)" fg:x="8643" fg:w="108"/><text x="24.1140%" y="143.50"></text></g><g><title>candid::types::internal::env_add (889 instructions, 2.45%)</title><rect x="22.1316%" y="149" width="2.4502%" height="15" fill="rgb(231,82,33)" fg:x="8030" fg:w="889"/><text x="22.4245%" y="159.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.15%)</title><rect x="24.5818%" y="101" width="0.1461%" height="15" fill="rgb(241,69,54)" fg:x="8919" fg:w="53"/><text x="24.8747%" y="111.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.22%)</title><rect x="24.5818%" y="117" width="0.2177%" height="15" fill="rgb(246,71,18)" fg:x="8919" fg:w="79"/><text x="24.8747%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.80%)</title><rect x="24.5818%" y="133" width="0.8048%" height="15" fill="rgb(241,88,29)" fg:x="8919" fg:w="292"/><text x="24.8747%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.178 (15 instructions, 0.04%)</title><rect x="25.3865%" y="133" width="0.0413%" height="15" fill="rgb(210,43,54)" fg:x="9211" fg:w="15"/><text x="25.6795%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="25.4279%" y="133" width="0.0303%" height="15" fill="rgb(216,195,5)" fg:x="9226" fg:w="11"/><text x="25.7209%" y="143.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 1.32%)</title><rect x="24.5818%" y="149" width="1.3174%" height="15" fill="rgb(219,197,8)" fg:x="8919" fg:w="478"/><text x="24.8747%" y="159.50"></text></g><g><title>candid::types::CandidType::ty (2,432 instructions, 6.70%)</title><rect x="19.4912%" y="165" width="6.7029%" height="15" fill="rgb(228,146,14)" fg:x="7072" fg:w="2432"/><text x="19.7842%" y="175.50">candid:..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.09%)</title><rect x="26.1941%" y="149" width="0.0910%" height="15" fill="rgb(234,86,6)" fg:x="9504" fg:w="33"/><text x="26.4871%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.34%)</title><rect x="26.2850%" y="133" width="0.3390%" height="15" fill="rgb(207,21,24)" fg:x="9537" fg:w="123"/><text x="26.5780%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.34%)</title><rect x="26.6985%" y="133" width="0.3390%" height="15" fill="rgb(221,139,27)" fg:x="9687" fg:w="123"/><text x="26.9914%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 0.83%)</title><rect x="26.2850%" y="149" width="0.8268%" height="15" fill="rgb(247,29,10)" fg:x="9537" fg:w="300"/><text x="26.5780%" y="159.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.08%)</title><rect x="27.1119%" y="133" width="0.0772%" height="15" fill="rgb(225,207,38)" fg:x="9837" fg:w="28"/><text x="27.4048%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1950 (15 instructions, 0.04%)</title><rect x="27.1890%" y="133" width="0.0413%" height="15" fill="rgb(236,60,17)" fg:x="9865" fg:w="15"/><text x="27.4820%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1950 (15 instructions, 0.04%)</title><rect x="27.2304%" y="133" width="0.0413%" height="15" fill="rgb(222,216,40)" fg:x="9880" fg:w="15"/><text x="27.5234%" y="143.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (133 instructions, 0.37%)</title><rect x="27.1119%" y="149" width="0.3666%" height="15" fill="rgb(207,97,3)" fg:x="9837" fg:w="133"/><text x="27.4048%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="27.4784%" y="149" width="0.0303%" height="15" fill="rgb(229,15,17)" fg:x="9970" fg:w="11"/><text x="27.7714%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="27.5088%" y="149" width="0.0303%" height="15" fill="rgb(219,92,30)" fg:x="9981" fg:w="11"/><text x="27.8017%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="27.5391%" y="149" width="0.0303%" height="15" fill="rgb(233,38,47)" fg:x="9992" fg:w="11"/><text x="27.8320%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::deserialize_with_type (665 instructions, 1.83%)</title><rect x="26.1941%" y="165" width="1.8328%" height="15" fill="rgb(253,218,0)" fg:x="9504" fg:w="665"/><text x="26.4871%" y="175.50"></text></g><g><title>memcpy (411 instructions, 1.13%)</title><rect x="28.0269%" y="165" width="1.1328%" height="15" fill="rgb(205,58,34)" fg:x="10169" fg:w="411"/><text x="28.3199%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.03%)</title><rect x="29.1597%" y="133" width="0.0331%" height="15" fill="rgb(208,122,1)" fg:x="10580" fg:w="12"/><text x="29.4526%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.34%)</title><rect x="29.1927%" y="133" width="0.3390%" height="15" fill="rgb(216,196,43)" fg:x="10592" fg:w="123"/><text x="29.4857%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.17%)</title><rect x="29.5317%" y="101" width="0.1736%" height="15" fill="rgb(246,188,19)" fg:x="10715" fg:w="63"/><text x="29.8247%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (209 instructions, 0.58%)</title><rect x="29.5317%" y="117" width="0.5760%" height="15" fill="rgb(235,121,10)" fg:x="10715" fg:w="209"/><text x="29.8247%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (236 instructions, 0.65%)</title><rect x="29.5317%" y="133" width="0.6504%" height="15" fill="rgb(206,167,38)" fg:x="10715" fg:w="236"/><text x="29.8247%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.1822%" y="133" width="0.0303%" height="15" fill="rgb(214,75,1)" fg:x="10951" fg:w="11"/><text x="30.4751%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (424 instructions, 1.17%)</title><rect x="29.1597%" y="149" width="1.1686%" height="15" fill="rgb(221,40,6)" fg:x="10580" fg:w="424"/><text x="29.4526%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (458 instructions, 1.26%)</title><rect x="29.1597%" y="165" width="1.2623%" height="15" fill="rgb(244,200,37)" fg:x="10580" fg:w="458"/><text x="29.4526%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.34%)</title><rect x="30.4220%" y="165" width="0.3390%" height="15" fill="rgb(222,188,20)" fg:x="11038" fg:w="123"/><text x="30.7149%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,150 instructions, 30.73%)</title><rect x="0.4630%" y="181" width="30.7306%" height="15" fill="rgb(216,191,22)" fg:x="168" fg:w="11150"/><text x="0.7560%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>std::sys::common::thread_local::static_local::Key&lt;T&gt;::get (20 instructions, 0.06%)</title><rect x="31.1937%" y="181" width="0.0551%" height="15" fill="rgb(229,105,35)" fg:x="11318" fg:w="20"/><text x="31.4866%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="31.2488%" y="133" width="0.1516%" height="15" fill="rgb(220,22,15)" fg:x="11338" fg:w="55"/><text x="31.5418%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="31.2488%" y="149" width="0.3886%" height="15" fill="rgb(208,55,40)" fg:x="11338" fg:w="141"/><text x="31.5418%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="31.2488%" y="165" width="0.6256%" height="15" fill="rgb(251,139,2)" fg:x="11338" fg:w="227"/><text x="31.5418%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="32.4477%" y="133" width="0.1516%" height="15" fill="rgb(207,60,45)" fg:x="11773" fg:w="55"/><text x="32.7407%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="32.4477%" y="149" width="0.3886%" height="15" fill="rgb(230,142,33)" fg:x="11773" fg:w="141"/><text x="32.7407%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="32.4477%" y="165" width="0.6256%" height="15" fill="rgb(249,58,37)" fg:x="11773" fg:w="227"/><text x="32.7407%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="33.6466%" y="117" width="0.1268%" height="15" fill="rgb(208,12,29)" fg:x="12208" fg:w="46"/><text x="33.9396%" y="127.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="33.6466%" y="133" width="0.3638%" height="15" fill="rgb(242,199,33)" fg:x="12208" fg:w="132"/><text x="33.9396%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="33.6466%" y="149" width="0.6008%" height="15" fill="rgb(221,58,14)" fg:x="12208" fg:w="218"/><text x="33.9396%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (304 instructions, 0.84%)</title><rect x="33.6466%" y="165" width="0.8379%" height="15" fill="rgb(220,22,11)" fg:x="12208" fg:w="304"/><text x="33.9396%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="35.0577%" y="133" width="0.1268%" height="15" fill="rgb(226,114,7)" fg:x="12720" fg:w="46"/><text x="35.3507%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="35.0577%" y="149" width="0.3638%" height="15" fill="rgb(241,144,9)" fg:x="12720" fg:w="132"/><text x="35.3507%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="35.0577%" y="165" width="0.6008%" height="15" fill="rgb(213,88,41)" fg:x="12720" fg:w="218"/><text x="35.3507%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="36.2318%" y="133" width="0.1268%" height="15" fill="rgb(215,139,32)" fg:x="13146" fg:w="46"/><text x="36.5248%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="36.2318%" y="149" width="0.3638%" height="15" fill="rgb(226,113,43)" fg:x="13146" fg:w="132"/><text x="36.5248%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="36.2318%" y="165" width="0.6008%" height="15" fill="rgb(211,178,26)" fg:x="13146" fg:w="218"/><text x="36.5248%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="37.4059%" y="133" width="0.1268%" height="15" fill="rgb(237,124,42)" fg:x="13572" fg:w="46"/><text x="37.6989%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="37.4059%" y="149" width="0.3638%" height="15" fill="rgb(246,215,51)" fg:x="13572" fg:w="132"/><text x="37.6989%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="37.4059%" y="165" width="0.6008%" height="15" fill="rgb(237,140,28)" fg:x="13572" fg:w="218"/><text x="37.6989%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="38.5801%" y="117" width="0.1268%" height="15" fill="rgb(251,69,27)" fg:x="13998" fg:w="46"/><text x="38.8730%" y="127.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="38.5801%" y="133" width="0.3638%" height="15" fill="rgb(242,201,3)" fg:x="13998" fg:w="132"/><text x="38.8730%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="38.5801%" y="149" width="0.6008%" height="15" fill="rgb(235,104,47)" fg:x="13998" fg:w="218"/><text x="38.8730%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (304 instructions, 0.84%)</title><rect x="38.5801%" y="165" width="0.8379%" height="15" fill="rgb(220,188,2)" fg:x="13998" fg:w="304"/><text x="38.8730%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="39.9912%" y="133" width="0.1516%" height="15" fill="rgb(205,30,40)" fg:x="14510" fg:w="55"/><text x="40.2841%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="39.9912%" y="149" width="0.3886%" height="15" fill="rgb(211,158,48)" fg:x="14510" fg:w="141"/><text x="40.2841%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="39.9912%" y="165" width="0.6256%" height="15" fill="rgb(251,28,18)" fg:x="14510" fg:w="227"/><text x="40.2841%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="41.1901%" y="133" width="0.1268%" height="15" fill="rgb(220,211,30)" fg:x="14945" fg:w="46"/><text x="41.4831%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="41.1901%" y="149" width="0.3638%" height="15" fill="rgb(234,25,14)" fg:x="14945" fg:w="132"/><text x="41.4831%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="41.1901%" y="165" width="0.6008%" height="15" fill="rgb(214,88,15)" fg:x="14945" fg:w="218"/><text x="41.4831%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="42.3642%" y="133" width="0.1268%" height="15" fill="rgb(233,50,27)" fg:x="15371" fg:w="46"/><text x="42.6572%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="42.3642%" y="149" width="0.3638%" height="15" fill="rgb(243,8,29)" fg:x="15371" fg:w="132"/><text x="42.6572%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="42.3642%" y="165" width="0.6008%" height="15" fill="rgb(231,35,5)" fg:x="15371" fg:w="218"/><text x="42.6572%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="43.5383%" y="133" width="0.1268%" height="15" fill="rgb(240,174,26)" fg:x="15797" fg:w="46"/><text x="43.8313%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="43.5383%" y="149" width="0.3638%" height="15" fill="rgb(223,172,27)" fg:x="15797" fg:w="132"/><text x="43.8313%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="43.5383%" y="165" width="0.6008%" height="15" fill="rgb(237,84,23)" fg:x="15797" fg:w="218"/><text x="43.8313%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="44.7124%" y="133" width="0.1268%" height="15" fill="rgb(232,27,7)" fg:x="16223" fg:w="46"/><text x="45.0054%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="44.7124%" y="149" width="0.3638%" height="15" fill="rgb(218,130,46)" fg:x="16223" fg:w="132"/><text x="45.0054%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="44.7124%" y="165" width="0.6008%" height="15" fill="rgb(216,159,32)" fg:x="16223" fg:w="218"/><text x="45.0054%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="45.8865%" y="133" width="0.1268%" height="15" fill="rgb(219,155,42)" fg:x="16649" fg:w="46"/><text x="46.1795%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="45.8865%" y="149" width="0.3638%" height="15" fill="rgb(245,229,28)" fg:x="16649" fg:w="132"/><text x="46.1795%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="45.8865%" y="165" width="0.6008%" height="15" fill="rgb(238,175,35)" fg:x="16649" fg:w="218"/><text x="46.1795%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="47.0606%" y="117" width="0.1268%" height="15" fill="rgb(247,155,13)" fg:x="17075" fg:w="46"/><text x="47.3536%" y="127.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="47.0606%" y="133" width="0.3638%" height="15" fill="rgb(213,12,5)" fg:x="17075" fg:w="132"/><text x="47.3536%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="47.0606%" y="149" width="0.6008%" height="15" fill="rgb(249,122,3)" fg:x="17075" fg:w="218"/><text x="47.3536%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (304 instructions, 0.84%)</title><rect x="47.0606%" y="165" width="0.8379%" height="15" fill="rgb(209,130,26)" fg:x="17075" fg:w="304"/><text x="47.3536%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="48.4717%" y="133" width="0.1516%" height="15" fill="rgb(218,131,41)" fg:x="17587" fg:w="55"/><text x="48.7647%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="48.4717%" y="149" width="0.3886%" height="15" fill="rgb(220,143,20)" fg:x="17587" fg:w="141"/><text x="48.7647%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="48.4717%" y="165" width="0.6256%" height="15" fill="rgb(211,12,1)" fg:x="17587" fg:w="227"/><text x="48.7647%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="49.6706%" y="133" width="0.1268%" height="15" fill="rgb(216,223,31)" fg:x="18022" fg:w="46"/><text x="49.9636%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="49.6706%" y="149" width="0.3638%" height="15" fill="rgb(241,101,26)" fg:x="18022" fg:w="132"/><text x="49.9636%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="49.6706%" y="165" width="0.6008%" height="15" fill="rgb(243,228,6)" fg:x="18022" fg:w="218"/><text x="49.9636%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="50.8447%" y="133" width="0.1268%" height="15" fill="rgb(211,225,50)" fg:x="18448" fg:w="46"/><text x="51.1377%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="50.8447%" y="149" width="0.3638%" height="15" fill="rgb(230,218,24)" fg:x="18448" fg:w="132"/><text x="51.1377%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="50.8447%" y="165" width="0.6008%" height="15" fill="rgb(223,216,25)" fg:x="18448" fg:w="218"/><text x="51.1377%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="52.0189%" y="133" width="0.1516%" height="15" fill="rgb(243,7,14)" fg:x="18874" fg:w="55"/><text x="52.3118%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="52.0189%" y="149" width="0.3886%" height="15" fill="rgb(242,217,46)" fg:x="18874" fg:w="141"/><text x="52.3118%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="52.0189%" y="165" width="0.6256%" height="15" fill="rgb(212,94,24)" fg:x="18874" fg:w="227"/><text x="52.3118%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="53.2178%" y="133" width="0.1268%" height="15" fill="rgb(238,26,35)" fg:x="19309" fg:w="46"/><text x="53.5107%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="53.2178%" y="149" width="0.3638%" height="15" fill="rgb(213,77,49)" fg:x="19309" fg:w="132"/><text x="53.5107%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="53.2178%" y="165" width="0.6008%" height="15" fill="rgb(207,133,12)" fg:x="19309" fg:w="218"/><text x="53.5107%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="54.3919%" y="133" width="0.1516%" height="15" fill="rgb(224,30,44)" fg:x="19735" fg:w="55"/><text x="54.6848%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="54.3919%" y="149" width="0.3886%" height="15" fill="rgb(239,108,50)" fg:x="19735" fg:w="141"/><text x="54.6848%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="54.3919%" y="165" width="0.6256%" height="15" fill="rgb(232,127,22)" fg:x="19735" fg:w="227"/><text x="54.6848%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="55.5908%" y="133" width="0.1268%" height="15" fill="rgb(209,41,39)" fg:x="20170" fg:w="46"/><text x="55.8837%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="55.5908%" y="149" width="0.3638%" height="15" fill="rgb(206,64,12)" fg:x="20170" fg:w="132"/><text x="55.8837%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="55.5908%" y="165" width="0.6008%" height="15" fill="rgb(216,145,48)" fg:x="20170" fg:w="218"/><text x="55.8837%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="56.7649%" y="133" width="0.1268%" height="15" fill="rgb(254,117,12)" fg:x="20596" fg:w="46"/><text x="57.0578%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="56.7649%" y="149" width="0.3638%" height="15" fill="rgb(234,125,20)" fg:x="20596" fg:w="132"/><text x="57.0578%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="56.7649%" y="165" width="0.6008%" height="15" fill="rgb(238,107,2)" fg:x="20596" fg:w="218"/><text x="57.0578%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="57.9390%" y="133" width="0.1268%" height="15" fill="rgb(246,21,1)" fg:x="21022" fg:w="46"/><text x="58.2319%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="57.9390%" y="149" width="0.3638%" height="15" fill="rgb(238,15,42)" fg:x="21022" fg:w="132"/><text x="58.2319%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="57.9390%" y="165" width="0.6008%" height="15" fill="rgb(254,152,15)" fg:x="21022" fg:w="218"/><text x="58.2319%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="59.1131%" y="133" width="0.1268%" height="15" fill="rgb(231,189,43)" fg:x="21448" fg:w="46"/><text x="59.4061%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="59.1131%" y="149" width="0.3638%" height="15" fill="rgb(215,111,52)" fg:x="21448" fg:w="132"/><text x="59.4061%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="59.1131%" y="165" width="0.6008%" height="15" fill="rgb(212,229,40)" fg:x="21448" fg:w="218"/><text x="59.4061%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="60.2872%" y="133" width="0.1516%" height="15" fill="rgb(221,39,23)" fg:x="21874" fg:w="55"/><text x="60.5802%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="60.2872%" y="149" width="0.3886%" height="15" fill="rgb(245,87,7)" fg:x="21874" fg:w="141"/><text x="60.5802%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="60.2872%" y="165" width="0.6256%" height="15" fill="rgb(213,169,5)" fg:x="21874" fg:w="227"/><text x="60.5802%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="61.4861%" y="133" width="0.1516%" height="15" fill="rgb(253,35,52)" fg:x="22309" fg:w="55"/><text x="61.7791%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="61.4861%" y="149" width="0.3886%" height="15" fill="rgb(219,79,45)" fg:x="22309" fg:w="141"/><text x="61.7791%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="61.4861%" y="165" width="0.6256%" height="15" fill="rgb(254,12,2)" fg:x="22309" fg:w="227"/><text x="61.7791%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="62.6850%" y="133" width="0.1516%" height="15" fill="rgb(233,99,10)" fg:x="22744" fg:w="55"/><text x="62.9780%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="62.6850%" y="149" width="0.3886%" height="15" fill="rgb(206,42,50)" fg:x="22744" fg:w="141"/><text x="62.9780%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="62.6850%" y="165" width="0.6256%" height="15" fill="rgb(238,128,24)" fg:x="22744" fg:w="227"/><text x="62.9780%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="63.8839%" y="133" width="0.1268%" height="15" fill="rgb(232,135,52)" fg:x="23179" fg:w="46"/><text x="64.1769%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="63.8839%" y="149" width="0.3638%" height="15" fill="rgb(242,110,25)" fg:x="23179" fg:w="132"/><text x="64.1769%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="63.8839%" y="165" width="0.6008%" height="15" fill="rgb(221,157,12)" fg:x="23179" fg:w="218"/><text x="64.1769%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="65.0580%" y="133" width="0.1268%" height="15" fill="rgb(245,111,9)" fg:x="23605" fg:w="46"/><text x="65.3510%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="65.0580%" y="149" width="0.3638%" height="15" fill="rgb(213,31,22)" fg:x="23605" fg:w="132"/><text x="65.3510%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="65.0580%" y="165" width="0.6008%" height="15" fill="rgb(216,71,4)" fg:x="23605" fg:w="218"/><text x="65.3510%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="66.2321%" y="133" width="0.1516%" height="15" fill="rgb(210,207,15)" fg:x="24031" fg:w="55"/><text x="66.5251%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="66.2321%" y="149" width="0.3886%" height="15" fill="rgb(232,28,40)" fg:x="24031" fg:w="141"/><text x="66.5251%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="66.2321%" y="165" width="0.6256%" height="15" fill="rgb(243,130,36)" fg:x="24031" fg:w="227"/><text x="66.5251%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="67.4310%" y="133" width="0.1516%" height="15" fill="rgb(228,79,20)" fg:x="24466" fg:w="55"/><text x="67.7240%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="67.4310%" y="149" width="0.3886%" height="15" fill="rgb(211,184,35)" fg:x="24466" fg:w="141"/><text x="67.7240%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="67.4310%" y="165" width="0.6256%" height="15" fill="rgb(253,94,20)" fg:x="24466" fg:w="227"/><text x="67.7240%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="68.6299%" y="133" width="0.1516%" height="15" fill="rgb(226,11,51)" fg:x="24901" fg:w="55"/><text x="68.9229%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="68.6299%" y="149" width="0.3886%" height="15" fill="rgb(214,173,41)" fg:x="24901" fg:w="141"/><text x="68.9229%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="68.6299%" y="165" width="0.6256%" height="15" fill="rgb(254,205,32)" fg:x="24901" fg:w="227"/><text x="68.9229%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="69.8288%" y="133" width="0.1268%" height="15" fill="rgb(222,123,35)" fg:x="25336" fg:w="46"/><text x="70.1218%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="69.8288%" y="149" width="0.3638%" height="15" fill="rgb(244,95,37)" fg:x="25336" fg:w="132"/><text x="70.1218%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="69.8288%" y="165" width="0.6008%" height="15" fill="rgb(244,134,16)" fg:x="25336" fg:w="218"/><text x="70.1218%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="71.0029%" y="133" width="0.1268%" height="15" fill="rgb(245,223,7)" fg:x="25762" fg:w="46"/><text x="71.2959%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="71.0029%" y="149" width="0.3638%" height="15" fill="rgb(253,78,46)" fg:x="25762" fg:w="132"/><text x="71.2959%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="71.0029%" y="165" width="0.6008%" height="15" fill="rgb(220,181,13)" fg:x="25762" fg:w="218"/><text x="71.2959%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="72.1771%" y="133" width="0.1516%" height="15" fill="rgb(220,202,51)" fg:x="26188" fg:w="55"/><text x="72.4700%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="72.1771%" y="149" width="0.3886%" height="15" fill="rgb(238,131,1)" fg:x="26188" fg:w="141"/><text x="72.4700%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="72.1771%" y="165" width="0.6256%" height="15" fill="rgb(244,76,5)" fg:x="26188" fg:w="227"/><text x="72.4700%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="73.3760%" y="133" width="0.1268%" height="15" fill="rgb(254,139,38)" fg:x="26623" fg:w="46"/><text x="73.6689%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="73.3760%" y="149" width="0.3638%" height="15" fill="rgb(249,200,31)" fg:x="26623" fg:w="132"/><text x="73.6689%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="73.3760%" y="165" width="0.6008%" height="15" fill="rgb(237,191,5)" fg:x="26623" fg:w="218"/><text x="73.6689%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="74.5501%" y="133" width="0.1268%" height="15" fill="rgb(236,104,27)" fg:x="27049" fg:w="46"/><text x="74.8430%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="74.5501%" y="149" width="0.3638%" height="15" fill="rgb(213,117,26)" fg:x="27049" fg:w="132"/><text x="74.8430%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="74.5501%" y="165" width="0.6008%" height="15" fill="rgb(251,210,39)" fg:x="27049" fg:w="218"/><text x="74.8430%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="75.7242%" y="133" width="0.1516%" height="15" fill="rgb(205,138,47)" fg:x="27475" fg:w="55"/><text x="76.0171%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="75.7242%" y="149" width="0.3886%" height="15" fill="rgb(231,155,26)" fg:x="27475" fg:w="141"/><text x="76.0171%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="75.7242%" y="165" width="0.6256%" height="15" fill="rgb(237,92,0)" fg:x="27475" fg:w="227"/><text x="76.0171%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="76.9231%" y="133" width="0.1516%" height="15" fill="rgb(213,183,20)" fg:x="27910" fg:w="55"/><text x="77.2160%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="76.9231%" y="149" width="0.3886%" height="15" fill="rgb(216,85,5)" fg:x="27910" fg:w="141"/><text x="77.2160%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="76.9231%" y="165" width="0.6256%" height="15" fill="rgb(220,101,9)" fg:x="27910" fg:w="227"/><text x="77.2160%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="78.1220%" y="133" width="0.1516%" height="15" fill="rgb(231,1,44)" fg:x="28345" fg:w="55"/><text x="78.4150%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="78.1220%" y="149" width="0.3886%" height="15" fill="rgb(248,50,41)" fg:x="28345" fg:w="141"/><text x="78.4150%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="78.1220%" y="165" width="0.6256%" height="15" fill="rgb(224,23,11)" fg:x="28345" fg:w="227"/><text x="78.4150%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="79.3209%" y="133" width="0.1268%" height="15" fill="rgb(238,67,38)" fg:x="28780" fg:w="46"/><text x="79.6139%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="79.3209%" y="149" width="0.3638%" height="15" fill="rgb(209,128,13)" fg:x="28780" fg:w="132"/><text x="79.6139%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="79.3209%" y="165" width="0.6008%" height="15" fill="rgb(206,88,38)" fg:x="28780" fg:w="218"/><text x="79.6139%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="80.4950%" y="133" width="0.1268%" height="15" fill="rgb(244,101,4)" fg:x="29206" fg:w="46"/><text x="80.7880%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="80.4950%" y="149" width="0.3638%" height="15" fill="rgb(220,49,1)" fg:x="29206" fg:w="132"/><text x="80.7880%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="80.4950%" y="165" width="0.6008%" height="15" fill="rgb(213,68,50)" fg:x="29206" fg:w="218"/><text x="80.7880%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="81.6691%" y="133" width="0.1268%" height="15" fill="rgb(210,144,3)" fg:x="29632" fg:w="46"/><text x="81.9621%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="81.6691%" y="149" width="0.3638%" height="15" fill="rgb(238,80,47)" fg:x="29632" fg:w="132"/><text x="81.9621%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="81.6691%" y="165" width="0.6008%" height="15" fill="rgb(231,68,35)" fg:x="29632" fg:w="218"/><text x="81.9621%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="82.8432%" y="133" width="0.1516%" height="15" fill="rgb(252,226,19)" fg:x="30058" fg:w="55"/><text x="83.1362%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="82.8432%" y="149" width="0.3886%" height="15" fill="rgb(216,226,42)" fg:x="30058" fg:w="141"/><text x="83.1362%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="82.8432%" y="165" width="0.6256%" height="15" fill="rgb(243,71,17)" fg:x="30058" fg:w="227"/><text x="83.1362%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="84.0421%" y="133" width="0.1268%" height="15" fill="rgb(215,201,47)" fg:x="30493" fg:w="46"/><text x="84.3351%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="84.0421%" y="149" width="0.3638%" height="15" fill="rgb(222,188,39)" fg:x="30493" fg:w="132"/><text x="84.3351%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="84.0421%" y="165" width="0.6008%" height="15" fill="rgb(220,137,24)" fg:x="30493" fg:w="218"/><text x="84.3351%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="85.2162%" y="133" width="0.1268%" height="15" fill="rgb(209,209,43)" fg:x="30919" fg:w="46"/><text x="85.5092%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="85.2162%" y="149" width="0.3638%" height="15" fill="rgb(221,147,28)" fg:x="30919" fg:w="132"/><text x="85.5092%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="85.2162%" y="165" width="0.6008%" height="15" fill="rgb(216,17,36)" fg:x="30919" fg:w="218"/><text x="85.5092%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="86.3903%" y="133" width="0.1268%" height="15" fill="rgb(254,209,19)" fg:x="31345" fg:w="46"/><text x="86.6833%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="86.3903%" y="149" width="0.3638%" height="15" fill="rgb(226,147,23)" fg:x="31345" fg:w="132"/><text x="86.6833%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="86.3903%" y="165" width="0.6008%" height="15" fill="rgb(237,214,29)" fg:x="31345" fg:w="218"/><text x="86.6833%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="87.5644%" y="133" width="0.1516%" height="15" fill="rgb(235,12,47)" fg:x="31771" fg:w="55"/><text x="87.8574%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="87.5644%" y="149" width="0.3886%" height="15" fill="rgb(244,98,51)" fg:x="31771" fg:w="141"/><text x="87.8574%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.63%)</title><rect x="87.5644%" y="165" width="0.6256%" height="15" fill="rgb(238,179,16)" fg:x="31771" fg:w="227"/><text x="87.8574%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="88.7633%" y="133" width="0.1268%" height="15" fill="rgb(240,191,33)" fg:x="32206" fg:w="46"/><text x="89.0563%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="88.7633%" y="149" width="0.3638%" height="15" fill="rgb(253,105,14)" fg:x="32206" fg:w="132"/><text x="89.0563%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="88.7633%" y="165" width="0.6008%" height="15" fill="rgb(230,219,10)" fg:x="32206" fg:w="218"/><text x="89.0563%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="89.9374%" y="117" width="0.1268%" height="15" fill="rgb(226,122,44)" fg:x="32632" fg:w="46"/><text x="90.2304%" y="127.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="89.9374%" y="133" width="0.3638%" height="15" fill="rgb(232,201,17)" fg:x="32632" fg:w="132"/><text x="90.2304%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="89.9374%" y="149" width="0.6008%" height="15" fill="rgb(216,92,17)" fg:x="32632" fg:w="218"/><text x="90.2304%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (304 instructions, 0.84%)</title><rect x="89.9374%" y="165" width="0.8379%" height="15" fill="rgb(245,174,29)" fg:x="32632" fg:w="304"/><text x="90.2304%" y="175.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::remove (21,806 instructions, 60.10%)</title><rect x="31.2488%" y="181" width="60.0998%" height="15" fill="rgb(236,30,4)" fg:x="11338" fg:w="21806"/><text x="31.5418%" y="191.50">im_rc::hash::map::HashMap&lt;K,V,S&gt;::remove</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="91.3486%" y="149" width="0.0138%" height="15" fill="rgb(254,96,12)" fg:x="33144" fg:w="5"/><text x="91.6415%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.15%)</title><rect x="91.3623%" y="117" width="0.1516%" height="15" fill="rgb(214,111,34)" fg:x="33149" fg:w="55"/><text x="91.6553%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.38%)</title><rect x="91.3623%" y="133" width="0.3803%" height="15" fill="rgb(228,116,36)" fg:x="33149" fg:w="138"/><text x="91.6553%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (165 instructions, 0.45%)</title><rect x="91.3623%" y="149" width="0.4548%" height="15" fill="rgb(252,69,25)" fg:x="33149" fg:w="165"/><text x="91.6553%" y="159.50"></text></g><g><title>memset (136 instructions, 0.37%)</title><rect x="91.8171%" y="149" width="0.3748%" height="15" fill="rgb(233,121,10)" fg:x="33314" fg:w="136"/><text x="92.1101%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (464 instructions, 1.28%)</title><rect x="91.3486%" y="165" width="1.2788%" height="15" fill="rgb(253,96,42)" fg:x="33144" fg:w="464"/><text x="91.6415%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.09%)</title><rect x="92.6274%" y="149" width="0.0882%" height="15" fill="rgb(214,92,52)" fg:x="33608" fg:w="32"/><text x="92.9204%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (118 instructions, 0.33%)</title><rect x="92.7156%" y="117" width="0.3252%" height="15" fill="rgb(215,199,3)" fg:x="33640" fg:w="118"/><text x="93.0086%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (153 instructions, 0.42%)</title><rect x="92.7156%" y="133" width="0.4217%" height="15" fill="rgb(215,219,11)" fg:x="33640" fg:w="153"/><text x="93.0086%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (218 instructions, 0.60%)</title><rect x="92.7156%" y="149" width="0.6008%" height="15" fill="rgb(206,123,7)" fg:x="33640" fg:w="218"/><text x="93.0086%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.03%)</title><rect x="93.3164%" y="149" width="0.0303%" height="15" fill="rgb(207,1,5)" fg:x="33858" fg:w="11"/><text x="93.6094%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.03%)</title><rect x="93.3467%" y="149" width="0.0303%" height="15" fill="rgb(252,211,35)" fg:x="33869" fg:w="11"/><text x="93.6397%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.08%)</title><rect x="93.3771%" y="149" width="0.0827%" height="15" fill="rgb(211,189,10)" fg:x="33880" fg:w="30"/><text x="93.6700%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.01%)</title><rect x="93.4597%" y="149" width="0.0138%" height="15" fill="rgb(216,157,11)" fg:x="33910" fg:w="5"/><text x="93.7527%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (514 instructions, 1.42%)</title><rect x="92.6274%" y="165" width="1.4166%" height="15" fill="rgb(247,202,52)" fg:x="33608" fg:w="514"/><text x="92.9204%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="94.0440%" y="165" width="0.0138%" height="15" fill="rgb(216,186,0)" fg:x="34122" fg:w="5"/><text x="94.3370%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.15%)</title><rect x="94.0578%" y="165" width="0.1516%" height="15" fill="rgb(234,105,30)" fg:x="34127" fg:w="55"/><text x="94.3508%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,112 instructions, 3.06%)</title><rect x="91.3486%" y="181" width="3.0648%" height="15" fill="rgb(211,48,6)" fg:x="33144" fg:w="1112"/><text x="91.6415%" y="191.50">ic..</text></g><g><title>imrc_hashmap::batch_remove_7_::{{closure}} (35,798 instructions, 98.66%)</title><rect x="0.4630%" y="197" width="98.6633%" height="15" fill="rgb(247,142,20)" fg:x="168" fg:w="35798"/><text x="0.7560%" y="207.50">imrc_hashmap::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.03%)</title><rect x="99.1263%" y="197" width="0.0331%" height="15" fill="rgb(214,185,13)" fg:x="35966" fg:w="12"/><text x="99.4193%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.22%)</title><rect x="99.1594%" y="197" width="0.2232%" height="15" fill="rgb(242,145,39)" fg:x="35978" fg:w="81"/><text x="99.4524%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (126 instructions, 0.35%)</title><rect x="99.3826%" y="197" width="0.3473%" height="15" fill="rgb(247,95,25)" fg:x="36059" fg:w="126"/><text x="99.6756%" y="207.50"></text></g><g><title>all (36,283 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(244,206,25)" fg:x="0" fg:w="36283"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (36,283 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,89,26)" fg:x="0" fg:w="36283"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>