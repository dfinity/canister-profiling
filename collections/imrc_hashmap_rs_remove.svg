<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">imrc_hashmap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="36357"><g><title>ic_cdk::setup (19 instructions, 0.05%)</title><rect x="0.0000%" y="197" width="0.0523%" height="15" fill="rgb(237,123,51)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.21%)</title><rect x="0.0523%" y="197" width="0.2090%" height="15" fill="rgb(241,174,49)" fg:x="19" fg:w="76"/><text x="0.3452%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.20%)</title><rect x="0.2613%" y="197" width="0.2008%" height="15" fill="rgb(241,140,47)" fg:x="95" fg:w="73"/><text x="0.5543%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (117 instructions, 0.32%)</title><rect x="0.4621%" y="165" width="0.3218%" height="15" fill="rgb(208,141,19)" fg:x="168" fg:w="117"/><text x="0.7551%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.20%)</title><rect x="0.7839%" y="149" width="0.1953%" height="15" fill="rgb(242,132,0)" fg:x="285" fg:w="71"/><text x="1.0769%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="0.9792%" y="133" width="0.0110%" height="15" fill="rgb(206,90,40)" fg:x="356" fg:w="4"/><text x="1.2721%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 1.10%)</title><rect x="0.9792%" y="149" width="1.1002%" height="15" fill="rgb(209,189,43)" fg:x="356" fg:w="400"/><text x="1.2721%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.23%)</title><rect x="2.0794%" y="149" width="0.2338%" height="15" fill="rgb(208,75,43)" fg:x="756" fg:w="85"/><text x="2.3723%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.15%)</title><rect x="2.3132%" y="149" width="0.1540%" height="15" fill="rgb(245,107,43)" fg:x="841" fg:w="56"/><text x="2.6061%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.15%)</title><rect x="2.4672%" y="149" width="0.1540%" height="15" fill="rgb(216,161,30)" fg:x="897" fg:w="56"/><text x="2.7602%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.15%)</title><rect x="2.6212%" y="149" width="0.1540%" height="15" fill="rgb(218,181,49)" fg:x="953" fg:w="56"/><text x="2.9142%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.15%)</title><rect x="2.7753%" y="149" width="0.1540%" height="15" fill="rgb(251,34,36)" fg:x="1009" fg:w="56"/><text x="3.0682%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.20%)</title><rect x="2.9293%" y="149" width="0.1953%" height="15" fill="rgb(209,75,37)" fg:x="1065" fg:w="71"/><text x="3.2223%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (69 instructions, 0.19%)</title><rect x="3.1246%" y="149" width="0.1898%" height="15" fill="rgb(219,16,36)" fg:x="1136" fg:w="69"/><text x="3.4175%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="3.3144%" y="133" width="0.0110%" height="15" fill="rgb(222,5,4)" fg:x="1205" fg:w="4"/><text x="3.6073%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 1.10%)</title><rect x="3.3144%" y="149" width="1.1002%" height="15" fill="rgb(207,204,38)" fg:x="1205" fg:w="400"/><text x="3.6073%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.04%)</title><rect x="4.4146%" y="149" width="0.0440%" height="15" fill="rgb(217,118,33)" fg:x="1605" fg:w="16"/><text x="4.7075%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.21%)</title><rect x="4.4586%" y="133" width="0.2090%" height="15" fill="rgb(245,175,42)" fg:x="1621" fg:w="76"/><text x="4.7515%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.17%)</title><rect x="4.6676%" y="101" width="0.1650%" height="15" fill="rgb(251,70,49)" fg:x="1697" fg:w="60"/><text x="4.9606%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.23%)</title><rect x="4.6676%" y="117" width="0.2338%" height="15" fill="rgb(208,221,28)" fg:x="1697" fg:w="85"/><text x="4.9606%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="4.9014%" y="69" width="0.0248%" height="15" fill="rgb(239,166,13)" fg:x="1782" fg:w="9"/><text x="5.1944%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.08%)</title><rect x="4.9261%" y="53" width="0.0825%" height="15" fill="rgb(205,209,0)" fg:x="1791" fg:w="30"/><text x="5.2191%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.15%)</title><rect x="4.9261%" y="69" width="0.1513%" height="15" fill="rgb(223,3,51)" fg:x="1791" fg:w="55"/><text x="5.2191%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.32%)</title><rect x="4.9014%" y="85" width="0.3246%" height="15" fill="rgb(224,44,53)" fg:x="1782" fg:w="118"/><text x="5.1944%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.47%)</title><rect x="4.9014%" y="101" width="0.4703%" height="15" fill="rgb(242,117,17)" fg:x="1782" fg:w="171"/><text x="5.1944%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.48%)</title><rect x="4.9014%" y="117" width="0.4841%" height="15" fill="rgb(226,31,2)" fg:x="1782" fg:w="176"/><text x="5.1944%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 1.02%)</title><rect x="4.6676%" y="133" width="1.0232%" height="15" fill="rgb(227,152,21)" fg:x="1697" fg:w="372"/><text x="4.9606%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 1.63%)</title><rect x="4.4586%" y="149" width="1.6338%" height="15" fill="rgb(246,55,16)" fg:x="1621" fg:w="594"/><text x="4.7515%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.23%)</title><rect x="6.0924%" y="149" width="0.2338%" height="15" fill="rgb(250,168,4)" fg:x="2215" fg:w="85"/><text x="6.3853%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.15%)</title><rect x="6.3262%" y="149" width="0.1513%" height="15" fill="rgb(233,12,44)" fg:x="2300" fg:w="55"/><text x="6.6191%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.18%)</title><rect x="6.4774%" y="149" width="0.1815%" height="15" fill="rgb(233,158,13)" fg:x="2355" fg:w="66"/><text x="6.7704%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (69 instructions, 0.19%)</title><rect x="6.6590%" y="149" width="0.1898%" height="15" fill="rgb(240,175,35)" fg:x="2421" fg:w="69"/><text x="6.9519%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.01%)</title><rect x="6.8487%" y="117" width="0.0110%" height="15" fill="rgb(228,207,44)" fg:x="2490" fg:w="4"/><text x="7.1417%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 1.10%)</title><rect x="6.8487%" y="133" width="1.1002%" height="15" fill="rgb(214,212,5)" fg:x="2490" fg:w="400"/><text x="7.1417%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.04%)</title><rect x="7.9490%" y="133" width="0.0440%" height="15" fill="rgb(245,106,44)" fg:x="2890" fg:w="16"/><text x="8.2419%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.21%)</title><rect x="7.9930%" y="117" width="0.2090%" height="15" fill="rgb(232,161,37)" fg:x="2906" fg:w="76"/><text x="8.2859%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.17%)</title><rect x="8.2020%" y="85" width="0.1650%" height="15" fill="rgb(253,35,16)" fg:x="2982" fg:w="60"/><text x="8.4950%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.23%)</title><rect x="8.2020%" y="101" width="0.2338%" height="15" fill="rgb(246,185,34)" fg:x="2982" fg:w="85"/><text x="8.4950%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.02%)</title><rect x="8.4358%" y="53" width="0.0248%" height="15" fill="rgb(213,194,15)" fg:x="3067" fg:w="9"/><text x="8.7288%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.08%)</title><rect x="8.4605%" y="37" width="0.0825%" height="15" fill="rgb(206,227,1)" fg:x="3076" fg:w="30"/><text x="8.7535%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.15%)</title><rect x="8.4605%" y="53" width="0.1513%" height="15" fill="rgb(225,104,1)" fg:x="3076" fg:w="55"/><text x="8.7535%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.32%)</title><rect x="8.4358%" y="69" width="0.3246%" height="15" fill="rgb(220,226,27)" fg:x="3067" fg:w="118"/><text x="8.7288%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.47%)</title><rect x="8.4358%" y="85" width="0.4703%" height="15" fill="rgb(206,197,22)" fg:x="3067" fg:w="171"/><text x="8.7288%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.48%)</title><rect x="8.4358%" y="101" width="0.4841%" height="15" fill="rgb(210,157,46)" fg:x="3067" fg:w="176"/><text x="8.7288%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 1.02%)</title><rect x="8.2020%" y="117" width="1.0232%" height="15" fill="rgb(250,113,44)" fg:x="2982" fg:w="372"/><text x="8.4950%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 1.63%)</title><rect x="7.9930%" y="133" width="1.6338%" height="15" fill="rgb(245,107,41)" fg:x="2906" fg:w="594"/><text x="8.2859%" y="143.50"></text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.23%)</title><rect x="9.6268%" y="133" width="0.2338%" height="15" fill="rgb(221,6,8)" fg:x="3500" fg:w="85"/><text x="9.9197%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.15%)</title><rect x="9.8605%" y="133" width="0.1513%" height="15" fill="rgb(221,129,47)" fg:x="3585" fg:w="55"/><text x="10.1535%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.20%)</title><rect x="10.0118%" y="117" width="0.1953%" height="15" fill="rgb(211,187,31)" fg:x="3640" fg:w="71"/><text x="10.3048%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.26%)</title><rect x="10.2071%" y="117" width="0.2613%" height="15" fill="rgb(254,120,40)" fg:x="3711" fg:w="95"/><text x="10.5001%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.18%)</title><rect x="10.4684%" y="117" width="0.1815%" height="15" fill="rgb(253,56,35)" fg:x="3806" fg:w="66"/><text x="10.7614%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 0.78%)</title><rect x="10.0118%" y="133" width="0.7784%" height="15" fill="rgb(249,107,24)" fg:x="3640" fg:w="283"/><text x="10.3048%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="10.7902%" y="133" width="0.2255%" height="15" fill="rgb(228,77,20)" fg:x="3923" fg:w="82"/><text x="11.0832%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,684 instructions, 4.63%)</title><rect x="6.8487%" y="149" width="4.6318%" height="15" fill="rgb(209,34,31)" fg:x="2490" fg:w="1684"/><text x="7.1417%" y="159.50">binr..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.18%)</title><rect x="11.4806%" y="149" width="0.1815%" height="15" fill="rgb(218,12,34)" fg:x="4174" fg:w="66"/><text x="11.7736%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="11.6621%" y="149" width="0.0358%" height="15" fill="rgb(234,103,20)" fg:x="4240" fg:w="13"/><text x="11.9551%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.04%)</title><rect x="11.6979%" y="149" width="0.0358%" height="15" fill="rgb(229,163,9)" fg:x="4253" fg:w="13"/><text x="11.9909%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.02%)</title><rect x="11.7336%" y="149" width="0.0193%" height="15" fill="rgb(232,71,4)" fg:x="4266" fg:w="7"/><text x="12.0266%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.03%)</title><rect x="11.7529%" y="149" width="0.0330%" height="15" fill="rgb(217,38,24)" fg:x="4273" fg:w="12"/><text x="12.0459%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="11.7859%" y="133" width="0.2255%" height="15" fill="rgb(245,164,5)" fg:x="4285" fg:w="82"/><text x="12.0789%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (165 instructions, 0.45%)</title><rect x="11.7859%" y="149" width="0.4538%" height="15" fill="rgb(224,57,18)" fg:x="4285" fg:w="165"/><text x="12.0789%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (73 instructions, 0.20%)</title><rect x="12.2397%" y="117" width="0.2008%" height="15" fill="rgb(238,132,8)" fg:x="4450" fg:w="73"/><text x="12.5327%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (108 instructions, 0.30%)</title><rect x="12.2397%" y="133" width="0.2971%" height="15" fill="rgb(236,36,18)" fg:x="4450" fg:w="108"/><text x="12.5327%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (180 instructions, 0.50%)</title><rect x="12.2397%" y="149" width="0.4951%" height="15" fill="rgb(221,206,12)" fg:x="4450" fg:w="180"/><text x="12.5327%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="12.7348%" y="149" width="0.2255%" height="15" fill="rgb(220,25,26)" fg:x="4630" fg:w="82"/><text x="13.0278%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.22%)</title><rect x="12.9604%" y="149" width="0.2228%" height="15" fill="rgb(249,46,42)" fg:x="4712" fg:w="81"/><text x="13.2533%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="13.1832%" y="149" width="0.2255%" height="15" fill="rgb(225,106,8)" fg:x="4793" fg:w="82"/><text x="13.4761%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="13.4087%" y="149" width="0.2255%" height="15" fill="rgb(237,86,54)" fg:x="4875" fg:w="82"/><text x="13.7017%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.22%)</title><rect x="13.6397%" y="149" width="0.2228%" height="15" fill="rgb(210,214,43)" fg:x="4959" fg:w="81"/><text x="13.9327%" y="159.50"></text></g><g><title>memcpy (381 instructions, 1.05%)</title><rect x="13.8625%" y="149" width="1.0479%" height="15" fill="rgb(233,159,13)" fg:x="5040" fg:w="381"/><text x="14.1555%" y="159.50"></text></g><g><title>memcpy (381 instructions, 1.05%)</title><rect x="14.9105%" y="149" width="1.0479%" height="15" fill="rgb(213,144,25)" fg:x="5421" fg:w="381"/><text x="15.2034%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,419 instructions, 17.66%)</title><rect x="0.7839%" y="165" width="17.6555%" height="15" fill="rgb(221,213,35)" fg:x="285" fg:w="6419"/><text x="1.0769%" y="175.50">candid::de::IDLDeserial..</text></g><g><title>memcpy (336 instructions, 0.92%)</title><rect x="18.4394%" y="165" width="0.9242%" height="15" fill="rgb(230,32,52)" fg:x="6704" fg:w="336"/><text x="18.7323%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="19.3635%" y="133" width="0.0138%" height="15" fill="rgb(246,180,4)" fg:x="7040" fg:w="5"/><text x="19.6565%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.11%)</title><rect x="19.3635%" y="149" width="0.1073%" height="15" fill="rgb(243,217,21)" fg:x="7040" fg:w="39"/><text x="19.6565%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="19.4708%" y="149" width="0.2255%" height="15" fill="rgb(211,136,37)" fg:x="7079" fg:w="82"/><text x="19.7638%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="19.6963%" y="133" width="0.0138%" height="15" fill="rgb(254,182,24)" fg:x="7161" fg:w="5"/><text x="19.9893%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.15%)</title><rect x="19.7101%" y="117" width="0.1458%" height="15" fill="rgb(249,176,51)" fg:x="7166" fg:w="53"/><text x="20.0031%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.24%)</title><rect x="19.8559%" y="117" width="0.2448%" height="15" fill="rgb(213,181,19)" fg:x="7219" fg:w="89"/><text x="20.1488%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.44%)</title><rect x="20.1007%" y="117" width="0.4428%" height="15" fill="rgb(246,145,1)" fg:x="7308" fg:w="161"/><text x="20.3936%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.49%)</title><rect x="19.7101%" y="133" width="1.4853%" height="15" fill="rgb(207,104,11)" fg:x="7166" fg:w="540"/><text x="20.0031%" y="143.50"></text></g><g><title>candid::types::internal::env_add (759 instructions, 2.09%)</title><rect x="19.6963%" y="149" width="2.0876%" height="15" fill="rgb(223,148,49)" fg:x="7161" fg:w="759"/><text x="19.9893%" y="159.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.23%)</title><rect x="21.7840%" y="149" width="0.2255%" height="15" fill="rgb(206,99,13)" fg:x="7920" fg:w="82"/><text x="22.0769%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="22.0095%" y="133" width="0.0138%" height="15" fill="rgb(243,63,44)" fg:x="8002" fg:w="5"/><text x="22.3025%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.15%)</title><rect x="22.0233%" y="117" width="0.1458%" height="15" fill="rgb(225,22,39)" fg:x="8007" fg:w="53"/><text x="22.3162%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.24%)</title><rect x="22.1690%" y="117" width="0.2448%" height="15" fill="rgb(253,51,43)" fg:x="8060" fg:w="89"/><text x="22.4620%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.44%)</title><rect x="22.4138%" y="117" width="0.4428%" height="15" fill="rgb(249,40,24)" fg:x="8149" fg:w="161"/><text x="22.7068%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 1.49%)</title><rect x="22.0233%" y="133" width="1.4853%" height="15" fill="rgb(216,35,0)" fg:x="8007" fg:w="540"/><text x="22.3162%" y="143.50"></text></g><g><title>memcmp (68 instructions, 0.19%)</title><rect x="23.5085%" y="133" width="0.1870%" height="15" fill="rgb(218,169,38)" fg:x="8547" fg:w="68"/><text x="23.8015%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.22%)</title><rect x="23.6956%" y="117" width="0.2228%" height="15" fill="rgb(223,115,34)" fg:x="8615" fg:w="81"/><text x="23.9885%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (111 instructions, 0.31%)</title><rect x="23.6956%" y="133" width="0.3053%" height="15" fill="rgb(242,51,10)" fg:x="8615" fg:w="111"/><text x="23.9885%" y="143.50"></text></g><g><title>candid::types::internal::env_add (893 instructions, 2.46%)</title><rect x="22.0095%" y="149" width="2.4562%" height="15" fill="rgb(213,126,43)" fg:x="8002" fg:w="893"/><text x="22.3025%" y="159.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.15%)</title><rect x="24.4657%" y="101" width="0.1458%" height="15" fill="rgb(253,26,48)" fg:x="8895" fg:w="53"/><text x="24.7587%" y="111.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.22%)</title><rect x="24.4657%" y="117" width="0.2173%" height="15" fill="rgb(208,141,18)" fg:x="8895" fg:w="79"/><text x="24.7587%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 0.80%)</title><rect x="24.4657%" y="133" width="0.8031%" height="15" fill="rgb(212,225,23)" fg:x="8895" fg:w="292"/><text x="24.7587%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.258 (15 instructions, 0.04%)</title><rect x="25.2689%" y="133" width="0.0413%" height="15" fill="rgb(213,29,2)" fg:x="9187" fg:w="15"/><text x="25.5618%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="25.3101%" y="133" width="0.0303%" height="15" fill="rgb(220,168,41)" fg:x="9202" fg:w="11"/><text x="25.6031%" y="143.50"></text></g><g><title>candid::types::internal::env_id (479 instructions, 1.32%)</title><rect x="24.4657%" y="149" width="1.3175%" height="15" fill="rgb(241,122,47)" fg:x="8895" fg:w="479"/><text x="24.7587%" y="159.50"></text></g><g><title>candid::types::CandidType::ty (2,441 instructions, 6.71%)</title><rect x="19.3635%" y="165" width="6.7140%" height="15" fill="rgb(212,227,20)" fg:x="7040" fg:w="2441"/><text x="19.6565%" y="175.50">candid:..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.09%)</title><rect x="26.0775%" y="149" width="0.0908%" height="15" fill="rgb(229,51,11)" fg:x="9481" fg:w="33"/><text x="26.3705%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (124 instructions, 0.34%)</title><rect x="26.1683%" y="133" width="0.3411%" height="15" fill="rgb(226,207,46)" fg:x="9514" fg:w="124"/><text x="26.4612%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (124 instructions, 0.34%)</title><rect x="26.5919%" y="133" width="0.3411%" height="15" fill="rgb(243,220,24)" fg:x="9668" fg:w="124"/><text x="26.8848%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (308 instructions, 0.85%)</title><rect x="26.1683%" y="149" width="0.8472%" height="15" fill="rgb(242,155,6)" fg:x="9514" fg:w="308"/><text x="26.4612%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2060 (16 instructions, 0.04%)</title><rect x="27.0154%" y="133" width="0.0440%" height="15" fill="rgb(216,187,40)" fg:x="9822" fg:w="16"/><text x="27.3084%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2060 (16 instructions, 0.04%)</title><rect x="27.0594%" y="133" width="0.0440%" height="15" fill="rgb(229,166,51)" fg:x="9838" fg:w="16"/><text x="27.3524%" y="143.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (121 instructions, 0.33%)</title><rect x="27.0154%" y="149" width="0.3328%" height="15" fill="rgb(234,17,36)" fg:x="9822" fg:w="121"/><text x="27.3084%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="27.3482%" y="149" width="0.0303%" height="15" fill="rgb(241,43,13)" fg:x="9943" fg:w="11"/><text x="27.6412%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="27.3785%" y="149" width="0.0303%" height="15" fill="rgb(239,68,9)" fg:x="9954" fg:w="11"/><text x="27.6715%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="27.4088%" y="149" width="0.0303%" height="15" fill="rgb(225,40,9)" fg:x="9965" fg:w="11"/><text x="27.7017%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::deserialize_with_type (663 instructions, 1.82%)</title><rect x="26.0775%" y="165" width="1.8236%" height="15" fill="rgb(233,139,30)" fg:x="9481" fg:w="663"/><text x="26.3705%" y="175.50"></text></g><g><title>memcpy (411 instructions, 1.13%)</title><rect x="27.9011%" y="165" width="1.1305%" height="15" fill="rgb(237,19,53)" fg:x="10144" fg:w="411"/><text x="28.1941%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="29.0315%" y="149" width="0.0138%" height="15" fill="rgb(251,70,36)" fg:x="10555" fg:w="5"/><text x="29.3245%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (124 instructions, 0.34%)</title><rect x="29.0453%" y="149" width="0.3411%" height="15" fill="rgb(234,222,41)" fg:x="10560" fg:w="124"/><text x="29.3383%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.17%)</title><rect x="29.3864%" y="117" width="0.1733%" height="15" fill="rgb(213,57,23)" fg:x="10684" fg:w="63"/><text x="29.6793%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (211 instructions, 0.58%)</title><rect x="29.3864%" y="133" width="0.5804%" height="15" fill="rgb(246,134,21)" fg:x="10684" fg:w="211"/><text x="29.6793%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (241 instructions, 0.66%)</title><rect x="29.3864%" y="149" width="0.6629%" height="15" fill="rgb(243,79,13)" fg:x="10684" fg:w="241"/><text x="29.6793%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.03%)</title><rect x="30.0492%" y="149" width="0.0303%" height="15" fill="rgb(227,2,24)" fg:x="10925" fg:w="11"/><text x="30.3422%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (448 instructions, 1.23%)</title><rect x="29.0315%" y="165" width="1.2322%" height="15" fill="rgb(230,143,49)" fg:x="10555" fg:w="448"/><text x="29.3245%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (124 instructions, 0.34%)</title><rect x="30.2638%" y="165" width="0.3411%" height="15" fill="rgb(242,36,42)" fg:x="11003" fg:w="124"/><text x="30.5567%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,115 instructions, 30.57%)</title><rect x="0.4621%" y="181" width="30.5718%" height="15" fill="rgb(246,151,35)" fg:x="168" fg:w="11115"/><text x="0.7551%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>std::sys::common::thread_local::static_local::Key&lt;T&gt;::get (20 instructions, 0.06%)</title><rect x="31.0339%" y="181" width="0.0550%" height="15" fill="rgb(243,177,40)" fg:x="11283" fg:w="20"/><text x="31.3269%" y="191.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="31.0889%" y="133" width="0.1513%" height="15" fill="rgb(211,116,12)" fg:x="11303" fg:w="55"/><text x="31.3819%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="31.0889%" y="149" width="0.3878%" height="15" fill="rgb(220,58,15)" fg:x="11303" fg:w="141"/><text x="31.3819%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="31.0889%" y="165" width="0.6244%" height="15" fill="rgb(219,195,48)" fg:x="11303" fg:w="227"/><text x="31.3819%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="32.2909%" y="133" width="0.1513%" height="15" fill="rgb(214,34,35)" fg:x="11740" fg:w="55"/><text x="32.5839%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="32.2909%" y="149" width="0.3878%" height="15" fill="rgb(251,136,32)" fg:x="11740" fg:w="141"/><text x="32.5839%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="32.2909%" y="165" width="0.6244%" height="15" fill="rgb(247,211,7)" fg:x="11740" fg:w="227"/><text x="32.5839%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="33.4929%" y="117" width="0.1265%" height="15" fill="rgb(246,82,47)" fg:x="12177" fg:w="46"/><text x="33.7858%" y="127.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="33.4929%" y="133" width="0.3631%" height="15" fill="rgb(248,11,40)" fg:x="12177" fg:w="132"/><text x="33.7858%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="33.4929%" y="149" width="0.5996%" height="15" fill="rgb(205,218,20)" fg:x="12177" fg:w="218"/><text x="33.7858%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (304 instructions, 0.84%)</title><rect x="33.4929%" y="165" width="0.8362%" height="15" fill="rgb(224,148,22)" fg:x="12177" fg:w="304"/><text x="33.7858%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="34.9066%" y="133" width="0.1265%" height="15" fill="rgb(248,94,2)" fg:x="12691" fg:w="46"/><text x="35.1996%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="34.9066%" y="149" width="0.3631%" height="15" fill="rgb(226,123,1)" fg:x="12691" fg:w="132"/><text x="35.1996%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="34.9066%" y="165" width="0.5996%" height="15" fill="rgb(236,172,53)" fg:x="12691" fg:w="218"/><text x="35.1996%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="36.0838%" y="133" width="0.1265%" height="15" fill="rgb(253,117,33)" fg:x="13119" fg:w="46"/><text x="36.3768%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="36.0838%" y="149" width="0.3631%" height="15" fill="rgb(233,155,0)" fg:x="13119" fg:w="132"/><text x="36.3768%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="36.0838%" y="165" width="0.5996%" height="15" fill="rgb(232,167,2)" fg:x="13119" fg:w="218"/><text x="36.3768%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="37.2611%" y="133" width="0.1265%" height="15" fill="rgb(244,95,32)" fg:x="13547" fg:w="46"/><text x="37.5540%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="37.2611%" y="149" width="0.3631%" height="15" fill="rgb(218,205,35)" fg:x="13547" fg:w="132"/><text x="37.5540%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="37.2611%" y="165" width="0.5996%" height="15" fill="rgb(208,190,21)" fg:x="13547" fg:w="218"/><text x="37.5540%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="38.4383%" y="117" width="0.1265%" height="15" fill="rgb(252,156,0)" fg:x="13975" fg:w="46"/><text x="38.7312%" y="127.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="38.4383%" y="133" width="0.3631%" height="15" fill="rgb(211,137,36)" fg:x="13975" fg:w="132"/><text x="38.7312%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="38.4383%" y="149" width="0.5996%" height="15" fill="rgb(238,194,53)" fg:x="13975" fg:w="218"/><text x="38.7312%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (304 instructions, 0.84%)</title><rect x="38.4383%" y="165" width="0.8362%" height="15" fill="rgb(220,119,46)" fg:x="13975" fg:w="304"/><text x="38.7312%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="39.8520%" y="133" width="0.1513%" height="15" fill="rgb(217,120,38)" fg:x="14489" fg:w="55"/><text x="40.1450%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="39.8520%" y="149" width="0.3878%" height="15" fill="rgb(242,142,15)" fg:x="14489" fg:w="141"/><text x="40.1450%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="39.8520%" y="165" width="0.6244%" height="15" fill="rgb(234,173,27)" fg:x="14489" fg:w="227"/><text x="40.1450%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="41.0540%" y="133" width="0.1265%" height="15" fill="rgb(207,156,2)" fg:x="14926" fg:w="46"/><text x="41.3470%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="41.0540%" y="149" width="0.3631%" height="15" fill="rgb(212,11,21)" fg:x="14926" fg:w="132"/><text x="41.3470%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="41.0540%" y="165" width="0.5996%" height="15" fill="rgb(240,103,30)" fg:x="14926" fg:w="218"/><text x="41.3470%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="42.2312%" y="133" width="0.1265%" height="15" fill="rgb(222,12,6)" fg:x="15354" fg:w="46"/><text x="42.5242%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="42.2312%" y="149" width="0.3631%" height="15" fill="rgb(240,126,6)" fg:x="15354" fg:w="132"/><text x="42.5242%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="42.2312%" y="165" width="0.5996%" height="15" fill="rgb(238,148,6)" fg:x="15354" fg:w="218"/><text x="42.5242%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="43.4084%" y="133" width="0.1265%" height="15" fill="rgb(219,144,35)" fg:x="15782" fg:w="46"/><text x="43.7014%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="43.4084%" y="149" width="0.3631%" height="15" fill="rgb(221,154,26)" fg:x="15782" fg:w="132"/><text x="43.7014%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="43.4084%" y="165" width="0.5996%" height="15" fill="rgb(208,151,24)" fg:x="15782" fg:w="218"/><text x="43.7014%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="44.5856%" y="133" width="0.1265%" height="15" fill="rgb(230,3,36)" fg:x="16210" fg:w="46"/><text x="44.8786%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="44.5856%" y="149" width="0.3631%" height="15" fill="rgb(214,39,51)" fg:x="16210" fg:w="132"/><text x="44.8786%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="44.5856%" y="165" width="0.5996%" height="15" fill="rgb(223,4,5)" fg:x="16210" fg:w="218"/><text x="44.8786%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="45.7629%" y="133" width="0.1265%" height="15" fill="rgb(227,186,34)" fg:x="16638" fg:w="46"/><text x="46.0558%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="45.7629%" y="149" width="0.3631%" height="15" fill="rgb(243,118,4)" fg:x="16638" fg:w="132"/><text x="46.0558%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="45.7629%" y="165" width="0.5996%" height="15" fill="rgb(252,31,15)" fg:x="16638" fg:w="218"/><text x="46.0558%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="46.9401%" y="117" width="0.1265%" height="15" fill="rgb(219,202,27)" fg:x="17066" fg:w="46"/><text x="47.2330%" y="127.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="46.9401%" y="133" width="0.3631%" height="15" fill="rgb(246,3,20)" fg:x="17066" fg:w="132"/><text x="47.2330%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="46.9401%" y="149" width="0.5996%" height="15" fill="rgb(254,151,54)" fg:x="17066" fg:w="218"/><text x="47.2330%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (304 instructions, 0.84%)</title><rect x="46.9401%" y="165" width="0.8362%" height="15" fill="rgb(243,93,17)" fg:x="17066" fg:w="304"/><text x="47.2330%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="48.3538%" y="133" width="0.1513%" height="15" fill="rgb(254,138,11)" fg:x="17580" fg:w="55"/><text x="48.6468%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="48.3538%" y="149" width="0.3878%" height="15" fill="rgb(245,168,26)" fg:x="17580" fg:w="141"/><text x="48.6468%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="48.3538%" y="165" width="0.6244%" height="15" fill="rgb(245,182,34)" fg:x="17580" fg:w="227"/><text x="48.6468%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="49.5558%" y="133" width="0.1265%" height="15" fill="rgb(206,55,37)" fg:x="18017" fg:w="46"/><text x="49.8488%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="49.5558%" y="149" width="0.3631%" height="15" fill="rgb(225,201,24)" fg:x="18017" fg:w="132"/><text x="49.8488%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="49.5558%" y="165" width="0.5996%" height="15" fill="rgb(243,167,13)" fg:x="18017" fg:w="218"/><text x="49.8488%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="50.7330%" y="133" width="0.1265%" height="15" fill="rgb(221,136,9)" fg:x="18445" fg:w="46"/><text x="51.0260%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="50.7330%" y="149" width="0.3631%" height="15" fill="rgb(238,73,26)" fg:x="18445" fg:w="132"/><text x="51.0260%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="50.7330%" y="165" width="0.5996%" height="15" fill="rgb(217,22,22)" fg:x="18445" fg:w="218"/><text x="51.0260%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="51.9102%" y="133" width="0.1513%" height="15" fill="rgb(209,54,16)" fg:x="18873" fg:w="55"/><text x="52.2032%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="51.9102%" y="149" width="0.3878%" height="15" fill="rgb(244,62,6)" fg:x="18873" fg:w="141"/><text x="52.2032%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="51.9102%" y="165" width="0.6244%" height="15" fill="rgb(246,74,11)" fg:x="18873" fg:w="227"/><text x="52.2032%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="53.1122%" y="133" width="0.1265%" height="15" fill="rgb(215,0,11)" fg:x="19310" fg:w="46"/><text x="53.4052%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="53.1122%" y="149" width="0.3631%" height="15" fill="rgb(226,163,20)" fg:x="19310" fg:w="132"/><text x="53.4052%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="53.1122%" y="165" width="0.5996%" height="15" fill="rgb(253,109,20)" fg:x="19310" fg:w="218"/><text x="53.4052%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="54.2894%" y="133" width="0.1513%" height="15" fill="rgb(224,29,11)" fg:x="19738" fg:w="55"/><text x="54.5824%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="54.2894%" y="149" width="0.3878%" height="15" fill="rgb(253,177,49)" fg:x="19738" fg:w="141"/><text x="54.5824%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="54.2894%" y="165" width="0.6244%" height="15" fill="rgb(225,28,45)" fg:x="19738" fg:w="227"/><text x="54.5824%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="55.4914%" y="133" width="0.1265%" height="15" fill="rgb(251,90,41)" fg:x="20175" fg:w="46"/><text x="55.7843%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="55.4914%" y="149" width="0.3631%" height="15" fill="rgb(212,94,14)" fg:x="20175" fg:w="132"/><text x="55.7843%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="55.4914%" y="165" width="0.5996%" height="15" fill="rgb(206,187,24)" fg:x="20175" fg:w="218"/><text x="55.7843%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="56.6686%" y="133" width="0.1265%" height="15" fill="rgb(247,86,19)" fg:x="20603" fg:w="46"/><text x="56.9616%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="56.6686%" y="149" width="0.3631%" height="15" fill="rgb(250,156,21)" fg:x="20603" fg:w="132"/><text x="56.9616%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="56.6686%" y="165" width="0.5996%" height="15" fill="rgb(225,6,45)" fg:x="20603" fg:w="218"/><text x="56.9616%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="57.8458%" y="133" width="0.1265%" height="15" fill="rgb(233,167,6)" fg:x="21031" fg:w="46"/><text x="58.1388%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="57.8458%" y="149" width="0.3631%" height="15" fill="rgb(213,227,40)" fg:x="21031" fg:w="132"/><text x="58.1388%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="57.8458%" y="165" width="0.5996%" height="15" fill="rgb(248,181,42)" fg:x="21031" fg:w="218"/><text x="58.1388%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="59.0230%" y="133" width="0.1265%" height="15" fill="rgb(207,65,52)" fg:x="21459" fg:w="46"/><text x="59.3160%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="59.0230%" y="149" width="0.3631%" height="15" fill="rgb(238,68,49)" fg:x="21459" fg:w="132"/><text x="59.3160%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="59.0230%" y="165" width="0.5996%" height="15" fill="rgb(208,176,15)" fg:x="21459" fg:w="218"/><text x="59.3160%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="60.2002%" y="133" width="0.1513%" height="15" fill="rgb(249,119,26)" fg:x="21887" fg:w="55"/><text x="60.4932%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="60.2002%" y="149" width="0.3878%" height="15" fill="rgb(205,4,10)" fg:x="21887" fg:w="141"/><text x="60.4932%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="60.2002%" y="165" width="0.6244%" height="15" fill="rgb(252,177,34)" fg:x="21887" fg:w="227"/><text x="60.4932%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="61.4022%" y="133" width="0.1513%" height="15" fill="rgb(236,145,20)" fg:x="22324" fg:w="55"/><text x="61.6952%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="61.4022%" y="149" width="0.3878%" height="15" fill="rgb(221,180,26)" fg:x="22324" fg:w="141"/><text x="61.6952%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="61.4022%" y="165" width="0.6244%" height="15" fill="rgb(231,32,12)" fg:x="22324" fg:w="227"/><text x="61.6952%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="62.6042%" y="133" width="0.1513%" height="15" fill="rgb(217,103,21)" fg:x="22761" fg:w="55"/><text x="62.8971%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="62.6042%" y="149" width="0.3878%" height="15" fill="rgb(219,74,49)" fg:x="22761" fg:w="141"/><text x="62.8971%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="62.6042%" y="165" width="0.6244%" height="15" fill="rgb(208,146,24)" fg:x="22761" fg:w="227"/><text x="62.8971%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="63.8061%" y="133" width="0.1265%" height="15" fill="rgb(232,183,3)" fg:x="23198" fg:w="46"/><text x="64.0991%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="63.8061%" y="149" width="0.3631%" height="15" fill="rgb(226,194,1)" fg:x="23198" fg:w="132"/><text x="64.0991%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="63.8061%" y="165" width="0.5996%" height="15" fill="rgb(241,51,20)" fg:x="23198" fg:w="218"/><text x="64.0991%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="64.9834%" y="133" width="0.1265%" height="15" fill="rgb(214,194,19)" fg:x="23626" fg:w="46"/><text x="65.2763%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="64.9834%" y="149" width="0.3631%" height="15" fill="rgb(251,35,18)" fg:x="23626" fg:w="132"/><text x="65.2763%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="64.9834%" y="165" width="0.5996%" height="15" fill="rgb(247,157,21)" fg:x="23626" fg:w="218"/><text x="65.2763%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="66.1606%" y="133" width="0.1513%" height="15" fill="rgb(240,161,1)" fg:x="24054" fg:w="55"/><text x="66.4535%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="66.1606%" y="149" width="0.3878%" height="15" fill="rgb(238,126,11)" fg:x="24054" fg:w="141"/><text x="66.4535%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="66.1606%" y="165" width="0.6244%" height="15" fill="rgb(250,116,24)" fg:x="24054" fg:w="227"/><text x="66.4535%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="67.3625%" y="133" width="0.1513%" height="15" fill="rgb(217,47,8)" fg:x="24491" fg:w="55"/><text x="67.6555%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="67.3625%" y="149" width="0.3878%" height="15" fill="rgb(235,40,5)" fg:x="24491" fg:w="141"/><text x="67.6555%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="67.3625%" y="165" width="0.6244%" height="15" fill="rgb(238,225,50)" fg:x="24491" fg:w="227"/><text x="67.6555%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="68.5645%" y="133" width="0.1513%" height="15" fill="rgb(230,3,32)" fg:x="24928" fg:w="55"/><text x="68.8575%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="68.5645%" y="149" width="0.3878%" height="15" fill="rgb(211,143,9)" fg:x="24928" fg:w="141"/><text x="68.8575%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="68.5645%" y="165" width="0.6244%" height="15" fill="rgb(241,212,22)" fg:x="24928" fg:w="227"/><text x="68.8575%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="69.7665%" y="133" width="0.1265%" height="15" fill="rgb(253,161,13)" fg:x="25365" fg:w="46"/><text x="70.0595%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="69.7665%" y="149" width="0.3631%" height="15" fill="rgb(234,60,15)" fg:x="25365" fg:w="132"/><text x="70.0595%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="69.7665%" y="165" width="0.5996%" height="15" fill="rgb(241,140,12)" fg:x="25365" fg:w="218"/><text x="70.0595%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="70.9437%" y="133" width="0.1265%" height="15" fill="rgb(218,48,26)" fg:x="25793" fg:w="46"/><text x="71.2367%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="70.9437%" y="149" width="0.3631%" height="15" fill="rgb(206,165,15)" fg:x="25793" fg:w="132"/><text x="71.2367%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="70.9437%" y="165" width="0.5996%" height="15" fill="rgb(206,139,46)" fg:x="25793" fg:w="218"/><text x="71.2367%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="72.1209%" y="133" width="0.1513%" height="15" fill="rgb(250,7,8)" fg:x="26221" fg:w="55"/><text x="72.4139%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="72.1209%" y="149" width="0.3878%" height="15" fill="rgb(252,146,44)" fg:x="26221" fg:w="141"/><text x="72.4139%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="72.1209%" y="165" width="0.6244%" height="15" fill="rgb(249,116,29)" fg:x="26221" fg:w="227"/><text x="72.4139%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="73.3229%" y="133" width="0.1265%" height="15" fill="rgb(251,175,1)" fg:x="26658" fg:w="46"/><text x="73.6159%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="73.3229%" y="149" width="0.3631%" height="15" fill="rgb(230,223,3)" fg:x="26658" fg:w="132"/><text x="73.6159%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="73.3229%" y="165" width="0.5996%" height="15" fill="rgb(241,113,19)" fg:x="26658" fg:w="218"/><text x="73.6159%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="74.5001%" y="133" width="0.1265%" height="15" fill="rgb(233,81,46)" fg:x="27086" fg:w="46"/><text x="74.7931%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="74.5001%" y="149" width="0.3631%" height="15" fill="rgb(228,186,18)" fg:x="27086" fg:w="132"/><text x="74.7931%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="74.5001%" y="165" width="0.5996%" height="15" fill="rgb(232,126,12)" fg:x="27086" fg:w="218"/><text x="74.7931%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="75.6773%" y="133" width="0.1513%" height="15" fill="rgb(212,218,25)" fg:x="27514" fg:w="55"/><text x="75.9703%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="75.6773%" y="149" width="0.3878%" height="15" fill="rgb(233,168,17)" fg:x="27514" fg:w="141"/><text x="75.9703%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="75.6773%" y="165" width="0.6244%" height="15" fill="rgb(247,200,36)" fg:x="27514" fg:w="227"/><text x="75.9703%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="76.8793%" y="133" width="0.1513%" height="15" fill="rgb(216,124,27)" fg:x="27951" fg:w="55"/><text x="77.1722%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="76.8793%" y="149" width="0.3878%" height="15" fill="rgb(215,105,43)" fg:x="27951" fg:w="141"/><text x="77.1722%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="76.8793%" y="165" width="0.6244%" height="15" fill="rgb(235,114,37)" fg:x="27951" fg:w="227"/><text x="77.1722%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="78.0812%" y="133" width="0.1513%" height="15" fill="rgb(247,162,24)" fg:x="28388" fg:w="55"/><text x="78.3742%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="78.0812%" y="149" width="0.3878%" height="15" fill="rgb(249,46,34)" fg:x="28388" fg:w="141"/><text x="78.3742%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="78.0812%" y="165" width="0.6244%" height="15" fill="rgb(205,102,0)" fg:x="28388" fg:w="227"/><text x="78.3742%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="79.2832%" y="133" width="0.1265%" height="15" fill="rgb(223,13,49)" fg:x="28825" fg:w="46"/><text x="79.5762%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="79.2832%" y="149" width="0.3631%" height="15" fill="rgb(206,193,17)" fg:x="28825" fg:w="132"/><text x="79.5762%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="79.2832%" y="165" width="0.5996%" height="15" fill="rgb(228,39,37)" fg:x="28825" fg:w="218"/><text x="79.5762%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="80.4604%" y="133" width="0.1265%" height="15" fill="rgb(224,117,42)" fg:x="29253" fg:w="46"/><text x="80.7534%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="80.4604%" y="149" width="0.3631%" height="15" fill="rgb(221,61,1)" fg:x="29253" fg:w="132"/><text x="80.7534%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="80.4604%" y="165" width="0.5996%" height="15" fill="rgb(221,151,41)" fg:x="29253" fg:w="218"/><text x="80.7534%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="81.6376%" y="133" width="0.1265%" height="15" fill="rgb(233,140,6)" fg:x="29681" fg:w="46"/><text x="81.9306%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="81.6376%" y="149" width="0.3631%" height="15" fill="rgb(222,176,12)" fg:x="29681" fg:w="132"/><text x="81.9306%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="81.6376%" y="165" width="0.5996%" height="15" fill="rgb(237,151,37)" fg:x="29681" fg:w="218"/><text x="81.9306%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="82.8149%" y="133" width="0.1513%" height="15" fill="rgb(232,179,44)" fg:x="30109" fg:w="55"/><text x="83.1078%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="82.8149%" y="149" width="0.3878%" height="15" fill="rgb(247,174,19)" fg:x="30109" fg:w="141"/><text x="83.1078%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="82.8149%" y="165" width="0.6244%" height="15" fill="rgb(231,82,33)" fg:x="30109" fg:w="227"/><text x="83.1078%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="84.0168%" y="133" width="0.1265%" height="15" fill="rgb(241,69,54)" fg:x="30546" fg:w="46"/><text x="84.3098%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="84.0168%" y="149" width="0.3631%" height="15" fill="rgb(246,71,18)" fg:x="30546" fg:w="132"/><text x="84.3098%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="84.0168%" y="165" width="0.5996%" height="15" fill="rgb(241,88,29)" fg:x="30546" fg:w="218"/><text x="84.3098%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="85.1940%" y="133" width="0.1265%" height="15" fill="rgb(210,43,54)" fg:x="30974" fg:w="46"/><text x="85.4870%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="85.1940%" y="149" width="0.3631%" height="15" fill="rgb(216,195,5)" fg:x="30974" fg:w="132"/><text x="85.4870%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="85.1940%" y="165" width="0.5996%" height="15" fill="rgb(219,197,8)" fg:x="30974" fg:w="218"/><text x="85.4870%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="86.3713%" y="133" width="0.1265%" height="15" fill="rgb(228,146,14)" fg:x="31402" fg:w="46"/><text x="86.6642%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="86.3713%" y="149" width="0.3631%" height="15" fill="rgb(234,86,6)" fg:x="31402" fg:w="132"/><text x="86.6642%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="86.3713%" y="165" width="0.5996%" height="15" fill="rgb(207,21,24)" fg:x="31402" fg:w="218"/><text x="86.6642%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (55 instructions, 0.15%)</title><rect x="87.5485%" y="133" width="0.1513%" height="15" fill="rgb(221,139,27)" fg:x="31830" fg:w="55"/><text x="87.8414%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (141 instructions, 0.39%)</title><rect x="87.5485%" y="149" width="0.3878%" height="15" fill="rgb(247,29,10)" fg:x="31830" fg:w="141"/><text x="87.8414%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (227 instructions, 0.62%)</title><rect x="87.5485%" y="165" width="0.6244%" height="15" fill="rgb(225,207,38)" fg:x="31830" fg:w="227"/><text x="87.8414%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="88.7504%" y="133" width="0.1265%" height="15" fill="rgb(236,60,17)" fg:x="32267" fg:w="46"/><text x="89.0434%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="88.7504%" y="149" width="0.3631%" height="15" fill="rgb(222,216,40)" fg:x="32267" fg:w="132"/><text x="89.0434%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="88.7504%" y="165" width="0.5996%" height="15" fill="rgb(207,97,3)" fg:x="32267" fg:w="218"/><text x="89.0434%" y="175.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (46 instructions, 0.13%)</title><rect x="89.9277%" y="117" width="0.1265%" height="15" fill="rgb(229,15,17)" fg:x="32695" fg:w="46"/><text x="90.2206%" y="127.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (132 instructions, 0.36%)</title><rect x="89.9277%" y="133" width="0.3631%" height="15" fill="rgb(219,92,30)" fg:x="32695" fg:w="132"/><text x="90.2206%" y="143.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (218 instructions, 0.60%)</title><rect x="89.9277%" y="149" width="0.5996%" height="15" fill="rgb(233,38,47)" fg:x="32695" fg:w="218"/><text x="90.2206%" y="159.50"></text></g><g><title>im_rc::nodes::hamt::Node&lt;A&gt;::remove (304 instructions, 0.84%)</title><rect x="89.9277%" y="165" width="0.8362%" height="15" fill="rgb(253,218,0)" fg:x="32695" fg:w="304"/><text x="90.2206%" y="175.50"></text></g><g><title>im_rc::hash::map::HashMap&lt;K,V,S&gt;::remove (21,906 instructions, 60.25%)</title><rect x="31.0889%" y="181" width="60.2525%" height="15" fill="rgb(205,58,34)" fg:x="11303" fg:w="21906"/><text x="31.3819%" y="191.50">im_rc::hash::map::HashMap&lt;K,V,S&gt;::remove</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.01%)</title><rect x="91.3414%" y="149" width="0.0138%" height="15" fill="rgb(208,122,1)" fg:x="33209" fg:w="5"/><text x="91.6344%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.37%)</title><rect x="91.3552%" y="133" width="0.3713%" height="15" fill="rgb(216,196,43)" fg:x="33214" fg:w="135"/><text x="91.6481%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (165 instructions, 0.45%)</title><rect x="91.3552%" y="149" width="0.4538%" height="15" fill="rgb(246,188,19)" fg:x="33214" fg:w="165"/><text x="91.6481%" y="159.50"></text></g><g><title>memset (136 instructions, 0.37%)</title><rect x="91.8090%" y="149" width="0.3741%" height="15" fill="rgb(235,121,10)" fg:x="33379" fg:w="136"/><text x="92.1020%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (464 instructions, 1.28%)</title><rect x="91.3414%" y="165" width="1.2762%" height="15" fill="rgb(206,167,38)" fg:x="33209" fg:w="464"/><text x="91.6344%" y="175.50"></text></g><g><title>std::io::Write::write_all (32 instructions, 0.09%)</title><rect x="92.6177%" y="149" width="0.0880%" height="15" fill="rgb(214,75,1)" fg:x="33673" fg:w="32"/><text x="92.9106%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (117 instructions, 0.32%)</title><rect x="92.7057%" y="117" width="0.3218%" height="15" fill="rgb(221,40,6)" fg:x="33705" fg:w="117"/><text x="92.9986%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (152 instructions, 0.42%)</title><rect x="92.7057%" y="133" width="0.4181%" height="15" fill="rgb(244,200,37)" fg:x="33705" fg:w="152"/><text x="92.9986%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (221 instructions, 0.61%)</title><rect x="92.7057%" y="149" width="0.6079%" height="15" fill="rgb(222,188,20)" fg:x="33705" fg:w="221"/><text x="92.9986%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.03%)</title><rect x="93.3135%" y="149" width="0.0303%" height="15" fill="rgb(216,191,22)" fg:x="33926" fg:w="11"/><text x="93.6065%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.03%)</title><rect x="93.3438%" y="149" width="0.0303%" height="15" fill="rgb(229,105,35)" fg:x="33937" fg:w="11"/><text x="93.6368%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.08%)</title><rect x="93.3740%" y="149" width="0.0825%" height="15" fill="rgb(220,22,15)" fg:x="33948" fg:w="30"/><text x="93.6670%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.01%)</title><rect x="93.4566%" y="149" width="0.0138%" height="15" fill="rgb(208,55,40)" fg:x="33978" fg:w="5"/><text x="93.7495%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (517 instructions, 1.42%)</title><rect x="92.6177%" y="165" width="1.4220%" height="15" fill="rgb(251,139,2)" fg:x="33673" fg:w="517"/><text x="92.9106%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.01%)</title><rect x="94.0397%" y="165" width="0.0138%" height="15" fill="rgb(207,60,45)" fg:x="34190" fg:w="5"/><text x="94.3326%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.15%)</title><rect x="94.0534%" y="165" width="0.1513%" height="15" fill="rgb(230,142,33)" fg:x="34195" fg:w="55"/><text x="94.3464%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,115 instructions, 3.07%)</title><rect x="91.3414%" y="181" width="3.0668%" height="15" fill="rgb(249,58,37)" fg:x="33209" fg:w="1115"/><text x="91.6344%" y="191.50">ic..</text></g><g><title>imrc_hashmap::batch_remove_7_::{{closure}} (35,866 instructions, 98.65%)</title><rect x="0.4621%" y="197" width="98.6495%" height="15" fill="rgb(208,12,29)" fg:x="168" fg:w="35866"/><text x="0.7551%" y="207.50">imrc_hashmap::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.03%)</title><rect x="99.1116%" y="197" width="0.0330%" height="15" fill="rgb(242,199,33)" fg:x="36034" fg:w="12"/><text x="99.4046%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.22%)</title><rect x="99.1446%" y="197" width="0.2228%" height="15" fill="rgb(221,58,14)" fg:x="36046" fg:w="81"/><text x="99.4376%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (127 instructions, 0.35%)</title><rect x="99.3674%" y="197" width="0.3493%" height="15" fill="rgb(220,22,11)" fg:x="36127" fg:w="127"/><text x="99.6604%" y="207.50"></text></g><g><title>all (36,357 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,114,7)" fg:x="0" fg:w="36357"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (36,357 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,144,9)" fg:x="0" fg:w="36357"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>