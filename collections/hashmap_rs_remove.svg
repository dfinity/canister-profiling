<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="25223"><g><title>ic_cdk::setup (24 instructions, 0.10%)</title><rect x="0.0000%" y="197" width="0.0952%" height="15" fill="rgb(254,116,6)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.33%)</title><rect x="0.0952%" y="197" width="0.3291%" height="15" fill="rgb(215,47,48)" fg:x="24" fg:w="83"/><text x="0.3881%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.33%)</title><rect x="0.4242%" y="197" width="0.3291%" height="15" fill="rgb(239,120,33)" fg:x="107" fg:w="83"/><text x="0.7172%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.33%)</title><rect x="0.7533%" y="165" width="0.3291%" height="15" fill="rgb(215,211,8)" fg:x="190" fg:w="83"/><text x="1.0462%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.33%)</title><rect x="1.0823%" y="149" width="0.3251%" height="15" fill="rgb(224,133,53)" fg:x="273" fg:w="82"/><text x="1.3753%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="1.4074%" y="133" width="0.0238%" height="15" fill="rgb(239,205,25)" fg:x="355" fg:w="6"/><text x="1.7004%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 1.74%)</title><rect x="1.4074%" y="149" width="1.7444%" height="15" fill="rgb(240,1,50)" fg:x="355" fg:w="440"/><text x="1.7004%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.38%)</title><rect x="3.1519%" y="149" width="0.3766%" height="15" fill="rgb(216,44,29)" fg:x="795" fg:w="95"/><text x="3.4449%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.24%)</title><rect x="3.5285%" y="149" width="0.2379%" height="15" fill="rgb(235,117,29)" fg:x="890" fg:w="60"/><text x="3.8215%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.24%)</title><rect x="3.7664%" y="149" width="0.2379%" height="15" fill="rgb(249,177,0)" fg:x="950" fg:w="60"/><text x="4.0594%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.24%)</title><rect x="4.0043%" y="149" width="0.2379%" height="15" fill="rgb(210,70,0)" fg:x="1010" fg:w="60"/><text x="4.2973%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.24%)</title><rect x="4.2422%" y="149" width="0.2379%" height="15" fill="rgb(233,94,16)" fg:x="1070" fg:w="60"/><text x="4.5351%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.33%)</title><rect x="4.4800%" y="149" width="0.3251%" height="15" fill="rgb(222,117,10)" fg:x="1130" fg:w="82"/><text x="4.7730%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.28%)</title><rect x="4.8051%" y="149" width="0.2775%" height="15" fill="rgb(233,202,6)" fg:x="1212" fg:w="70"/><text x="5.0981%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="5.0827%" y="133" width="0.0238%" height="15" fill="rgb(223,2,40)" fg:x="1282" fg:w="6"/><text x="5.3756%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 1.74%)</title><rect x="5.0827%" y="149" width="1.7444%" height="15" fill="rgb(246,21,18)" fg:x="1282" fg:w="440"/><text x="5.3756%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.08%)</title><rect x="6.8271%" y="149" width="0.0753%" height="15" fill="rgb(238,205,13)" fg:x="1722" fg:w="19"/><text x="7.1201%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.33%)</title><rect x="6.9024%" y="133" width="0.3291%" height="15" fill="rgb(238,35,31)" fg:x="1741" fg:w="83"/><text x="7.1954%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.27%)</title><rect x="7.2315%" y="101" width="0.2656%" height="15" fill="rgb(241,120,11)" fg:x="1824" fg:w="67"/><text x="7.5245%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.39%)</title><rect x="7.2315%" y="117" width="0.3885%" height="15" fill="rgb(215,183,6)" fg:x="1824" fg:w="98"/><text x="7.5245%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.04%)</title><rect x="7.6200%" y="69" width="0.0436%" height="15" fill="rgb(209,58,43)" fg:x="1922" fg:w="11"/><text x="7.9130%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.14%)</title><rect x="7.6636%" y="53" width="0.1388%" height="15" fill="rgb(217,23,11)" fg:x="1933" fg:w="35"/><text x="7.9566%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.26%)</title><rect x="7.6636%" y="69" width="0.2617%" height="15" fill="rgb(254,53,2)" fg:x="1933" fg:w="66"/><text x="7.9566%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.58%)</title><rect x="7.6200%" y="85" width="0.5828%" height="15" fill="rgb(211,185,42)" fg:x="1922" fg:w="147"/><text x="7.9130%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.84%)</title><rect x="7.6200%" y="101" width="0.8405%" height="15" fill="rgb(206,197,35)" fg:x="1922" fg:w="212"/><text x="7.9130%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.88%)</title><rect x="7.6200%" y="117" width="0.8801%" height="15" fill="rgb(212,186,47)" fg:x="1922" fg:w="222"/><text x="7.9130%" y="127.50"></text></g><g><title>core::fmt::write (461 instructions, 1.83%)</title><rect x="7.2315%" y="133" width="1.8277%" height="15" fill="rgb(221,69,19)" fg:x="1824" fg:w="461"/><text x="7.5245%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 2.73%)</title><rect x="6.9024%" y="149" width="2.7316%" height="15" fill="rgb(219,66,8)" fg:x="1741" fg:w="689"/><text x="7.1954%" y="159.50">a..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.38%)</title><rect x="9.6341%" y="149" width="0.3766%" height="15" fill="rgb(241,186,11)" fg:x="2430" fg:w="95"/><text x="9.9270%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.24%)</title><rect x="10.0107%" y="149" width="0.2379%" height="15" fill="rgb(216,160,39)" fg:x="2525" fg:w="60"/><text x="10.3037%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.30%)</title><rect x="10.2486%" y="149" width="0.3013%" height="15" fill="rgb(219,105,41)" fg:x="2585" fg:w="76"/><text x="10.5416%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.28%)</title><rect x="10.5499%" y="149" width="0.2775%" height="15" fill="rgb(227,65,36)" fg:x="2661" fg:w="70"/><text x="10.8429%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="10.8274%" y="117" width="0.0238%" height="15" fill="rgb(230,192,1)" fg:x="2731" fg:w="6"/><text x="11.1204%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (440 instructions, 1.74%)</title><rect x="10.8274%" y="133" width="1.7444%" height="15" fill="rgb(221,8,32)" fg:x="2731" fg:w="440"/><text x="11.1204%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.08%)</title><rect x="12.5719%" y="133" width="0.0753%" height="15" fill="rgb(229,102,40)" fg:x="3171" fg:w="19"/><text x="12.8648%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.33%)</title><rect x="12.6472%" y="117" width="0.3291%" height="15" fill="rgb(221,210,39)" fg:x="3190" fg:w="83"/><text x="12.9402%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.27%)</title><rect x="12.9763%" y="85" width="0.2656%" height="15" fill="rgb(214,134,47)" fg:x="3273" fg:w="67"/><text x="13.2692%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 instructions, 0.39%)</title><rect x="12.9763%" y="101" width="0.3885%" height="15" fill="rgb(233,49,20)" fg:x="3273" fg:w="98"/><text x="13.2692%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.04%)</title><rect x="13.3648%" y="53" width="0.0436%" height="15" fill="rgb(231,132,49)" fg:x="3371" fg:w="11"/><text x="13.6578%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.14%)</title><rect x="13.4084%" y="37" width="0.1388%" height="15" fill="rgb(210,63,4)" fg:x="3382" fg:w="35"/><text x="13.7014%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (66 instructions, 0.26%)</title><rect x="13.4084%" y="53" width="0.2617%" height="15" fill="rgb(251,200,46)" fg:x="3382" fg:w="66"/><text x="13.7014%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147 instructions, 0.58%)</title><rect x="13.3648%" y="69" width="0.5828%" height="15" fill="rgb(212,48,7)" fg:x="3371" fg:w="147"/><text x="13.6578%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (212 instructions, 0.84%)</title><rect x="13.3648%" y="85" width="0.8405%" height="15" fill="rgb(235,46,37)" fg:x="3371" fg:w="212"/><text x="13.6578%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (222 instructions, 0.88%)</title><rect x="13.3648%" y="101" width="0.8801%" height="15" fill="rgb(210,120,3)" fg:x="3371" fg:w="222"/><text x="13.6578%" y="111.50"></text></g><g><title>core::fmt::write (461 instructions, 1.83%)</title><rect x="12.9763%" y="117" width="1.8277%" height="15" fill="rgb(247,58,26)" fg:x="3273" fg:w="461"/><text x="13.2692%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (689 instructions, 2.73%)</title><rect x="12.6472%" y="133" width="2.7316%" height="15" fill="rgb(253,216,53)" fg:x="3190" fg:w="689"/><text x="12.9402%" y="143.50">a..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.38%)</title><rect x="15.3788%" y="133" width="0.3766%" height="15" fill="rgb(217,150,23)" fg:x="3879" fg:w="95"/><text x="15.6718%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.24%)</title><rect x="15.7555%" y="133" width="0.2379%" height="15" fill="rgb(253,22,6)" fg:x="3974" fg:w="60"/><text x="16.0484%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.33%)</title><rect x="15.9933%" y="117" width="0.3251%" height="15" fill="rgb(235,217,26)" fg:x="4034" fg:w="82"/><text x="16.2863%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.38%)</title><rect x="16.3184%" y="117" width="0.3766%" height="15" fill="rgb(224,207,30)" fg:x="4116" fg:w="95"/><text x="16.6114%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.30%)</title><rect x="16.6951%" y="117" width="0.3013%" height="15" fill="rgb(242,78,32)" fg:x="4211" fg:w="76"/><text x="16.9880%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 1.31%)</title><rect x="15.9933%" y="133" width="1.3083%" height="15" fill="rgb(223,35,6)" fg:x="4034" fg:w="330"/><text x="16.2863%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.33%)</title><rect x="17.3017%" y="133" width="0.3251%" height="15" fill="rgb(242,11,22)" fg:x="4364" fg:w="82"/><text x="17.5946%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,960 instructions, 7.77%)</title><rect x="10.8274%" y="149" width="7.7707%" height="15" fill="rgb(245,33,20)" fg:x="2731" fg:w="1960"/><text x="11.1204%" y="159.50">binread::..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.30%)</title><rect x="18.5981%" y="149" width="0.3013%" height="15" fill="rgb(242,14,12)" fg:x="4691" fg:w="76"/><text x="18.8911%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="18.8994%" y="149" width="0.0595%" height="15" fill="rgb(249,60,5)" fg:x="4767" fg:w="15"/><text x="19.1924%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="18.9589%" y="149" width="0.0595%" height="15" fill="rgb(251,133,42)" fg:x="4782" fg:w="15"/><text x="19.2519%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 instructions, 0.04%)</title><rect x="19.0184%" y="149" width="0.0357%" height="15" fill="rgb(246,84,4)" fg:x="4797" fg:w="9"/><text x="19.3113%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 instructions, 0.07%)</title><rect x="19.0540%" y="149" width="0.0714%" height="15" fill="rgb(235,116,35)" fg:x="4806" fg:w="18"/><text x="19.3470%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.33%)</title><rect x="19.1254%" y="133" width="0.3291%" height="15" fill="rgb(243,223,39)" fg:x="4824" fg:w="83"/><text x="19.4184%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (179 instructions, 0.71%)</title><rect x="19.1254%" y="149" width="0.7097%" height="15" fill="rgb(205,73,49)" fg:x="4824" fg:w="179"/><text x="19.4184%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.33%)</title><rect x="19.8351%" y="117" width="0.3291%" height="15" fill="rgb(246,34,43)" fg:x="5003" fg:w="83"/><text x="20.1280%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.50%)</title><rect x="19.8351%" y="133" width="0.4995%" height="15" fill="rgb(222,171,41)" fg:x="5003" fg:w="126"/><text x="20.1280%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (208 instructions, 0.82%)</title><rect x="19.8351%" y="149" width="0.8246%" height="15" fill="rgb(209,224,10)" fg:x="5003" fg:w="208"/><text x="20.1280%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.33%)</title><rect x="20.6597%" y="149" width="0.3291%" height="15" fill="rgb(251,40,10)" fg:x="5211" fg:w="83"/><text x="20.9527%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.34%)</title><rect x="20.9888%" y="149" width="0.3410%" height="15" fill="rgb(228,48,7)" fg:x="5294" fg:w="86"/><text x="21.2817%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.33%)</title><rect x="21.3297%" y="149" width="0.3291%" height="15" fill="rgb(237,115,6)" fg:x="5380" fg:w="83"/><text x="21.6227%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.33%)</title><rect x="21.6588%" y="149" width="0.3291%" height="15" fill="rgb(245,101,17)" fg:x="5463" fg:w="83"/><text x="21.9518%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="21.9879%" y="149" width="0.0159%" height="15" fill="rgb(235,142,6)" fg:x="5546" fg:w="4"/><text x="22.2808%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.34%)</title><rect x="22.0037%" y="149" width="0.3410%" height="15" fill="rgb(219,64,25)" fg:x="5550" fg:w="86"/><text x="22.2967%" y="159.50"></text></g><g><title>memcpy (428 instructions, 1.70%)</title><rect x="22.3447%" y="149" width="1.6969%" height="15" fill="rgb(219,3,2)" fg:x="5636" fg:w="428"/><text x="22.6377%" y="159.50"></text></g><g><title>memcpy (428 instructions, 1.70%)</title><rect x="24.0415%" y="149" width="1.6969%" height="15" fill="rgb(229,4,19)" fg:x="6064" fg:w="428"/><text x="24.3345%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,366 instructions, 29.20%)</title><rect x="1.0823%" y="165" width="29.2035%" height="15" fill="rgb(237,221,11)" fg:x="273" fg:w="7366"/><text x="1.3753%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (380 instructions, 1.51%)</title><rect x="30.2859%" y="165" width="1.5066%" height="15" fill="rgb(220,18,35)" fg:x="7639" fg:w="380"/><text x="30.5788%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.06%)</title><rect x="31.7924%" y="149" width="0.0555%" height="15" fill="rgb(254,51,43)" fg:x="8019" fg:w="14"/><text x="32.0854%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 instructions, 0.25%)</title><rect x="31.7924%" y="165" width="0.2498%" height="15" fill="rgb(211,40,36)" fg:x="8019" fg:w="63"/><text x="32.0854%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.33%)</title><rect x="32.0422%" y="165" width="0.3291%" height="15" fill="rgb(216,179,36)" fg:x="8082" fg:w="83"/><text x="32.3352%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.06%)</title><rect x="32.3712%" y="149" width="0.0555%" height="15" fill="rgb(244,74,34)" fg:x="8165" fg:w="14"/><text x="32.6642%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.23%)</title><rect x="32.4268%" y="133" width="0.2339%" height="15" fill="rgb(214,24,17)" fg:x="8179" fg:w="59"/><text x="32.7197%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.37%)</title><rect x="32.6607%" y="133" width="0.3727%" height="15" fill="rgb(206,82,22)" fg:x="8238" fg:w="94"/><text x="32.9536%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.69%)</title><rect x="33.0333%" y="133" width="0.6859%" height="15" fill="rgb(253,207,9)" fg:x="8332" fg:w="173"/><text x="33.3263%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.30%)</title><rect x="32.4268%" y="149" width="2.2955%" height="15" fill="rgb(239,163,20)" fg:x="8179" fg:w="579"/><text x="32.7197%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (821 instructions, 3.25%)</title><rect x="32.3712%" y="165" width="3.2550%" height="15" fill="rgb(231,59,46)" fg:x="8165" fg:w="821"/><text x="32.6642%" y="175.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.33%)</title><rect x="35.6262%" y="165" width="0.3291%" height="15" fill="rgb(216,170,16)" fg:x="8986" fg:w="83"/><text x="35.9192%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.06%)</title><rect x="35.9553%" y="149" width="0.0555%" height="15" fill="rgb(225,129,33)" fg:x="9069" fg:w="14"/><text x="36.2482%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.23%)</title><rect x="36.0108%" y="133" width="0.2339%" height="15" fill="rgb(252,64,19)" fg:x="9083" fg:w="59"/><text x="36.3038%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.37%)</title><rect x="36.2447%" y="133" width="0.3727%" height="15" fill="rgb(234,36,39)" fg:x="9142" fg:w="94"/><text x="36.5377%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.69%)</title><rect x="36.6174%" y="133" width="0.6859%" height="15" fill="rgb(205,214,25)" fg:x="9236" fg:w="173"/><text x="36.9103%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.30%)</title><rect x="36.0108%" y="149" width="2.2955%" height="15" fill="rgb(237,71,24)" fg:x="9083" fg:w="579"/><text x="36.3038%" y="159.50">c..</text></g><g><title>memcmp (77 instructions, 0.31%)</title><rect x="38.3063%" y="149" width="0.3053%" height="15" fill="rgb(224,220,4)" fg:x="9662" fg:w="77"/><text x="38.5993%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.34%)</title><rect x="38.6116%" y="133" width="0.3410%" height="15" fill="rgb(245,29,47)" fg:x="9739" fg:w="86"/><text x="38.9046%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 instructions, 0.48%)</title><rect x="38.6116%" y="149" width="0.4797%" height="15" fill="rgb(206,143,5)" fg:x="9739" fg:w="121"/><text x="38.9046%" y="159.50"></text></g><g><title>candid::types::internal::env_add (986 instructions, 3.91%)</title><rect x="35.9553%" y="165" width="3.9091%" height="15" fill="rgb(239,165,39)" fg:x="9069" fg:w="986"/><text x="36.2482%" y="175.50">can..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.23%)</title><rect x="39.8644%" y="117" width="0.2339%" height="15" fill="rgb(213,32,5)" fg:x="10055" fg:w="59"/><text x="40.1574%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (94 instructions, 0.37%)</title><rect x="39.8644%" y="133" width="0.3727%" height="15" fill="rgb(220,156,6)" fg:x="10055" fg:w="94"/><text x="40.1574%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (315 instructions, 1.25%)</title><rect x="39.8644%" y="149" width="1.2489%" height="15" fill="rgb(249,109,35)" fg:x="10055" fg:w="315"/><text x="40.1574%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.848 (18 instructions, 0.07%)</title><rect x="41.1133%" y="149" width="0.0714%" height="15" fill="rgb(231,77,38)" fg:x="10370" fg:w="18"/><text x="41.4062%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="41.1846%" y="149" width="0.0515%" height="15" fill="rgb(212,91,52)" fg:x="10388" fg:w="13"/><text x="41.4776%" y="159.50"></text></g><g><title>candid::types::internal::env_id (551 instructions, 2.18%)</title><rect x="39.8644%" y="165" width="2.1845%" height="15" fill="rgb(206,135,17)" fg:x="10055" fg:w="551"/><text x="40.1574%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (53 instructions, 0.21%)</title><rect x="42.0489%" y="165" width="0.2101%" height="15" fill="rgb(217,219,53)" fg:x="10606" fg:w="53"/><text x="42.3419%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.52%)</title><rect x="42.2590%" y="149" width="0.5233%" height="15" fill="rgb(207,204,23)" fg:x="10659" fg:w="132"/><text x="42.5520%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (132 instructions, 0.52%)</title><rect x="42.9211%" y="149" width="0.5233%" height="15" fill="rgb(247,195,38)" fg:x="10826" fg:w="132"/><text x="43.2141%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (334 instructions, 1.32%)</title><rect x="42.2590%" y="165" width="1.3242%" height="15" fill="rgb(242,184,35)" fg:x="10659" fg:w="334"/><text x="42.5520%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (34 instructions, 0.13%)</title><rect x="43.5832%" y="149" width="0.1348%" height="15" fill="rgb(206,62,54)" fg:x="10993" fg:w="34"/><text x="43.8762%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1732 (18 instructions, 0.07%)</title><rect x="43.7180%" y="149" width="0.0714%" height="15" fill="rgb(213,220,24)" fg:x="11027" fg:w="18"/><text x="44.0110%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1732 (18 instructions, 0.07%)</title><rect x="43.7894%" y="149" width="0.0714%" height="15" fill="rgb(244,199,38)" fg:x="11045" fg:w="18"/><text x="44.0824%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (169 instructions, 0.67%)</title><rect x="43.5832%" y="165" width="0.6700%" height="15" fill="rgb(207,53,50)" fg:x="10993" fg:w="169"/><text x="43.8762%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="44.2533%" y="165" width="0.0515%" height="15" fill="rgb(213,15,22)" fg:x="11162" fg:w="13"/><text x="44.5462%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="44.3048%" y="165" width="0.0515%" height="15" fill="rgb(214,18,8)" fg:x="11175" fg:w="13"/><text x="44.5978%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="44.3563%" y="165" width="0.0515%" height="15" fill="rgb(250,107,20)" fg:x="11188" fg:w="13"/><text x="44.6493%" y="175.50"></text></g><g><title>memcpy (440 instructions, 1.74%)</title><rect x="44.4079%" y="165" width="1.7444%" height="15" fill="rgb(218,71,24)" fg:x="11201" fg:w="440"/><text x="44.7009%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (19 instructions, 0.08%)</title><rect x="46.1523%" y="133" width="0.0753%" height="15" fill="rgb(206,76,15)" fg:x="11641" fg:w="19"/><text x="46.4453%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (181 instructions, 0.72%)</title><rect x="46.2276%" y="133" width="0.7176%" height="15" fill="rgb(252,174,22)" fg:x="11660" fg:w="181"/><text x="46.5206%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (100 instructions, 0.40%)</title><rect x="46.9452%" y="101" width="0.3965%" height="15" fill="rgb(245,214,28)" fg:x="11841" fg:w="100"/><text x="47.2382%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (214 instructions, 0.85%)</title><rect x="46.9452%" y="117" width="0.8484%" height="15" fill="rgb(211,5,20)" fg:x="11841" fg:w="214"/><text x="47.2382%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (249 instructions, 0.99%)</title><rect x="46.9452%" y="133" width="0.9872%" height="15" fill="rgb(253,130,7)" fg:x="11841" fg:w="249"/><text x="47.2382%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="47.9324%" y="133" width="0.0515%" height="15" fill="rgb(221,139,15)" fg:x="12090" fg:w="13"/><text x="48.2254%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (524 instructions, 2.08%)</title><rect x="46.1523%" y="149" width="2.0775%" height="15" fill="rgb(251,198,24)" fg:x="11641" fg:w="524"/><text x="46.4453%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (573 instructions, 2.27%)</title><rect x="46.1523%" y="165" width="2.2717%" height="15" fill="rgb(224,4,33)" fg:x="11641" fg:w="573"/><text x="46.4453%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.25%)</title><rect x="48.4241%" y="149" width="0.2458%" height="15" fill="rgb(216,10,7)" fg:x="12214" fg:w="62"/><text x="48.7170%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (100 instructions, 0.40%)</title><rect x="48.6699%" y="149" width="0.3965%" height="15" fill="rgb(215,152,35)" fg:x="12276" fg:w="100"/><text x="48.9628%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (261 instructions, 1.03%)</title><rect x="48.4241%" y="165" width="1.0348%" height="15" fill="rgb(208,87,33)" fg:x="12214" fg:w="261"/><text x="48.7170%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,753 instructions, 54.53%)</title><rect x="0.7533%" y="181" width="54.5256%" height="15" fill="rgb(208,47,37)" fg:x="190" fg:w="13753"/><text x="1.0462%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (14 instructions, 0.06%)</title><rect x="55.2789%" y="149" width="0.0555%" height="15" fill="rgb(229,150,52)" fg:x="13943" fg:w="14"/><text x="55.5719%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (62 instructions, 0.25%)</title><rect x="55.3344%" y="117" width="0.2458%" height="15" fill="rgb(247,101,16)" fg:x="13957" fg:w="62"/><text x="55.6274%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (156 instructions, 0.62%)</title><rect x="55.3344%" y="133" width="0.6185%" height="15" fill="rgb(240,41,32)" fg:x="13957" fg:w="156"/><text x="55.6274%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (191 instructions, 0.76%)</title><rect x="55.3344%" y="149" width="0.7572%" height="15" fill="rgb(212,217,22)" fg:x="13957" fg:w="191"/><text x="55.6274%" y="159.50"></text></g><g><title>memset (152 instructions, 0.60%)</title><rect x="56.0917%" y="149" width="0.6026%" height="15" fill="rgb(233,52,24)" fg:x="14148" fg:w="152"/><text x="56.3846%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (537 instructions, 2.13%)</title><rect x="55.2789%" y="165" width="2.1290%" height="15" fill="rgb(208,184,36)" fg:x="13943" fg:w="537"/><text x="55.5719%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (518 instructions, 2.05%)</title><rect x="57.4079%" y="149" width="2.0537%" height="15" fill="rgb(236,208,37)" fg:x="14480" fg:w="518"/><text x="57.7009%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (83 instructions, 0.33%)</title><rect x="59.4616%" y="101" width="0.3291%" height="15" fill="rgb(253,130,43)" fg:x="14998" fg:w="83"/><text x="59.7546%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (126 instructions, 0.50%)</title><rect x="59.4616%" y="117" width="0.4995%" height="15" fill="rgb(251,60,38)" fg:x="14998" fg:w="126"/><text x="59.7546%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (205 instructions, 0.81%)</title><rect x="59.4616%" y="133" width="0.8128%" height="15" fill="rgb(245,110,6)" fg:x="14998" fg:w="205"/><text x="59.7546%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="60.2744%" y="133" width="0.0595%" height="15" fill="rgb(208,4,12)" fg:x="15203" fg:w="15"/><text x="60.5673%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="60.3338%" y="133" width="0.0595%" height="15" fill="rgb(214,22,15)" fg:x="15218" fg:w="15"/><text x="60.6268%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (423 instructions, 1.68%)</title><rect x="59.4616%" y="149" width="1.6770%" height="15" fill="rgb(225,222,52)" fg:x="14998" fg:w="423"/><text x="59.7546%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 2.05%)</title><rect x="61.1386%" y="149" width="2.0458%" height="15" fill="rgb(223,175,27)" fg:x="15421" fg:w="516"/><text x="61.4316%" y="159.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.03%)</title><rect x="63.1844%" y="149" width="0.0278%" height="15" fill="rgb(236,161,30)" fg:x="15937" fg:w="7"/><text x="63.4774%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,557 instructions, 6.17%)</title><rect x="57.4079%" y="165" width="6.1729%" height="15" fill="rgb(223,189,0)" fg:x="14480" fg:w="1557"/><text x="57.7009%" y="175.50">candid..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 instructions, 0.02%)</title><rect x="63.5809%" y="165" width="0.0238%" height="15" fill="rgb(226,11,23)" fg:x="16037" fg:w="6"/><text x="63.8738%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.24%)</title><rect x="63.6046%" y="165" width="0.2379%" height="15" fill="rgb(235,60,26)" fg:x="16043" fg:w="60"/><text x="63.8976%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,766 instructions, 10.97%)</title><rect x="55.2789%" y="181" width="10.9662%" height="15" fill="rgb(221,109,5)" fg:x="13943" fg:w="2766"/><text x="55.5719%" y="191.50">ic_cdk::api::..</text></g><g><title>hashmap::batch_remove_7_::{{closure}} (24,679 instructions, 97.84%)</title><rect x="0.7533%" y="197" width="97.8432%" height="15" fill="rgb(243,106,40)" fg:x="190" fg:w="24679"/><text x="1.0462%" y="207.50">hashmap::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.06%)</title><rect x="98.5965%" y="197" width="0.0555%" height="15" fill="rgb(249,137,54)" fg:x="24869" fg:w="14"/><text x="98.8895%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (86 instructions, 0.34%)</title><rect x="98.6560%" y="197" width="0.3410%" height="15" fill="rgb(249,213,2)" fg:x="24884" fg:w="86"/><text x="98.9490%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (109 instructions, 0.43%)</title><rect x="98.9969%" y="197" width="0.4321%" height="15" fill="rgb(252,22,0)" fg:x="24970" fg:w="109"/><text x="99.2899%" y="207.50"></text></g><g><title>all (25,223 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(254,35,10)" fg:x="0" fg:w="25223"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (25,223 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(218,228,39)" fg:x="0" fg:w="25223"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>