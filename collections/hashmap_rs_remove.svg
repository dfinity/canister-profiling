<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="310" onload="init(evt)" viewBox="0 0 1024 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="293.00"> </text><svg id="frames" x="10" width="1004" total_samples="23645"><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="0.0000%" y="229" width="0.3468%" height="15" fill="rgb(240,30,46)" fg:x="0" fg:w="82"/><text x="0.2930%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="0.3468%" y="229" width="0.3468%" height="15" fill="rgb(248,72,28)" fg:x="82" fg:w="82"/><text x="0.6398%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="0.6936%" y="181" width="0.3468%" height="15" fill="rgb(242,152,40)" fg:x="164" fg:w="82"/><text x="0.9866%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (1,139 instructions, 4.82%)</title><rect x="0.6936%" y="197" width="4.8171%" height="15" fill="rgb(229,154,17)" fg:x="164" fg:w="1139"/><text x="0.9866%" y="207.50">ic_c..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.22%)</title><rect x="5.5107%" y="165" width="0.2157%" height="15" fill="rgb(241,43,30)" fg:x="1303" fg:w="51"/><text x="5.8036%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="5.7264%" y="149" width="0.0254%" height="15" fill="rgb(218,186,1)" fg:x="1354" fg:w="6"/><text x="6.0193%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.85%)</title><rect x="5.7264%" y="165" width="1.8482%" height="15" fill="rgb(205,45,44)" fg:x="1354" fg:w="437"/><text x="6.0193%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.27%)</title><rect x="7.5745%" y="165" width="0.2707%" height="15" fill="rgb(209,219,12)" fg:x="1791" fg:w="64"/><text x="7.8675%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.32%)</title><rect x="7.8452%" y="165" width="0.3214%" height="15" fill="rgb(251,86,36)" fg:x="1855" fg:w="76"/><text x="8.1382%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.32%)</title><rect x="8.1666%" y="165" width="0.3214%" height="15" fill="rgb(250,121,22)" fg:x="1931" fg:w="76"/><text x="8.4596%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.32%)</title><rect x="8.4881%" y="165" width="0.3214%" height="15" fill="rgb(238,182,42)" fg:x="2007" fg:w="76"/><text x="8.7810%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.32%)</title><rect x="8.8095%" y="165" width="0.3214%" height="15" fill="rgb(231,227,30)" fg:x="2083" fg:w="76"/><text x="9.1024%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.22%)</title><rect x="9.1309%" y="165" width="0.2157%" height="15" fill="rgb(209,120,14)" fg:x="2159" fg:w="51"/><text x="9.4239%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.40%)</title><rect x="9.3466%" y="165" width="0.4018%" height="15" fill="rgb(233,40,52)" fg:x="2210" fg:w="95"/><text x="9.6396%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="9.7484%" y="149" width="0.0254%" height="15" fill="rgb(253,141,8)" fg:x="2305" fg:w="6"/><text x="10.0413%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.85%)</title><rect x="9.7484%" y="165" width="1.8482%" height="15" fill="rgb(236,73,33)" fg:x="2305" fg:w="437"/><text x="10.0413%" y="175.50"></text></g><g><title>memcmp (19 instructions, 0.08%)</title><rect x="11.5965%" y="165" width="0.0804%" height="15" fill="rgb(207,137,48)" fg:x="2742" fg:w="19"/><text x="11.8895%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="11.6769%" y="133" width="0.3468%" height="15" fill="rgb(228,59,17)" fg:x="2761" fg:w="82"/><text x="11.9699%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.28%)</title><rect x="12.0237%" y="101" width="0.2834%" height="15" fill="rgb(252,220,32)" fg:x="2843" fg:w="67"/><text x="12.3167%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.41%)</title><rect x="12.0237%" y="117" width="0.4060%" height="15" fill="rgb(216,100,33)" fg:x="2843" fg:w="96"/><text x="12.3167%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.05%)</title><rect x="12.4297%" y="69" width="0.0465%" height="15" fill="rgb(220,134,53)" fg:x="2939" fg:w="11"/><text x="12.7227%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.15%)</title><rect x="12.4762%" y="53" width="0.1480%" height="15" fill="rgb(205,165,3)" fg:x="2950" fg:w="35"/><text x="12.7692%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.27%)</title><rect x="12.4762%" y="69" width="0.2707%" height="15" fill="rgb(226,161,31)" fg:x="2950" fg:w="64"/><text x="12.7692%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.61%)</title><rect x="12.4297%" y="85" width="0.6090%" height="15" fill="rgb(248,24,19)" fg:x="2939" fg:w="144"/><text x="12.7227%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.89%)</title><rect x="12.4297%" y="101" width="0.8881%" height="15" fill="rgb(208,188,34)" fg:x="2939" fg:w="210"/><text x="12.7227%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.93%)</title><rect x="12.4297%" y="117" width="0.9304%" height="15" fill="rgb(239,50,41)" fg:x="2939" fg:w="220"/><text x="12.7227%" y="127.50"></text></g><g><title>core::fmt::write (449 instructions, 1.90%)</title><rect x="12.0237%" y="133" width="1.8989%" height="15" fill="rgb(233,225,12)" fg:x="2843" fg:w="449"/><text x="12.3167%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 2.82%)</title><rect x="11.6769%" y="149" width="2.8209%" height="15" fill="rgb(231,193,44)" fg:x="2761" fg:w="667"/><text x="11.9699%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.27%)</title><rect x="14.4978%" y="149" width="0.2707%" height="15" fill="rgb(232,219,42)" fg:x="3428" fg:w="64"/><text x="14.7907%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.26%)</title><rect x="14.7684%" y="149" width="0.2580%" height="15" fill="rgb(253,222,52)" fg:x="3492" fg:w="61"/><text x="15.0614%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 3.82%)</title><rect x="11.6769%" y="165" width="3.8190%" height="15" fill="rgb(208,223,29)" fg:x="2761" fg:w="903"/><text x="11.9699%" y="175.50">bin..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 instructions, 0.11%)</title><rect x="15.4959%" y="165" width="0.1142%" height="15" fill="rgb(243,189,38)" fg:x="3664" fg:w="27"/><text x="15.7888%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.19%)</title><rect x="15.6101%" y="165" width="0.1945%" height="15" fill="rgb(236,134,5)" fg:x="3691" fg:w="46"/><text x="15.9030%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.40%)</title><rect x="15.8046%" y="165" width="0.4018%" height="15" fill="rgb(228,88,26)" fg:x="3737" fg:w="95"/><text x="16.0976%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="16.2064%" y="133" width="0.0254%" height="15" fill="rgb(206,178,47)" fg:x="3832" fg:w="6"/><text x="16.4994%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 1.85%)</title><rect x="16.2064%" y="149" width="1.8482%" height="15" fill="rgb(248,156,42)" fg:x="3832" fg:w="437"/><text x="16.4994%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.08%)</title><rect x="18.0546%" y="149" width="0.0804%" height="15" fill="rgb(209,78,26)" fg:x="4269" fg:w="19"/><text x="18.3475%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="18.1349%" y="117" width="0.3468%" height="15" fill="rgb(232,36,8)" fg:x="4288" fg:w="82"/><text x="18.4279%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.28%)</title><rect x="18.4817%" y="85" width="0.2834%" height="15" fill="rgb(223,165,6)" fg:x="4370" fg:w="67"/><text x="18.7747%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.41%)</title><rect x="18.4817%" y="101" width="0.4060%" height="15" fill="rgb(229,102,1)" fg:x="4370" fg:w="96"/><text x="18.7747%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.05%)</title><rect x="18.8877%" y="53" width="0.0465%" height="15" fill="rgb(252,46,37)" fg:x="4466" fg:w="11"/><text x="19.1807%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.15%)</title><rect x="18.9342%" y="37" width="0.1480%" height="15" fill="rgb(215,97,1)" fg:x="4477" fg:w="35"/><text x="19.2272%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.27%)</title><rect x="18.9342%" y="53" width="0.2707%" height="15" fill="rgb(246,200,50)" fg:x="4477" fg:w="64"/><text x="19.2272%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.61%)</title><rect x="18.8877%" y="69" width="0.6090%" height="15" fill="rgb(233,93,46)" fg:x="4466" fg:w="144"/><text x="19.1807%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 0.89%)</title><rect x="18.8877%" y="85" width="0.8881%" height="15" fill="rgb(245,126,48)" fg:x="4466" fg:w="210"/><text x="19.1807%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 0.93%)</title><rect x="18.8877%" y="101" width="0.9304%" height="15" fill="rgb(209,204,15)" fg:x="4466" fg:w="220"/><text x="19.1807%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 1.90%)</title><rect x="18.4817%" y="117" width="1.8989%" height="15" fill="rgb(247,223,31)" fg:x="4370" fg:w="449"/><text x="18.7747%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 2.82%)</title><rect x="18.1349%" y="133" width="2.8209%" height="15" fill="rgb(232,82,15)" fg:x="4288" fg:w="667"/><text x="18.4279%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.27%)</title><rect x="20.9558%" y="133" width="0.2707%" height="15" fill="rgb(235,97,35)" fg:x="4955" fg:w="64"/><text x="21.2488%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.26%)</title><rect x="21.2265%" y="133" width="0.2580%" height="15" fill="rgb(212,78,24)" fg:x="5019" fg:w="61"/><text x="21.5194%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 3.82%)</title><rect x="18.1349%" y="149" width="3.8190%" height="15" fill="rgb(221,104,28)" fg:x="4288" fg:w="903"/><text x="18.4279%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.22%)</title><rect x="21.9539%" y="133" width="0.2157%" height="15" fill="rgb(217,219,41)" fg:x="5191" fg:w="51"/><text x="22.2469%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (118 instructions, 0.50%)</title><rect x="22.1696%" y="133" width="0.4990%" height="15" fill="rgb(229,7,37)" fg:x="5242" fg:w="118"/><text x="22.4626%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.19%)</title><rect x="22.6686%" y="133" width="0.1945%" height="15" fill="rgb(240,195,35)" fg:x="5360" fg:w="46"/><text x="22.9616%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 1.20%)</title><rect x="21.9539%" y="149" width="1.1969%" height="15" fill="rgb(205,166,1)" fg:x="5191" fg:w="283"/><text x="22.2469%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="23.1508%" y="149" width="0.3468%" height="15" fill="rgb(231,118,13)" fg:x="5474" fg:w="82"/><text x="23.4437%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,910 instructions, 8.08%)</title><rect x="16.2064%" y="165" width="8.0778%" height="15" fill="rgb(231,91,6)" fg:x="3832" fg:w="1910"/><text x="16.4994%" y="175.50">binread::..</text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.19%)</title><rect x="24.2842%" y="165" width="0.1945%" height="15" fill="rgb(227,6,21)" fg:x="5742" fg:w="46"/><text x="24.5772%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="24.4787%" y="165" width="0.0634%" height="15" fill="rgb(249,206,15)" fg:x="5788" fg:w="15"/><text x="24.7717%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.03%)</title><rect x="24.5422%" y="165" width="0.0338%" height="15" fill="rgb(222,227,50)" fg:x="5803" fg:w="8"/><text x="24.8352%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="24.5760%" y="149" width="0.3468%" height="15" fill="rgb(241,75,18)" fg:x="5811" fg:w="82"/><text x="24.8690%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.75%)</title><rect x="24.5760%" y="165" width="0.7528%" height="15" fill="rgb(240,38,53)" fg:x="5811" fg:w="178"/><text x="24.8690%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="25.3288%" y="133" width="0.3468%" height="15" fill="rgb(209,116,13)" fg:x="5989" fg:w="82"/><text x="25.6218%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.52%)</title><rect x="25.3288%" y="149" width="0.5202%" height="15" fill="rgb(220,177,6)" fg:x="5989" fg:w="123"/><text x="25.6218%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (210 instructions, 0.89%)</title><rect x="25.3288%" y="165" width="0.8881%" height="15" fill="rgb(212,8,5)" fg:x="5989" fg:w="210"/><text x="25.6218%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="26.2170%" y="165" width="0.3468%" height="15" fill="rgb(214,49,11)" fg:x="6199" fg:w="82"/><text x="26.5099%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.38%)</title><rect x="26.5638%" y="165" width="0.3764%" height="15" fill="rgb(231,125,35)" fg:x="6281" fg:w="89"/><text x="26.8567%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="26.9402%" y="165" width="0.3468%" height="15" fill="rgb(210,55,29)" fg:x="6370" fg:w="82"/><text x="27.2331%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="27.2870%" y="165" width="0.3468%" height="15" fill="rgb(207,93,31)" fg:x="6452" fg:w="82"/><text x="27.5799%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="27.6337%" y="165" width="0.0211%" height="15" fill="rgb(251,12,37)" fg:x="6534" fg:w="5"/><text x="27.9267%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.38%)</title><rect x="27.6549%" y="165" width="0.3764%" height="15" fill="rgb(241,24,5)" fg:x="6539" fg:w="89"/><text x="27.9479%" y="175.50"></text></g><g><title>memcpy (392 instructions, 1.66%)</title><rect x="28.0313%" y="165" width="1.6579%" height="15" fill="rgb(240,102,16)" fg:x="6628" fg:w="392"/><text x="28.3243%" y="175.50"></text></g><g><title>memcpy (392 instructions, 1.66%)</title><rect x="29.6892%" y="165" width="1.6579%" height="15" fill="rgb(249,139,54)" fg:x="7020" fg:w="392"/><text x="29.9821%" y="175.50"></text></g><g><title>memcpy (504 instructions, 2.13%)</title><rect x="31.3470%" y="165" width="2.1315%" height="15" fill="rgb(235,81,15)" fg:x="7412" fg:w="504"/><text x="31.6400%" y="175.50">m..</text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,857 instructions, 33.23%)</title><rect x="5.5107%" y="181" width="33.2290%" height="15" fill="rgb(254,160,1)" fg:x="1303" fg:w="7857"/><text x="5.8036%" y="191.50">candid::de::IDLDeserialize::new_with_config</text></g><g><title>memcpy (408 instructions, 1.73%)</title><rect x="38.7397%" y="181" width="1.7255%" height="15" fill="rgb(251,8,17)" fg:x="9160" fg:w="408"/><text x="39.0327%" y="191.50"></text></g><g><title>memcpy (408 instructions, 1.73%)</title><rect x="40.4652%" y="181" width="1.7255%" height="15" fill="rgb(214,145,15)" fg:x="9568" fg:w="408"/><text x="40.7582%" y="191.50"></text></g><g><title>candid::types::internal::find_type (24 instructions, 0.10%)</title><rect x="42.1907%" y="181" width="0.1015%" height="15" fill="rgb(225,58,34)" fg:x="9976" fg:w="24"/><text x="42.4837%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="42.2922%" y="181" width="0.3468%" height="15" fill="rgb(250,102,34)" fg:x="10000" fg:w="82"/><text x="42.5852%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="42.6390%" y="165" width="0.3468%" height="15" fill="rgb(208,138,6)" fg:x="10082" fg:w="82"/><text x="42.9320%" y="175.50"></text></g><g><title>candid::types::internal::env_add (166 instructions, 0.70%)</title><rect x="42.6390%" y="181" width="0.7021%" height="15" fill="rgb(226,24,51)" fg:x="10082" fg:w="166"/><text x="42.9320%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="43.3411%" y="181" width="0.3468%" height="15" fill="rgb(248,92,2)" fg:x="10248" fg:w="82"/><text x="43.6341%" y="191.50"></text></g><g><title>memcmp (77 instructions, 0.33%)</title><rect x="43.6879%" y="165" width="0.3257%" height="15" fill="rgb(218,24,17)" fg:x="10330" fg:w="77"/><text x="43.9809%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.38%)</title><rect x="44.0135%" y="149" width="0.3764%" height="15" fill="rgb(232,11,5)" fg:x="10407" fg:w="89"/><text x="44.3065%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.68%)</title><rect x="44.0135%" y="165" width="0.6767%" height="15" fill="rgb(219,140,51)" fg:x="10407" fg:w="160"/><text x="44.3065%" y="175.50"></text></g><g><title>candid::types::internal::env_add (416 instructions, 1.76%)</title><rect x="43.6879%" y="181" width="1.7594%" height="15" fill="rgb(250,71,42)" fg:x="10330" fg:w="416"/><text x="43.9809%" y="191.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (49 instructions, 0.21%)</title><rect x="45.4472%" y="165" width="0.2072%" height="15" fill="rgb(219,38,47)" fg:x="10746" fg:w="49"/><text x="45.7402%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.06%)</title><rect x="45.6545%" y="165" width="0.0592%" height="15" fill="rgb(218,117,24)" fg:x="10795" fg:w="14"/><text x="45.9474%" y="175.50"></text></g><g><title>candid::types::internal::env_id (200 instructions, 0.85%)</title><rect x="45.4472%" y="181" width="0.8458%" height="15" fill="rgb(220,60,44)" fg:x="10746" fg:w="200"/><text x="45.7402%" y="191.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.21%)</title><rect x="46.2931%" y="181" width="0.2072%" height="15" fill="rgb(241,74,4)" fg:x="10946" fg:w="49"/><text x="46.5861%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.35%)</title><rect x="46.5003%" y="165" width="0.3510%" height="15" fill="rgb(239,56,52)" fg:x="10995" fg:w="83"/><text x="46.7933%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.10%)</title><rect x="47.1516%" y="149" width="0.0973%" height="15" fill="rgb(213,14,38)" fg:x="11149" fg:w="23"/><text x="47.4446%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.58%)</title><rect x="47.1516%" y="165" width="0.5836%" height="15" fill="rgb(218,11,49)" fg:x="11149" fg:w="138"/><text x="47.4446%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (363 instructions, 1.54%)</title><rect x="46.5003%" y="181" width="1.5352%" height="15" fill="rgb(254,76,12)" fg:x="10995" fg:w="363"/><text x="46.7933%" y="191.50"></text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.16%)</title><rect x="48.0355%" y="165" width="0.1565%" height="15" fill="rgb(249,114,42)" fg:x="11358" fg:w="37"/><text x="48.3285%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1179 (34 instructions, 0.14%)</title><rect x="48.1920%" y="165" width="0.1438%" height="15" fill="rgb(213,56,21)" fg:x="11395" fg:w="34"/><text x="48.4850%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1179 (34 instructions, 0.14%)</title><rect x="48.3358%" y="165" width="0.1438%" height="15" fill="rgb(241,194,8)" fg:x="11429" fg:w="34"/><text x="48.6288%" y="175.50"></text></g><g><title>candid::de::Deserializer::add_cost (31 instructions, 0.13%)</title><rect x="48.4796%" y="165" width="0.1311%" height="15" fill="rgb(233,154,7)" fg:x="11463" fg:w="31"/><text x="48.7726%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (261 instructions, 1.10%)</title><rect x="48.0355%" y="181" width="1.1038%" height="15" fill="rgb(243,39,46)" fg:x="11358" fg:w="261"/><text x="48.3285%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.06%)</title><rect x="49.1394%" y="181" width="0.0592%" height="15" fill="rgb(211,212,43)" fg:x="11619" fg:w="14"/><text x="49.4323%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.06%)</title><rect x="49.1986%" y="181" width="0.0592%" height="15" fill="rgb(247,65,12)" fg:x="11633" fg:w="14"/><text x="49.4915%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.06%)</title><rect x="49.2578%" y="181" width="0.0592%" height="15" fill="rgb(232,111,20)" fg:x="11647" fg:w="14"/><text x="49.5507%" y="191.50"></text></g><g><title>candid::de::IDLDeserialize::done (37 instructions, 0.16%)</title><rect x="49.3170%" y="181" width="0.1565%" height="15" fill="rgb(209,44,10)" fg:x="11661" fg:w="37"/><text x="49.6099%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.03%)</title><rect x="49.4735%" y="165" width="0.0338%" height="15" fill="rgb(227,5,26)" fg:x="11698" fg:w="8"/><text x="49.7664%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="49.5073%" y="149" width="0.1142%" height="15" fill="rgb(223,45,23)" fg:x="11706" fg:w="27"/><text x="49.8003%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="49.6215%" y="149" width="0.1142%" height="15" fill="rgb(227,147,6)" fg:x="11733" fg:w="27"/><text x="49.9145%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.83%)</title><rect x="49.5073%" y="165" width="0.8332%" height="15" fill="rgb(211,173,13)" fg:x="11706" fg:w="197"/><text x="49.8003%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="50.3405%" y="133" width="0.1142%" height="15" fill="rgb(206,82,8)" fg:x="11903" fg:w="27"/><text x="50.6334%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.60%)</title><rect x="50.3405%" y="149" width="0.6005%" height="15" fill="rgb(213,57,8)" fg:x="11903" fg:w="142"/><text x="50.6334%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (213 instructions, 0.90%)</title><rect x="50.3405%" y="165" width="0.9008%" height="15" fill="rgb(228,108,26)" fg:x="11903" fg:w="213"/><text x="50.6334%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.06%)</title><rect x="51.2413%" y="165" width="0.0592%" height="15" fill="rgb(240,4,30)" fg:x="12116" fg:w="14"/><text x="51.5342%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.03%)</title><rect x="51.3005%" y="165" width="0.0338%" height="15" fill="rgb(244,144,9)" fg:x="12130" fg:w="8"/><text x="51.5935%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (530 instructions, 2.24%)</title><rect x="49.4735%" y="181" width="2.2415%" height="15" fill="rgb(228,98,22)" fg:x="11698" fg:w="530"/><text x="49.7664%" y="191.50">c..</text></g><g><title>candid::utils::decode_args_with_config_debug (11,357 instructions, 48.03%)</title><rect x="5.5107%" y="197" width="48.0313%" height="15" fill="rgb(212,23,41)" fg:x="1303" fg:w="11357"/><text x="5.8036%" y="207.50">candid::utils::decode_args_with_config_debug</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="53.5420%" y="181" width="0.1142%" height="15" fill="rgb(237,97,5)" fg:x="12660" fg:w="27"/><text x="53.8349%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.60%)</title><rect x="53.5420%" y="197" width="0.6005%" height="15" fill="rgb(250,54,3)" fg:x="12660" fg:w="142"/><text x="53.8349%" y="207.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,745 instructions, 53.90%)</title><rect x="0.6936%" y="213" width="53.9015%" height="15" fill="rgb(250,6,13)" fg:x="164" fg:w="12745"/><text x="0.9866%" y="223.50">ic_cdk::api::call::arg_data</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.26%)</title><rect x="54.5951%" y="165" width="0.2580%" height="15" fill="rgb(233,127,10)" fg:x="12909" fg:w="61"/><text x="54.8880%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (132 instructions, 0.56%)</title><rect x="54.5951%" y="181" width="0.5583%" height="15" fill="rgb(207,161,51)" fg:x="12909" fg:w="132"/><text x="54.8880%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="55.1533%" y="165" width="0.1142%" height="15" fill="rgb(249,213,13)" fg:x="13041" fg:w="27"/><text x="55.4463%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (116 instructions, 0.49%)</title><rect x="55.1533%" y="181" width="0.4906%" height="15" fill="rgb(220,73,31)" fg:x="13041" fg:w="116"/><text x="55.4463%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::new (424 instructions, 1.79%)</title><rect x="54.5951%" y="197" width="1.7932%" height="15" fill="rgb(254,67,31)" fg:x="12909" fg:w="424"/><text x="54.8880%" y="207.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 2.19%)</title><rect x="56.3882%" y="181" width="2.1907%" height="15" fill="rgb(227,72,45)" fg:x="13333" fg:w="518"/><text x="56.6812%" y="191.50">s..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="58.5790%" y="133" width="0.3468%" height="15" fill="rgb(206,28,25)" fg:x="13851" fg:w="82"/><text x="58.8719%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.52%)</title><rect x="58.5790%" y="149" width="0.5202%" height="15" fill="rgb(233,148,16)" fg:x="13851" fg:w="123"/><text x="58.8719%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 0.87%)</title><rect x="58.5790%" y="165" width="0.8712%" height="15" fill="rgb(226,210,21)" fg:x="13851" fg:w="206"/><text x="58.8719%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="59.4502%" y="165" width="0.0634%" height="15" fill="rgb(244,104,34)" fg:x="14057" fg:w="15"/><text x="59.7432%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="59.5136%" y="165" width="0.0634%" height="15" fill="rgb(240,64,7)" fg:x="14072" fg:w="15"/><text x="59.8066%" y="175.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 1.81%)</title><rect x="58.5790%" y="181" width="1.8101%" height="15" fill="rgb(250,217,40)" fg:x="13851" fg:w="428"/><text x="58.8719%" y="191.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 2.18%)</title><rect x="60.3891%" y="181" width="2.1823%" height="15" fill="rgb(229,25,52)" fg:x="14279" fg:w="516"/><text x="60.6821%" y="191.50">s..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.03%)</title><rect x="62.5714%" y="181" width="0.0296%" height="15" fill="rgb(230,89,27)" fg:x="14795" fg:w="7"/><text x="62.8643%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,546 instructions, 6.54%)</title><rect x="56.3882%" y="197" width="6.5384%" height="15" fill="rgb(252,135,8)" fg:x="13333" fg:w="1546"/><text x="56.6812%" y="207.50">candid:..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.03%)</title><rect x="62.9266%" y="197" width="0.0338%" height="15" fill="rgb(205,14,0)" fg:x="14879" fg:w="8"/><text x="63.2196%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.03%)</title><rect x="62.9605%" y="197" width="0.0338%" height="15" fill="rgb(234,48,31)" fg:x="14887" fg:w="8"/><text x="63.2534%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.26%)</title><rect x="62.9943%" y="197" width="0.2580%" height="15" fill="rgb(249,182,31)" fg:x="14895" fg:w="61"/><text x="63.2873%" y="207.50"></text></g><g><title>ic_cdk::api::call::reply (2,680 instructions, 11.33%)</title><rect x="54.5951%" y="213" width="11.3343%" height="15" fill="rgb(211,181,17)" fg:x="12909" fg:w="2680"/><text x="54.8880%" y="223.50">ic_cdk::api::c..</text></g><g><title>hashmap::__canister_method_batch_remove::{{closure}} (23,047 instructions, 97.47%)</title><rect x="0.6936%" y="229" width="97.4709%" height="15" fill="rgb(244,193,19)" fg:x="164" fg:w="23047"/><text x="0.9866%" y="239.50">hashmap::__canister_method_batch_remove::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (15 instructions, 0.06%)</title><rect x="98.1645%" y="229" width="0.0634%" height="15" fill="rgb(228,73,52)" fg:x="23211" fg:w="15"/><text x="98.4575%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="98.6086%" y="197" width="0.1142%" height="15" fill="rgb(248,186,53)" fg:x="23316" fg:w="27"/><text x="98.9016%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (205 instructions, 0.87%)</title><rect x="98.2322%" y="213" width="0.8670%" height="15" fill="rgb(233,218,25)" fg:x="23227" fg:w="205"/><text x="98.5252%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (323 instructions, 1.37%)</title><rect x="98.2280%" y="229" width="1.3660%" height="15" fill="rgb(253,171,44)" fg:x="23226" fg:w="323"/><text x="98.5209%" y="239.50"></text></g><g><title>all (23,645 instructions, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(241,157,48)" fg:x="0" fg:w="23645"/><text x="0.2930%" y="271.50"></text></g><g><title>canister_update batch_remove (23,645 instructions, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(250,126,12)" fg:x="0" fg:w="23645"/><text x="0.2930%" y="255.50">canister_update batch_remove</text></g></svg></svg>