<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="17239"><g><title>ic_cdk::setup (19 instructions, 0.11%)</title><rect x="0.0000%" y="197" width="0.1102%" height="15" fill="rgb(215,75,42)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="0.1102%" y="197" width="0.4409%" height="15" fill="rgb(236,31,38)" fg:x="19" fg:w="76"/><text x="0.4032%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="0.5511%" y="197" width="0.4409%" height="15" fill="rgb(223,187,49)" fg:x="95" fg:w="76"/><text x="0.8440%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="0.9919%" y="165" width="0.4409%" height="15" fill="rgb(249,71,22)" fg:x="171" fg:w="76"/><text x="1.2849%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.41%)</title><rect x="1.4328%" y="149" width="0.4119%" height="15" fill="rgb(219,196,16)" fg:x="247" fg:w="71"/><text x="1.7258%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.8447%" y="133" width="0.0232%" height="15" fill="rgb(218,147,24)" fg:x="318" fg:w="4"/><text x="2.1376%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.32%)</title><rect x="1.8447%" y="149" width="2.3203%" height="15" fill="rgb(224,186,17)" fg:x="318" fg:w="400"/><text x="2.1376%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.49%)</title><rect x="4.1650%" y="149" width="0.4931%" height="15" fill="rgb(215,225,53)" fg:x="718" fg:w="85"/><text x="4.4579%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.31%)</title><rect x="4.6580%" y="149" width="0.3132%" height="15" fill="rgb(230,159,29)" fg:x="803" fg:w="54"/><text x="4.9510%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.31%)</title><rect x="4.9713%" y="149" width="0.3132%" height="15" fill="rgb(230,139,21)" fg:x="857" fg:w="54"/><text x="5.2643%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.31%)</title><rect x="5.2845%" y="149" width="0.3132%" height="15" fill="rgb(253,107,13)" fg:x="911" fg:w="54"/><text x="5.5775%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.31%)</title><rect x="5.5978%" y="149" width="0.3132%" height="15" fill="rgb(222,116,4)" fg:x="965" fg:w="54"/><text x="5.8907%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.41%)</title><rect x="5.9110%" y="149" width="0.4119%" height="15" fill="rgb(216,210,12)" fg:x="1019" fg:w="71"/><text x="6.2040%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.38%)</title><rect x="6.3229%" y="149" width="0.3771%" height="15" fill="rgb(240,165,28)" fg:x="1090" fg:w="65"/><text x="6.6158%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="6.6999%" y="133" width="0.0232%" height="15" fill="rgb(230,13,44)" fg:x="1155" fg:w="4"/><text x="6.9929%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.32%)</title><rect x="6.6999%" y="149" width="2.3203%" height="15" fill="rgb(221,228,42)" fg:x="1155" fg:w="400"/><text x="6.9929%" y="159.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="9.0202%" y="149" width="0.0928%" height="15" fill="rgb(227,29,42)" fg:x="1555" fg:w="16"/><text x="9.3132%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="9.1131%" y="133" width="0.4409%" height="15" fill="rgb(235,35,32)" fg:x="1571" fg:w="76"/><text x="9.4060%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.35%)</title><rect x="9.5539%" y="101" width="0.3480%" height="15" fill="rgb(211,111,26)" fg:x="1647" fg:w="60"/><text x="9.8469%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.49%)</title><rect x="9.5539%" y="117" width="0.4931%" height="15" fill="rgb(249,60,26)" fg:x="1647" fg:w="85"/><text x="9.8469%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="10.0470%" y="69" width="0.0522%" height="15" fill="rgb(242,124,51)" fg:x="1732" fg:w="9"/><text x="10.3400%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.17%)</title><rect x="10.0992%" y="53" width="0.1740%" height="15" fill="rgb(229,23,27)" fg:x="1741" fg:w="30"/><text x="10.3922%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.32%)</title><rect x="10.0992%" y="69" width="0.3190%" height="15" fill="rgb(214,53,49)" fg:x="1741" fg:w="55"/><text x="10.3922%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.68%)</title><rect x="10.0470%" y="85" width="0.6845%" height="15" fill="rgb(210,27,39)" fg:x="1732" fg:w="118"/><text x="10.3400%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.99%)</title><rect x="10.0470%" y="101" width="0.9919%" height="15" fill="rgb(247,107,30)" fg:x="1732" fg:w="171"/><text x="10.3400%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 1.02%)</title><rect x="10.0470%" y="117" width="1.0209%" height="15" fill="rgb(236,6,45)" fg:x="1732" fg:w="176"/><text x="10.3400%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 2.16%)</title><rect x="9.5539%" y="133" width="2.1579%" height="15" fill="rgb(234,107,1)" fg:x="1647" fg:w="372"/><text x="9.8469%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 3.45%)</title><rect x="9.1131%" y="149" width="3.4457%" height="15" fill="rgb(253,103,26)" fg:x="1571" fg:w="594"/><text x="9.4060%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.49%)</title><rect x="12.5587%" y="149" width="0.4931%" height="15" fill="rgb(220,18,18)" fg:x="2165" fg:w="85"/><text x="12.8517%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.32%)</title><rect x="13.0518%" y="149" width="0.3190%" height="15" fill="rgb(218,145,48)" fg:x="2250" fg:w="55"/><text x="13.3448%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.38%)</title><rect x="13.3708%" y="149" width="0.3829%" height="15" fill="rgb(208,93,54)" fg:x="2305" fg:w="66"/><text x="13.6638%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.38%)</title><rect x="13.7537%" y="149" width="0.3771%" height="15" fill="rgb(254,131,9)" fg:x="2371" fg:w="65"/><text x="14.0467%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="14.1308%" y="117" width="0.0232%" height="15" fill="rgb(209,14,42)" fg:x="2436" fg:w="4"/><text x="14.4237%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.32%)</title><rect x="14.1308%" y="133" width="2.3203%" height="15" fill="rgb(225,29,9)" fg:x="2436" fg:w="400"/><text x="14.4237%" y="143.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="16.4511%" y="133" width="0.0928%" height="15" fill="rgb(206,157,19)" fg:x="2836" fg:w="16"/><text x="16.7440%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="16.5439%" y="117" width="0.4409%" height="15" fill="rgb(227,105,41)" fg:x="2852" fg:w="76"/><text x="16.8369%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.35%)</title><rect x="16.9847%" y="85" width="0.3480%" height="15" fill="rgb(219,148,7)" fg:x="2928" fg:w="60"/><text x="17.2777%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.49%)</title><rect x="16.9847%" y="101" width="0.4931%" height="15" fill="rgb(211,114,48)" fg:x="2928" fg:w="85"/><text x="17.2777%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="17.4778%" y="53" width="0.0522%" height="15" fill="rgb(225,180,54)" fg:x="3013" fg:w="9"/><text x="17.7708%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.17%)</title><rect x="17.5300%" y="37" width="0.1740%" height="15" fill="rgb(222,90,3)" fg:x="3022" fg:w="30"/><text x="17.8230%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.32%)</title><rect x="17.5300%" y="53" width="0.3190%" height="15" fill="rgb(223,167,30)" fg:x="3022" fg:w="55"/><text x="17.8230%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.68%)</title><rect x="17.4778%" y="69" width="0.6845%" height="15" fill="rgb(235,193,24)" fg:x="3013" fg:w="118"/><text x="17.7708%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.99%)</title><rect x="17.4778%" y="85" width="0.9919%" height="15" fill="rgb(211,14,52)" fg:x="3013" fg:w="171"/><text x="17.7708%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 1.02%)</title><rect x="17.4778%" y="101" width="1.0209%" height="15" fill="rgb(231,186,21)" fg:x="3013" fg:w="176"/><text x="17.7708%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 2.16%)</title><rect x="16.9847%" y="117" width="2.1579%" height="15" fill="rgb(205,47,1)" fg:x="2928" fg:w="372"/><text x="17.2777%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 3.45%)</title><rect x="16.5439%" y="133" width="3.4457%" height="15" fill="rgb(230,61,53)" fg:x="2852" fg:w="594"/><text x="16.8369%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.49%)</title><rect x="19.9896%" y="133" width="0.4931%" height="15" fill="rgb(209,183,23)" fg:x="3446" fg:w="85"/><text x="20.2825%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.32%)</title><rect x="20.4826%" y="133" width="0.3190%" height="15" fill="rgb(248,88,9)" fg:x="3531" fg:w="55"/><text x="20.7756%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.41%)</title><rect x="20.8017%" y="117" width="0.4119%" height="15" fill="rgb(221,70,19)" fg:x="3586" fg:w="71"/><text x="21.0946%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.53%)</title><rect x="21.2135%" y="117" width="0.5279%" height="15" fill="rgb(218,151,52)" fg:x="3657" fg:w="91"/><text x="21.5065%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.38%)</title><rect x="21.7414%" y="117" width="0.3829%" height="15" fill="rgb(228,180,19)" fg:x="3748" fg:w="66"/><text x="22.0344%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (287 instructions, 1.66%)</title><rect x="20.8017%" y="133" width="1.6648%" height="15" fill="rgb(208,23,43)" fg:x="3586" fg:w="287"/><text x="21.0946%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (79 instructions, 0.46%)</title><rect x="22.4665%" y="133" width="0.4583%" height="15" fill="rgb(215,128,43)" fg:x="3873" fg:w="79"/><text x="22.7595%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,717 instructions, 9.96%)</title><rect x="14.1308%" y="149" width="9.9600%" height="15" fill="rgb(233,171,21)" fg:x="2436" fg:w="1717"/><text x="14.4237%" y="159.50">binread::bin..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.38%)</title><rect x="24.0907%" y="149" width="0.3829%" height="15" fill="rgb(214,214,36)" fg:x="4153" fg:w="66"/><text x="24.3837%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.08%)</title><rect x="24.4736%" y="149" width="0.0754%" height="15" fill="rgb(217,220,30)" fg:x="4219" fg:w="13"/><text x="24.7665%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.08%)</title><rect x="24.5490%" y="149" width="0.0754%" height="15" fill="rgb(216,124,14)" fg:x="4232" fg:w="13"/><text x="24.8420%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.04%)</title><rect x="24.6244%" y="149" width="0.0406%" height="15" fill="rgb(245,192,13)" fg:x="4245" fg:w="7"/><text x="24.9174%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.09%)</title><rect x="24.6650%" y="149" width="0.0870%" height="15" fill="rgb(248,182,10)" fg:x="4252" fg:w="15"/><text x="24.9580%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="24.7520%" y="133" width="0.4409%" height="15" fill="rgb(217,168,3)" fg:x="4267" fg:w="76"/><text x="25.0450%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.92%)</title><rect x="24.7520%" y="149" width="0.9223%" height="15" fill="rgb(235,99,1)" fg:x="4267" fg:w="159"/><text x="25.0450%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="25.6743%" y="117" width="0.4409%" height="15" fill="rgb(240,129,0)" fg:x="4426" fg:w="76"/><text x="25.9673%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.64%)</title><rect x="25.6743%" y="133" width="0.6439%" height="15" fill="rgb(237,124,22)" fg:x="4426" fg:w="111"/><text x="25.9673%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (179 instructions, 1.04%)</title><rect x="25.6743%" y="149" width="1.0383%" height="15" fill="rgb(233,79,48)" fg:x="4426" fg:w="179"/><text x="25.9673%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="26.7127%" y="149" width="0.4409%" height="15" fill="rgb(231,145,7)" fg:x="4605" fg:w="76"/><text x="27.0057%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.47%)</title><rect x="27.1535%" y="149" width="0.4699%" height="15" fill="rgb(229,77,30)" fg:x="4681" fg:w="81"/><text x="27.4465%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="27.6234%" y="149" width="0.4409%" height="15" fill="rgb(206,123,36)" fg:x="4762" fg:w="76"/><text x="27.9164%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="28.0643%" y="149" width="0.4409%" height="15" fill="rgb(250,17,8)" fg:x="4838" fg:w="76"/><text x="28.3572%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 instructions, 0.01%)</title><rect x="28.5051%" y="149" width="0.0116%" height="15" fill="rgb(216,176,31)" fg:x="4914" fg:w="2"/><text x="28.7981%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.47%)</title><rect x="28.5167%" y="149" width="0.4699%" height="15" fill="rgb(245,136,50)" fg:x="4916" fg:w="81"/><text x="28.8097%" y="159.50"></text></g><g><title>memcpy (381 instructions, 2.21%)</title><rect x="28.9866%" y="149" width="2.2101%" height="15" fill="rgb(253,81,31)" fg:x="4997" fg:w="381"/><text x="29.2796%" y="159.50">m..</text></g><g><title>memcpy (381 instructions, 2.21%)</title><rect x="31.1967%" y="149" width="2.2101%" height="15" fill="rgb(224,120,10)" fg:x="5378" fg:w="381"/><text x="31.4897%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new (6,427 instructions, 37.28%)</title><rect x="1.4328%" y="165" width="37.2817%" height="15" fill="rgb(207,82,37)" fg:x="247" fg:w="6427"/><text x="1.7258%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (336 instructions, 1.95%)</title><rect x="38.7145%" y="165" width="1.9491%" height="15" fill="rgb(231,69,18)" fg:x="6674" fg:w="336"/><text x="39.0075%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="40.6636%" y="133" width="0.0290%" height="15" fill="rgb(254,181,53)" fg:x="7010" fg:w="5"/><text x="40.9566%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.23%)</title><rect x="40.6636%" y="149" width="0.2262%" height="15" fill="rgb(220,114,50)" fg:x="7010" fg:w="39"/><text x="40.9566%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="40.8898%" y="149" width="0.4409%" height="15" fill="rgb(227,66,17)" fg:x="7049" fg:w="76"/><text x="41.1828%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="41.3307%" y="133" width="0.0290%" height="15" fill="rgb(215,160,0)" fg:x="7125" fg:w="5"/><text x="41.6237%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="41.3597%" y="117" width="0.3074%" height="15" fill="rgb(207,65,54)" fg:x="7130" fg:w="53"/><text x="41.6527%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.52%)</title><rect x="41.6672%" y="117" width="0.5163%" height="15" fill="rgb(216,157,45)" fg:x="7183" fg:w="89"/><text x="41.9601%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.93%)</title><rect x="42.1834%" y="117" width="0.9339%" height="15" fill="rgb(233,109,47)" fg:x="7272" fg:w="161"/><text x="42.4764%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.13%)</title><rect x="41.3597%" y="133" width="3.1324%" height="15" fill="rgb(212,226,18)" fg:x="7130" fg:w="540"/><text x="41.6527%" y="143.50">co..</text></g><g><title>candid::types::internal::env_add (755 instructions, 4.38%)</title><rect x="41.3307%" y="149" width="4.3796%" height="15" fill="rgb(228,218,43)" fg:x="7125" fg:w="755"/><text x="41.6237%" y="159.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="45.7103%" y="149" width="0.4409%" height="15" fill="rgb(248,129,9)" fg:x="7880" fg:w="76"/><text x="46.0033%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="46.1512%" y="133" width="0.0290%" height="15" fill="rgb(221,192,30)" fg:x="7956" fg:w="5"/><text x="46.4441%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="46.1802%" y="117" width="0.3074%" height="15" fill="rgb(207,126,12)" fg:x="7961" fg:w="53"/><text x="46.4731%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.52%)</title><rect x="46.4876%" y="117" width="0.5163%" height="15" fill="rgb(210,93,9)" fg:x="8014" fg:w="89"/><text x="46.7806%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.93%)</title><rect x="47.0039%" y="117" width="0.9339%" height="15" fill="rgb(250,36,10)" fg:x="8103" fg:w="161"/><text x="47.2969%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.13%)</title><rect x="46.1802%" y="133" width="3.1324%" height="15" fill="rgb(220,101,47)" fg:x="7961" fg:w="540"/><text x="46.4731%" y="143.50">co..</text></g><g><title>memcmp (68 instructions, 0.39%)</title><rect x="49.3126%" y="133" width="0.3945%" height="15" fill="rgb(212,82,7)" fg:x="8501" fg:w="68"/><text x="49.6056%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.47%)</title><rect x="49.7071%" y="117" width="0.4699%" height="15" fill="rgb(245,228,51)" fg:x="8569" fg:w="81"/><text x="50.0000%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.63%)</title><rect x="49.7071%" y="133" width="0.6265%" height="15" fill="rgb(206,124,31)" fg:x="8569" fg:w="108"/><text x="50.0000%" y="143.50"></text></g><g><title>candid::types::internal::env_add (889 instructions, 5.16%)</title><rect x="46.1512%" y="149" width="5.1569%" height="15" fill="rgb(221,206,26)" fg:x="7956" fg:w="889"/><text x="46.4441%" y="159.50">candi..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="51.3081%" y="101" width="0.3074%" height="15" fill="rgb(210,57,4)" fg:x="8845" fg:w="53"/><text x="51.6010%" y="111.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.46%)</title><rect x="51.3081%" y="117" width="0.4583%" height="15" fill="rgb(231,70,32)" fg:x="8845" fg:w="79"/><text x="51.6010%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 1.69%)</title><rect x="51.3081%" y="133" width="1.6938%" height="15" fill="rgb(232,173,16)" fg:x="8845" fg:w="292"/><text x="51.6010%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.174 (15 instructions, 0.09%)</title><rect x="53.0019%" y="133" width="0.0870%" height="15" fill="rgb(238,199,11)" fg:x="9137" fg:w="15"/><text x="53.2949%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="53.0889%" y="133" width="0.0638%" height="15" fill="rgb(239,112,54)" fg:x="9152" fg:w="11"/><text x="53.3819%" y="143.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 2.77%)</title><rect x="51.3081%" y="149" width="2.7728%" height="15" fill="rgb(238,179,24)" fg:x="8845" fg:w="478"/><text x="51.6010%" y="159.50">ca..</text></g><g><title>candid::types::CandidType::ty (2,420 instructions, 14.04%)</title><rect x="40.6636%" y="165" width="14.0379%" height="15" fill="rgb(216,121,50)" fg:x="7010" fg:w="2420"/><text x="40.9566%" y="175.50">candid::types::Can..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.19%)</title><rect x="54.7015%" y="149" width="0.1914%" height="15" fill="rgb(223,192,10)" fg:x="9430" fg:w="33"/><text x="54.9945%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.71%)</title><rect x="54.8930%" y="133" width="0.7135%" height="15" fill="rgb(209,196,51)" fg:x="9463" fg:w="123"/><text x="55.1859%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.71%)</title><rect x="55.7631%" y="133" width="0.7135%" height="15" fill="rgb(247,209,28)" fg:x="9613" fg:w="123"/><text x="56.0561%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 1.74%)</title><rect x="54.8930%" y="149" width="1.7402%" height="15" fill="rgb(220,9,17)" fg:x="9463" fg:w="300"/><text x="55.1859%" y="159.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.16%)</title><rect x="56.6332%" y="133" width="0.1624%" height="15" fill="rgb(207,165,42)" fg:x="9763" fg:w="28"/><text x="56.9262%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1687 (15 instructions, 0.09%)</title><rect x="56.7956%" y="133" width="0.0870%" height="15" fill="rgb(237,193,52)" fg:x="9791" fg:w="15"/><text x="57.0886%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1687 (15 instructions, 0.09%)</title><rect x="56.8826%" y="133" width="0.0870%" height="15" fill="rgb(212,173,29)" fg:x="9806" fg:w="15"/><text x="57.1756%" y="143.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (133 instructions, 0.77%)</title><rect x="56.6332%" y="149" width="0.7715%" height="15" fill="rgb(247,85,41)" fg:x="9763" fg:w="133"/><text x="56.9262%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="57.4047%" y="149" width="0.0638%" height="15" fill="rgb(240,66,40)" fg:x="9896" fg:w="11"/><text x="57.6977%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="57.4685%" y="149" width="0.0638%" height="15" fill="rgb(252,25,38)" fg:x="9907" fg:w="11"/><text x="57.7615%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="57.5323%" y="149" width="0.0638%" height="15" fill="rgb(242,82,34)" fg:x="9918" fg:w="11"/><text x="57.8253%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::deserialize_with_type (665 instructions, 3.86%)</title><rect x="54.7015%" y="165" width="3.8575%" height="15" fill="rgb(237,213,8)" fg:x="9430" fg:w="665"/><text x="54.9945%" y="175.50">can..</text></g><g><title>memcpy (411 instructions, 2.38%)</title><rect x="58.5591%" y="165" width="2.3841%" height="15" fill="rgb(247,25,16)" fg:x="10095" fg:w="411"/><text x="58.8520%" y="175.50">m..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.07%)</title><rect x="60.9432%" y="133" width="0.0696%" height="15" fill="rgb(235,218,38)" fg:x="10506" fg:w="12"/><text x="61.2362%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.97%)</title><rect x="61.0128%" y="133" width="0.9745%" height="15" fill="rgb(243,120,37)" fg:x="10518" fg:w="168"/><text x="61.3058%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.37%)</title><rect x="61.9874%" y="101" width="0.3655%" height="15" fill="rgb(234,101,30)" fg:x="10686" fg:w="63"/><text x="62.2803%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (164 instructions, 0.95%)</title><rect x="61.9874%" y="117" width="0.9513%" height="15" fill="rgb(247,188,29)" fg:x="10686" fg:w="164"/><text x="62.2803%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (191 instructions, 1.11%)</title><rect x="61.9874%" y="133" width="1.1080%" height="15" fill="rgb(209,43,23)" fg:x="10686" fg:w="191"/><text x="62.2803%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="63.0953%" y="133" width="0.0638%" height="15" fill="rgb(246,109,40)" fg:x="10877" fg:w="11"/><text x="63.3883%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (424 instructions, 2.46%)</title><rect x="60.9432%" y="149" width="2.4595%" height="15" fill="rgb(250,51,46)" fg:x="10506" fg:w="424"/><text x="61.2362%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (458 instructions, 2.66%)</title><rect x="60.9432%" y="165" width="2.6568%" height="15" fill="rgb(237,137,32)" fg:x="10506" fg:w="458"/><text x="61.2362%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.32%)</title><rect x="63.6000%" y="149" width="0.3190%" height="15" fill="rgb(216,125,20)" fg:x="10964" fg:w="55"/><text x="63.8929%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.37%)</title><rect x="63.9190%" y="149" width="0.3655%" height="15" fill="rgb(209,199,10)" fg:x="11019" fg:w="63"/><text x="64.2120%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (200 instructions, 1.16%)</title><rect x="63.6000%" y="165" width="1.1602%" height="15" fill="rgb(235,74,4)" fg:x="10964" fg:w="200"/><text x="63.8929%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,150 instructions, 64.68%)</title><rect x="0.9919%" y="181" width="64.6789%" height="15" fill="rgb(221,201,35)" fg:x="171" fg:w="11150"/><text x="1.2849%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="65.6709%" y="181" width="0.3364%" height="15" fill="rgb(232,133,19)" fg:x="11321" fg:w="58"/><text x="65.9638%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (98 instructions, 0.57%)</title><rect x="66.0073%" y="181" width="0.5685%" height="15" fill="rgb(212,166,10)" fg:x="11379" fg:w="98"/><text x="66.3003%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="66.5758%" y="181" width="0.3364%" height="15" fill="rgb(216,175,41)" fg:x="11477" fg:w="58"/><text x="66.8688%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="66.9122%" y="181" width="0.3364%" height="15" fill="rgb(225,21,5)" fg:x="11535" fg:w="58"/><text x="67.2052%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="67.2487%" y="181" width="0.3364%" height="15" fill="rgb(235,104,3)" fg:x="11593" fg:w="58"/><text x="67.5416%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="67.5851%" y="181" width="0.3364%" height="15" fill="rgb(230,184,45)" fg:x="11651" fg:w="58"/><text x="67.8781%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="67.9216%" y="181" width="0.3364%" height="15" fill="rgb(233,21,46)" fg:x="11709" fg:w="58"/><text x="68.2145%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="68.2580%" y="181" width="0.3364%" height="15" fill="rgb(221,55,17)" fg:x="11767" fg:w="58"/><text x="68.5510%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="68.5945%" y="181" width="0.3364%" height="15" fill="rgb(239,130,24)" fg:x="11825" fg:w="58"/><text x="68.8874%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="68.9309%" y="181" width="0.3364%" height="15" fill="rgb(238,30,35)" fg:x="11883" fg:w="58"/><text x="69.2239%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="69.2674%" y="181" width="0.3364%" height="15" fill="rgb(221,55,0)" fg:x="11941" fg:w="58"/><text x="69.5603%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (98 instructions, 0.57%)</title><rect x="69.6038%" y="181" width="0.5685%" height="15" fill="rgb(225,226,5)" fg:x="11999" fg:w="98"/><text x="69.8968%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="70.1723%" y="181" width="0.3364%" height="15" fill="rgb(209,86,10)" fg:x="12097" fg:w="58"/><text x="70.4653%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="70.5087%" y="181" width="0.3364%" height="15" fill="rgb(205,133,0)" fg:x="12155" fg:w="58"/><text x="70.8017%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="70.8452%" y="181" width="0.3364%" height="15" fill="rgb(235,41,36)" fg:x="12213" fg:w="58"/><text x="71.1381%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="71.1816%" y="181" width="0.3364%" height="15" fill="rgb(216,103,31)" fg:x="12271" fg:w="58"/><text x="71.4746%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="71.5181%" y="181" width="0.3364%" height="15" fill="rgb(206,117,52)" fg:x="12329" fg:w="58"/><text x="71.8110%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="71.8545%" y="181" width="0.3364%" height="15" fill="rgb(231,55,2)" fg:x="12387" fg:w="58"/><text x="72.1475%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="72.1910%" y="181" width="0.3364%" height="15" fill="rgb(234,157,41)" fg:x="12445" fg:w="58"/><text x="72.4839%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="72.5274%" y="181" width="0.3364%" height="15" fill="rgb(240,32,45)" fg:x="12503" fg:w="58"/><text x="72.8204%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="72.8639%" y="181" width="0.3364%" height="15" fill="rgb(237,29,43)" fg:x="12561" fg:w="58"/><text x="73.1568%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="73.2003%" y="181" width="0.3364%" height="15" fill="rgb(219,187,27)" fg:x="12619" fg:w="58"/><text x="73.4933%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="73.5367%" y="181" width="0.3364%" height="15" fill="rgb(232,184,20)" fg:x="12677" fg:w="58"/><text x="73.8297%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="73.8732%" y="181" width="0.3364%" height="15" fill="rgb(206,148,45)" fg:x="12735" fg:w="58"/><text x="74.1662%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="74.2096%" y="181" width="0.3364%" height="15" fill="rgb(212,1,38)" fg:x="12793" fg:w="58"/><text x="74.5026%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="74.5461%" y="181" width="0.3364%" height="15" fill="rgb(225,185,0)" fg:x="12851" fg:w="58"/><text x="74.8391%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="74.8825%" y="181" width="0.3364%" height="15" fill="rgb(245,1,20)" fg:x="12909" fg:w="58"/><text x="75.1755%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="75.2190%" y="181" width="0.3364%" height="15" fill="rgb(228,140,24)" fg:x="12967" fg:w="58"/><text x="75.5119%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="75.5554%" y="181" width="0.3364%" height="15" fill="rgb(237,162,39)" fg:x="13025" fg:w="58"/><text x="75.8484%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="75.8919%" y="181" width="0.3364%" height="15" fill="rgb(244,150,48)" fg:x="13083" fg:w="58"/><text x="76.1848%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="76.2283%" y="181" width="0.3364%" height="15" fill="rgb(205,15,25)" fg:x="13141" fg:w="58"/><text x="76.5213%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="76.5648%" y="181" width="0.3364%" height="15" fill="rgb(227,150,35)" fg:x="13199" fg:w="58"/><text x="76.8577%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="76.9012%" y="181" width="0.3364%" height="15" fill="rgb(229,143,43)" fg:x="13257" fg:w="58"/><text x="77.1942%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="77.2377%" y="181" width="0.3364%" height="15" fill="rgb(240,196,54)" fg:x="13315" fg:w="58"/><text x="77.5306%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (98 instructions, 0.57%)</title><rect x="77.5741%" y="181" width="0.5685%" height="15" fill="rgb(253,45,1)" fg:x="13373" fg:w="98"/><text x="77.8671%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="78.1426%" y="181" width="0.3364%" height="15" fill="rgb(236,7,21)" fg:x="13471" fg:w="58"/><text x="78.4356%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="78.4790%" y="181" width="0.3364%" height="15" fill="rgb(212,9,35)" fg:x="13529" fg:w="58"/><text x="78.7720%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="78.8155%" y="181" width="0.3364%" height="15" fill="rgb(250,224,43)" fg:x="13587" fg:w="58"/><text x="79.1084%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="79.1519%" y="181" width="0.3364%" height="15" fill="rgb(247,120,39)" fg:x="13645" fg:w="58"/><text x="79.4449%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (98 instructions, 0.57%)</title><rect x="79.4884%" y="181" width="0.5685%" height="15" fill="rgb(222,21,15)" fg:x="13703" fg:w="98"/><text x="79.7813%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (98 instructions, 0.57%)</title><rect x="80.0568%" y="181" width="0.5685%" height="15" fill="rgb(236,24,51)" fg:x="13801" fg:w="98"/><text x="80.3498%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="80.6253%" y="181" width="0.3364%" height="15" fill="rgb(247,98,52)" fg:x="13899" fg:w="58"/><text x="80.9183%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="80.9618%" y="181" width="0.3364%" height="15" fill="rgb(210,114,54)" fg:x="13957" fg:w="58"/><text x="81.2547%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="81.2982%" y="181" width="0.3364%" height="15" fill="rgb(210,4,30)" fg:x="14015" fg:w="58"/><text x="81.5912%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="81.6347%" y="181" width="0.3364%" height="15" fill="rgb(218,42,39)" fg:x="14073" fg:w="58"/><text x="81.9276%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="81.9711%" y="181" width="0.3364%" height="15" fill="rgb(233,142,48)" fg:x="14131" fg:w="58"/><text x="82.2641%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="82.3076%" y="181" width="0.3364%" height="15" fill="rgb(220,151,11)" fg:x="14189" fg:w="58"/><text x="82.6005%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="82.6440%" y="181" width="0.3364%" height="15" fill="rgb(242,117,4)" fg:x="14247" fg:w="58"/><text x="82.9370%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="82.9805%" y="181" width="0.3364%" height="15" fill="rgb(216,11,48)" fg:x="14305" fg:w="58"/><text x="83.2734%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (58 instructions, 0.34%)</title><rect x="83.3169%" y="181" width="0.3364%" height="15" fill="rgb(243,221,39)" fg:x="14363" fg:w="58"/><text x="83.6099%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="83.6533%" y="149" width="0.0290%" height="15" fill="rgb(212,225,28)" fg:x="14421" fg:w="5"/><text x="83.9463%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (55 instructions, 0.32%)</title><rect x="83.6823%" y="117" width="0.3190%" height="15" fill="rgb(245,142,19)" fg:x="14426" fg:w="55"/><text x="83.9753%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (136 instructions, 0.79%)</title><rect x="83.6823%" y="133" width="0.7889%" height="15" fill="rgb(239,155,12)" fg:x="14426" fg:w="136"/><text x="83.9753%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (163 instructions, 0.95%)</title><rect x="83.6823%" y="149" width="0.9455%" height="15" fill="rgb(249,130,32)" fg:x="14426" fg:w="163"/><text x="83.9753%" y="159.50"></text></g><g><title>memset (136 instructions, 0.79%)</title><rect x="84.6279%" y="149" width="0.7889%" height="15" fill="rgb(252,26,13)" fg:x="14589" fg:w="136"/><text x="84.9208%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (463 instructions, 2.69%)</title><rect x="83.6533%" y="165" width="2.6858%" height="15" fill="rgb(243,83,19)" fg:x="14421" fg:w="463"/><text x="83.9463%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.19%)</title><rect x="86.3391%" y="149" width="0.1856%" height="15" fill="rgb(221,28,3)" fg:x="14884" fg:w="32"/><text x="86.6321%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="86.5247%" y="117" width="0.4409%" height="15" fill="rgb(224,188,42)" fg:x="14916" fg:w="76"/><text x="86.8177%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.64%)</title><rect x="86.5247%" y="133" width="0.6439%" height="15" fill="rgb(236,18,52)" fg:x="14916" fg:w="111"/><text x="86.8177%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (176 instructions, 1.02%)</title><rect x="86.5247%" y="149" width="1.0209%" height="15" fill="rgb(222,140,7)" fg:x="14916" fg:w="176"/><text x="86.8177%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="87.5457%" y="149" width="0.0638%" height="15" fill="rgb(245,48,13)" fg:x="15092" fg:w="11"/><text x="87.8387%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="87.6095%" y="149" width="0.0638%" height="15" fill="rgb(250,109,45)" fg:x="15103" fg:w="11"/><text x="87.9025%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.17%)</title><rect x="87.6733%" y="149" width="0.1740%" height="15" fill="rgb(207,185,52)" fg:x="15114" fg:w="30"/><text x="87.9663%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.03%)</title><rect x="87.8473%" y="149" width="0.0290%" height="15" fill="rgb(229,87,16)" fg:x="15144" fg:w="5"/><text x="88.1403%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (472 instructions, 2.74%)</title><rect x="86.3391%" y="165" width="2.7380%" height="15" fill="rgb(207,5,11)" fg:x="14884" fg:w="472"/><text x="86.6321%" y="175.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="89.0771%" y="165" width="0.0290%" height="15" fill="rgb(207,80,1)" fg:x="15356" fg:w="5"/><text x="89.3701%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.32%)</title><rect x="89.1061%" y="165" width="0.3190%" height="15" fill="rgb(205,45,20)" fg:x="15361" fg:w="55"/><text x="89.3991%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,069 instructions, 6.20%)</title><rect x="83.6533%" y="181" width="6.2011%" height="15" fill="rgb(205,191,35)" fg:x="14421" fg:w="1069"/><text x="83.9463%" y="191.50">ic_cdk..</text></g><g><title>hashmap::batch_remove_7_::{{closure}} (16,777 instructions, 97.32%)</title><rect x="0.9919%" y="197" width="97.3200%" height="15" fill="rgb(238,201,15)" fg:x="171" fg:w="16777"/><text x="1.2849%" y="207.50">hashmap::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.07%)</title><rect x="98.3120%" y="197" width="0.0696%" height="15" fill="rgb(212,24,14)" fg:x="16948" fg:w="12"/><text x="98.6049%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.47%)</title><rect x="98.3816%" y="197" width="0.4699%" height="15" fill="rgb(247,88,54)" fg:x="16960" fg:w="81"/><text x="98.6745%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.58%)</title><rect x="98.8514%" y="197" width="0.5801%" height="15" fill="rgb(247,45,14)" fg:x="17041" fg:w="100"/><text x="99.1444%" y="207.50"></text></g><g><title>all (17,239 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,6,52)" fg:x="0" fg:w="17239"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (17,239 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,206,26)" fg:x="0" fg:w="17239"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>