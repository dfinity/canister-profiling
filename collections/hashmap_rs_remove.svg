<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="24961"><g><title>ic_cdk::setup (24 instructions, 0.10%)</title><rect x="0.0000%" y="197" width="0.0961%" height="15" fill="rgb(249,5,16)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.33%)</title><rect x="0.0961%" y="197" width="0.3285%" height="15" fill="rgb(230,64,47)" fg:x="24" fg:w="82"/><text x="0.3891%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.33%)</title><rect x="0.4247%" y="197" width="0.3285%" height="15" fill="rgb(240,66,14)" fg:x="106" fg:w="82"/><text x="0.7176%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.33%)</title><rect x="0.7532%" y="165" width="0.3285%" height="15" fill="rgb(252,158,26)" fg:x="188" fg:w="82"/><text x="1.0461%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.33%)</title><rect x="1.0817%" y="149" width="0.3285%" height="15" fill="rgb(239,106,40)" fg:x="270" fg:w="82"/><text x="1.3747%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="1.4102%" y="133" width="0.0240%" height="15" fill="rgb(206,110,53)" fg:x="352" fg:w="6"/><text x="1.7032%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.77%)</title><rect x="1.4102%" y="149" width="1.7748%" height="15" fill="rgb(214,86,9)" fg:x="352" fg:w="443"/><text x="1.7032%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.38%)</title><rect x="3.1850%" y="149" width="0.3806%" height="15" fill="rgb(209,114,45)" fg:x="795" fg:w="95"/><text x="3.4779%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.24%)</title><rect x="3.5656%" y="149" width="0.2404%" height="15" fill="rgb(221,15,1)" fg:x="890" fg:w="60"/><text x="3.8585%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.24%)</title><rect x="3.8059%" y="149" width="0.2404%" height="15" fill="rgb(217,68,22)" fg:x="950" fg:w="60"/><text x="4.0989%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.24%)</title><rect x="4.0463%" y="149" width="0.2404%" height="15" fill="rgb(211,140,9)" fg:x="1010" fg:w="60"/><text x="4.3393%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.24%)</title><rect x="4.2867%" y="149" width="0.2404%" height="15" fill="rgb(212,70,31)" fg:x="1070" fg:w="60"/><text x="4.5797%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.33%)</title><rect x="4.5271%" y="149" width="0.3285%" height="15" fill="rgb(239,86,5)" fg:x="1130" fg:w="82"/><text x="4.8200%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.28%)</title><rect x="4.8556%" y="149" width="0.2804%" height="15" fill="rgb(226,200,18)" fg:x="1212" fg:w="70"/><text x="5.1485%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="5.1360%" y="133" width="0.0240%" height="15" fill="rgb(227,220,9)" fg:x="1282" fg:w="6"/><text x="5.4290%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.77%)</title><rect x="5.1360%" y="149" width="1.7748%" height="15" fill="rgb(253,227,21)" fg:x="1282" fg:w="443"/><text x="5.4290%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.08%)</title><rect x="6.9108%" y="149" width="0.0761%" height="15" fill="rgb(222,229,44)" fg:x="1725" fg:w="19"/><text x="7.2037%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.33%)</title><rect x="6.9869%" y="133" width="0.3285%" height="15" fill="rgb(246,70,22)" fg:x="1744" fg:w="82"/><text x="7.2799%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.27%)</title><rect x="7.3154%" y="101" width="0.2684%" height="15" fill="rgb(251,160,32)" fg:x="1826" fg:w="67"/><text x="7.6084%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.38%)</title><rect x="7.3154%" y="117" width="0.3846%" height="15" fill="rgb(208,207,26)" fg:x="1826" fg:w="96"/><text x="7.6084%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.04%)</title><rect x="7.7000%" y="69" width="0.0441%" height="15" fill="rgb(227,222,0)" fg:x="1922" fg:w="11"/><text x="7.9930%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.14%)</title><rect x="7.7441%" y="53" width="0.1402%" height="15" fill="rgb(219,15,12)" fg:x="1933" fg:w="35"/><text x="8.0370%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.26%)</title><rect x="7.7441%" y="69" width="0.2564%" height="15" fill="rgb(242,25,12)" fg:x="1933" fg:w="64"/><text x="8.0370%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.58%)</title><rect x="7.7000%" y="85" width="0.5769%" height="15" fill="rgb(211,98,8)" fg:x="1922" fg:w="144"/><text x="7.9930%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.84%)</title><rect x="7.7000%" y="101" width="0.8373%" height="15" fill="rgb(218,35,52)" fg:x="1922" fg:w="209"/><text x="7.9930%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.88%)</title><rect x="7.7000%" y="117" width="0.8774%" height="15" fill="rgb(208,139,51)" fg:x="1922" fg:w="219"/><text x="7.9930%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 1.83%)</title><rect x="7.3154%" y="133" width="1.8309%" height="15" fill="rgb(205,59,12)" fg:x="1826" fg:w="457"/><text x="7.6084%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 2.71%)</title><rect x="6.9869%" y="149" width="2.7122%" height="15" fill="rgb(254,72,54)" fg:x="1744" fg:w="677"/><text x="7.2799%" y="159.50">a..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.38%)</title><rect x="9.6991%" y="149" width="0.3806%" height="15" fill="rgb(245,52,29)" fg:x="2421" fg:w="95"/><text x="9.9921%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.24%)</title><rect x="10.0797%" y="149" width="0.2404%" height="15" fill="rgb(245,45,24)" fg:x="2516" fg:w="60"/><text x="10.3727%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.30%)</title><rect x="10.3201%" y="149" width="0.3045%" height="15" fill="rgb(247,29,36)" fg:x="2576" fg:w="76"/><text x="10.6131%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.28%)</title><rect x="10.6246%" y="149" width="0.2804%" height="15" fill="rgb(250,111,1)" fg:x="2652" fg:w="70"/><text x="10.9175%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.02%)</title><rect x="10.9050%" y="117" width="0.0240%" height="15" fill="rgb(250,37,27)" fg:x="2722" fg:w="6"/><text x="11.1980%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.77%)</title><rect x="10.9050%" y="133" width="1.7748%" height="15" fill="rgb(213,59,27)" fg:x="2722" fg:w="443"/><text x="11.1980%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.08%)</title><rect x="12.6798%" y="133" width="0.0761%" height="15" fill="rgb(249,183,51)" fg:x="3165" fg:w="19"/><text x="12.9727%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.33%)</title><rect x="12.7559%" y="117" width="0.3285%" height="15" fill="rgb(213,131,18)" fg:x="3184" fg:w="82"/><text x="13.0489%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.27%)</title><rect x="13.0844%" y="85" width="0.2684%" height="15" fill="rgb(249,40,25)" fg:x="3266" fg:w="67"/><text x="13.3774%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.38%)</title><rect x="13.0844%" y="101" width="0.3846%" height="15" fill="rgb(219,86,22)" fg:x="3266" fg:w="96"/><text x="13.3774%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.04%)</title><rect x="13.4690%" y="53" width="0.0441%" height="15" fill="rgb(237,76,11)" fg:x="3362" fg:w="11"/><text x="13.7620%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.14%)</title><rect x="13.5131%" y="37" width="0.1402%" height="15" fill="rgb(213,147,12)" fg:x="3373" fg:w="35"/><text x="13.8060%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.26%)</title><rect x="13.5131%" y="53" width="0.2564%" height="15" fill="rgb(242,81,53)" fg:x="3373" fg:w="64"/><text x="13.8060%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.58%)</title><rect x="13.4690%" y="69" width="0.5769%" height="15" fill="rgb(244,139,28)" fg:x="3362" fg:w="144"/><text x="13.7620%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.84%)</title><rect x="13.4690%" y="85" width="0.8373%" height="15" fill="rgb(222,226,42)" fg:x="3362" fg:w="209"/><text x="13.7620%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.88%)</title><rect x="13.4690%" y="101" width="0.8774%" height="15" fill="rgb(216,220,48)" fg:x="3362" fg:w="219"/><text x="13.7620%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 1.83%)</title><rect x="13.0844%" y="117" width="1.8309%" height="15" fill="rgb(234,33,48)" fg:x="3266" fg:w="457"/><text x="13.3774%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 2.71%)</title><rect x="12.7559%" y="133" width="2.7122%" height="15" fill="rgb(219,17,42)" fg:x="3184" fg:w="677"/><text x="13.0489%" y="143.50">a..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.38%)</title><rect x="15.4681%" y="133" width="0.3806%" height="15" fill="rgb(211,93,6)" fg:x="3861" fg:w="95"/><text x="15.7611%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.24%)</title><rect x="15.8487%" y="133" width="0.2404%" height="15" fill="rgb(248,184,16)" fg:x="3956" fg:w="60"/><text x="16.1417%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.33%)</title><rect x="16.0891%" y="117" width="0.3285%" height="15" fill="rgb(230,63,52)" fg:x="4016" fg:w="82"/><text x="16.3821%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.38%)</title><rect x="16.4176%" y="117" width="0.3806%" height="15" fill="rgb(240,30,46)" fg:x="4098" fg:w="95"/><text x="16.7106%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.30%)</title><rect x="16.7982%" y="117" width="0.3045%" height="15" fill="rgb(248,72,28)" fg:x="4193" fg:w="76"/><text x="17.0912%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 1.32%)</title><rect x="16.0891%" y="133" width="1.3221%" height="15" fill="rgb(242,152,40)" fg:x="4016" fg:w="330"/><text x="16.3821%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.33%)</title><rect x="17.4112%" y="133" width="0.3285%" height="15" fill="rgb(229,154,17)" fg:x="4346" fg:w="82"/><text x="17.7041%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,946 instructions, 7.80%)</title><rect x="10.9050%" y="149" width="7.7962%" height="15" fill="rgb(241,43,30)" fg:x="2722" fg:w="1946"/><text x="11.1980%" y="159.50">binread::..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.30%)</title><rect x="18.7012%" y="149" width="0.3045%" height="15" fill="rgb(218,186,1)" fg:x="4668" fg:w="76"/><text x="18.9941%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="19.0056%" y="149" width="0.0601%" height="15" fill="rgb(205,45,44)" fg:x="4744" fg:w="15"/><text x="19.2986%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="19.0657%" y="149" width="0.0601%" height="15" fill="rgb(209,219,12)" fg:x="4759" fg:w="15"/><text x="19.3587%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="19.1258%" y="149" width="0.0601%" height="15" fill="rgb(251,86,36)" fg:x="4774" fg:w="15"/><text x="19.4188%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="19.1859%" y="149" width="0.0280%" height="15" fill="rgb(250,121,22)" fg:x="4789" fg:w="7"/><text x="19.4789%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.33%)</title><rect x="19.2140%" y="133" width="0.3285%" height="15" fill="rgb(238,182,42)" fg:x="4796" fg:w="82"/><text x="19.5069%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.71%)</title><rect x="19.2140%" y="149" width="0.7131%" height="15" fill="rgb(231,227,30)" fg:x="4796" fg:w="178"/><text x="19.5069%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.33%)</title><rect x="19.9271%" y="117" width="0.3285%" height="15" fill="rgb(209,120,14)" fg:x="4974" fg:w="82"/><text x="20.2201%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.52%)</title><rect x="19.9271%" y="133" width="0.5208%" height="15" fill="rgb(233,40,52)" fg:x="4974" fg:w="130"/><text x="20.2201%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 0.86%)</title><rect x="19.9271%" y="149" width="0.8613%" height="15" fill="rgb(253,141,8)" fg:x="4974" fg:w="215"/><text x="20.2201%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.33%)</title><rect x="20.7884%" y="149" width="0.3285%" height="15" fill="rgb(236,73,33)" fg:x="5189" fg:w="82"/><text x="21.0814%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.36%)</title><rect x="21.1169%" y="149" width="0.3566%" height="15" fill="rgb(207,137,48)" fg:x="5271" fg:w="89"/><text x="21.4099%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.33%)</title><rect x="21.4735%" y="149" width="0.3285%" height="15" fill="rgb(228,59,17)" fg:x="5360" fg:w="82"/><text x="21.7665%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.33%)</title><rect x="21.8020%" y="149" width="0.3285%" height="15" fill="rgb(252,220,32)" fg:x="5442" fg:w="82"/><text x="22.0950%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="22.1305%" y="149" width="0.0160%" height="15" fill="rgb(216,100,33)" fg:x="5524" fg:w="4"/><text x="22.4235%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.36%)</title><rect x="22.1465%" y="149" width="0.3566%" height="15" fill="rgb(220,134,53)" fg:x="5528" fg:w="89"/><text x="22.4395%" y="159.50"></text></g><g><title>memcpy (392 instructions, 1.57%)</title><rect x="22.5031%" y="149" width="1.5704%" height="15" fill="rgb(205,165,3)" fg:x="5617" fg:w="392"/><text x="22.7961%" y="159.50"></text></g><g><title>memcpy (392 instructions, 1.57%)</title><rect x="24.0736%" y="149" width="1.5704%" height="15" fill="rgb(226,161,31)" fg:x="6009" fg:w="392"/><text x="24.3665%" y="159.50"></text></g><g><title>memcpy (504 instructions, 2.02%)</title><rect x="25.6440%" y="149" width="2.0191%" height="15" fill="rgb(248,24,19)" fg:x="6401" fg:w="504"/><text x="25.9370%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,844 instructions, 31.43%)</title><rect x="1.0817%" y="165" width="31.4250%" height="15" fill="rgb(208,188,34)" fg:x="270" fg:w="7844"/><text x="1.3747%" y="175.50">candid::de::IDLDeserialize::new_with_config</text></g><g><title>memcpy (344 instructions, 1.38%)</title><rect x="32.5067%" y="165" width="1.3781%" height="15" fill="rgb(239,50,41)" fg:x="8114" fg:w="344"/><text x="32.7997%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="33.8849%" y="149" width="0.0280%" height="15" fill="rgb(233,225,12)" fg:x="8458" fg:w="7"/><text x="34.1778%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.16%)</title><rect x="33.8849%" y="165" width="0.1562%" height="15" fill="rgb(231,193,44)" fg:x="8458" fg:w="39"/><text x="34.1778%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.33%)</title><rect x="34.0411%" y="165" width="0.3285%" height="15" fill="rgb(232,219,42)" fg:x="8497" fg:w="82"/><text x="34.3341%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="34.3696%" y="149" width="0.0280%" height="15" fill="rgb(253,222,52)" fg:x="8579" fg:w="7"/><text x="34.6626%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.24%)</title><rect x="34.3977%" y="133" width="0.2364%" height="15" fill="rgb(208,223,29)" fg:x="8586" fg:w="59"/><text x="34.6906%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.38%)</title><rect x="34.6340%" y="133" width="0.3766%" height="15" fill="rgb(243,189,38)" fg:x="8645" fg:w="94"/><text x="34.9270%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.69%)</title><rect x="35.0106%" y="133" width="0.6931%" height="15" fill="rgb(236,134,5)" fg:x="8739" fg:w="173"/><text x="35.3036%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.32%)</title><rect x="34.3977%" y="149" width="2.3196%" height="15" fill="rgb(228,88,26)" fg:x="8586" fg:w="579"/><text x="34.6906%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (797 instructions, 3.19%)</title><rect x="34.3696%" y="165" width="3.1930%" height="15" fill="rgb(206,178,47)" fg:x="8579" fg:w="797"/><text x="34.6626%" y="175.50">ca..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.33%)</title><rect x="37.5626%" y="165" width="0.3285%" height="15" fill="rgb(248,156,42)" fg:x="9376" fg:w="82"/><text x="37.8556%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="37.8911%" y="149" width="0.0280%" height="15" fill="rgb(209,78,26)" fg:x="9458" fg:w="7"/><text x="38.1841%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.24%)</title><rect x="37.9192%" y="133" width="0.2364%" height="15" fill="rgb(232,36,8)" fg:x="9465" fg:w="59"/><text x="38.2121%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 instructions, 0.38%)</title><rect x="38.1555%" y="133" width="0.3766%" height="15" fill="rgb(223,165,6)" fg:x="9524" fg:w="94"/><text x="38.4485%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (173 instructions, 0.69%)</title><rect x="38.5321%" y="133" width="0.6931%" height="15" fill="rgb(229,102,1)" fg:x="9618" fg:w="173"/><text x="38.8251%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (579 instructions, 2.32%)</title><rect x="37.9192%" y="149" width="2.3196%" height="15" fill="rgb(252,46,37)" fg:x="9465" fg:w="579"/><text x="38.2121%" y="159.50">c..</text></g><g><title>memcmp (77 instructions, 0.31%)</title><rect x="40.2388%" y="149" width="0.3085%" height="15" fill="rgb(215,97,1)" fg:x="10044" fg:w="77"/><text x="40.5317%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.36%)</title><rect x="40.5473%" y="133" width="0.3566%" height="15" fill="rgb(246,200,50)" fg:x="10121" fg:w="89"/><text x="40.8402%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.53%)</title><rect x="40.5473%" y="149" width="0.5328%" height="15" fill="rgb(233,93,46)" fg:x="10121" fg:w="133"/><text x="40.8402%" y="159.50"></text></g><g><title>candid::types::internal::env_add (975 instructions, 3.91%)</title><rect x="37.8911%" y="165" width="3.9061%" height="15" fill="rgb(245,126,48)" fg:x="9458" fg:w="975"/><text x="38.1841%" y="175.50">can..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 instructions, 0.24%)</title><rect x="41.7972%" y="117" width="0.2364%" height="15" fill="rgb(209,204,15)" fg:x="10433" fg:w="59"/><text x="42.0902%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (102 instructions, 0.41%)</title><rect x="41.7972%" y="133" width="0.4086%" height="15" fill="rgb(247,223,31)" fg:x="10433" fg:w="102"/><text x="42.0902%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (323 instructions, 1.29%)</title><rect x="41.7972%" y="149" width="1.2940%" height="15" fill="rgb(232,82,15)" fg:x="10433" fg:w="323"/><text x="42.0902%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.305 (34 instructions, 0.14%)</title><rect x="43.0912%" y="149" width="0.1362%" height="15" fill="rgb(235,97,35)" fg:x="10756" fg:w="34"/><text x="43.3842%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="43.2274%" y="149" width="0.0521%" height="15" fill="rgb(212,78,24)" fg:x="10790" fg:w="13"/><text x="43.5204%" y="159.50"></text></g><g><title>candid::types::internal::env_id (555 instructions, 2.22%)</title><rect x="41.7972%" y="165" width="2.2235%" height="15" fill="rgb(221,104,28)" fg:x="10433" fg:w="555"/><text x="42.0902%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.20%)</title><rect x="44.0207%" y="165" width="0.1963%" height="15" fill="rgb(217,219,41)" fg:x="10988" fg:w="49"/><text x="44.3136%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.33%)</title><rect x="44.2170%" y="149" width="0.3325%" height="15" fill="rgb(229,7,37)" fg:x="11037" fg:w="83"/><text x="44.5099%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.09%)</title><rect x="44.7258%" y="133" width="0.0921%" height="15" fill="rgb(240,195,35)" fg:x="11164" fg:w="23"/><text x="45.0187%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.55%)</title><rect x="44.7258%" y="149" width="0.5529%" height="15" fill="rgb(205,166,1)" fg:x="11164" fg:w="138"/><text x="45.0187%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 instructions, 1.24%)</title><rect x="44.2170%" y="165" width="1.2379%" height="15" fill="rgb(231,118,13)" fg:x="11037" fg:w="309"/><text x="44.5099%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.14%)</title><rect x="45.4549%" y="149" width="0.1402%" height="15" fill="rgb(231,91,6)" fg:x="11346" fg:w="35"/><text x="45.7479%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1145 (34 instructions, 0.14%)</title><rect x="45.5951%" y="149" width="0.1362%" height="15" fill="rgb(227,6,21)" fg:x="11381" fg:w="34"/><text x="45.8881%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1145 (34 instructions, 0.14%)</title><rect x="45.7313%" y="149" width="0.1362%" height="15" fill="rgb(249,206,15)" fg:x="11415" fg:w="34"/><text x="46.0243%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.13%)</title><rect x="45.8676%" y="149" width="0.1322%" height="15" fill="rgb(222,227,50)" fg:x="11449" fg:w="33"/><text x="46.1605%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 1.00%)</title><rect x="45.4549%" y="165" width="1.0016%" height="15" fill="rgb(241,75,18)" fg:x="11346" fg:w="250"/><text x="45.7479%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="46.4565%" y="165" width="0.0521%" height="15" fill="rgb(240,38,53)" fg:x="11596" fg:w="13"/><text x="46.7494%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="46.5086%" y="165" width="0.0521%" height="15" fill="rgb(209,116,13)" fg:x="11609" fg:w="13"/><text x="46.8015%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="46.5606%" y="165" width="0.0521%" height="15" fill="rgb(220,177,6)" fg:x="11622" fg:w="13"/><text x="46.8536%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.17%)</title><rect x="46.6127%" y="165" width="0.1723%" height="15" fill="rgb(212,8,5)" fg:x="11635" fg:w="43"/><text x="46.9057%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="46.7850%" y="149" width="0.0280%" height="15" fill="rgb(214,49,11)" fg:x="11678" fg:w="7"/><text x="47.0780%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="46.8130%" y="133" width="0.1082%" height="15" fill="rgb(231,125,35)" fg:x="11685" fg:w="27"/><text x="47.1060%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="46.9212%" y="133" width="0.1082%" height="15" fill="rgb(210,55,29)" fg:x="11712" fg:w="27"/><text x="47.2142%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.79%)</title><rect x="46.8130%" y="149" width="0.7892%" height="15" fill="rgb(207,93,31)" fg:x="11685" fg:w="197"/><text x="47.1060%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="47.6023%" y="117" width="0.1082%" height="15" fill="rgb(251,12,37)" fg:x="11882" fg:w="27"/><text x="47.8952%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.57%)</title><rect x="47.6023%" y="133" width="0.5689%" height="15" fill="rgb(241,24,5)" fg:x="11882" fg:w="142"/><text x="47.8952%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 0.75%)</title><rect x="47.6023%" y="149" width="0.7452%" height="15" fill="rgb(240,102,16)" fg:x="11882" fg:w="186"/><text x="47.8952%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.05%)</title><rect x="48.3474%" y="149" width="0.0521%" height="15" fill="rgb(249,139,54)" fg:x="12068" fg:w="13"/><text x="48.6404%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="48.3995%" y="149" width="0.0280%" height="15" fill="rgb(235,81,15)" fg:x="12081" fg:w="7"/><text x="48.6925%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (470 instructions, 1.88%)</title><rect x="46.7850%" y="165" width="1.8829%" height="15" fill="rgb(254,160,1)" fg:x="11678" fg:w="470"/><text x="47.0780%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="48.6679%" y="149" width="0.1082%" height="15" fill="rgb(251,8,17)" fg:x="12148" fg:w="27"/><text x="48.9609%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.57%)</title><rect x="48.6679%" y="165" width="0.5689%" height="15" fill="rgb(214,145,15)" fg:x="12148" fg:w="142"/><text x="48.9609%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (13,671 instructions, 54.77%)</title><rect x="0.7532%" y="181" width="54.7694%" height="15" fill="rgb(225,58,34)" fg:x="188" fg:w="13671"/><text x="1.0461%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (7 instructions, 0.03%)</title><rect x="55.5226%" y="165" width="0.0280%" height="15" fill="rgb(250,102,34)" fg:x="13859" fg:w="7"/><text x="55.8156%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="55.5507%" y="133" width="0.1082%" height="15" fill="rgb(208,138,6)" fg:x="13866" fg:w="27"/><text x="55.8436%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (115 instructions, 0.46%)</title><rect x="55.5507%" y="149" width="0.4607%" height="15" fill="rgb(226,24,51)" fg:x="13866" fg:w="115"/><text x="55.8436%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (159 instructions, 0.64%)</title><rect x="55.5507%" y="165" width="0.6370%" height="15" fill="rgb(248,92,2)" fg:x="13866" fg:w="159"/><text x="55.8436%" y="175.50"></text></g><g><title>memset (152 instructions, 0.61%)</title><rect x="56.1877%" y="165" width="0.6089%" height="15" fill="rgb(218,24,17)" fg:x="14025" fg:w="152"/><text x="56.4806%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (492 instructions, 1.97%)</title><rect x="55.5226%" y="181" width="1.9711%" height="15" fill="rgb(232,11,5)" fg:x="13859" fg:w="492"/><text x="55.8156%" y="191.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 2.08%)</title><rect x="57.4937%" y="165" width="2.0752%" height="15" fill="rgb(219,140,51)" fg:x="14351" fg:w="518"/><text x="57.7867%" y="175.50">s..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.33%)</title><rect x="59.5689%" y="117" width="0.3285%" height="15" fill="rgb(250,71,42)" fg:x="14869" fg:w="82"/><text x="59.8619%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.52%)</title><rect x="59.5689%" y="133" width="0.5208%" height="15" fill="rgb(219,38,47)" fg:x="14869" fg:w="130"/><text x="59.8619%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 0.85%)</title><rect x="59.5689%" y="149" width="0.8493%" height="15" fill="rgb(218,117,24)" fg:x="14869" fg:w="212"/><text x="59.8619%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="60.4183%" y="149" width="0.0601%" height="15" fill="rgb(220,60,44)" fg:x="15081" fg:w="15"/><text x="60.7112%" y="159.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="60.4783%" y="149" width="0.0601%" height="15" fill="rgb(241,74,4)" fg:x="15096" fg:w="15"/><text x="60.7713%" y="159.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (430 instructions, 1.72%)</title><rect x="59.5689%" y="165" width="1.7227%" height="15" fill="rgb(239,56,52)" fg:x="14869" fg:w="430"/><text x="59.8619%" y="175.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 2.07%)</title><rect x="61.2916%" y="165" width="2.0672%" height="15" fill="rgb(213,14,38)" fg:x="15299" fg:w="516"/><text x="61.5846%" y="175.50"></text></g><g><title>std::io::Write::write_all (7 instructions, 0.03%)</title><rect x="63.3588%" y="165" width="0.0280%" height="15" fill="rgb(218,11,49)" fg:x="15815" fg:w="7"/><text x="63.6518%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,568 instructions, 6.28%)</title><rect x="57.4937%" y="181" width="6.2818%" height="15" fill="rgb(254,76,12)" fg:x="14351" fg:w="1568"/><text x="57.7867%" y="191.50">candid:..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="63.7755%" y="165" width="0.0280%" height="15" fill="rgb(249,114,42)" fg:x="15919" fg:w="7"/><text x="64.0685%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.24%)</title><rect x="63.8035%" y="165" width="0.2404%" height="15" fill="rgb(213,56,21)" fg:x="15926" fg:w="60"/><text x="64.0965%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::ser::IDLBuilder&gt; (131 instructions, 0.52%)</title><rect x="63.7755%" y="181" width="0.5248%" height="15" fill="rgb(241,194,8)" fg:x="15919" fg:w="131"/><text x="64.0685%" y="191.50"></text></g><g><title>hashmap::__canister_method_batch_remove::{{closure}} (24,410 instructions, 97.79%)</title><rect x="0.7532%" y="197" width="97.7926%" height="15" fill="rgb(233,154,7)" fg:x="188" fg:w="24410"/><text x="1.0461%" y="207.50">hashmap::__canister_method_batch_remove::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.06%)</title><rect x="98.5457%" y="197" width="0.0561%" height="15" fill="rgb(243,39,46)" fg:x="24598" fg:w="14"/><text x="98.8387%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.11%)</title><rect x="98.9624%" y="181" width="0.1082%" height="15" fill="rgb(211,212,43)" fg:x="24702" fg:w="27"/><text x="99.2554%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 0.82%)</title><rect x="98.6058%" y="197" width="0.8173%" height="15" fill="rgb(247,65,12)" fg:x="24613" fg:w="204"/><text x="98.8988%" y="207.50"></text></g><g><title>all (24,961 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(232,111,20)" fg:x="0" fg:w="24961"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (24,961 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,44,10)" fg:x="0" fg:w="24961"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>