<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="20263"><g><title>ic_cdk::setup (19 instructions, 0.09%)</title><rect x="0.0000%" y="197" width="0.0938%" height="15" fill="rgb(236,81,34)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="0.0938%" y="197" width="0.3751%" height="15" fill="rgb(233,97,42)" fg:x="19" fg:w="76"/><text x="0.3867%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="0.4688%" y="197" width="0.3751%" height="15" fill="rgb(243,182,9)" fg:x="95" fg:w="76"/><text x="0.7618%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="0.8439%" y="165" width="0.3751%" height="15" fill="rgb(213,163,24)" fg:x="171" fg:w="76"/><text x="1.1369%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.35%)</title><rect x="1.2190%" y="149" width="0.3504%" height="15" fill="rgb(245,99,22)" fg:x="247" fg:w="71"/><text x="1.5119%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.5694%" y="133" width="0.0197%" height="15" fill="rgb(222,21,34)" fg:x="318" fg:w="4"/><text x="1.8623%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 1.98%)</title><rect x="1.5694%" y="149" width="1.9839%" height="15" fill="rgb(219,196,23)" fg:x="318" fg:w="402"/><text x="1.8623%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.41%)</title><rect x="3.5533%" y="149" width="0.4096%" height="15" fill="rgb(209,64,29)" fg:x="720" fg:w="83"/><text x="3.8462%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.27%)</title><rect x="3.9629%" y="149" width="0.2665%" height="15" fill="rgb(240,145,31)" fg:x="803" fg:w="54"/><text x="4.2559%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.27%)</title><rect x="4.2294%" y="149" width="0.2665%" height="15" fill="rgb(237,212,46)" fg:x="857" fg:w="54"/><text x="4.5224%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.27%)</title><rect x="4.4959%" y="149" width="0.2665%" height="15" fill="rgb(244,71,37)" fg:x="911" fg:w="54"/><text x="4.7888%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.27%)</title><rect x="4.7624%" y="149" width="0.2665%" height="15" fill="rgb(231,150,21)" fg:x="965" fg:w="54"/><text x="5.0553%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.35%)</title><rect x="5.0289%" y="149" width="0.3504%" height="15" fill="rgb(206,218,43)" fg:x="1019" fg:w="71"/><text x="5.3218%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.32%)</title><rect x="5.3793%" y="149" width="0.3208%" height="15" fill="rgb(247,11,2)" fg:x="1090" fg:w="65"/><text x="5.6722%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="5.7000%" y="133" width="0.0197%" height="15" fill="rgb(242,1,19)" fg:x="1155" fg:w="4"/><text x="5.9930%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 1.98%)</title><rect x="5.7000%" y="149" width="1.9839%" height="15" fill="rgb(240,90,15)" fg:x="1155" fg:w="402"/><text x="5.9930%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.08%)</title><rect x="7.6840%" y="149" width="0.0790%" height="15" fill="rgb(207,24,47)" fg:x="1557" fg:w="16"/><text x="7.9769%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="7.7629%" y="133" width="0.3751%" height="15" fill="rgb(205,224,36)" fg:x="1573" fg:w="76"/><text x="8.0559%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.30%)</title><rect x="8.1380%" y="101" width="0.2961%" height="15" fill="rgb(241,92,24)" fg:x="1649" fg:w="60"/><text x="8.4310%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.42%)</title><rect x="8.1380%" y="117" width="0.4195%" height="15" fill="rgb(214,194,22)" fg:x="1649" fg:w="85"/><text x="8.4310%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.04%)</title><rect x="8.5575%" y="69" width="0.0444%" height="15" fill="rgb(246,110,33)" fg:x="1734" fg:w="9"/><text x="8.8504%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.15%)</title><rect x="8.6019%" y="53" width="0.1481%" height="15" fill="rgb(235,145,44)" fg:x="1743" fg:w="30"/><text x="8.8949%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.27%)</title><rect x="8.6019%" y="69" width="0.2714%" height="15" fill="rgb(218,202,26)" fg:x="1743" fg:w="55"/><text x="8.8949%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.56%)</title><rect x="8.5575%" y="85" width="0.5626%" height="15" fill="rgb(210,139,45)" fg:x="1734" fg:w="114"/><text x="8.8504%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.82%)</title><rect x="8.5575%" y="101" width="0.8242%" height="15" fill="rgb(243,29,9)" fg:x="1734" fg:w="167"/><text x="8.8504%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.85%)</title><rect x="8.5575%" y="117" width="0.8488%" height="15" fill="rgb(230,65,27)" fg:x="1734" fg:w="172"/><text x="8.8504%" y="127.50"></text></g><g><title>core::fmt::write (368 instructions, 1.82%)</title><rect x="8.1380%" y="133" width="1.8161%" height="15" fill="rgb(232,223,44)" fg:x="1649" fg:w="368"/><text x="8.4310%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 2.79%)</title><rect x="7.7629%" y="149" width="2.7883%" height="15" fill="rgb(243,2,19)" fg:x="1573" fg:w="565"/><text x="8.0559%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.41%)</title><rect x="10.5513%" y="149" width="0.4096%" height="15" fill="rgb(253,90,46)" fg:x="2138" fg:w="83"/><text x="10.8442%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.27%)</title><rect x="10.9609%" y="149" width="0.2714%" height="15" fill="rgb(242,171,31)" fg:x="2221" fg:w="55"/><text x="11.2538%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.32%)</title><rect x="11.2323%" y="149" width="0.3208%" height="15" fill="rgb(224,72,39)" fg:x="2276" fg:w="65"/><text x="11.5253%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.32%)</title><rect x="11.5531%" y="149" width="0.3208%" height="15" fill="rgb(254,202,11)" fg:x="2341" fg:w="65"/><text x="11.8460%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="11.8739%" y="117" width="0.0197%" height="15" fill="rgb(217,12,43)" fg:x="2406" fg:w="4"/><text x="12.1668%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 1.98%)</title><rect x="11.8739%" y="133" width="1.9839%" height="15" fill="rgb(233,227,25)" fg:x="2406" fg:w="402"/><text x="12.1668%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.08%)</title><rect x="13.8578%" y="133" width="0.0790%" height="15" fill="rgb(209,177,47)" fg:x="2808" fg:w="16"/><text x="14.1507%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="13.9367%" y="117" width="0.3751%" height="15" fill="rgb(227,185,33)" fg:x="2824" fg:w="76"/><text x="14.2297%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.30%)</title><rect x="14.3118%" y="85" width="0.2961%" height="15" fill="rgb(207,160,29)" fg:x="2900" fg:w="60"/><text x="14.6048%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.42%)</title><rect x="14.3118%" y="101" width="0.4195%" height="15" fill="rgb(222,207,33)" fg:x="2900" fg:w="85"/><text x="14.6048%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.04%)</title><rect x="14.7313%" y="53" width="0.0444%" height="15" fill="rgb(253,43,22)" fg:x="2985" fg:w="9"/><text x="15.0243%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.15%)</title><rect x="14.7757%" y="37" width="0.1481%" height="15" fill="rgb(210,84,47)" fg:x="2994" fg:w="30"/><text x="15.0687%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.27%)</title><rect x="14.7757%" y="53" width="0.2714%" height="15" fill="rgb(229,188,37)" fg:x="2994" fg:w="55"/><text x="15.0687%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.56%)</title><rect x="14.7313%" y="69" width="0.5626%" height="15" fill="rgb(248,165,25)" fg:x="2985" fg:w="114"/><text x="15.0243%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 0.82%)</title><rect x="14.7313%" y="85" width="0.8242%" height="15" fill="rgb(235,13,15)" fg:x="2985" fg:w="167"/><text x="15.0243%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 0.85%)</title><rect x="14.7313%" y="101" width="0.8488%" height="15" fill="rgb(224,48,27)" fg:x="2985" fg:w="172"/><text x="15.0243%" y="111.50"></text></g><g><title>core::fmt::write (368 instructions, 1.82%)</title><rect x="14.3118%" y="117" width="1.8161%" height="15" fill="rgb(207,183,15)" fg:x="2900" fg:w="368"/><text x="14.6048%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 2.79%)</title><rect x="13.9367%" y="133" width="2.7883%" height="15" fill="rgb(223,15,11)" fg:x="2824" fg:w="565"/><text x="14.2297%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.41%)</title><rect x="16.7251%" y="133" width="0.4096%" height="15" fill="rgb(229,103,14)" fg:x="3389" fg:w="83"/><text x="17.0180%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.27%)</title><rect x="17.1347%" y="133" width="0.2714%" height="15" fill="rgb(213,112,0)" fg:x="3472" fg:w="55"/><text x="17.4276%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.35%)</title><rect x="17.4061%" y="117" width="0.3504%" height="15" fill="rgb(241,112,53)" fg:x="3527" fg:w="71"/><text x="17.6991%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (90 instructions, 0.44%)</title><rect x="17.7565%" y="117" width="0.4442%" height="15" fill="rgb(227,146,31)" fg:x="3598" fg:w="90"/><text x="18.0495%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.32%)</title><rect x="18.2007%" y="117" width="0.3208%" height="15" fill="rgb(211,223,13)" fg:x="3688" fg:w="65"/><text x="18.4936%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (285 instructions, 1.41%)</title><rect x="17.4061%" y="133" width="1.4065%" height="15" fill="rgb(234,52,51)" fg:x="3527" fg:w="285"/><text x="17.6991%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.38%)</title><rect x="18.8126%" y="133" width="0.3849%" height="15" fill="rgb(238,93,5)" fg:x="3812" fg:w="78"/><text x="19.1056%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,687 instructions, 8.33%)</title><rect x="11.8739%" y="149" width="8.3255%" height="15" fill="rgb(217,29,29)" fg:x="2406" fg:w="1687"/><text x="12.1668%" y="159.50">binread::b..</text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.32%)</title><rect x="20.1994%" y="149" width="0.3208%" height="15" fill="rgb(252,132,5)" fg:x="4093" fg:w="65"/><text x="20.4923%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.06%)</title><rect x="20.5202%" y="149" width="0.0642%" height="15" fill="rgb(218,5,39)" fg:x="4158" fg:w="13"/><text x="20.8131%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.06%)</title><rect x="20.5843%" y="149" width="0.0642%" height="15" fill="rgb(221,186,13)" fg:x="4171" fg:w="13"/><text x="20.8773%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.03%)</title><rect x="20.6485%" y="149" width="0.0345%" height="15" fill="rgb(230,114,20)" fg:x="4184" fg:w="7"/><text x="20.9414%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.07%)</title><rect x="20.6830%" y="149" width="0.0740%" height="15" fill="rgb(239,140,13)" fg:x="4191" fg:w="15"/><text x="20.9760%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="20.7570%" y="133" width="0.3751%" height="15" fill="rgb(252,208,10)" fg:x="4206" fg:w="76"/><text x="21.0500%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.78%)</title><rect x="20.7570%" y="149" width="0.7847%" height="15" fill="rgb(205,99,29)" fg:x="4206" fg:w="159"/><text x="21.0500%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="21.5417%" y="117" width="0.3751%" height="15" fill="rgb(208,200,7)" fg:x="4365" fg:w="76"/><text x="21.8347%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.54%)</title><rect x="21.5417%" y="133" width="0.5429%" height="15" fill="rgb(215,229,32)" fg:x="4365" fg:w="110"/><text x="21.8347%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (180 instructions, 0.89%)</title><rect x="21.5417%" y="149" width="0.8883%" height="15" fill="rgb(246,120,10)" fg:x="4365" fg:w="180"/><text x="21.8347%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="22.4300%" y="149" width="0.3751%" height="15" fill="rgb(251,223,22)" fg:x="4545" fg:w="76"/><text x="22.7230%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.40%)</title><rect x="22.8051%" y="149" width="0.3997%" height="15" fill="rgb(254,23,3)" fg:x="4621" fg:w="81"/><text x="23.0981%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="23.2049%" y="149" width="0.3751%" height="15" fill="rgb(244,160,34)" fg:x="4702" fg:w="76"/><text x="23.4978%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="23.5799%" y="149" width="0.3751%" height="15" fill="rgb(240,36,29)" fg:x="4778" fg:w="76"/><text x="23.8729%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.40%)</title><rect x="23.9649%" y="149" width="0.3997%" height="15" fill="rgb(253,98,17)" fg:x="4856" fg:w="81"/><text x="24.2578%" y="159.50"></text></g><g><title>memcpy (399 instructions, 1.97%)</title><rect x="24.3646%" y="149" width="1.9691%" height="15" fill="rgb(252,208,13)" fg:x="4937" fg:w="399"/><text x="24.6576%" y="159.50"></text></g><g><title>memcpy (399 instructions, 1.97%)</title><rect x="26.3337%" y="149" width="1.9691%" height="15" fill="rgb(252,210,11)" fg:x="5336" fg:w="399"/><text x="26.6267%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,448 instructions, 31.82%)</title><rect x="1.2190%" y="165" width="31.8215%" height="15" fill="rgb(213,102,11)" fg:x="247" fg:w="6448"/><text x="1.5119%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (354 instructions, 1.75%)</title><rect x="33.0405%" y="165" width="1.7470%" height="15" fill="rgb(225,88,27)" fg:x="6695" fg:w="354"/><text x="33.3335%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.06%)</title><rect x="34.7875%" y="149" width="0.0592%" height="15" fill="rgb(213,30,21)" fg:x="7049" fg:w="12"/><text x="35.0805%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.25%)</title><rect x="34.7875%" y="165" width="0.2468%" height="15" fill="rgb(208,135,32)" fg:x="7049" fg:w="50"/><text x="35.0805%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="35.0343%" y="165" width="0.3751%" height="15" fill="rgb(239,114,46)" fg:x="7099" fg:w="76"/><text x="35.3273%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.06%)</title><rect x="35.4094%" y="149" width="0.0592%" height="15" fill="rgb(209,154,39)" fg:x="7175" fg:w="12"/><text x="35.7023%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.26%)</title><rect x="35.4686%" y="133" width="0.2616%" height="15" fill="rgb(217,33,26)" fg:x="7187" fg:w="53"/><text x="35.7616%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.43%)</title><rect x="35.7301%" y="133" width="0.4343%" height="15" fill="rgb(243,209,7)" fg:x="7240" fg:w="88"/><text x="36.0231%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.80%)</title><rect x="36.1644%" y="133" width="0.7995%" height="15" fill="rgb(212,125,18)" fg:x="7328" fg:w="162"/><text x="36.4574%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.66%)</title><rect x="35.4686%" y="149" width="2.6650%" height="15" fill="rgb(217,140,38)" fg:x="7187" fg:w="540"/><text x="35.7616%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (760 instructions, 3.75%)</title><rect x="35.4094%" y="165" width="3.7507%" height="15" fill="rgb(247,131,50)" fg:x="7175" fg:w="760"/><text x="35.7023%" y="175.50">can..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="39.1600%" y="165" width="0.3751%" height="15" fill="rgb(211,142,47)" fg:x="7935" fg:w="76"/><text x="39.4530%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.06%)</title><rect x="39.5351%" y="149" width="0.0592%" height="15" fill="rgb(215,28,7)" fg:x="8011" fg:w="12"/><text x="39.8281%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.26%)</title><rect x="39.5943%" y="133" width="0.2616%" height="15" fill="rgb(238,108,30)" fg:x="8023" fg:w="53"/><text x="39.8873%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.43%)</title><rect x="39.8559%" y="133" width="0.4343%" height="15" fill="rgb(241,6,25)" fg:x="8076" fg:w="88"/><text x="40.1489%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.80%)</title><rect x="40.2902%" y="133" width="0.7995%" height="15" fill="rgb(246,167,20)" fg:x="8164" fg:w="162"/><text x="40.5832%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.66%)</title><rect x="39.5943%" y="149" width="2.6650%" height="15" fill="rgb(250,209,35)" fg:x="8023" fg:w="540"/><text x="39.8873%" y="159.50">c..</text></g><g><title>memcmp (68 instructions, 0.34%)</title><rect x="42.2593%" y="149" width="0.3356%" height="15" fill="rgb(214,195,19)" fg:x="8563" fg:w="68"/><text x="42.5523%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.40%)</title><rect x="42.5949%" y="133" width="0.3997%" height="15" fill="rgb(239,73,24)" fg:x="8631" fg:w="81"/><text x="42.8878%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.53%)</title><rect x="42.5949%" y="149" width="0.5330%" height="15" fill="rgb(230,9,17)" fg:x="8631" fg:w="108"/><text x="42.8878%" y="159.50"></text></g><g><title>candid::types::internal::env_add (895 instructions, 4.42%)</title><rect x="39.5351%" y="165" width="4.4169%" height="15" fill="rgb(225,19,10)" fg:x="8011" fg:w="895"/><text x="39.8281%" y="175.50">cand..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.26%)</title><rect x="43.9520%" y="117" width="0.2616%" height="15" fill="rgb(246,120,54)" fg:x="8906" fg:w="53"/><text x="44.2450%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (79 instructions, 0.39%)</title><rect x="43.9520%" y="133" width="0.3899%" height="15" fill="rgb(245,114,27)" fg:x="8906" fg:w="79"/><text x="44.2450%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (294 instructions, 1.45%)</title><rect x="43.9520%" y="149" width="1.4509%" height="15" fill="rgb(221,39,11)" fg:x="8906" fg:w="294"/><text x="44.2450%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.569 (15 instructions, 0.07%)</title><rect x="45.4030%" y="149" width="0.0740%" height="15" fill="rgb(216,228,41)" fg:x="9200" fg:w="15"/><text x="45.6959%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="45.4770%" y="149" width="0.0543%" height="15" fill="rgb(228,76,30)" fg:x="9215" fg:w="11"/><text x="45.7699%" y="159.50"></text></g><g><title>candid::types::internal::env_id (498 instructions, 2.46%)</title><rect x="43.9520%" y="165" width="2.4577%" height="15" fill="rgb(249,65,27)" fg:x="8906" fg:w="498"/><text x="44.2450%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (45 instructions, 0.22%)</title><rect x="46.4097%" y="165" width="0.2221%" height="15" fill="rgb(249,225,32)" fg:x="9404" fg:w="45"/><text x="46.7027%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.61%)</title><rect x="46.6318%" y="149" width="0.6070%" height="15" fill="rgb(205,5,39)" fg:x="9449" fg:w="123"/><text x="46.9248%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.61%)</title><rect x="47.3721%" y="149" width="0.6070%" height="15" fill="rgb(235,226,24)" fg:x="9599" fg:w="123"/><text x="47.6650%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 1.48%)</title><rect x="46.6318%" y="165" width="1.4805%" height="15" fill="rgb(248,222,40)" fg:x="9449" fg:w="300"/><text x="46.9248%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.14%)</title><rect x="48.1123%" y="149" width="0.1382%" height="15" fill="rgb(240,120,54)" fg:x="9749" fg:w="28"/><text x="48.4053%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1656 (15 instructions, 0.07%)</title><rect x="48.2505%" y="149" width="0.0740%" height="15" fill="rgb(254,29,40)" fg:x="9777" fg:w="15"/><text x="48.5435%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1656 (15 instructions, 0.07%)</title><rect x="48.3245%" y="149" width="0.0740%" height="15" fill="rgb(246,225,15)" fg:x="9792" fg:w="15"/><text x="48.6175%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.67%)</title><rect x="48.1123%" y="165" width="0.6662%" height="15" fill="rgb(207,161,19)" fg:x="9749" fg:w="135"/><text x="48.4053%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="48.7786%" y="165" width="0.0543%" height="15" fill="rgb(226,142,17)" fg:x="9884" fg:w="11"/><text x="49.0715%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="48.8328%" y="165" width="0.0543%" height="15" fill="rgb(222,14,39)" fg:x="9895" fg:w="11"/><text x="49.1258%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="48.8871%" y="165" width="0.0543%" height="15" fill="rgb(243,107,11)" fg:x="9906" fg:w="11"/><text x="49.1801%" y="175.50"></text></g><g><title>memcpy (410 instructions, 2.02%)</title><rect x="48.9414%" y="165" width="2.0234%" height="15" fill="rgb(216,150,23)" fg:x="9917" fg:w="410"/><text x="49.2344%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (15 instructions, 0.07%)</title><rect x="50.9648%" y="133" width="0.0740%" height="15" fill="rgb(207,189,4)" fg:x="10327" fg:w="15"/><text x="51.2578%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.83%)</title><rect x="51.0388%" y="133" width="0.8291%" height="15" fill="rgb(234,47,38)" fg:x="10342" fg:w="168"/><text x="51.3318%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.47%)</title><rect x="51.8679%" y="101" width="0.4688%" height="15" fill="rgb(248,201,11)" fg:x="10510" fg:w="95"/><text x="52.1609%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (195 instructions, 0.96%)</title><rect x="51.8679%" y="117" width="0.9623%" height="15" fill="rgb(250,67,26)" fg:x="10510" fg:w="195"/><text x="52.1609%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (222 instructions, 1.10%)</title><rect x="51.8679%" y="133" width="1.0956%" height="15" fill="rgb(208,208,44)" fg:x="10510" fg:w="222"/><text x="52.1609%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="52.9635%" y="133" width="0.0543%" height="15" fill="rgb(217,159,39)" fg:x="10732" fg:w="11"/><text x="53.2565%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (456 instructions, 2.25%)</title><rect x="50.9648%" y="149" width="2.2504%" height="15" fill="rgb(214,227,27)" fg:x="10327" fg:w="456"/><text x="51.2578%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (493 instructions, 2.43%)</title><rect x="50.9648%" y="165" width="2.4330%" height="15" fill="rgb(250,16,19)" fg:x="10327" fg:w="493"/><text x="51.2578%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.27%)</title><rect x="53.3978%" y="149" width="0.2665%" height="15" fill="rgb(251,174,54)" fg:x="10820" fg:w="54"/><text x="53.6908%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.47%)</title><rect x="53.6643%" y="149" width="0.4688%" height="15" fill="rgb(248,52,39)" fg:x="10874" fg:w="95"/><text x="53.9573%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 1.14%)</title><rect x="53.3978%" y="165" width="1.1351%" height="15" fill="rgb(220,140,16)" fg:x="10820" fg:w="230"/><text x="53.6908%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,261 instructions, 55.57%)</title><rect x="0.8439%" y="181" width="55.5742%" height="15" fill="rgb(245,108,36)" fg:x="171" fg:w="11261"/><text x="1.1369%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.06%)</title><rect x="56.4181%" y="149" width="0.0592%" height="15" fill="rgb(242,124,44)" fg:x="11432" fg:w="12"/><text x="56.7111%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.27%)</title><rect x="56.4773%" y="117" width="0.2665%" height="15" fill="rgb(247,180,25)" fg:x="11444" fg:w="54"/><text x="56.7703%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.67%)</title><rect x="56.4773%" y="133" width="0.6662%" height="15" fill="rgb(235,65,4)" fg:x="11444" fg:w="135"/><text x="56.7703%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.80%)</title><rect x="56.4773%" y="149" width="0.7995%" height="15" fill="rgb(220,217,18)" fg:x="11444" fg:w="162"/><text x="56.7703%" y="159.50"></text></g><g><title>memset (136 instructions, 0.67%)</title><rect x="57.2768%" y="149" width="0.6712%" height="15" fill="rgb(214,10,27)" fg:x="11606" fg:w="136"/><text x="57.5698%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (468 instructions, 2.31%)</title><rect x="56.4181%" y="165" width="2.3096%" height="15" fill="rgb(226,54,21)" fg:x="11432" fg:w="468"/><text x="56.7111%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.16%)</title><rect x="58.7277%" y="149" width="0.1579%" height="15" fill="rgb(243,42,3)" fg:x="11900" fg:w="32"/><text x="59.0207%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="58.8857%" y="101" width="0.3751%" height="15" fill="rgb(206,159,4)" fg:x="11932" fg:w="76"/><text x="59.1786%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.54%)</title><rect x="58.8857%" y="117" width="0.5429%" height="15" fill="rgb(206,78,1)" fg:x="11932" fg:w="110"/><text x="59.1786%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (177 instructions, 0.87%)</title><rect x="58.8857%" y="133" width="0.8735%" height="15" fill="rgb(212,227,29)" fg:x="11932" fg:w="177"/><text x="59.1786%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.05%)</title><rect x="59.7592%" y="133" width="0.0543%" height="15" fill="rgb(221,200,31)" fg:x="12109" fg:w="11"/><text x="60.0521%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.05%)</title><rect x="59.8135%" y="133" width="0.0543%" height="15" fill="rgb(226,16,46)" fg:x="12120" fg:w="11"/><text x="60.1064%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (361 instructions, 1.78%)</title><rect x="58.8857%" y="149" width="1.7816%" height="15" fill="rgb(225,81,9)" fg:x="11932" fg:w="361"/><text x="59.1786%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.15%)</title><rect x="60.6672%" y="149" width="0.1481%" height="15" fill="rgb(234,66,46)" fg:x="12293" fg:w="30"/><text x="60.9602%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.02%)</title><rect x="60.8153%" y="149" width="0.0247%" height="15" fill="rgb(212,195,2)" fg:x="12323" fg:w="5"/><text x="61.1082%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (496 instructions, 2.45%)</title><rect x="58.7277%" y="165" width="2.4478%" height="15" fill="rgb(228,35,12)" fg:x="11900" fg:w="496"/><text x="59.0207%" y="175.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="61.1755%" y="165" width="0.0197%" height="15" fill="rgb(232,50,39)" fg:x="12396" fg:w="4"/><text x="61.4685%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.27%)</title><rect x="61.1953%" y="165" width="0.2714%" height="15" fill="rgb(207,88,54)" fg:x="12400" fg:w="55"/><text x="61.4883%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,097 instructions, 5.41%)</title><rect x="56.4181%" y="181" width="5.4138%" height="15" fill="rgb(235,97,2)" fg:x="11432" fg:w="1097"/><text x="56.7111%" y="191.50">ic_cd..</text></g><g><title>hashmap::batch_remove_7_::{{closure}} (19,801 instructions, 97.72%)</title><rect x="0.8439%" y="197" width="97.7200%" height="15" fill="rgb(215,91,11)" fg:x="171" fg:w="19801"/><text x="1.1369%" y="207.50">hashmap::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.06%)</title><rect x="98.5639%" y="197" width="0.0592%" height="15" fill="rgb(253,89,7)" fg:x="19972" fg:w="12"/><text x="98.8569%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.40%)</title><rect x="98.6231%" y="197" width="0.3997%" height="15" fill="rgb(226,1,37)" fg:x="19984" fg:w="81"/><text x="98.9161%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.49%)</title><rect x="99.0228%" y="197" width="0.4935%" height="15" fill="rgb(231,74,37)" fg:x="20065" fg:w="100"/><text x="99.3158%" y="207.50"></text></g><g><title>all (20,263 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,192,39)" fg:x="0" fg:w="20263"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (20,263 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,18,17)" fg:x="0" fg:w="20263"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>