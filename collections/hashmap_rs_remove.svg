<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="17117"><g><title>ic_cdk::setup (19 instructions, 0.11%)</title><rect x="0.0000%" y="197" width="0.1110%" height="15" fill="rgb(218,158,41)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="0.1110%" y="197" width="0.4440%" height="15" fill="rgb(209,157,31)" fg:x="19" fg:w="76"/><text x="0.4040%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="0.5550%" y="197" width="0.4440%" height="15" fill="rgb(209,158,35)" fg:x="95" fg:w="76"/><text x="0.8480%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="0.9990%" y="165" width="0.4440%" height="15" fill="rgb(248,117,41)" fg:x="171" fg:w="76"/><text x="1.2920%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.41%)</title><rect x="1.4430%" y="149" width="0.4148%" height="15" fill="rgb(240,191,32)" fg:x="247" fg:w="71"/><text x="1.7360%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.8578%" y="133" width="0.0234%" height="15" fill="rgb(209,98,29)" fg:x="318" fg:w="4"/><text x="2.1508%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.34%)</title><rect x="1.8578%" y="149" width="2.3369%" height="15" fill="rgb(219,146,23)" fg:x="318" fg:w="400"/><text x="2.1508%" y="159.50">c..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.50%)</title><rect x="4.1947%" y="149" width="0.4966%" height="15" fill="rgb(214,226,1)" fg:x="718" fg:w="85"/><text x="4.4876%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.33%)</title><rect x="4.6912%" y="149" width="0.3272%" height="15" fill="rgb(211,68,15)" fg:x="803" fg:w="56"/><text x="4.9842%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.33%)</title><rect x="5.0184%" y="149" width="0.3272%" height="15" fill="rgb(209,70,54)" fg:x="859" fg:w="56"/><text x="5.3114%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.33%)</title><rect x="5.3456%" y="149" width="0.3272%" height="15" fill="rgb(214,41,40)" fg:x="915" fg:w="56"/><text x="5.6385%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (56 instructions, 0.33%)</title><rect x="5.6727%" y="149" width="0.3272%" height="15" fill="rgb(212,57,54)" fg:x="971" fg:w="56"/><text x="5.9657%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.41%)</title><rect x="5.9999%" y="149" width="0.4148%" height="15" fill="rgb(232,135,9)" fg:x="1027" fg:w="71"/><text x="6.2929%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (69 instructions, 0.40%)</title><rect x="6.4147%" y="149" width="0.4031%" height="15" fill="rgb(226,216,4)" fg:x="1098" fg:w="69"/><text x="6.7076%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="6.8178%" y="133" width="0.0234%" height="15" fill="rgb(211,37,47)" fg:x="1167" fg:w="4"/><text x="7.1108%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.34%)</title><rect x="6.8178%" y="149" width="2.3369%" height="15" fill="rgb(241,162,32)" fg:x="1167" fg:w="400"/><text x="7.1108%" y="159.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="9.1546%" y="149" width="0.0935%" height="15" fill="rgb(212,75,19)" fg:x="1567" fg:w="16"/><text x="9.4476%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="9.2481%" y="133" width="0.4440%" height="15" fill="rgb(208,206,2)" fg:x="1583" fg:w="76"/><text x="9.5411%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.35%)</title><rect x="9.6921%" y="101" width="0.3505%" height="15" fill="rgb(242,96,9)" fg:x="1659" fg:w="60"/><text x="9.9851%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.50%)</title><rect x="9.6921%" y="117" width="0.4966%" height="15" fill="rgb(241,47,52)" fg:x="1659" fg:w="85"/><text x="9.9851%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="10.1887%" y="69" width="0.0526%" height="15" fill="rgb(222,165,52)" fg:x="1744" fg:w="9"/><text x="10.4817%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.18%)</title><rect x="10.2413%" y="53" width="0.1753%" height="15" fill="rgb(254,129,43)" fg:x="1753" fg:w="30"/><text x="10.5342%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.32%)</title><rect x="10.2413%" y="69" width="0.3213%" height="15" fill="rgb(245,13,49)" fg:x="1753" fg:w="55"/><text x="10.5342%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.69%)</title><rect x="10.1887%" y="85" width="0.6894%" height="15" fill="rgb(244,6,36)" fg:x="1744" fg:w="118"/><text x="10.4817%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 1.00%)</title><rect x="10.1887%" y="101" width="0.9990%" height="15" fill="rgb(244,91,36)" fg:x="1744" fg:w="171"/><text x="10.4817%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 1.03%)</title><rect x="10.1887%" y="117" width="1.0282%" height="15" fill="rgb(210,43,21)" fg:x="1744" fg:w="176"/><text x="10.4817%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 2.17%)</title><rect x="9.6921%" y="133" width="2.1733%" height="15" fill="rgb(207,80,36)" fg:x="1659" fg:w="372"/><text x="9.9851%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 3.47%)</title><rect x="9.2481%" y="149" width="3.4702%" height="15" fill="rgb(220,168,30)" fg:x="1583" fg:w="594"/><text x="9.5411%" y="159.50">all..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.50%)</title><rect x="12.7184%" y="149" width="0.4966%" height="15" fill="rgb(240,228,33)" fg:x="2177" fg:w="85"/><text x="13.0113%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.32%)</title><rect x="13.2149%" y="149" width="0.3213%" height="15" fill="rgb(245,224,34)" fg:x="2262" fg:w="55"/><text x="13.5079%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.39%)</title><rect x="13.5363%" y="149" width="0.3856%" height="15" fill="rgb(236,201,34)" fg:x="2317" fg:w="66"/><text x="13.8292%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (69 instructions, 0.40%)</title><rect x="13.9218%" y="149" width="0.4031%" height="15" fill="rgb(217,25,25)" fg:x="2383" fg:w="69"/><text x="14.2148%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="14.3249%" y="117" width="0.0234%" height="15" fill="rgb(234,205,27)" fg:x="2452" fg:w="4"/><text x="14.6179%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (400 instructions, 2.34%)</title><rect x="14.3249%" y="133" width="2.3369%" height="15" fill="rgb(249,186,27)" fg:x="2452" fg:w="400"/><text x="14.6179%" y="143.50">c..</text></g><g><title>memcmp (16 instructions, 0.09%)</title><rect x="16.6618%" y="133" width="0.0935%" height="15" fill="rgb(253,157,43)" fg:x="2852" fg:w="16"/><text x="16.9548%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="16.7553%" y="117" width="0.4440%" height="15" fill="rgb(237,79,14)" fg:x="2868" fg:w="76"/><text x="17.0482%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.35%)</title><rect x="17.1993%" y="85" width="0.3505%" height="15" fill="rgb(226,145,44)" fg:x="2944" fg:w="60"/><text x="17.4922%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.50%)</title><rect x="17.1993%" y="101" width="0.4966%" height="15" fill="rgb(242,82,45)" fg:x="2944" fg:w="85"/><text x="17.4922%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="17.6959%" y="53" width="0.0526%" height="15" fill="rgb(216,18,37)" fg:x="3029" fg:w="9"/><text x="17.9888%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.18%)</title><rect x="17.7484%" y="37" width="0.1753%" height="15" fill="rgb(247,213,39)" fg:x="3038" fg:w="30"/><text x="18.0414%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.32%)</title><rect x="17.7484%" y="53" width="0.3213%" height="15" fill="rgb(244,91,19)" fg:x="3038" fg:w="55"/><text x="18.0414%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.69%)</title><rect x="17.6959%" y="69" width="0.6894%" height="15" fill="rgb(253,15,43)" fg:x="3029" fg:w="118"/><text x="17.9888%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 1.00%)</title><rect x="17.6959%" y="85" width="0.9990%" height="15" fill="rgb(231,102,18)" fg:x="3029" fg:w="171"/><text x="17.9888%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 1.03%)</title><rect x="17.6959%" y="101" width="1.0282%" height="15" fill="rgb(214,206,4)" fg:x="3029" fg:w="176"/><text x="17.9888%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 2.17%)</title><rect x="17.1993%" y="117" width="2.1733%" height="15" fill="rgb(239,78,18)" fg:x="2944" fg:w="372"/><text x="17.4922%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (594 instructions, 3.47%)</title><rect x="16.7553%" y="133" width="3.4702%" height="15" fill="rgb(238,32,21)" fg:x="2868" fg:w="594"/><text x="17.0482%" y="143.50">all..</text></g><g><title>binread::binary_template::write_vec_named (85 instructions, 0.50%)</title><rect x="20.2255%" y="133" width="0.4966%" height="15" fill="rgb(246,46,4)" fg:x="3462" fg:w="85"/><text x="20.5185%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.32%)</title><rect x="20.7221%" y="133" width="0.3213%" height="15" fill="rgb(244,155,6)" fg:x="3547" fg:w="55"/><text x="21.0151%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.41%)</title><rect x="21.0434%" y="117" width="0.4148%" height="15" fill="rgb(229,58,6)" fg:x="3602" fg:w="71"/><text x="21.3364%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.56%)</title><rect x="21.4582%" y="117" width="0.5550%" height="15" fill="rgb(235,45,36)" fg:x="3673" fg:w="95"/><text x="21.7512%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.39%)</title><rect x="22.0132%" y="117" width="0.3856%" height="15" fill="rgb(225,198,42)" fg:x="3768" fg:w="66"/><text x="22.3062%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 1.65%)</title><rect x="21.0434%" y="133" width="1.6533%" height="15" fill="rgb(240,83,23)" fg:x="3602" fg:w="283"/><text x="21.3364%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (79 instructions, 0.46%)</title><rect x="22.6967%" y="133" width="0.4615%" height="15" fill="rgb(253,205,9)" fg:x="3885" fg:w="79"/><text x="22.9897%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,681 instructions, 9.82%)</title><rect x="14.3249%" y="149" width="9.8206%" height="15" fill="rgb(214,137,20)" fg:x="2452" fg:w="1681"/><text x="14.6179%" y="159.50">binread::bin..</text></g><g><title>binread::binary_template::write_end_struct (66 instructions, 0.39%)</title><rect x="24.1456%" y="149" width="0.3856%" height="15" fill="rgb(221,169,18)" fg:x="4133" fg:w="66"/><text x="24.4386%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.08%)</title><rect x="24.5312%" y="149" width="0.0759%" height="15" fill="rgb(216,39,31)" fg:x="4199" fg:w="13"/><text x="24.8241%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.08%)</title><rect x="24.6071%" y="149" width="0.0759%" height="15" fill="rgb(220,227,6)" fg:x="4212" fg:w="13"/><text x="24.9001%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.04%)</title><rect x="24.6831%" y="149" width="0.0409%" height="15" fill="rgb(224,61,6)" fg:x="4225" fg:w="7"/><text x="24.9760%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.07%)</title><rect x="24.7240%" y="149" width="0.0701%" height="15" fill="rgb(214,13,40)" fg:x="4232" fg:w="12"/><text x="25.0169%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="24.7941%" y="133" width="0.4440%" height="15" fill="rgb(231,47,32)" fg:x="4244" fg:w="76"/><text x="25.0870%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.93%)</title><rect x="24.7941%" y="149" width="0.9289%" height="15" fill="rgb(248,150,10)" fg:x="4244" fg:w="159"/><text x="25.0870%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="25.7230%" y="117" width="0.4440%" height="15" fill="rgb(217,229,7)" fg:x="4403" fg:w="76"/><text x="26.0159%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.65%)</title><rect x="25.7230%" y="133" width="0.6485%" height="15" fill="rgb(233,37,18)" fg:x="4403" fg:w="111"/><text x="26.0159%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (183 instructions, 1.07%)</title><rect x="25.7230%" y="149" width="1.0691%" height="15" fill="rgb(224,23,52)" fg:x="4403" fg:w="183"/><text x="26.0159%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="26.7921%" y="149" width="0.4440%" height="15" fill="rgb(221,227,34)" fg:x="4586" fg:w="76"/><text x="27.0850%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.47%)</title><rect x="27.2361%" y="149" width="0.4732%" height="15" fill="rgb(213,158,26)" fg:x="4662" fg:w="81"/><text x="27.5290%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="27.7093%" y="149" width="0.4440%" height="15" fill="rgb(239,174,44)" fg:x="4743" fg:w="76"/><text x="28.0023%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="28.1533%" y="149" width="0.4440%" height="15" fill="rgb(215,76,21)" fg:x="4819" fg:w="76"/><text x="28.4463%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 instructions, 0.01%)</title><rect x="28.5973%" y="149" width="0.0117%" height="15" fill="rgb(231,221,5)" fg:x="4895" fg:w="2"/><text x="28.8903%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.47%)</title><rect x="28.6090%" y="149" width="0.4732%" height="15" fill="rgb(215,215,51)" fg:x="4897" fg:w="81"/><text x="28.9020%" y="159.50"></text></g><g><title>memcpy (381 instructions, 2.23%)</title><rect x="29.0822%" y="149" width="2.2259%" height="15" fill="rgb(224,229,42)" fg:x="4978" fg:w="381"/><text x="29.3752%" y="159.50">m..</text></g><g><title>memcpy (381 instructions, 2.23%)</title><rect x="31.3081%" y="149" width="2.2259%" height="15" fill="rgb(215,148,26)" fg:x="5359" fg:w="381"/><text x="31.6010%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new (6,396 instructions, 37.37%)</title><rect x="1.4430%" y="165" width="37.3664%" height="15" fill="rgb(237,161,52)" fg:x="247" fg:w="6396"/><text x="1.7360%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (336 instructions, 1.96%)</title><rect x="38.8094%" y="165" width="1.9630%" height="15" fill="rgb(218,36,9)" fg:x="6643" fg:w="336"/><text x="39.1023%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="40.7723%" y="133" width="0.0292%" height="15" fill="rgb(217,175,47)" fg:x="6979" fg:w="5"/><text x="41.0653%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.23%)</title><rect x="40.7723%" y="149" width="0.2278%" height="15" fill="rgb(240,57,25)" fg:x="6979" fg:w="39"/><text x="41.0653%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="41.0002%" y="149" width="0.4440%" height="15" fill="rgb(241,186,20)" fg:x="7018" fg:w="76"/><text x="41.2931%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="41.4442%" y="133" width="0.0292%" height="15" fill="rgb(249,151,2)" fg:x="7094" fg:w="5"/><text x="41.7371%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="41.4734%" y="117" width="0.3096%" height="15" fill="rgb(216,28,28)" fg:x="7099" fg:w="53"/><text x="41.7664%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.52%)</title><rect x="41.7830%" y="117" width="0.5200%" height="15" fill="rgb(234,99,21)" fg:x="7152" fg:w="89"/><text x="42.0760%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.94%)</title><rect x="42.3030%" y="117" width="0.9406%" height="15" fill="rgb(237,80,6)" fg:x="7241" fg:w="161"/><text x="42.5959%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.15%)</title><rect x="41.4734%" y="133" width="3.1548%" height="15" fill="rgb(245,163,2)" fg:x="7099" fg:w="540"/><text x="41.7664%" y="143.50">co..</text></g><g><title>candid::types::internal::env_add (759 instructions, 4.43%)</title><rect x="41.4442%" y="149" width="4.4342%" height="15" fill="rgb(230,102,49)" fg:x="7094" fg:w="759"/><text x="41.7371%" y="159.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="45.8784%" y="149" width="0.4440%" height="15" fill="rgb(241,127,15)" fg:x="7853" fg:w="76"/><text x="46.1713%" y="159.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="46.3224%" y="133" width="0.0292%" height="15" fill="rgb(246,154,44)" fg:x="7929" fg:w="5"/><text x="46.6153%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="46.3516%" y="117" width="0.3096%" height="15" fill="rgb(209,149,12)" fg:x="7934" fg:w="53"/><text x="46.6445%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.52%)</title><rect x="46.6612%" y="117" width="0.5200%" height="15" fill="rgb(235,136,23)" fg:x="7987" fg:w="89"/><text x="46.9542%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.94%)</title><rect x="47.1812%" y="117" width="0.9406%" height="15" fill="rgb(245,50,4)" fg:x="8076" fg:w="161"/><text x="47.4741%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.15%)</title><rect x="46.3516%" y="133" width="3.1548%" height="15" fill="rgb(206,188,8)" fg:x="7934" fg:w="540"/><text x="46.6445%" y="143.50">co..</text></g><g><title>memcmp (68 instructions, 0.40%)</title><rect x="49.5063%" y="133" width="0.3973%" height="15" fill="rgb(243,86,29)" fg:x="8474" fg:w="68"/><text x="49.7993%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.47%)</title><rect x="49.9036%" y="117" width="0.4732%" height="15" fill="rgb(253,69,24)" fg:x="8542" fg:w="81"/><text x="50.1966%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (111 instructions, 0.65%)</title><rect x="49.9036%" y="133" width="0.6485%" height="15" fill="rgb(250,114,31)" fg:x="8542" fg:w="111"/><text x="50.1966%" y="143.50"></text></g><g><title>candid::types::internal::env_add (893 instructions, 5.22%)</title><rect x="46.3224%" y="149" width="5.2170%" height="15" fill="rgb(242,1,34)" fg:x="7929" fg:w="893"/><text x="46.6153%" y="159.50">candi..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.31%)</title><rect x="51.5394%" y="101" width="0.3096%" height="15" fill="rgb(247,137,6)" fg:x="8822" fg:w="53"/><text x="51.8324%" y="111.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.46%)</title><rect x="51.5394%" y="117" width="0.4615%" height="15" fill="rgb(235,177,52)" fg:x="8822" fg:w="79"/><text x="51.8324%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 1.71%)</title><rect x="51.5394%" y="133" width="1.7059%" height="15" fill="rgb(231,112,26)" fg:x="8822" fg:w="292"/><text x="51.8324%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.192 (15 instructions, 0.09%)</title><rect x="53.2453%" y="133" width="0.0876%" height="15" fill="rgb(249,59,11)" fg:x="9114" fg:w="15"/><text x="53.5383%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="53.3329%" y="133" width="0.0643%" height="15" fill="rgb(221,80,23)" fg:x="9129" fg:w="11"/><text x="53.6259%" y="143.50"></text></g><g><title>candid::types::internal::env_id (479 instructions, 2.80%)</title><rect x="51.5394%" y="149" width="2.7984%" height="15" fill="rgb(225,83,46)" fg:x="8822" fg:w="479"/><text x="51.8324%" y="159.50">ca..</text></g><g><title>candid::types::CandidType::ty (2,429 instructions, 14.19%)</title><rect x="40.7723%" y="165" width="14.1906%" height="15" fill="rgb(210,34,4)" fg:x="6979" fg:w="2429"/><text x="41.0653%" y="175.50">candid::types::Can..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (33 instructions, 0.19%)</title><rect x="54.9629%" y="149" width="0.1928%" height="15" fill="rgb(253,165,12)" fg:x="9408" fg:w="33"/><text x="55.2559%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (124 instructions, 0.72%)</title><rect x="55.1557%" y="133" width="0.7244%" height="15" fill="rgb(207,81,32)" fg:x="9441" fg:w="124"/><text x="55.4487%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (124 instructions, 0.72%)</title><rect x="56.0554%" y="133" width="0.7244%" height="15" fill="rgb(244,205,34)" fg:x="9595" fg:w="124"/><text x="56.3484%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (308 instructions, 1.80%)</title><rect x="55.1557%" y="149" width="1.7994%" height="15" fill="rgb(234,38,11)" fg:x="9441" fg:w="308"/><text x="55.4487%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1714 (16 instructions, 0.09%)</title><rect x="56.9551%" y="133" width="0.0935%" height="15" fill="rgb(232,55,53)" fg:x="9749" fg:w="16"/><text x="57.2480%" y="143.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1714 (16 instructions, 0.09%)</title><rect x="57.0485%" y="133" width="0.0935%" height="15" fill="rgb(221,104,44)" fg:x="9765" fg:w="16"/><text x="57.3415%" y="143.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (121 instructions, 0.71%)</title><rect x="56.9551%" y="149" width="0.7069%" height="15" fill="rgb(218,16,13)" fg:x="9749" fg:w="121"/><text x="57.2480%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="57.6620%" y="149" width="0.0643%" height="15" fill="rgb(246,76,42)" fg:x="9870" fg:w="11"/><text x="57.9549%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="57.7262%" y="149" width="0.0643%" height="15" fill="rgb(221,169,26)" fg:x="9881" fg:w="11"/><text x="58.0192%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="57.7905%" y="149" width="0.0643%" height="15" fill="rgb(232,168,4)" fg:x="9892" fg:w="11"/><text x="58.0835%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::deserialize_with_type (663 instructions, 3.87%)</title><rect x="54.9629%" y="165" width="3.8733%" height="15" fill="rgb(242,57,46)" fg:x="9408" fg:w="663"/><text x="55.2559%" y="175.50">can..</text></g><g><title>memcpy (411 instructions, 2.40%)</title><rect x="58.8362%" y="165" width="2.4011%" height="15" fill="rgb(218,200,42)" fg:x="10071" fg:w="411"/><text x="59.1292%" y="175.50">m..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="61.2374%" y="149" width="0.0292%" height="15" fill="rgb(228,171,47)" fg:x="10482" fg:w="5"/><text x="61.5303%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (170 instructions, 0.99%)</title><rect x="61.2666%" y="149" width="0.9932%" height="15" fill="rgb(214,65,47)" fg:x="10487" fg:w="170"/><text x="61.5595%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.37%)</title><rect x="62.2597%" y="117" width="0.3681%" height="15" fill="rgb(215,89,31)" fg:x="10657" fg:w="63"/><text x="62.5527%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (165 instructions, 0.96%)</title><rect x="62.2597%" y="133" width="0.9640%" height="15" fill="rgb(253,13,1)" fg:x="10657" fg:w="165"/><text x="62.5527%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (195 instructions, 1.14%)</title><rect x="62.2597%" y="149" width="1.1392%" height="15" fill="rgb(249,101,50)" fg:x="10657" fg:w="195"/><text x="62.5527%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="63.3990%" y="149" width="0.0643%" height="15" fill="rgb(242,214,4)" fg:x="10852" fg:w="11"/><text x="63.6919%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::done (448 instructions, 2.62%)</title><rect x="61.2374%" y="165" width="2.6173%" height="15" fill="rgb(238,100,15)" fg:x="10482" fg:w="448"/><text x="61.5303%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (63 instructions, 0.37%)</title><rect x="63.8546%" y="149" width="0.3681%" height="15" fill="rgb(231,94,52)" fg:x="10930" fg:w="63"/><text x="64.1476%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 1.15%)</title><rect x="63.8546%" y="165" width="1.1509%" height="15" fill="rgb(209,80,3)" fg:x="10930" fg:w="197"/><text x="64.1476%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,113 instructions, 64.92%)</title><rect x="0.9990%" y="181" width="64.9238%" height="15" fill="rgb(252,35,9)" fg:x="171" fg:w="11113"/><text x="1.2920%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="65.9228%" y="181" width="0.3272%" height="15" fill="rgb(236,217,13)" fg:x="11284" fg:w="56"/><text x="66.2157%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (97 instructions, 0.57%)</title><rect x="66.2499%" y="181" width="0.5667%" height="15" fill="rgb(245,162,1)" fg:x="11340" fg:w="97"/><text x="66.5429%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="66.8166%" y="181" width="0.3272%" height="15" fill="rgb(232,173,30)" fg:x="11437" fg:w="56"/><text x="67.1096%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="67.1438%" y="181" width="0.3272%" height="15" fill="rgb(214,85,3)" fg:x="11493" fg:w="56"/><text x="67.4367%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="67.4709%" y="181" width="0.3272%" height="15" fill="rgb(248,3,1)" fg:x="11549" fg:w="56"/><text x="67.7639%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="67.7981%" y="181" width="0.3272%" height="15" fill="rgb(231,152,24)" fg:x="11605" fg:w="56"/><text x="68.0911%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="68.1253%" y="181" width="0.3272%" height="15" fill="rgb(237,160,35)" fg:x="11661" fg:w="56"/><text x="68.4182%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="68.4524%" y="181" width="0.3272%" height="15" fill="rgb(239,157,16)" fg:x="11717" fg:w="56"/><text x="68.7454%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="68.7796%" y="181" width="0.3272%" height="15" fill="rgb(251,221,18)" fg:x="11773" fg:w="56"/><text x="69.0725%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="69.1067%" y="181" width="0.3272%" height="15" fill="rgb(227,224,29)" fg:x="11829" fg:w="56"/><text x="69.3997%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="69.4339%" y="181" width="0.3272%" height="15" fill="rgb(252,5,44)" fg:x="11885" fg:w="56"/><text x="69.7269%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (97 instructions, 0.57%)</title><rect x="69.7611%" y="181" width="0.5667%" height="15" fill="rgb(232,63,38)" fg:x="11941" fg:w="97"/><text x="70.0540%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="70.3277%" y="181" width="0.3272%" height="15" fill="rgb(207,181,29)" fg:x="12038" fg:w="56"/><text x="70.6207%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="70.6549%" y="181" width="0.3272%" height="15" fill="rgb(224,12,4)" fg:x="12094" fg:w="56"/><text x="70.9479%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="70.9821%" y="181" width="0.3272%" height="15" fill="rgb(217,183,35)" fg:x="12150" fg:w="56"/><text x="71.2750%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="71.3092%" y="181" width="0.3272%" height="15" fill="rgb(205,101,33)" fg:x="12206" fg:w="56"/><text x="71.6022%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="71.6364%" y="181" width="0.3272%" height="15" fill="rgb(231,165,19)" fg:x="12262" fg:w="56"/><text x="71.9294%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="71.9635%" y="181" width="0.3272%" height="15" fill="rgb(236,147,48)" fg:x="12318" fg:w="56"/><text x="72.2565%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="72.2907%" y="181" width="0.3272%" height="15" fill="rgb(251,223,16)" fg:x="12374" fg:w="56"/><text x="72.5837%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="72.6179%" y="181" width="0.3272%" height="15" fill="rgb(222,28,8)" fg:x="12430" fg:w="56"/><text x="72.9108%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="72.9450%" y="181" width="0.3272%" height="15" fill="rgb(206,181,26)" fg:x="12486" fg:w="56"/><text x="73.2380%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="73.2722%" y="181" width="0.3272%" height="15" fill="rgb(208,182,10)" fg:x="12542" fg:w="56"/><text x="73.5652%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="73.5993%" y="181" width="0.3272%" height="15" fill="rgb(227,164,22)" fg:x="12598" fg:w="56"/><text x="73.8923%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="73.9265%" y="181" width="0.3272%" height="15" fill="rgb(235,1,51)" fg:x="12654" fg:w="56"/><text x="74.2195%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="74.2537%" y="181" width="0.3272%" height="15" fill="rgb(216,175,21)" fg:x="12710" fg:w="56"/><text x="74.5466%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="74.5808%" y="181" width="0.3272%" height="15" fill="rgb(243,103,4)" fg:x="12766" fg:w="56"/><text x="74.8738%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="74.9080%" y="181" width="0.3272%" height="15" fill="rgb(242,227,53)" fg:x="12822" fg:w="56"/><text x="75.2010%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="75.2351%" y="181" width="0.3272%" height="15" fill="rgb(236,151,46)" fg:x="12878" fg:w="56"/><text x="75.5281%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="75.5623%" y="181" width="0.3272%" height="15" fill="rgb(247,27,29)" fg:x="12934" fg:w="56"/><text x="75.8553%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="75.8895%" y="181" width="0.3272%" height="15" fill="rgb(215,75,42)" fg:x="12990" fg:w="56"/><text x="76.1824%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="76.2166%" y="181" width="0.3272%" height="15" fill="rgb(236,31,38)" fg:x="13046" fg:w="56"/><text x="76.5096%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="76.5438%" y="181" width="0.3272%" height="15" fill="rgb(223,187,49)" fg:x="13102" fg:w="56"/><text x="76.8368%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="76.8709%" y="181" width="0.3272%" height="15" fill="rgb(249,71,22)" fg:x="13158" fg:w="56"/><text x="77.1639%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="77.1981%" y="181" width="0.3272%" height="15" fill="rgb(219,196,16)" fg:x="13214" fg:w="56"/><text x="77.4911%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (97 instructions, 0.57%)</title><rect x="77.5253%" y="181" width="0.5667%" height="15" fill="rgb(218,147,24)" fg:x="13270" fg:w="97"/><text x="77.8182%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="78.0920%" y="181" width="0.3272%" height="15" fill="rgb(224,186,17)" fg:x="13367" fg:w="56"/><text x="78.3849%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="78.4191%" y="181" width="0.3272%" height="15" fill="rgb(215,225,53)" fg:x="13423" fg:w="56"/><text x="78.7121%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="78.7463%" y="181" width="0.3272%" height="15" fill="rgb(230,159,29)" fg:x="13479" fg:w="56"/><text x="79.0392%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="79.0734%" y="181" width="0.3272%" height="15" fill="rgb(230,139,21)" fg:x="13535" fg:w="56"/><text x="79.3664%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (97 instructions, 0.57%)</title><rect x="79.4006%" y="181" width="0.5667%" height="15" fill="rgb(253,107,13)" fg:x="13591" fg:w="97"/><text x="79.6936%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (97 instructions, 0.57%)</title><rect x="79.9673%" y="181" width="0.5667%" height="15" fill="rgb(222,116,4)" fg:x="13688" fg:w="97"/><text x="80.2603%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="80.5340%" y="181" width="0.3272%" height="15" fill="rgb(216,210,12)" fg:x="13785" fg:w="56"/><text x="80.8269%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="80.8611%" y="181" width="0.3272%" height="15" fill="rgb(240,165,28)" fg:x="13841" fg:w="56"/><text x="81.1541%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="81.1883%" y="181" width="0.3272%" height="15" fill="rgb(230,13,44)" fg:x="13897" fg:w="56"/><text x="81.4813%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="81.5155%" y="181" width="0.3272%" height="15" fill="rgb(221,228,42)" fg:x="13953" fg:w="56"/><text x="81.8084%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="81.8426%" y="181" width="0.3272%" height="15" fill="rgb(227,29,42)" fg:x="14009" fg:w="56"/><text x="82.1356%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="82.1698%" y="181" width="0.3272%" height="15" fill="rgb(235,35,32)" fg:x="14065" fg:w="56"/><text x="82.4627%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="82.4969%" y="181" width="0.3272%" height="15" fill="rgb(211,111,26)" fg:x="14121" fg:w="56"/><text x="82.7899%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="82.8241%" y="181" width="0.3272%" height="15" fill="rgb(249,60,26)" fg:x="14177" fg:w="56"/><text x="83.1171%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (56 instructions, 0.33%)</title><rect x="83.1513%" y="181" width="0.3272%" height="15" fill="rgb(242,124,51)" fg:x="14233" fg:w="56"/><text x="83.4442%" y="191.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="83.4784%" y="149" width="0.0292%" height="15" fill="rgb(229,23,27)" fg:x="14289" fg:w="5"/><text x="83.7714%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (133 instructions, 0.78%)</title><rect x="83.5076%" y="133" width="0.7770%" height="15" fill="rgb(214,53,49)" fg:x="14294" fg:w="133"/><text x="83.8006%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (163 instructions, 0.95%)</title><rect x="83.5076%" y="149" width="0.9523%" height="15" fill="rgb(210,27,39)" fg:x="14294" fg:w="163"/><text x="83.8006%" y="159.50"></text></g><g><title>memset (136 instructions, 0.79%)</title><rect x="84.4599%" y="149" width="0.7945%" height="15" fill="rgb(247,107,30)" fg:x="14457" fg:w="136"/><text x="84.7529%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (463 instructions, 2.70%)</title><rect x="83.4784%" y="165" width="2.7049%" height="15" fill="rgb(236,6,45)" fg:x="14289" fg:w="463"/><text x="83.7714%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.19%)</title><rect x="86.1833%" y="149" width="0.1869%" height="15" fill="rgb(234,107,1)" fg:x="14752" fg:w="32"/><text x="86.4763%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.44%)</title><rect x="86.3703%" y="117" width="0.4440%" height="15" fill="rgb(253,103,26)" fg:x="14784" fg:w="76"/><text x="86.6632%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (111 instructions, 0.65%)</title><rect x="86.3703%" y="133" width="0.6485%" height="15" fill="rgb(220,18,18)" fg:x="14784" fg:w="111"/><text x="86.6632%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (180 instructions, 1.05%)</title><rect x="86.3703%" y="149" width="1.0516%" height="15" fill="rgb(218,145,48)" fg:x="14784" fg:w="180"/><text x="86.6632%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="87.4219%" y="149" width="0.0643%" height="15" fill="rgb(208,93,54)" fg:x="14964" fg:w="11"/><text x="87.7148%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="87.4861%" y="149" width="0.0643%" height="15" fill="rgb(254,131,9)" fg:x="14975" fg:w="11"/><text x="87.7791%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.18%)</title><rect x="87.5504%" y="149" width="0.1753%" height="15" fill="rgb(209,14,42)" fg:x="14986" fg:w="30"/><text x="87.8434%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.03%)</title><rect x="87.7257%" y="149" width="0.0292%" height="15" fill="rgb(225,29,9)" fg:x="15016" fg:w="5"/><text x="88.0186%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (476 instructions, 2.78%)</title><rect x="86.1833%" y="165" width="2.7809%" height="15" fill="rgb(206,157,19)" fg:x="14752" fg:w="476"/><text x="86.4763%" y="175.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="88.9642%" y="165" width="0.0292%" height="15" fill="rgb(227,105,41)" fg:x="15228" fg:w="5"/><text x="89.2572%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.32%)</title><rect x="88.9934%" y="165" width="0.3213%" height="15" fill="rgb(219,148,7)" fg:x="15233" fg:w="55"/><text x="89.2864%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,073 instructions, 6.27%)</title><rect x="83.4784%" y="181" width="6.2686%" height="15" fill="rgb(211,114,48)" fg:x="14289" fg:w="1073"/><text x="83.7714%" y="191.50">ic_cdk:..</text></g><g><title>hashmap::batch_remove_7_::{{closure}} (16,649 instructions, 97.27%)</title><rect x="0.9990%" y="197" width="97.2659%" height="15" fill="rgb(225,180,54)" fg:x="171" fg:w="16649"/><text x="1.2920%" y="207.50">hashmap::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.07%)</title><rect x="98.2649%" y="197" width="0.0701%" height="15" fill="rgb(222,90,3)" fg:x="16820" fg:w="12"/><text x="98.5579%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.47%)</title><rect x="98.3350%" y="197" width="0.4732%" height="15" fill="rgb(223,167,30)" fg:x="16832" fg:w="81"/><text x="98.6280%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (101 instructions, 0.59%)</title><rect x="98.8082%" y="197" width="0.5901%" height="15" fill="rgb(235,193,24)" fg:x="16913" fg:w="101"/><text x="99.1012%" y="207.50"></text></g><g><title>all (17,117 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(211,14,52)" fg:x="0" fg:w="17117"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (17,117 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(231,186,21)" fg:x="0" fg:w="17117"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>