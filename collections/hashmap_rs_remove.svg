<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="23243"><g><title>ic_cdk::setup (24 instructions, 0.10%)</title><rect x="0.0000%" y="197" width="0.1033%" height="15" fill="rgb(244,129,19)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="0.1033%" y="197" width="0.3528%" height="15" fill="rgb(215,169,21)" fg:x="24" fg:w="82"/><text x="0.3962%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="0.4561%" y="197" width="0.3528%" height="15" fill="rgb(246,206,45)" fg:x="106" fg:w="82"/><text x="0.7490%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="0.8088%" y="165" width="0.3528%" height="15" fill="rgb(253,72,9)" fg:x="188" fg:w="82"/><text x="1.1018%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.35%)</title><rect x="1.1616%" y="149" width="0.3528%" height="15" fill="rgb(234,59,14)" fg:x="270" fg:w="82"/><text x="1.4546%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="1.5144%" y="133" width="0.0258%" height="15" fill="rgb(210,216,19)" fg:x="352" fg:w="6"/><text x="1.8074%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.91%)</title><rect x="1.5144%" y="149" width="1.9060%" height="15" fill="rgb(238,14,19)" fg:x="352" fg:w="443"/><text x="1.8074%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.41%)</title><rect x="3.4204%" y="149" width="0.4087%" height="15" fill="rgb(221,99,30)" fg:x="795" fg:w="95"/><text x="3.7134%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.26%)</title><rect x="3.8291%" y="149" width="0.2581%" height="15" fill="rgb(231,211,7)" fg:x="890" fg:w="60"/><text x="4.1221%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.26%)</title><rect x="4.0873%" y="149" width="0.2581%" height="15" fill="rgb(253,142,10)" fg:x="950" fg:w="60"/><text x="4.3802%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.26%)</title><rect x="4.3454%" y="149" width="0.2581%" height="15" fill="rgb(251,45,13)" fg:x="1010" fg:w="60"/><text x="4.6384%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.26%)</title><rect x="4.6035%" y="149" width="0.2581%" height="15" fill="rgb(234,3,33)" fg:x="1070" fg:w="60"/><text x="4.8965%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.35%)</title><rect x="4.8617%" y="149" width="0.3528%" height="15" fill="rgb(240,74,38)" fg:x="1130" fg:w="82"/><text x="5.1546%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.30%)</title><rect x="5.2145%" y="149" width="0.3012%" height="15" fill="rgb(217,126,30)" fg:x="1212" fg:w="70"/><text x="5.5074%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="5.5156%" y="133" width="0.0258%" height="15" fill="rgb(253,158,4)" fg:x="1282" fg:w="6"/><text x="5.8086%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.91%)</title><rect x="5.5156%" y="149" width="1.9060%" height="15" fill="rgb(231,166,30)" fg:x="1282" fg:w="443"/><text x="5.8086%" y="159.50"></text></g><g><title>memcmp (19 instructions, 0.08%)</title><rect x="7.4216%" y="149" width="0.0817%" height="15" fill="rgb(240,48,16)" fg:x="1725" fg:w="19"/><text x="7.7146%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="7.5033%" y="133" width="0.3528%" height="15" fill="rgb(221,27,11)" fg:x="1744" fg:w="82"/><text x="7.7963%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.29%)</title><rect x="7.8561%" y="101" width="0.2883%" height="15" fill="rgb(211,69,15)" fg:x="1826" fg:w="67"/><text x="8.1491%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.41%)</title><rect x="7.8561%" y="117" width="0.4130%" height="15" fill="rgb(253,186,27)" fg:x="1826" fg:w="96"/><text x="8.1491%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.05%)</title><rect x="8.2692%" y="69" width="0.0473%" height="15" fill="rgb(251,168,13)" fg:x="1922" fg:w="11"/><text x="8.5621%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.15%)</title><rect x="8.3165%" y="53" width="0.1506%" height="15" fill="rgb(212,132,45)" fg:x="1933" fg:w="35"/><text x="8.6095%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.28%)</title><rect x="8.3165%" y="69" width="0.2754%" height="15" fill="rgb(222,210,17)" fg:x="1933" fg:w="64"/><text x="8.6095%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.62%)</title><rect x="8.2692%" y="85" width="0.6195%" height="15" fill="rgb(241,83,7)" fg:x="1922" fg:w="144"/><text x="8.5621%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.90%)</title><rect x="8.2692%" y="101" width="0.8992%" height="15" fill="rgb(235,27,36)" fg:x="1922" fg:w="209"/><text x="8.5621%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.94%)</title><rect x="8.2692%" y="117" width="0.9422%" height="15" fill="rgb(219,219,52)" fg:x="1922" fg:w="219"/><text x="8.5621%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 1.97%)</title><rect x="7.8561%" y="133" width="1.9662%" height="15" fill="rgb(218,72,11)" fg:x="1826" fg:w="457"/><text x="8.1491%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 2.91%)</title><rect x="7.5033%" y="149" width="2.9127%" height="15" fill="rgb(248,118,12)" fg:x="1744" fg:w="677"/><text x="7.7963%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.41%)</title><rect x="10.4160%" y="149" width="0.4087%" height="15" fill="rgb(206,54,44)" fg:x="2421" fg:w="95"/><text x="10.7090%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.26%)</title><rect x="10.8248%" y="149" width="0.2581%" height="15" fill="rgb(233,147,44)" fg:x="2516" fg:w="60"/><text x="11.1177%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.33%)</title><rect x="11.0829%" y="149" width="0.3270%" height="15" fill="rgb(208,113,43)" fg:x="2576" fg:w="76"/><text x="11.3759%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.30%)</title><rect x="11.4099%" y="149" width="0.3012%" height="15" fill="rgb(206,77,44)" fg:x="2652" fg:w="70"/><text x="11.7029%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.03%)</title><rect x="11.7111%" y="117" width="0.0258%" height="15" fill="rgb(235,72,5)" fg:x="2722" fg:w="6"/><text x="12.0040%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 1.91%)</title><rect x="11.7111%" y="133" width="1.9060%" height="15" fill="rgb(248,79,19)" fg:x="2722" fg:w="443"/><text x="12.0040%" y="143.50"></text></g><g><title>memcmp (19 instructions, 0.08%)</title><rect x="13.6170%" y="133" width="0.0817%" height="15" fill="rgb(245,189,17)" fg:x="3165" fg:w="19"/><text x="13.9100%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="13.6987%" y="117" width="0.3528%" height="15" fill="rgb(230,8,53)" fg:x="3184" fg:w="82"/><text x="13.9917%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.29%)</title><rect x="14.0515%" y="85" width="0.2883%" height="15" fill="rgb(250,79,30)" fg:x="3266" fg:w="67"/><text x="14.3445%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.41%)</title><rect x="14.0515%" y="101" width="0.4130%" height="15" fill="rgb(242,40,34)" fg:x="3266" fg:w="96"/><text x="14.3445%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.05%)</title><rect x="14.4646%" y="53" width="0.0473%" height="15" fill="rgb(213,228,35)" fg:x="3362" fg:w="11"/><text x="14.7575%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.15%)</title><rect x="14.5119%" y="37" width="0.1506%" height="15" fill="rgb(231,210,26)" fg:x="3373" fg:w="35"/><text x="14.8049%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.28%)</title><rect x="14.5119%" y="53" width="0.2754%" height="15" fill="rgb(233,61,18)" fg:x="3373" fg:w="64"/><text x="14.8049%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.62%)</title><rect x="14.4646%" y="69" width="0.6195%" height="15" fill="rgb(208,120,20)" fg:x="3362" fg:w="144"/><text x="14.7575%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 0.90%)</title><rect x="14.4646%" y="85" width="0.8992%" height="15" fill="rgb(241,143,6)" fg:x="3362" fg:w="209"/><text x="14.7575%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 0.94%)</title><rect x="14.4646%" y="101" width="0.9422%" height="15" fill="rgb(219,214,22)" fg:x="3362" fg:w="219"/><text x="14.7575%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 1.97%)</title><rect x="14.0515%" y="117" width="1.9662%" height="15" fill="rgb(216,99,16)" fg:x="3266" fg:w="457"/><text x="14.3445%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 2.91%)</title><rect x="13.6987%" y="133" width="2.9127%" height="15" fill="rgb(205,16,40)" fg:x="3184" fg:w="677"/><text x="13.9917%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.41%)</title><rect x="16.6115%" y="133" width="0.4087%" height="15" fill="rgb(215,85,22)" fg:x="3861" fg:w="95"/><text x="16.9044%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.26%)</title><rect x="17.0202%" y="133" width="0.2581%" height="15" fill="rgb(249,135,6)" fg:x="3956" fg:w="60"/><text x="17.3131%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.35%)</title><rect x="17.2783%" y="117" width="0.3528%" height="15" fill="rgb(240,211,30)" fg:x="4016" fg:w="82"/><text x="17.5713%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.41%)</title><rect x="17.6311%" y="117" width="0.4087%" height="15" fill="rgb(210,90,30)" fg:x="4098" fg:w="95"/><text x="17.9241%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.33%)</title><rect x="18.0398%" y="117" width="0.3270%" height="15" fill="rgb(219,97,42)" fg:x="4193" fg:w="76"/><text x="18.3328%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 1.42%)</title><rect x="17.2783%" y="133" width="1.4198%" height="15" fill="rgb(205,19,6)" fg:x="4016" fg:w="330"/><text x="17.5713%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="18.6981%" y="133" width="0.3528%" height="15" fill="rgb(220,194,26)" fg:x="4346" fg:w="82"/><text x="18.9911%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,952 instructions, 8.40%)</title><rect x="11.7111%" y="149" width="8.3982%" height="15" fill="rgb(221,13,43)" fg:x="2722" fg:w="1952"/><text x="12.0040%" y="159.50">binread::b..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.33%)</title><rect x="20.1093%" y="149" width="0.3270%" height="15" fill="rgb(252,29,27)" fg:x="4674" fg:w="76"/><text x="20.4022%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="20.4363%" y="149" width="0.0645%" height="15" fill="rgb(206,203,14)" fg:x="4750" fg:w="15"/><text x="20.7292%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="20.5008%" y="149" width="0.0645%" height="15" fill="rgb(241,215,21)" fg:x="4765" fg:w="15"/><text x="20.7938%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.06%)</title><rect x="20.5653%" y="149" width="0.0645%" height="15" fill="rgb(244,223,45)" fg:x="4780" fg:w="15"/><text x="20.8583%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 instructions, 0.03%)</title><rect x="20.6299%" y="149" width="0.0258%" height="15" fill="rgb(215,139,19)" fg:x="4795" fg:w="6"/><text x="20.9228%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="20.6557%" y="133" width="0.3528%" height="15" fill="rgb(243,172,35)" fg:x="4801" fg:w="82"/><text x="20.9487%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 0.77%)</title><rect x="20.6557%" y="149" width="0.7658%" height="15" fill="rgb(225,36,33)" fg:x="4801" fg:w="178"/><text x="20.9487%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="21.4215%" y="117" width="0.3528%" height="15" fill="rgb(215,131,41)" fg:x="4979" fg:w="82"/><text x="21.7145%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.56%)</title><rect x="21.4215%" y="133" width="0.5593%" height="15" fill="rgb(242,184,49)" fg:x="4979" fg:w="130"/><text x="21.7145%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 0.93%)</title><rect x="21.4215%" y="149" width="0.9250%" height="15" fill="rgb(237,105,17)" fg:x="4979" fg:w="215"/><text x="21.7145%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="22.3465%" y="149" width="0.3528%" height="15" fill="rgb(230,66,15)" fg:x="5194" fg:w="82"/><text x="22.6395%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.38%)</title><rect x="22.6993%" y="149" width="0.3829%" height="15" fill="rgb(245,29,41)" fg:x="5276" fg:w="89"/><text x="22.9923%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="23.0822%" y="149" width="0.3528%" height="15" fill="rgb(251,218,9)" fg:x="5365" fg:w="82"/><text x="23.3752%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="23.4350%" y="149" width="0.3528%" height="15" fill="rgb(226,219,36)" fg:x="5447" fg:w="82"/><text x="23.7280%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.02%)</title><rect x="23.7878%" y="149" width="0.0172%" height="15" fill="rgb(246,22,48)" fg:x="5529" fg:w="4"/><text x="24.0808%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.38%)</title><rect x="23.8050%" y="149" width="0.3829%" height="15" fill="rgb(253,157,41)" fg:x="5533" fg:w="89"/><text x="24.0980%" y="159.50"></text></g><g><title>memcpy (392 instructions, 1.69%)</title><rect x="24.1879%" y="149" width="1.6865%" height="15" fill="rgb(232,223,29)" fg:x="5622" fg:w="392"/><text x="24.4809%" y="159.50"></text></g><g><title>memcpy (392 instructions, 1.69%)</title><rect x="25.8745%" y="149" width="1.6865%" height="15" fill="rgb(229,55,18)" fg:x="6014" fg:w="392"/><text x="26.1674%" y="159.50"></text></g><g><title>memcpy (504 instructions, 2.17%)</title><rect x="27.5610%" y="149" width="2.1684%" height="15" fill="rgb(239,78,51)" fg:x="6406" fg:w="504"/><text x="27.8540%" y="159.50">m..</text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,854 instructions, 33.79%)</title><rect x="1.1616%" y="165" width="33.7908%" height="15" fill="rgb(249,41,19)" fg:x="270" fg:w="7854"/><text x="1.4546%" y="175.50">candid::de::IDLDeserialize::new_with_config</text></g><g><title>memcpy (344 instructions, 1.48%)</title><rect x="34.9525%" y="165" width="1.4800%" height="15" fill="rgb(226,203,37)" fg:x="8124" fg:w="344"/><text x="35.2454%" y="175.50"></text></g><g><title>candid::types::internal::find_type (23 instructions, 0.10%)</title><rect x="36.4325%" y="165" width="0.0990%" height="15" fill="rgb(208,108,36)" fg:x="8468" fg:w="23"/><text x="36.7254%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="36.5314%" y="165" width="0.3528%" height="15" fill="rgb(243,186,18)" fg:x="8491" fg:w="82"/><text x="36.8244%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="36.8842%" y="149" width="0.3528%" height="15" fill="rgb(225,67,28)" fg:x="8573" fg:w="82"/><text x="37.1772%" y="159.50"></text></g><g><title>candid::types::internal::env_add (165 instructions, 0.71%)</title><rect x="36.8842%" y="165" width="0.7099%" height="15" fill="rgb(224,16,39)" fg:x="8573" fg:w="165"/><text x="37.1772%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="37.5941%" y="165" width="0.3528%" height="15" fill="rgb(243,198,12)" fg:x="8738" fg:w="82"/><text x="37.8871%" y="175.50"></text></g><g><title>memcmp (77 instructions, 0.33%)</title><rect x="37.9469%" y="149" width="0.3313%" height="15" fill="rgb(235,174,54)" fg:x="8820" fg:w="77"/><text x="38.2399%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.38%)</title><rect x="38.2782%" y="133" width="0.3829%" height="15" fill="rgb(238,204,30)" fg:x="8897" fg:w="89"/><text x="38.5712%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.57%)</title><rect x="38.2782%" y="149" width="0.5722%" height="15" fill="rgb(214,193,22)" fg:x="8897" fg:w="133"/><text x="38.5712%" y="159.50"></text></g><g><title>candid::types::internal::env_add (382 instructions, 1.64%)</title><rect x="37.9469%" y="165" width="1.6435%" height="15" fill="rgb(236,10,16)" fg:x="8820" fg:w="382"/><text x="38.2399%" y="175.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (51 instructions, 0.22%)</title><rect x="39.5904%" y="149" width="0.2194%" height="15" fill="rgb(248,3,38)" fg:x="9202" fg:w="51"/><text x="39.8834%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="39.8098%" y="149" width="0.0559%" height="15" fill="rgb(216,101,50)" fg:x="9253" fg:w="13"/><text x="40.1028%" y="159.50"></text></g><g><title>candid::types::internal::env_id (198 instructions, 0.85%)</title><rect x="39.5904%" y="165" width="0.8519%" height="15" fill="rgb(225,94,2)" fg:x="9202" fg:w="198"/><text x="39.8834%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.21%)</title><rect x="40.4423%" y="165" width="0.2108%" height="15" fill="rgb(251,72,45)" fg:x="9400" fg:w="49"/><text x="40.7353%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.36%)</title><rect x="40.6531%" y="149" width="0.3571%" height="15" fill="rgb(205,214,52)" fg:x="9449" fg:w="83"/><text x="40.9461%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.10%)</title><rect x="41.1995%" y="133" width="0.0990%" height="15" fill="rgb(230,218,22)" fg:x="9576" fg:w="23"/><text x="41.4925%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.59%)</title><rect x="41.1995%" y="149" width="0.5937%" height="15" fill="rgb(206,77,12)" fg:x="9576" fg:w="138"/><text x="41.4925%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 instructions, 1.33%)</title><rect x="40.6531%" y="165" width="1.3294%" height="15" fill="rgb(247,212,35)" fg:x="9449" fg:w="309"/><text x="40.9461%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.15%)</title><rect x="41.9825%" y="149" width="0.1506%" height="15" fill="rgb(253,173,13)" fg:x="9758" fg:w="35"/><text x="42.2755%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1131 (34 instructions, 0.15%)</title><rect x="42.1331%" y="149" width="0.1463%" height="15" fill="rgb(228,79,4)" fg:x="9793" fg:w="34"/><text x="42.4261%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1131 (34 instructions, 0.15%)</title><rect x="42.2794%" y="149" width="0.1463%" height="15" fill="rgb(216,92,14)" fg:x="9827" fg:w="34"/><text x="42.5724%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.14%)</title><rect x="42.4257%" y="149" width="0.1420%" height="15" fill="rgb(236,122,49)" fg:x="9861" fg:w="33"/><text x="42.7186%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 1.08%)</title><rect x="41.9825%" y="165" width="1.0756%" height="15" fill="rgb(226,204,0)" fg:x="9758" fg:w="250"/><text x="42.2755%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="43.0581%" y="165" width="0.0559%" height="15" fill="rgb(228,81,1)" fg:x="10008" fg:w="13"/><text x="43.3511%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="43.1141%" y="165" width="0.0559%" height="15" fill="rgb(248,127,44)" fg:x="10021" fg:w="13"/><text x="43.4070%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="43.1700%" y="165" width="0.0559%" height="15" fill="rgb(206,104,8)" fg:x="10034" fg:w="13"/><text x="43.4630%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.19%)</title><rect x="43.2259%" y="165" width="0.1850%" height="15" fill="rgb(229,36,6)" fg:x="10047" fg:w="43"/><text x="43.5189%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="43.4109%" y="149" width="0.0301%" height="15" fill="rgb(208,185,47)" fg:x="10090" fg:w="7"/><text x="43.7039%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="43.4410%" y="133" width="0.1162%" height="15" fill="rgb(223,42,47)" fg:x="10097" fg:w="27"/><text x="43.7340%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="43.5572%" y="133" width="0.1162%" height="15" fill="rgb(241,99,38)" fg:x="10124" fg:w="27"/><text x="43.8502%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 0.85%)</title><rect x="43.4410%" y="149" width="0.8476%" height="15" fill="rgb(209,165,21)" fg:x="10097" fg:w="197"/><text x="43.7340%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="44.2886%" y="117" width="0.1162%" height="15" fill="rgb(239,208,25)" fg:x="10294" fg:w="27"/><text x="44.5816%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.61%)</title><rect x="44.2886%" y="133" width="0.6109%" height="15" fill="rgb(228,175,38)" fg:x="10294" fg:w="142"/><text x="44.5816%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 0.80%)</title><rect x="44.2886%" y="149" width="0.8002%" height="15" fill="rgb(247,18,41)" fg:x="10294" fg:w="186"/><text x="44.5816%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.06%)</title><rect x="45.0888%" y="149" width="0.0559%" height="15" fill="rgb(212,38,20)" fg:x="10480" fg:w="13"/><text x="45.3818%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="45.1448%" y="149" width="0.0301%" height="15" fill="rgb(235,229,29)" fg:x="10493" fg:w="7"/><text x="45.4377%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (470 instructions, 2.02%)</title><rect x="43.4109%" y="165" width="2.0221%" height="15" fill="rgb(205,228,37)" fg:x="10090" fg:w="470"/><text x="43.7039%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="45.4330%" y="149" width="0.1162%" height="15" fill="rgb(243,203,17)" fg:x="10560" fg:w="27"/><text x="45.7260%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.61%)</title><rect x="45.4330%" y="165" width="0.6109%" height="15" fill="rgb(253,44,39)" fg:x="10560" fg:w="142"/><text x="45.7260%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,083 instructions, 51.99%)</title><rect x="0.8088%" y="181" width="51.9855%" height="15" fill="rgb(241,166,40)" fg:x="188" fg:w="12083"/><text x="1.1018%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.26%)</title><rect x="52.7944%" y="133" width="0.2581%" height="15" fill="rgb(249,169,14)" fg:x="12271" fg:w="60"/><text x="53.0874%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 instructions, 0.45%)</title><rect x="52.7944%" y="149" width="0.4474%" height="15" fill="rgb(239,158,10)" fg:x="12271" fg:w="104"/><text x="53.0874%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="53.2418%" y="133" width="0.1162%" height="15" fill="rgb(251,87,15)" fg:x="12375" fg:w="27"/><text x="53.5348%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (115 instructions, 0.49%)</title><rect x="53.2418%" y="149" width="0.4948%" height="15" fill="rgb(205,181,25)" fg:x="12375" fg:w="115"/><text x="53.5348%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (343 instructions, 1.48%)</title><rect x="52.7944%" y="165" width="1.4757%" height="15" fill="rgb(240,115,10)" fg:x="12271" fg:w="343"/><text x="53.0874%" y="175.50"></text></g><g><title>std::io::Write::write_all (518 instructions, 2.23%)</title><rect x="54.2701%" y="149" width="2.2286%" height="15" fill="rgb(224,189,2)" fg:x="12614" fg:w="518"/><text x="54.5631%" y="159.50">s..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.35%)</title><rect x="56.4987%" y="101" width="0.3528%" height="15" fill="rgb(232,163,14)" fg:x="13132" fg:w="82"/><text x="56.7917%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.56%)</title><rect x="56.4987%" y="117" width="0.5593%" height="15" fill="rgb(216,153,19)" fg:x="13132" fg:w="130"/><text x="56.7917%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 0.91%)</title><rect x="56.4987%" y="133" width="0.9121%" height="15" fill="rgb(218,15,18)" fg:x="13132" fg:w="212"/><text x="56.7917%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="57.4108%" y="133" width="0.0645%" height="15" fill="rgb(223,81,42)" fg:x="13344" fg:w="15"/><text x="57.7038%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.06%)</title><rect x="57.4754%" y="133" width="0.0645%" height="15" fill="rgb(235,162,44)" fg:x="13359" fg:w="15"/><text x="57.7683%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 1.84%)</title><rect x="56.4987%" y="149" width="1.8414%" height="15" fill="rgb(230,197,49)" fg:x="13132" fg:w="428"/><text x="56.7917%" y="159.50"></text></g><g><title>std::io::Write::write_all (516 instructions, 2.22%)</title><rect x="58.3401%" y="149" width="2.2200%" height="15" fill="rgb(227,144,3)" fg:x="13560" fg:w="516"/><text x="58.6331%" y="159.50">s..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.03%)</title><rect x="60.5602%" y="149" width="0.0301%" height="15" fill="rgb(240,204,14)" fg:x="14076" fg:w="7"/><text x="60.8531%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,566 instructions, 6.74%)</title><rect x="54.2701%" y="165" width="6.7375%" height="15" fill="rgb(238,225,4)" fg:x="12614" fg:w="1566"/><text x="54.5631%" y="175.50">candid:..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="61.0076%" y="165" width="0.0301%" height="15" fill="rgb(250,80,14)" fg:x="14180" fg:w="7"/><text x="61.3006%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.03%)</title><rect x="61.0377%" y="165" width="0.0301%" height="15" fill="rgb(209,0,25)" fg:x="14187" fg:w="7"/><text x="61.3307%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.26%)</title><rect x="61.0678%" y="165" width="0.2581%" height="15" fill="rgb(250,171,37)" fg:x="14194" fg:w="60"/><text x="61.3608%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,587 instructions, 11.13%)</title><rect x="52.7944%" y="181" width="11.1302%" height="15" fill="rgb(208,142,19)" fg:x="12271" fg:w="2587"/><text x="53.0874%" y="191.50">ic_cdk::api::c..</text></g><g><title>hashmap::__canister_method_batch_remove::{{closure}} (22,692 instructions, 97.63%)</title><rect x="0.8088%" y="197" width="97.6294%" height="15" fill="rgb(245,31,33)" fg:x="188" fg:w="22692"/><text x="1.1018%" y="207.50">hashmap::__canister_method_batch_remove::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.06%)</title><rect x="98.4382%" y="197" width="0.0602%" height="15" fill="rgb(251,221,43)" fg:x="22880" fg:w="14"/><text x="98.7312%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.12%)</title><rect x="98.8857%" y="181" width="0.1162%" height="15" fill="rgb(244,65,27)" fg:x="22984" fg:w="27"/><text x="99.1787%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 0.88%)</title><rect x="98.5028%" y="197" width="0.8777%" height="15" fill="rgb(211,68,25)" fg:x="22895" fg:w="204"/><text x="98.7957%" y="207.50"></text></g><g><title>all (23,243 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,36,45)" fg:x="0" fg:w="23243"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (23,243 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,13,6)" fg:x="0" fg:w="23243"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>