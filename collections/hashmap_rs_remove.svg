<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="19747"><g><title>ic_cdk::setup (7 instructions, 0.04%)</title><rect x="0.0000%" y="197" width="0.0354%" height="15" fill="rgb(227,20,54)" fg:x="0" fg:w="7"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.46%)</title><rect x="0.0354%" y="165" width="0.4558%" height="15" fill="rgb(252,192,34)" fg:x="7" fg:w="90"/><text x="0.3284%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.51%)</title><rect x="0.0354%" y="181" width="0.5064%" height="15" fill="rgb(217,226,31)" fg:x="7" fg:w="100"/><text x="0.3284%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.46%)</title><rect x="0.5570%" y="165" width="0.4558%" height="15" fill="rgb(227,209,44)" fg:x="110" fg:w="90"/><text x="0.8500%" y="175.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.51%)</title><rect x="0.5570%" y="181" width="0.5064%" height="15" fill="rgb(250,194,7)" fg:x="110" fg:w="100"/><text x="0.8500%" y="191.50"></text></g><g><title>__rust_alloc (206 instructions, 1.04%)</title><rect x="0.0354%" y="197" width="1.0432%" height="15" fill="rgb(213,84,48)" fg:x="7" fg:w="206"/><text x="0.3284%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.46%)</title><rect x="1.0786%" y="133" width="0.4558%" height="15" fill="rgb(251,216,42)" fg:x="213" fg:w="90"/><text x="1.3716%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.51%)</title><rect x="1.0786%" y="149" width="0.5064%" height="15" fill="rgb(246,176,6)" fg:x="213" fg:w="100"/><text x="1.3716%" y="159.50"></text></g><g><title>__rust_alloc (103 instructions, 0.52%)</title><rect x="1.0786%" y="165" width="0.5216%" height="15" fill="rgb(213,23,37)" fg:x="213" fg:w="103"/><text x="1.3716%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (162 instructions, 0.82%)</title><rect x="1.0786%" y="181" width="0.8204%" height="15" fill="rgb(242,89,40)" fg:x="213" fg:w="162"/><text x="1.3716%" y="191.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.31%)</title><rect x="1.8990%" y="165" width="0.3089%" height="15" fill="rgb(248,130,45)" fg:x="375" fg:w="61"/><text x="2.1920%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="2.2079%" y="149" width="0.0203%" height="15" fill="rgb(222,206,10)" fg:x="436" fg:w="4"/><text x="2.5009%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 2.06%)</title><rect x="2.2079%" y="165" width="2.0611%" height="15" fill="rgb(208,93,54)" fg:x="436" fg:w="407"/><text x="2.5009%" y="175.50"></text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.37%)</title><rect x="4.2690%" y="165" width="0.3747%" height="15" fill="rgb(205,75,30)" fg:x="843" fg:w="74"/><text x="4.5620%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.27%)</title><rect x="4.6437%" y="165" width="0.2735%" height="15" fill="rgb(228,103,46)" fg:x="917" fg:w="54"/><text x="4.9367%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.27%)</title><rect x="4.9172%" y="165" width="0.2735%" height="15" fill="rgb(215,154,26)" fg:x="971" fg:w="54"/><text x="5.2102%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.27%)</title><rect x="5.1907%" y="165" width="0.2735%" height="15" fill="rgb(246,82,5)" fg:x="1025" fg:w="54"/><text x="5.4836%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.27%)</title><rect x="5.4641%" y="165" width="0.2735%" height="15" fill="rgb(216,197,1)" fg:x="1079" fg:w="54"/><text x="5.7571%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.31%)</title><rect x="5.7376%" y="165" width="0.3089%" height="15" fill="rgb(239,111,29)" fg:x="1133" fg:w="61"/><text x="6.0305%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.49%)</title><rect x="6.0465%" y="165" width="0.4912%" height="15" fill="rgb(218,137,4)" fg:x="1194" fg:w="97"/><text x="6.3395%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="6.5377%" y="149" width="0.0203%" height="15" fill="rgb(228,186,22)" fg:x="1291" fg:w="4"/><text x="6.8307%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 2.06%)</title><rect x="6.5377%" y="165" width="2.0611%" height="15" fill="rgb(223,133,46)" fg:x="1291" fg:w="407"/><text x="6.8307%" y="175.50"></text></g><g><title>memcmp (16 instructions, 0.08%)</title><rect x="8.5988%" y="165" width="0.0810%" height="15" fill="rgb(238,113,30)" fg:x="1698" fg:w="16"/><text x="8.8917%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.46%)</title><rect x="8.6798%" y="101" width="0.4558%" height="15" fill="rgb(233,172,35)" fg:x="1714" fg:w="90"/><text x="8.9728%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.51%)</title><rect x="8.6798%" y="117" width="0.5064%" height="15" fill="rgb(221,135,33)" fg:x="1714" fg:w="100"/><text x="8.9728%" y="127.50"></text></g><g><title>__rust_alloc (103 instructions, 0.52%)</title><rect x="8.6798%" y="133" width="0.5216%" height="15" fill="rgb(235,132,4)" fg:x="1714" fg:w="103"/><text x="8.9728%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.30%)</title><rect x="9.2014%" y="101" width="0.3038%" height="15" fill="rgb(251,179,33)" fg:x="1817" fg:w="60"/><text x="9.4944%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.43%)</title><rect x="9.2014%" y="117" width="0.4304%" height="15" fill="rgb(236,136,47)" fg:x="1817" fg:w="85"/><text x="9.4944%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="9.6318%" y="69" width="0.0456%" height="15" fill="rgb(212,171,5)" fg:x="1902" fg:w="9"/><text x="9.9248%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.15%)</title><rect x="9.6774%" y="53" width="0.1519%" height="15" fill="rgb(217,127,0)" fg:x="1911" fg:w="30"/><text x="9.9704%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.28%)</title><rect x="9.6774%" y="69" width="0.2785%" height="15" fill="rgb(234,200,34)" fg:x="1911" fg:w="55"/><text x="9.9704%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.59%)</title><rect x="9.6318%" y="85" width="0.5874%" height="15" fill="rgb(227,149,51)" fg:x="1902" fg:w="116"/><text x="9.9248%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.86%)</title><rect x="9.6318%" y="101" width="0.8558%" height="15" fill="rgb(228,146,10)" fg:x="1902" fg:w="169"/><text x="9.9248%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.88%)</title><rect x="9.6318%" y="117" width="0.8811%" height="15" fill="rgb(230,171,4)" fg:x="1902" fg:w="174"/><text x="9.9248%" y="127.50"></text></g><g><title>core::fmt::write (367 instructions, 1.86%)</title><rect x="9.2014%" y="133" width="1.8585%" height="15" fill="rgb(236,73,17)" fg:x="1817" fg:w="367"/><text x="9.4944%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (613 instructions, 3.10%)</title><rect x="8.6798%" y="149" width="3.1043%" height="15" fill="rgb(249,5,53)" fg:x="1714" fg:w="613"/><text x="8.9728%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.37%)</title><rect x="11.7841%" y="149" width="0.3747%" height="15" fill="rgb(243,221,21)" fg:x="2327" fg:w="74"/><text x="12.0770%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.27%)</title><rect x="12.1588%" y="149" width="0.2735%" height="15" fill="rgb(240,158,12)" fg:x="2401" fg:w="54"/><text x="12.4518%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (812 instructions, 4.11%)</title><rect x="8.6798%" y="165" width="4.1120%" height="15" fill="rgb(253,10,19)" fg:x="1714" fg:w="812"/><text x="8.9728%" y="175.50">bin..</text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.28%)</title><rect x="12.7918%" y="165" width="0.2836%" height="15" fill="rgb(230,85,16)" fg:x="2526" fg:w="56"/><text x="13.0848%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (97 instructions, 0.49%)</title><rect x="13.0754%" y="165" width="0.4912%" height="15" fill="rgb(219,207,35)" fg:x="2582" fg:w="97"/><text x="13.3684%" y="175.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="13.5666%" y="133" width="0.0203%" height="15" fill="rgb(235,132,10)" fg:x="2679" fg:w="4"/><text x="13.8596%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (407 instructions, 2.06%)</title><rect x="13.5666%" y="149" width="2.0611%" height="15" fill="rgb(222,88,10)" fg:x="2679" fg:w="407"/><text x="13.8596%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.08%)</title><rect x="15.6277%" y="149" width="0.0810%" height="15" fill="rgb(215,44,39)" fg:x="3086" fg:w="16"/><text x="15.9207%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.46%)</title><rect x="15.7087%" y="85" width="0.4558%" height="15" fill="rgb(213,173,29)" fg:x="3102" fg:w="90"/><text x="16.0017%" y="95.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.51%)</title><rect x="15.7087%" y="101" width="0.5064%" height="15" fill="rgb(239,59,24)" fg:x="3102" fg:w="100"/><text x="16.0017%" y="111.50"></text></g><g><title>__rust_alloc (103 instructions, 0.52%)</title><rect x="15.7087%" y="117" width="0.5216%" height="15" fill="rgb(237,16,30)" fg:x="3102" fg:w="103"/><text x="16.0017%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.30%)</title><rect x="16.2303%" y="85" width="0.3038%" height="15" fill="rgb(246,51,36)" fg:x="3205" fg:w="60"/><text x="16.5233%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.43%)</title><rect x="16.2303%" y="101" width="0.4304%" height="15" fill="rgb(209,74,4)" fg:x="3205" fg:w="85"/><text x="16.5233%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="16.6608%" y="53" width="0.0456%" height="15" fill="rgb(206,175,54)" fg:x="3290" fg:w="9"/><text x="16.9537%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.15%)</title><rect x="16.7063%" y="37" width="0.1519%" height="15" fill="rgb(239,184,14)" fg:x="3299" fg:w="30"/><text x="16.9993%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.28%)</title><rect x="16.7063%" y="53" width="0.2785%" height="15" fill="rgb(214,103,33)" fg:x="3299" fg:w="55"/><text x="16.9993%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (116 instructions, 0.59%)</title><rect x="16.6608%" y="69" width="0.5874%" height="15" fill="rgb(229,139,28)" fg:x="3290" fg:w="116"/><text x="16.9537%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (169 instructions, 0.86%)</title><rect x="16.6608%" y="85" width="0.8558%" height="15" fill="rgb(231,36,18)" fg:x="3290" fg:w="169"/><text x="16.9537%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (174 instructions, 0.88%)</title><rect x="16.6608%" y="101" width="0.8811%" height="15" fill="rgb(213,167,37)" fg:x="3290" fg:w="174"/><text x="16.9537%" y="111.50"></text></g><g><title>core::fmt::write (367 instructions, 1.86%)</title><rect x="16.2303%" y="117" width="1.8585%" height="15" fill="rgb(223,193,13)" fg:x="3205" fg:w="367"/><text x="16.5233%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (613 instructions, 3.10%)</title><rect x="15.7087%" y="133" width="3.1043%" height="15" fill="rgb(247,68,14)" fg:x="3102" fg:w="613"/><text x="16.0017%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (74 instructions, 0.37%)</title><rect x="18.8130%" y="133" width="0.3747%" height="15" fill="rgb(253,181,11)" fg:x="3715" fg:w="74"/><text x="19.1060%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.27%)</title><rect x="19.1877%" y="133" width="0.2735%" height="15" fill="rgb(209,208,44)" fg:x="3789" fg:w="54"/><text x="19.4807%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (812 instructions, 4.11%)</title><rect x="15.7087%" y="149" width="4.1120%" height="15" fill="rgb(249,182,20)" fg:x="3102" fg:w="812"/><text x="16.0017%" y="159.50">bin..</text></g><g><title>binread::binary_template::write_start_struct (61 instructions, 0.31%)</title><rect x="19.8207%" y="133" width="0.3089%" height="15" fill="rgb(233,180,27)" fg:x="3914" fg:w="61"/><text x="20.1137%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (126 instructions, 0.64%)</title><rect x="20.1296%" y="133" width="0.6381%" height="15" fill="rgb(231,175,2)" fg:x="3975" fg:w="126"/><text x="20.4226%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.28%)</title><rect x="20.7677%" y="133" width="0.2836%" height="15" fill="rgb(248,215,32)" fg:x="4101" fg:w="56"/><text x="21.0607%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (305 instructions, 1.54%)</title><rect x="19.8207%" y="149" width="1.5445%" height="15" fill="rgb(221,85,3)" fg:x="3914" fg:w="305"/><text x="20.1137%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.46%)</title><rect x="21.3653%" y="117" width="0.4558%" height="15" fill="rgb(239,35,41)" fg:x="4219" fg:w="90"/><text x="21.6582%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.51%)</title><rect x="21.3653%" y="133" width="0.5064%" height="15" fill="rgb(235,44,23)" fg:x="4219" fg:w="100"/><text x="21.6582%" y="143.50"></text></g><g><title>__rust_alloc (103 instructions, 0.52%)</title><rect x="21.3653%" y="149" width="0.5216%" height="15" fill="rgb(245,32,30)" fg:x="4219" fg:w="103"/><text x="21.6582%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,868 instructions, 9.46%)</title><rect x="13.5666%" y="165" width="9.4597%" height="15" fill="rgb(250,101,43)" fg:x="2679" fg:w="1868"/><text x="13.8596%" y="175.50">binread::bi..</text></g><g><title>binread::binary_template::write_end_struct (56 instructions, 0.28%)</title><rect x="23.0263%" y="165" width="0.2836%" height="15" fill="rgb(213,74,44)" fg:x="4547" fg:w="56"/><text x="23.3193%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.07%)</title><rect x="23.3099%" y="165" width="0.0658%" height="15" fill="rgb(243,154,21)" fg:x="4603" fg:w="13"/><text x="23.6028%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.07%)</title><rect x="23.3757%" y="165" width="0.0658%" height="15" fill="rgb(225,130,10)" fg:x="4616" fg:w="13"/><text x="23.6687%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.11%)</title><rect x="23.4415%" y="165" width="0.1114%" height="15" fill="rgb(212,188,13)" fg:x="4629" fg:w="22"/><text x="23.7345%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.46%)</title><rect x="23.5529%" y="117" width="0.4558%" height="15" fill="rgb(219,124,22)" fg:x="4651" fg:w="90"/><text x="23.8459%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.51%)</title><rect x="23.5529%" y="133" width="0.5064%" height="15" fill="rgb(210,115,32)" fg:x="4651" fg:w="100"/><text x="23.8459%" y="143.50"></text></g><g><title>__rust_alloc (103 instructions, 0.52%)</title><rect x="23.5529%" y="149" width="0.5216%" height="15" fill="rgb(212,130,0)" fg:x="4651" fg:w="103"/><text x="23.8459%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (183 instructions, 0.93%)</title><rect x="23.5529%" y="165" width="0.9267%" height="15" fill="rgb(247,8,12)" fg:x="4651" fg:w="183"/><text x="23.8459%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (94 instructions, 0.48%)</title><rect x="24.4797%" y="101" width="0.4760%" height="15" fill="rgb(229,163,45)" fg:x="4834" fg:w="94"/><text x="24.7726%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (104 instructions, 0.53%)</title><rect x="24.4797%" y="117" width="0.5267%" height="15" fill="rgb(213,145,52)" fg:x="4834" fg:w="104"/><text x="24.7726%" y="127.50"></text></g><g><title>__rust_alloc (107 instructions, 0.54%)</title><rect x="24.4797%" y="133" width="0.5419%" height="15" fill="rgb(230,99,0)" fg:x="4834" fg:w="107"/><text x="24.7726%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (137 instructions, 0.69%)</title><rect x="24.4797%" y="149" width="0.6938%" height="15" fill="rgb(206,164,0)" fg:x="4834" fg:w="137"/><text x="24.7726%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (205 instructions, 1.04%)</title><rect x="24.4797%" y="165" width="1.0381%" height="15" fill="rgb(210,34,14)" fg:x="4834" fg:w="205"/><text x="24.7726%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.46%)</title><rect x="25.5178%" y="133" width="0.4558%" height="15" fill="rgb(237,125,7)" fg:x="5039" fg:w="90"/><text x="25.8108%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.51%)</title><rect x="25.5178%" y="149" width="0.5064%" height="15" fill="rgb(230,166,22)" fg:x="5039" fg:w="100"/><text x="25.8108%" y="159.50"></text></g><g><title>__rust_alloc (103 instructions, 0.52%)</title><rect x="25.5178%" y="165" width="0.5216%" height="15" fill="rgb(238,18,42)" fg:x="5039" fg:w="103"/><text x="25.8108%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.41%)</title><rect x="26.0394%" y="165" width="0.4102%" height="15" fill="rgb(208,63,3)" fg:x="5142" fg:w="81"/><text x="26.3324%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.46%)</title><rect x="26.4496%" y="133" width="0.4558%" height="15" fill="rgb(228,118,5)" fg:x="5223" fg:w="90"/><text x="26.7426%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.51%)</title><rect x="26.4496%" y="149" width="0.5064%" height="15" fill="rgb(214,52,1)" fg:x="5223" fg:w="100"/><text x="26.7426%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.46%)</title><rect x="26.9712%" y="133" width="0.4558%" height="15" fill="rgb(230,21,31)" fg:x="5326" fg:w="90"/><text x="27.2642%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.51%)</title><rect x="26.9712%" y="149" width="0.5064%" height="15" fill="rgb(207,12,24)" fg:x="5326" fg:w="100"/><text x="27.2642%" y="159.50"></text></g><g><title>__rust_alloc (206 instructions, 1.04%)</title><rect x="26.4496%" y="165" width="1.0432%" height="15" fill="rgb(227,12,18)" fg:x="5223" fg:w="206"/><text x="26.7426%" y="175.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (14 instructions, 0.07%)</title><rect x="27.4928%" y="165" width="0.0709%" height="15" fill="rgb(249,24,37)" fg:x="5429" fg:w="14"/><text x="27.7858%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.41%)</title><rect x="27.5637%" y="165" width="0.4102%" height="15" fill="rgb(244,159,33)" fg:x="5443" fg:w="81"/><text x="27.8566%" y="175.50"></text></g><g><title>memcpy (411 instructions, 2.08%)</title><rect x="27.9739%" y="165" width="2.0813%" height="15" fill="rgb(234,5,35)" fg:x="5524" fg:w="411"/><text x="28.2668%" y="175.50">m..</text></g><g><title>memcpy (366 instructions, 1.85%)</title><rect x="30.0552%" y="165" width="1.8534%" height="15" fill="rgb(224,34,13)" fg:x="5935" fg:w="366"/><text x="30.3482%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::new (7,241 instructions, 36.67%)</title><rect x="1.8990%" y="181" width="36.6689%" height="15" fill="rgb(242,151,10)" fg:x="375" fg:w="7241"/><text x="2.1920%" y="191.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (381 instructions, 1.93%)</title><rect x="38.5679%" y="181" width="1.9294%" height="15" fill="rgb(212,163,52)" fg:x="7616" fg:w="381"/><text x="38.8609%" y="191.50"></text></g><g><title>memcpy (381 instructions, 1.93%)</title><rect x="40.4973%" y="181" width="1.9294%" height="15" fill="rgb(212,190,30)" fg:x="7997" fg:w="381"/><text x="40.7903%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 instructions, 0.03%)</title><rect x="42.4267%" y="149" width="0.0304%" height="15" fill="rgb(254,112,43)" fg:x="8378" fg:w="6"/><text x="42.7197%" y="159.50"></text></g><g><title>candid::types::internal::find_type (45 instructions, 0.23%)</title><rect x="42.4267%" y="165" width="0.2279%" height="15" fill="rgb(224,62,1)" fg:x="8378" fg:w="45"/><text x="42.7197%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.46%)</title><rect x="42.6546%" y="117" width="0.4558%" height="15" fill="rgb(237,131,4)" fg:x="8423" fg:w="90"/><text x="42.9475%" y="127.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.51%)</title><rect x="42.6546%" y="133" width="0.5064%" height="15" fill="rgb(213,216,27)" fg:x="8423" fg:w="100"/><text x="42.9475%" y="143.50"></text></g><g><title>__rust_alloc (103 instructions, 0.52%)</title><rect x="42.6546%" y="149" width="0.5216%" height="15" fill="rgb(212,23,1)" fg:x="8423" fg:w="103"/><text x="42.9475%" y="159.50"></text></g><g><title>&lt;candid::types::internal::Type as core::convert::From&lt;candid::types::internal::TypeInner&gt;&gt;::from (149 instructions, 0.75%)</title><rect x="42.6546%" y="165" width="0.7545%" height="15" fill="rgb(230,99,4)" fg:x="8423" fg:w="149"/><text x="42.9475%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="43.4091%" y="133" width="0.0253%" height="15" fill="rgb(234,62,20)" fg:x="8572" fg:w="5"/><text x="43.7021%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.27%)</title><rect x="43.4344%" y="117" width="0.2684%" height="15" fill="rgb(241,83,2)" fg:x="8577" fg:w="53"/><text x="43.7274%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.45%)</title><rect x="43.7028%" y="117" width="0.4507%" height="15" fill="rgb(211,163,34)" fg:x="8630" fg:w="89"/><text x="43.9958%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.82%)</title><rect x="44.1535%" y="117" width="0.8153%" height="15" fill="rgb(218,125,41)" fg:x="8719" fg:w="161"/><text x="44.4465%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 2.76%)</title><rect x="43.4344%" y="133" width="2.7650%" height="15" fill="rgb(251,57,51)" fg:x="8577" fg:w="546"/><text x="43.7274%" y="143.50">c..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (796 instructions, 4.03%)</title><rect x="43.4091%" y="149" width="4.0310%" height="15" fill="rgb(208,201,39)" fg:x="8572" fg:w="796"/><text x="43.7021%" y="159.50">std..</text></g><g><title>candid::types::internal::env_add (822 instructions, 4.16%)</title><rect x="43.4091%" y="165" width="4.1627%" height="15" fill="rgb(235,4,42)" fg:x="8572" fg:w="822"/><text x="43.7021%" y="175.50">cand..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.46%)</title><rect x="47.5718%" y="133" width="0.4558%" height="15" fill="rgb(227,126,38)" fg:x="9394" fg:w="90"/><text x="47.8648%" y="143.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.51%)</title><rect x="47.5718%" y="149" width="0.5064%" height="15" fill="rgb(205,8,16)" fg:x="9394" fg:w="100"/><text x="47.8648%" y="159.50"></text></g><g><title>__rust_alloc (103 instructions, 0.52%)</title><rect x="47.5718%" y="165" width="0.5216%" height="15" fill="rgb(245,224,41)" fg:x="9394" fg:w="103"/><text x="47.8648%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="48.0934%" y="133" width="0.0253%" height="15" fill="rgb(226,134,39)" fg:x="9497" fg:w="5"/><text x="48.3864%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.27%)</title><rect x="48.1187%" y="117" width="0.2684%" height="15" fill="rgb(213,87,11)" fg:x="9502" fg:w="53"/><text x="48.4117%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 instructions, 0.45%)</title><rect x="48.3871%" y="117" width="0.4507%" height="15" fill="rgb(251,131,49)" fg:x="9555" fg:w="89"/><text x="48.6801%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (161 instructions, 0.82%)</title><rect x="48.8378%" y="117" width="0.8153%" height="15" fill="rgb(214,40,28)" fg:x="9644" fg:w="161"/><text x="49.1308%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (546 instructions, 2.76%)</title><rect x="48.1187%" y="133" width="2.7650%" height="15" fill="rgb(225,213,49)" fg:x="9502" fg:w="546"/><text x="48.4117%" y="143.50">c..</text></g><g><title>memcmp (68 instructions, 0.34%)</title><rect x="50.8837%" y="133" width="0.3444%" height="15" fill="rgb(207,34,51)" fg:x="10048" fg:w="68"/><text x="51.1766%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.41%)</title><rect x="51.2280%" y="117" width="0.4102%" height="15" fill="rgb(218,134,15)" fg:x="10116" fg:w="81"/><text x="51.5210%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (111 instructions, 0.56%)</title><rect x="51.2280%" y="133" width="0.5621%" height="15" fill="rgb(252,113,23)" fg:x="10116" fg:w="111"/><text x="51.5210%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (904 instructions, 4.58%)</title><rect x="48.0934%" y="149" width="4.5779%" height="15" fill="rgb(241,49,9)" fg:x="9497" fg:w="904"/><text x="48.3864%" y="159.50">std:..</text></g><g><title>candid::types::internal::env_add (930 instructions, 4.71%)</title><rect x="48.0934%" y="165" width="4.7096%" height="15" fill="rgb(237,33,52)" fg:x="9497" fg:w="930"/><text x="48.3864%" y="175.50">cand..</text></g><g><title>candid::types::internal::ID::__getit (5 instructions, 0.03%)</title><rect x="52.8030%" y="133" width="0.0253%" height="15" fill="rgb(231,14,42)" fg:x="10427" fg:w="5"/><text x="53.0959%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.27%)</title><rect x="52.8283%" y="101" width="0.2684%" height="15" fill="rgb(207,24,25)" fg:x="10432" fg:w="53"/><text x="53.1212%" y="111.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.39%)</title><rect x="52.8283%" y="117" width="0.3950%" height="15" fill="rgb(220,113,48)" fg:x="10432" fg:w="78"/><text x="53.1212%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (300 instructions, 1.52%)</title><rect x="52.8283%" y="133" width="1.5192%" height="15" fill="rgb(231,13,12)" fg:x="10432" fg:w="300"/><text x="53.1212%" y="143.50"></text></g><g><title>&lt;candid::types::internal::Type as core::cmp::PartialEq&gt;::eq (27 instructions, 0.14%)</title><rect x="54.3475%" y="133" width="0.1367%" height="15" fill="rgb(247,58,39)" fg:x="10732" fg:w="27"/><text x="54.6405%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="54.4842%" y="133" width="0.0557%" height="15" fill="rgb(236,144,32)" fg:x="10759" fg:w="11"/><text x="54.7772%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (515 instructions, 2.61%)</title><rect x="52.8030%" y="149" width="2.6080%" height="15" fill="rgb(239,147,28)" fg:x="10427" fg:w="515"/><text x="53.0959%" y="159.50">s..</text></g><g><title>candid::types::internal::env_id (552 instructions, 2.80%)</title><rect x="52.8030%" y="165" width="2.7954%" height="15" fill="rgb(225,183,22)" fg:x="10427" fg:w="552"/><text x="53.0959%" y="175.50">ca..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (37 instructions, 0.19%)</title><rect x="55.5983%" y="165" width="0.1874%" height="15" fill="rgb(246,187,50)" fg:x="10979" fg:w="37"/><text x="55.8913%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.62%)</title><rect x="55.7857%" y="149" width="0.6229%" height="15" fill="rgb(224,0,16)" fg:x="11016" fg:w="123"/><text x="56.0787%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.62%)</title><rect x="56.5605%" y="149" width="0.6229%" height="15" fill="rgb(225,193,42)" fg:x="11169" fg:w="123"/><text x="56.8535%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (306 instructions, 1.55%)</title><rect x="55.7857%" y="165" width="1.5496%" height="15" fill="rgb(246,112,47)" fg:x="11016" fg:w="306"/><text x="56.0787%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.14%)</title><rect x="57.3353%" y="149" width="0.1418%" height="15" fill="rgb(249,190,11)" fg:x="11322" fg:w="28"/><text x="57.6283%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.08%)</title><rect x="57.4771%" y="149" width="0.0760%" height="15" fill="rgb(230,40,10)" fg:x="11350" fg:w="15"/><text x="57.7701%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq (15 instructions, 0.08%)</title><rect x="57.5530%" y="149" width="0.0760%" height="15" fill="rgb(225,67,47)" fg:x="11365" fg:w="15"/><text x="57.8460%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (139 instructions, 0.70%)</title><rect x="57.3353%" y="165" width="0.7039%" height="15" fill="rgb(231,155,36)" fg:x="11322" fg:w="139"/><text x="57.6283%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="58.0392%" y="165" width="0.0557%" height="15" fill="rgb(207,47,52)" fg:x="11461" fg:w="11"/><text x="58.3322%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="58.0949%" y="165" width="0.0557%" height="15" fill="rgb(205,224,16)" fg:x="11472" fg:w="11"/><text x="58.3879%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="58.1506%" y="165" width="0.0557%" height="15" fill="rgb(232,169,47)" fg:x="11483" fg:w="11"/><text x="58.4436%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::get_value (3,394 instructions, 17.19%)</title><rect x="42.4267%" y="181" width="17.1874%" height="15" fill="rgb(232,75,16)" fg:x="8378" fg:w="3394"/><text x="42.7197%" y="191.50">candid::de::IDLDeseria..</text></g><g><title>memcpy (411 instructions, 2.08%)</title><rect x="59.6141%" y="181" width="2.0813%" height="15" fill="rgb(216,5,39)" fg:x="11772" fg:w="411"/><text x="59.9071%" y="191.50">m..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 instructions, 0.11%)</title><rect x="61.6954%" y="165" width="0.1114%" height="15" fill="rgb(214,153,53)" fg:x="12183" fg:w="22"/><text x="61.9884%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.62%)</title><rect x="61.8069%" y="165" width="0.6229%" height="15" fill="rgb(232,170,35)" fg:x="12205" fg:w="123"/><text x="62.0998%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (71 instructions, 0.36%)</title><rect x="62.4297%" y="133" width="0.3595%" height="15" fill="rgb(207,1,21)" fg:x="12328" fg:w="71"/><text x="62.7227%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (216 instructions, 1.09%)</title><rect x="62.4297%" y="149" width="1.0938%" height="15" fill="rgb(250,59,37)" fg:x="12328" fg:w="216"/><text x="62.7227%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (246 instructions, 1.25%)</title><rect x="62.4297%" y="165" width="1.2458%" height="15" fill="rgb(252,205,20)" fg:x="12328" fg:w="246"/><text x="62.7227%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="63.6755%" y="165" width="0.0557%" height="15" fill="rgb(254,64,40)" fg:x="12574" fg:w="11"/><text x="63.9685%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="63.7312%" y="165" width="0.0253%" height="15" fill="rgb(238,14,6)" fg:x="12585" fg:w="5"/><text x="64.0242%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (501 instructions, 2.54%)</title><rect x="61.6954%" y="181" width="2.5371%" height="15" fill="rgb(214,186,28)" fg:x="12183" fg:w="501"/><text x="61.9884%" y="191.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.27%)</title><rect x="64.2325%" y="165" width="0.2735%" height="15" fill="rgb(238,52,49)" fg:x="12684" fg:w="54"/><text x="64.5255%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (71 instructions, 0.36%)</title><rect x="64.5060%" y="165" width="0.3595%" height="15" fill="rgb(220,27,12)" fg:x="12738" fg:w="71"/><text x="64.7990%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (205 instructions, 1.04%)</title><rect x="64.2325%" y="181" width="1.0381%" height="15" fill="rgb(206,30,10)" fg:x="12684" fg:w="205"/><text x="64.5255%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,808 instructions, 64.86%)</title><rect x="1.0786%" y="197" width="64.8605%" height="15" fill="rgb(209,163,44)" fg:x="213" fg:w="12808"/><text x="1.3716%" y="207.50">ic_cdk::api::call::arg_data</text></g><g><title>hashmap::MAP::__getit (13 instructions, 0.07%)</title><rect x="65.9391%" y="181" width="0.0658%" height="15" fill="rgb(211,123,13)" fg:x="13021" fg:w="13"/><text x="66.2321%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="66.0050%" y="181" width="0.3089%" height="15" fill="rgb(244,107,39)" fg:x="13034" fg:w="61"/><text x="66.2979%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (101 instructions, 0.51%)</title><rect x="66.3139%" y="181" width="0.5115%" height="15" fill="rgb(241,19,46)" fg:x="13095" fg:w="101"/><text x="66.6068%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="66.8253%" y="181" width="0.3089%" height="15" fill="rgb(251,132,53)" fg:x="13196" fg:w="61"/><text x="67.1183%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="67.1342%" y="181" width="0.3089%" height="15" fill="rgb(239,42,31)" fg:x="13257" fg:w="61"/><text x="67.4272%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="67.4432%" y="181" width="0.3089%" height="15" fill="rgb(215,225,35)" fg:x="13318" fg:w="61"/><text x="67.7361%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="67.7521%" y="181" width="0.3089%" height="15" fill="rgb(211,191,33)" fg:x="13379" fg:w="61"/><text x="68.0450%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="68.0610%" y="181" width="0.3089%" height="15" fill="rgb(233,145,51)" fg:x="13440" fg:w="61"/><text x="68.3539%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="68.3699%" y="181" width="0.3089%" height="15" fill="rgb(245,144,53)" fg:x="13501" fg:w="61"/><text x="68.6628%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="68.6788%" y="181" width="0.3089%" height="15" fill="rgb(225,53,8)" fg:x="13562" fg:w="61"/><text x="68.9718%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="68.9877%" y="181" width="0.3089%" height="15" fill="rgb(243,43,30)" fg:x="13623" fg:w="61"/><text x="69.2807%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="69.2966%" y="181" width="0.3089%" height="15" fill="rgb(231,21,26)" fg:x="13684" fg:w="61"/><text x="69.5896%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (101 instructions, 0.51%)</title><rect x="69.6055%" y="181" width="0.5115%" height="15" fill="rgb(237,220,51)" fg:x="13745" fg:w="101"/><text x="69.8985%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="70.1170%" y="181" width="0.3089%" height="15" fill="rgb(236,31,17)" fg:x="13846" fg:w="61"/><text x="70.4099%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="70.4259%" y="181" width="0.3089%" height="15" fill="rgb(210,60,2)" fg:x="13907" fg:w="61"/><text x="70.7189%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="70.7348%" y="181" width="0.3089%" height="15" fill="rgb(207,204,11)" fg:x="13968" fg:w="61"/><text x="71.0278%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="71.0437%" y="181" width="0.3089%" height="15" fill="rgb(254,130,37)" fg:x="14029" fg:w="61"/><text x="71.3367%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="71.3526%" y="181" width="0.3089%" height="15" fill="rgb(242,18,50)" fg:x="14090" fg:w="61"/><text x="71.6456%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="71.6615%" y="181" width="0.3089%" height="15" fill="rgb(206,87,21)" fg:x="14151" fg:w="61"/><text x="71.9545%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="71.9704%" y="181" width="0.3089%" height="15" fill="rgb(225,204,49)" fg:x="14212" fg:w="61"/><text x="72.2634%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="72.2793%" y="181" width="0.3089%" height="15" fill="rgb(221,100,8)" fg:x="14273" fg:w="61"/><text x="72.5723%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="72.5882%" y="181" width="0.3089%" height="15" fill="rgb(238,66,50)" fg:x="14334" fg:w="61"/><text x="72.8812%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="72.8971%" y="181" width="0.3089%" height="15" fill="rgb(251,14,33)" fg:x="14395" fg:w="61"/><text x="73.1901%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="73.2061%" y="181" width="0.3089%" height="15" fill="rgb(217,182,24)" fg:x="14456" fg:w="61"/><text x="73.4990%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="73.5150%" y="181" width="0.3089%" height="15" fill="rgb(222,1,43)" fg:x="14517" fg:w="61"/><text x="73.8079%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="73.8239%" y="181" width="0.3089%" height="15" fill="rgb(252,130,38)" fg:x="14578" fg:w="61"/><text x="74.1168%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="74.1328%" y="181" width="0.3089%" height="15" fill="rgb(220,63,35)" fg:x="14639" fg:w="61"/><text x="74.4257%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="74.4417%" y="181" width="0.3089%" height="15" fill="rgb(239,29,43)" fg:x="14700" fg:w="61"/><text x="74.7347%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="74.7506%" y="181" width="0.3089%" height="15" fill="rgb(246,73,27)" fg:x="14761" fg:w="61"/><text x="75.0436%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="75.0595%" y="181" width="0.3089%" height="15" fill="rgb(208,147,17)" fg:x="14822" fg:w="61"/><text x="75.3525%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="75.3684%" y="181" width="0.3089%" height="15" fill="rgb(242,13,22)" fg:x="14883" fg:w="61"/><text x="75.6614%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="75.6773%" y="181" width="0.3089%" height="15" fill="rgb(211,88,23)" fg:x="14944" fg:w="61"/><text x="75.9703%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="75.9862%" y="181" width="0.3089%" height="15" fill="rgb(240,79,16)" fg:x="15005" fg:w="61"/><text x="76.2792%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="76.2951%" y="181" width="0.3089%" height="15" fill="rgb(208,176,31)" fg:x="15066" fg:w="61"/><text x="76.5881%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="76.6040%" y="181" width="0.3089%" height="15" fill="rgb(225,179,25)" fg:x="15127" fg:w="61"/><text x="76.8970%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (101 instructions, 0.51%)</title><rect x="76.9129%" y="181" width="0.5115%" height="15" fill="rgb(213,211,17)" fg:x="15188" fg:w="101"/><text x="77.2059%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="77.4244%" y="181" width="0.3089%" height="15" fill="rgb(215,169,25)" fg:x="15289" fg:w="61"/><text x="77.7174%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="77.7333%" y="181" width="0.3089%" height="15" fill="rgb(225,7,28)" fg:x="15350" fg:w="61"/><text x="78.0263%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="78.0422%" y="181" width="0.3089%" height="15" fill="rgb(217,27,29)" fg:x="15411" fg:w="61"/><text x="78.3352%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="78.3511%" y="181" width="0.3089%" height="15" fill="rgb(220,98,24)" fg:x="15472" fg:w="61"/><text x="78.6441%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (101 instructions, 0.51%)</title><rect x="78.6600%" y="181" width="0.5115%" height="15" fill="rgb(253,206,38)" fg:x="15533" fg:w="101"/><text x="78.9530%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (101 instructions, 0.51%)</title><rect x="79.1715%" y="181" width="0.5115%" height="15" fill="rgb(252,58,42)" fg:x="15634" fg:w="101"/><text x="79.4645%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="79.6830%" y="181" width="0.3089%" height="15" fill="rgb(234,204,25)" fg:x="15735" fg:w="61"/><text x="79.9760%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="79.9919%" y="181" width="0.3089%" height="15" fill="rgb(209,29,46)" fg:x="15796" fg:w="61"/><text x="80.2849%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="80.3008%" y="181" width="0.3089%" height="15" fill="rgb(223,95,52)" fg:x="15857" fg:w="61"/><text x="80.5938%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="80.6097%" y="181" width="0.3089%" height="15" fill="rgb(225,92,4)" fg:x="15918" fg:w="61"/><text x="80.9027%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="80.9186%" y="181" width="0.3089%" height="15" fill="rgb(216,85,47)" fg:x="15979" fg:w="61"/><text x="81.2116%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="81.2275%" y="181" width="0.3089%" height="15" fill="rgb(220,74,44)" fg:x="16040" fg:w="61"/><text x="81.5205%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="81.5364%" y="181" width="0.3089%" height="15" fill="rgb(231,201,13)" fg:x="16101" fg:w="61"/><text x="81.8294%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="81.8453%" y="181" width="0.3089%" height="15" fill="rgb(242,76,38)" fg:x="16162" fg:w="61"/><text x="82.1383%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 instructions, 0.31%)</title><rect x="82.1543%" y="181" width="0.3089%" height="15" fill="rgb(250,81,30)" fg:x="16223" fg:w="61"/><text x="82.4472%" y="191.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,217 instructions, 26.42%)</title><rect x="65.9391%" y="197" width="26.4192%" height="15" fill="rgb(224,167,38)" fg:x="13021" fg:w="5217"/><text x="66.2321%" y="207.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="92.3583%" y="165" width="0.0253%" height="15" fill="rgb(251,223,21)" fg:x="18238" fg:w="5"/><text x="92.6513%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.27%)</title><rect x="92.3837%" y="133" width="0.2735%" height="15" fill="rgb(225,122,19)" fg:x="18243" fg:w="54"/><text x="92.6766%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.68%)</title><rect x="92.3837%" y="149" width="0.6836%" height="15" fill="rgb(247,48,35)" fg:x="18243" fg:w="135"/><text x="92.6766%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (165 instructions, 0.84%)</title><rect x="92.3837%" y="165" width="0.8356%" height="15" fill="rgb(209,190,40)" fg:x="18243" fg:w="165"/><text x="92.6766%" y="175.50"></text></g><g><title>memset (136 instructions, 0.69%)</title><rect x="93.2192%" y="165" width="0.6887%" height="15" fill="rgb(237,59,30)" fg:x="18408" fg:w="136"/><text x="93.5122%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::new (463 instructions, 2.34%)</title><rect x="92.3583%" y="181" width="2.3447%" height="15" fill="rgb(254,211,21)" fg:x="18238" fg:w="463"/><text x="92.6513%" y="191.50">c..</text></g><g><title>std::io::Write::write_all (78 instructions, 0.39%)</title><rect x="94.7030%" y="165" width="0.3950%" height="15" fill="rgb(248,54,42)" fg:x="18701" fg:w="78"/><text x="94.9960%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (90 instructions, 0.46%)</title><rect x="95.0980%" y="101" width="0.4558%" height="15" fill="rgb(212,23,3)" fg:x="18779" fg:w="90"/><text x="95.3910%" y="111.50"></text></g><g><title>dlmalloc::Dlmalloc&lt;A&gt;::malloc (100 instructions, 0.51%)</title><rect x="95.0980%" y="117" width="0.5064%" height="15" fill="rgb(240,147,20)" fg:x="18779" fg:w="100"/><text x="95.3910%" y="127.50"></text></g><g><title>__rust_alloc (103 instructions, 0.52%)</title><rect x="95.0980%" y="133" width="0.5216%" height="15" fill="rgb(243,57,54)" fg:x="18779" fg:w="103"/><text x="95.3910%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (133 instructions, 0.67%)</title><rect x="95.0980%" y="149" width="0.6735%" height="15" fill="rgb(233,75,34)" fg:x="18779" fg:w="133"/><text x="95.3910%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (198 instructions, 1.00%)</title><rect x="95.0980%" y="165" width="1.0027%" height="15" fill="rgb(228,59,52)" fg:x="18779" fg:w="198"/><text x="95.3910%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="96.1007%" y="165" width="0.0557%" height="15" fill="rgb(245,190,32)" fg:x="18977" fg:w="11"/><text x="96.3936%" y="175.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="96.1564%" y="165" width="0.0557%" height="15" fill="rgb(246,16,28)" fg:x="18988" fg:w="11"/><text x="96.4493%" y="175.50"></text></g><g><title>std::io::Write::write_all (76 instructions, 0.38%)</title><rect x="96.2121%" y="165" width="0.3849%" height="15" fill="rgb(254,5,46)" fg:x="18999" fg:w="76"/><text x="96.5051%" y="175.50"></text></g><g><title>std::io::Write::write_all (14 instructions, 0.07%)</title><rect x="96.5970%" y="165" width="0.0709%" height="15" fill="rgb(237,191,15)" fg:x="19075" fg:w="14"/><text x="96.8899%" y="175.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (670 instructions, 3.39%)</title><rect x="94.7030%" y="181" width="3.3929%" height="15" fill="rgb(246,52,49)" fg:x="18701" fg:w="670"/><text x="94.9960%" y="191.50">ca..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="98.0959%" y="181" width="0.0253%" height="15" fill="rgb(252,1,33)" fg:x="19371" fg:w="5"/><text x="98.3889%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (54 instructions, 0.27%)</title><rect x="98.1212%" y="181" width="0.2735%" height="15" fill="rgb(249,195,6)" fg:x="19376" fg:w="54"/><text x="98.4142%" y="191.50"></text></g><g><title>candid::utils::write_args (1,256 instructions, 6.36%)</title><rect x="92.3583%" y="197" width="6.3605%" height="15" fill="rgb(227,187,32)" fg:x="18238" fg:w="1256"/><text x="92.6513%" y="207.50">candid:..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.41%)</title><rect x="98.7188%" y="197" width="0.4102%" height="15" fill="rgb(250,167,38)" fg:x="19494" fg:w="81"/><text x="99.0118%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.51%)</title><rect x="99.1290%" y="197" width="0.5064%" height="15" fill="rgb(252,192,22)" fg:x="19575" fg:w="100"/><text x="99.4220%" y="207.50"></text></g><g><title>all (19,747 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,195,54)" fg:x="0" fg:w="19747"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (19,747 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,167,18)" fg:x="0" fg:w="19747"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>