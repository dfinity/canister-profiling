<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">hashmap_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="19990"><g><title>ic_cdk::setup (19 instructions, 0.10%)</title><rect x="0.0000%" y="197" width="0.0950%" height="15" fill="rgb(250,148,7)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="0.0950%" y="197" width="0.3802%" height="15" fill="rgb(233,100,54)" fg:x="19" fg:w="76"/><text x="0.3880%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="0.4752%" y="197" width="0.3802%" height="15" fill="rgb(232,135,33)" fg:x="95" fg:w="76"/><text x="0.7682%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="0.8554%" y="165" width="0.3802%" height="15" fill="rgb(210,204,13)" fg:x="171" fg:w="76"/><text x="1.1484%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.35%)</title><rect x="1.2356%" y="149" width="0.3452%" height="15" fill="rgb(213,24,25)" fg:x="247" fg:w="69"/><text x="1.5286%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.5808%" y="133" width="0.0200%" height="15" fill="rgb(241,211,48)" fg:x="316" fg:w="4"/><text x="1.8738%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 2.03%)</title><rect x="1.5808%" y="149" width="2.0310%" height="15" fill="rgb(243,167,22)" fg:x="316" fg:w="406"/><text x="1.8738%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.41%)</title><rect x="3.6118%" y="149" width="0.4102%" height="15" fill="rgb(249,188,19)" fg:x="722" fg:w="82"/><text x="3.9048%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.27%)</title><rect x="4.0220%" y="149" width="0.2701%" height="15" fill="rgb(212,115,42)" fg:x="804" fg:w="54"/><text x="4.3150%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.27%)</title><rect x="4.2921%" y="149" width="0.2701%" height="15" fill="rgb(244,70,10)" fg:x="858" fg:w="54"/><text x="4.5851%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.27%)</title><rect x="4.5623%" y="149" width="0.2701%" height="15" fill="rgb(214,116,43)" fg:x="912" fg:w="54"/><text x="4.8552%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.27%)</title><rect x="4.8324%" y="149" width="0.2701%" height="15" fill="rgb(226,149,2)" fg:x="966" fg:w="54"/><text x="5.1254%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.35%)</title><rect x="5.1026%" y="149" width="0.3452%" height="15" fill="rgb(212,219,53)" fg:x="1020" fg:w="69"/><text x="5.3955%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.33%)</title><rect x="5.4477%" y="149" width="0.3252%" height="15" fill="rgb(248,187,32)" fg:x="1089" fg:w="65"/><text x="5.7407%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="5.7729%" y="133" width="0.0200%" height="15" fill="rgb(205,120,6)" fg:x="1154" fg:w="4"/><text x="6.0659%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 2.03%)</title><rect x="5.7729%" y="149" width="2.0310%" height="15" fill="rgb(248,225,24)" fg:x="1154" fg:w="406"/><text x="6.0659%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.08%)</title><rect x="7.8039%" y="149" width="0.0800%" height="15" fill="rgb(214,138,14)" fg:x="1560" fg:w="16"/><text x="8.0969%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="7.8839%" y="133" width="0.3802%" height="15" fill="rgb(210,27,0)" fg:x="1576" fg:w="76"/><text x="8.1769%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.30%)</title><rect x="8.2641%" y="101" width="0.3002%" height="15" fill="rgb(254,13,47)" fg:x="1652" fg:w="60"/><text x="8.5571%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.43%)</title><rect x="8.2641%" y="117" width="0.4252%" height="15" fill="rgb(206,214,41)" fg:x="1652" fg:w="85"/><text x="8.5571%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="8.6893%" y="69" width="0.0450%" height="15" fill="rgb(242,194,28)" fg:x="1737" fg:w="9"/><text x="8.9823%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.15%)</title><rect x="8.7344%" y="53" width="0.1501%" height="15" fill="rgb(251,108,4)" fg:x="1746" fg:w="30"/><text x="9.0273%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.28%)</title><rect x="8.7344%" y="69" width="0.2751%" height="15" fill="rgb(217,161,47)" fg:x="1746" fg:w="55"/><text x="9.0273%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.59%)</title><rect x="8.6893%" y="85" width="0.5903%" height="15" fill="rgb(224,34,15)" fg:x="1737" fg:w="118"/><text x="8.9823%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.86%)</title><rect x="8.6893%" y="101" width="0.8554%" height="15" fill="rgb(236,17,23)" fg:x="1737" fg:w="171"/><text x="8.9823%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.88%)</title><rect x="8.6893%" y="117" width="0.8804%" height="15" fill="rgb(250,9,11)" fg:x="1737" fg:w="176"/><text x="8.9823%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 1.86%)</title><rect x="8.2641%" y="133" width="1.8609%" height="15" fill="rgb(251,212,35)" fg:x="1652" fg:w="372"/><text x="8.5571%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 2.95%)</title><rect x="7.8839%" y="149" width="2.9465%" height="15" fill="rgb(248,20,40)" fg:x="1576" fg:w="589"/><text x="8.1769%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.41%)</title><rect x="10.8304%" y="149" width="0.4102%" height="15" fill="rgb(219,218,15)" fg:x="2165" fg:w="82"/><text x="11.1234%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.28%)</title><rect x="11.2406%" y="149" width="0.2751%" height="15" fill="rgb(248,160,51)" fg:x="2247" fg:w="55"/><text x="11.5336%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.32%)</title><rect x="11.5158%" y="149" width="0.3152%" height="15" fill="rgb(250,138,16)" fg:x="2302" fg:w="63"/><text x="11.8087%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.33%)</title><rect x="11.8309%" y="149" width="0.3252%" height="15" fill="rgb(225,187,23)" fg:x="2365" fg:w="65"/><text x="12.1239%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="12.1561%" y="117" width="0.0200%" height="15" fill="rgb(208,79,42)" fg:x="2430" fg:w="4"/><text x="12.4490%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 2.03%)</title><rect x="12.1561%" y="133" width="2.0310%" height="15" fill="rgb(212,104,31)" fg:x="2430" fg:w="406"/><text x="12.4490%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.08%)</title><rect x="14.1871%" y="133" width="0.0800%" height="15" fill="rgb(245,213,23)" fg:x="2836" fg:w="16"/><text x="14.4801%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="14.2671%" y="117" width="0.3802%" height="15" fill="rgb(228,123,26)" fg:x="2852" fg:w="76"/><text x="14.5601%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.30%)</title><rect x="14.6473%" y="85" width="0.3002%" height="15" fill="rgb(229,85,47)" fg:x="2928" fg:w="60"/><text x="14.9403%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.43%)</title><rect x="14.6473%" y="101" width="0.4252%" height="15" fill="rgb(210,162,3)" fg:x="2928" fg:w="85"/><text x="14.9403%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.05%)</title><rect x="15.0725%" y="53" width="0.0450%" height="15" fill="rgb(229,171,23)" fg:x="3013" fg:w="9"/><text x="15.3655%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.15%)</title><rect x="15.1176%" y="37" width="0.1501%" height="15" fill="rgb(232,212,36)" fg:x="3022" fg:w="30"/><text x="15.4105%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.28%)</title><rect x="15.1176%" y="53" width="0.2751%" height="15" fill="rgb(229,101,8)" fg:x="3022" fg:w="55"/><text x="15.4105%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.59%)</title><rect x="15.0725%" y="69" width="0.5903%" height="15" fill="rgb(213,1,33)" fg:x="3013" fg:w="118"/><text x="15.3655%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.86%)</title><rect x="15.0725%" y="85" width="0.8554%" height="15" fill="rgb(248,85,14)" fg:x="3013" fg:w="171"/><text x="15.3655%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.88%)</title><rect x="15.0725%" y="101" width="0.8804%" height="15" fill="rgb(247,169,8)" fg:x="3013" fg:w="176"/><text x="15.3655%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 1.86%)</title><rect x="14.6473%" y="117" width="1.8609%" height="15" fill="rgb(216,144,30)" fg:x="2928" fg:w="372"/><text x="14.9403%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 2.95%)</title><rect x="14.2671%" y="133" width="2.9465%" height="15" fill="rgb(230,38,9)" fg:x="2852" fg:w="589"/><text x="14.5601%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.41%)</title><rect x="17.2136%" y="133" width="0.4102%" height="15" fill="rgb(252,57,28)" fg:x="3441" fg:w="82"/><text x="17.5066%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.28%)</title><rect x="17.6238%" y="133" width="0.2751%" height="15" fill="rgb(254,183,22)" fg:x="3523" fg:w="55"/><text x="17.9168%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.35%)</title><rect x="17.8989%" y="117" width="0.3452%" height="15" fill="rgb(211,44,33)" fg:x="3578" fg:w="69"/><text x="18.1919%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.46%)</title><rect x="18.2441%" y="117" width="0.4552%" height="15" fill="rgb(208,180,30)" fg:x="3647" fg:w="91"/><text x="18.5371%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.32%)</title><rect x="18.6993%" y="117" width="0.3152%" height="15" fill="rgb(235,78,35)" fg:x="3738" fg:w="63"/><text x="18.9923%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 1.41%)</title><rect x="17.8989%" y="133" width="1.4107%" height="15" fill="rgb(215,163,51)" fg:x="3578" fg:w="282"/><text x="18.1919%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="19.3097%" y="133" width="0.3802%" height="15" fill="rgb(223,38,3)" fg:x="3860" fg:w="76"/><text x="19.6026%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,709 instructions, 8.55%)</title><rect x="12.1561%" y="149" width="8.5493%" height="15" fill="rgb(252,103,29)" fg:x="2430" fg:w="1709"/><text x="12.4490%" y="159.50">binread::b..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.32%)</title><rect x="20.7054%" y="149" width="0.3152%" height="15" fill="rgb(233,6,30)" fg:x="4139" fg:w="63"/><text x="20.9983%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.07%)</title><rect x="21.0205%" y="149" width="0.0650%" height="15" fill="rgb(250,91,40)" fg:x="4202" fg:w="13"/><text x="21.3135%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.07%)</title><rect x="21.0855%" y="149" width="0.0650%" height="15" fill="rgb(208,144,46)" fg:x="4215" fg:w="13"/><text x="21.3785%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.04%)</title><rect x="21.1506%" y="149" width="0.0350%" height="15" fill="rgb(215,157,45)" fg:x="4228" fg:w="7"/><text x="21.4435%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.08%)</title><rect x="21.1856%" y="149" width="0.0750%" height="15" fill="rgb(212,4,52)" fg:x="4235" fg:w="15"/><text x="21.4786%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="21.2606%" y="133" width="0.3802%" height="15" fill="rgb(237,88,17)" fg:x="4250" fg:w="76"/><text x="21.5536%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.80%)</title><rect x="21.2606%" y="149" width="0.7954%" height="15" fill="rgb(229,43,37)" fg:x="4250" fg:w="159"/><text x="21.5536%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="22.0560%" y="117" width="0.3802%" height="15" fill="rgb(243,42,50)" fg:x="4409" fg:w="76"/><text x="22.3490%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.55%)</title><rect x="22.0560%" y="133" width="0.5503%" height="15" fill="rgb(215,72,53)" fg:x="4409" fg:w="110"/><text x="22.3490%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 0.89%)</title><rect x="22.0560%" y="149" width="0.8904%" height="15" fill="rgb(231,120,23)" fg:x="4409" fg:w="178"/><text x="22.3490%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="22.9465%" y="149" width="0.3802%" height="15" fill="rgb(210,47,2)" fg:x="4587" fg:w="76"/><text x="23.2394%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.41%)</title><rect x="23.3267%" y="149" width="0.4052%" height="15" fill="rgb(235,0,38)" fg:x="4663" fg:w="81"/><text x="23.6196%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="23.7319%" y="149" width="0.3802%" height="15" fill="rgb(211,23,50)" fg:x="4744" fg:w="76"/><text x="24.0248%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="24.1121%" y="149" width="0.3802%" height="15" fill="rgb(233,129,49)" fg:x="4820" fg:w="76"/><text x="24.4050%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 instructions, 0.01%)</title><rect x="24.4922%" y="149" width="0.0100%" height="15" fill="rgb(218,58,15)" fg:x="4896" fg:w="2"/><text x="24.7852%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.41%)</title><rect x="24.5023%" y="149" width="0.4052%" height="15" fill="rgb(249,115,20)" fg:x="4898" fg:w="81"/><text x="24.7952%" y="159.50"></text></g><g><title>memcpy (380 instructions, 1.90%)</title><rect x="24.9075%" y="149" width="1.9010%" height="15" fill="rgb(234,51,36)" fg:x="4979" fg:w="380"/><text x="25.2004%" y="159.50"></text></g><g><title>memcpy (380 instructions, 1.90%)</title><rect x="26.8084%" y="149" width="1.9010%" height="15" fill="rgb(215,91,23)" fg:x="5359" fg:w="380"/><text x="27.1014%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,436 instructions, 32.20%)</title><rect x="1.2356%" y="165" width="32.1961%" height="15" fill="rgb(216,14,16)" fg:x="247" fg:w="6436"/><text x="1.5286%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (335 instructions, 1.68%)</title><rect x="33.4317%" y="165" width="1.6758%" height="15" fill="rgb(212,121,33)" fg:x="6683" fg:w="335"/><text x="33.7247%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="35.1076%" y="149" width="0.0250%" height="15" fill="rgb(233,49,5)" fg:x="7018" fg:w="5"/><text x="35.4005%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 instructions, 0.20%)</title><rect x="35.1076%" y="165" width="0.1951%" height="15" fill="rgb(250,122,36)" fg:x="7018" fg:w="39"/><text x="35.4005%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="35.3027%" y="165" width="0.3802%" height="15" fill="rgb(247,23,14)" fg:x="7057" fg:w="76"/><text x="35.5956%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="35.6828%" y="149" width="0.0250%" height="15" fill="rgb(251,121,52)" fg:x="7133" fg:w="5"/><text x="35.9758%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.27%)</title><rect x="35.7079%" y="133" width="0.2651%" height="15" fill="rgb(248,109,2)" fg:x="7138" fg:w="53"/><text x="36.0008%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.44%)</title><rect x="35.9730%" y="133" width="0.4402%" height="15" fill="rgb(229,176,14)" fg:x="7191" fg:w="88"/><text x="36.2660%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.81%)</title><rect x="36.4132%" y="133" width="0.8104%" height="15" fill="rgb(225,143,15)" fg:x="7279" fg:w="162"/><text x="36.7062%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.70%)</title><rect x="35.7079%" y="149" width="2.7014%" height="15" fill="rgb(232,218,22)" fg:x="7138" fg:w="540"/><text x="36.0008%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (749 instructions, 3.75%)</title><rect x="35.6828%" y="165" width="3.7469%" height="15" fill="rgb(246,29,49)" fg:x="7133" fg:w="749"/><text x="35.9758%" y="175.50">can..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="39.4297%" y="165" width="0.3802%" height="15" fill="rgb(241,93,26)" fg:x="7882" fg:w="76"/><text x="39.7227%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="39.8099%" y="149" width="0.0250%" height="15" fill="rgb(215,79,12)" fg:x="7958" fg:w="5"/><text x="40.1029%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.27%)</title><rect x="39.8349%" y="133" width="0.2651%" height="15" fill="rgb(243,65,43)" fg:x="7963" fg:w="53"/><text x="40.1279%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.44%)</title><rect x="40.1001%" y="133" width="0.4402%" height="15" fill="rgb(206,37,1)" fg:x="8016" fg:w="88"/><text x="40.3930%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.81%)</title><rect x="40.5403%" y="133" width="0.8104%" height="15" fill="rgb(233,201,23)" fg:x="8104" fg:w="162"/><text x="40.8332%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.70%)</title><rect x="39.8349%" y="149" width="2.7014%" height="15" fill="rgb(245,214,41)" fg:x="7963" fg:w="540"/><text x="40.1279%" y="159.50">c..</text></g><g><title>memcmp (68 instructions, 0.34%)</title><rect x="42.5363%" y="149" width="0.3402%" height="15" fill="rgb(233,20,25)" fg:x="8503" fg:w="68"/><text x="42.8292%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.41%)</title><rect x="42.8764%" y="133" width="0.4052%" height="15" fill="rgb(205,208,44)" fg:x="8571" fg:w="81"/><text x="43.1694%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.54%)</title><rect x="42.8764%" y="149" width="0.5403%" height="15" fill="rgb(236,42,29)" fg:x="8571" fg:w="108"/><text x="43.1694%" y="159.50"></text></g><g><title>candid::types::internal::env_add (890 instructions, 4.45%)</title><rect x="39.8099%" y="165" width="4.4522%" height="15" fill="rgb(250,81,31)" fg:x="7958" fg:w="890"/><text x="40.1029%" y="175.50">cand..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.27%)</title><rect x="44.2621%" y="117" width="0.2651%" height="15" fill="rgb(227,220,53)" fg:x="8848" fg:w="53"/><text x="44.5551%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (78 instructions, 0.39%)</title><rect x="44.2621%" y="133" width="0.3902%" height="15" fill="rgb(212,180,23)" fg:x="8848" fg:w="78"/><text x="44.5551%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (293 instructions, 1.47%)</title><rect x="44.2621%" y="149" width="1.4657%" height="15" fill="rgb(240,134,24)" fg:x="8848" fg:w="293"/><text x="44.5551%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1287 (15 instructions, 0.08%)</title><rect x="45.7279%" y="149" width="0.0750%" height="15" fill="rgb(207,93,0)" fg:x="9141" fg:w="15"/><text x="46.0208%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="45.8029%" y="149" width="0.0550%" height="15" fill="rgb(221,160,13)" fg:x="9156" fg:w="11"/><text x="46.0959%" y="159.50"></text></g><g><title>candid::types::internal::env_id (478 instructions, 2.39%)</title><rect x="44.2621%" y="165" width="2.3912%" height="15" fill="rgb(221,33,39)" fg:x="8848" fg:w="478"/><text x="44.5551%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (47 instructions, 0.24%)</title><rect x="46.6533%" y="165" width="0.2351%" height="15" fill="rgb(212,68,33)" fg:x="9326" fg:w="47"/><text x="46.9463%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.62%)</title><rect x="46.8884%" y="149" width="0.6153%" height="15" fill="rgb(208,72,37)" fg:x="9373" fg:w="123"/><text x="47.1814%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.62%)</title><rect x="47.6388%" y="149" width="0.6153%" height="15" fill="rgb(236,138,45)" fg:x="9523" fg:w="123"/><text x="47.9318%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 1.50%)</title><rect x="46.8884%" y="165" width="1.5008%" height="15" fill="rgb(207,86,25)" fg:x="9373" fg:w="300"/><text x="47.1814%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.14%)</title><rect x="48.3892%" y="149" width="0.1401%" height="15" fill="rgb(205,195,4)" fg:x="9673" fg:w="28"/><text x="48.6822%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.49%)</title><rect x="48.3892%" y="165" width="0.4852%" height="15" fill="rgb(221,47,42)" fg:x="9673" fg:w="97"/><text x="48.6822%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="48.8744%" y="165" width="0.0550%" height="15" fill="rgb(216,36,7)" fg:x="9770" fg:w="11"/><text x="49.1674%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="48.9295%" y="165" width="0.0550%" height="15" fill="rgb(251,212,22)" fg:x="9781" fg:w="11"/><text x="49.2224%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="48.9845%" y="165" width="0.0550%" height="15" fill="rgb(251,136,2)" fg:x="9792" fg:w="11"/><text x="49.2775%" y="175.50"></text></g><g><title>memcpy (410 instructions, 2.05%)</title><rect x="49.0395%" y="165" width="2.0510%" height="15" fill="rgb(229,23,53)" fg:x="9803" fg:w="410"/><text x="49.3325%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.06%)</title><rect x="51.0905%" y="133" width="0.0600%" height="15" fill="rgb(232,22,36)" fg:x="10213" fg:w="12"/><text x="51.3835%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.84%)</title><rect x="51.1506%" y="133" width="0.8404%" height="15" fill="rgb(220,54,19)" fg:x="10225" fg:w="168"/><text x="51.4435%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.48%)</title><rect x="51.9910%" y="101" width="0.4752%" height="15" fill="rgb(238,56,42)" fg:x="10393" fg:w="95"/><text x="52.2840%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (240 instructions, 1.20%)</title><rect x="51.9910%" y="117" width="1.2006%" height="15" fill="rgb(210,79,48)" fg:x="10393" fg:w="240"/><text x="52.2840%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (267 instructions, 1.34%)</title><rect x="51.9910%" y="133" width="1.3357%" height="15" fill="rgb(222,61,34)" fg:x="10393" fg:w="267"/><text x="52.2840%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.06%)</title><rect x="53.3267%" y="133" width="0.0550%" height="15" fill="rgb(207,156,27)" fg:x="10660" fg:w="11"/><text x="53.6196%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (500 instructions, 2.50%)</title><rect x="51.0905%" y="149" width="2.5013%" height="15" fill="rgb(229,212,37)" fg:x="10213" fg:w="500"/><text x="51.3835%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (535 instructions, 2.68%)</title><rect x="51.0905%" y="165" width="2.6763%" height="15" fill="rgb(252,82,21)" fg:x="10213" fg:w="535"/><text x="51.3835%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.27%)</title><rect x="53.7669%" y="149" width="0.2701%" height="15" fill="rgb(208,15,6)" fg:x="10748" fg:w="54"/><text x="54.0599%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.48%)</title><rect x="54.0370%" y="149" width="0.4752%" height="15" fill="rgb(214,95,1)" fg:x="10802" fg:w="95"/><text x="54.3300%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 1.15%)</title><rect x="53.7669%" y="165" width="1.1506%" height="15" fill="rgb(247,70,33)" fg:x="10748" fg:w="230"/><text x="54.0599%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,198 instructions, 56.02%)</title><rect x="0.8554%" y="181" width="56.0180%" height="15" fill="rgb(245,188,37)" fg:x="171" fg:w="11198"/><text x="1.1484%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (5 instructions, 0.03%)</title><rect x="56.8734%" y="149" width="0.0250%" height="15" fill="rgb(210,160,43)" fg:x="11369" fg:w="5"/><text x="57.1664%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.27%)</title><rect x="56.8984%" y="117" width="0.2701%" height="15" fill="rgb(234,119,15)" fg:x="11374" fg:w="54"/><text x="57.1914%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.68%)</title><rect x="56.8984%" y="133" width="0.6753%" height="15" fill="rgb(240,66,54)" fg:x="11374" fg:w="135"/><text x="57.1914%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.81%)</title><rect x="56.8984%" y="149" width="0.8104%" height="15" fill="rgb(253,55,37)" fg:x="11374" fg:w="162"/><text x="57.1914%" y="159.50"></text></g><g><title>memset (136 instructions, 0.68%)</title><rect x="57.7089%" y="149" width="0.6803%" height="15" fill="rgb(225,205,27)" fg:x="11536" fg:w="136"/><text x="58.0018%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (463 instructions, 2.32%)</title><rect x="56.8734%" y="165" width="2.3162%" height="15" fill="rgb(237,106,7)" fg:x="11369" fg:w="463"/><text x="57.1664%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.16%)</title><rect x="59.1896%" y="149" width="0.1601%" height="15" fill="rgb(223,168,15)" fg:x="11832" fg:w="32"/><text x="59.4826%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.38%)</title><rect x="59.3497%" y="117" width="0.3802%" height="15" fill="rgb(216,53,41)" fg:x="11864" fg:w="76"/><text x="59.6426%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.55%)</title><rect x="59.3497%" y="133" width="0.5503%" height="15" fill="rgb(239,188,10)" fg:x="11864" fg:w="110"/><text x="59.6426%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.88%)</title><rect x="59.3497%" y="149" width="0.8754%" height="15" fill="rgb(235,82,48)" fg:x="11864" fg:w="175"/><text x="59.6426%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="60.2251%" y="149" width="0.0550%" height="15" fill="rgb(210,103,35)" fg:x="12039" fg:w="11"/><text x="60.5181%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.06%)</title><rect x="60.2801%" y="149" width="0.0550%" height="15" fill="rgb(214,207,25)" fg:x="12050" fg:w="11"/><text x="60.5731%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.15%)</title><rect x="60.3352%" y="149" width="0.1501%" height="15" fill="rgb(218,6,48)" fg:x="12061" fg:w="30"/><text x="60.6281%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.03%)</title><rect x="60.4852%" y="149" width="0.0250%" height="15" fill="rgb(243,81,34)" fg:x="12091" fg:w="5"/><text x="60.7782%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (470 instructions, 2.35%)</title><rect x="59.1896%" y="165" width="2.3512%" height="15" fill="rgb(234,223,27)" fg:x="11832" fg:w="470"/><text x="59.4826%" y="175.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="61.5408%" y="165" width="0.0250%" height="15" fill="rgb(227,171,7)" fg:x="12302" fg:w="5"/><text x="61.8337%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.28%)</title><rect x="61.5658%" y="165" width="0.2751%" height="15" fill="rgb(224,177,11)" fg:x="12307" fg:w="55"/><text x="61.8588%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,067 instructions, 5.34%)</title><rect x="56.8734%" y="181" width="5.3377%" height="15" fill="rgb(207,46,20)" fg:x="11369" fg:w="1067"/><text x="57.1664%" y="191.50">ic_cd..</text></g><g><title>hashmap::batch_remove_4_::{{closure}} (19,528 instructions, 97.69%)</title><rect x="0.8554%" y="197" width="97.6888%" height="15" fill="rgb(205,71,19)" fg:x="171" fg:w="19528"/><text x="1.1484%" y="207.50">hashmap::batch_remove_4_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.06%)</title><rect x="98.5443%" y="197" width="0.0600%" height="15" fill="rgb(242,85,7)" fg:x="19699" fg:w="12"/><text x="98.8372%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.41%)</title><rect x="98.6043%" y="197" width="0.4052%" height="15" fill="rgb(226,63,50)" fg:x="19711" fg:w="81"/><text x="98.8973%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.50%)</title><rect x="99.0095%" y="197" width="0.5003%" height="15" fill="rgb(215,84,51)" fg:x="19792" fg:w="100"/><text x="99.3025%" y="207.50"></text></g><g><title>all (19,990 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,149,51)" fg:x="0" fg:w="19990"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (19,990 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,128,36)" fg:x="0" fg:w="19990"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>