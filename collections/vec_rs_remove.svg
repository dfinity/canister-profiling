<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">vec_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="15941"><g><title>ic_cdk::setup (24 instructions, 0.15%)</title><rect x="0.0000%" y="197" width="0.1506%" height="15" fill="rgb(233,170,16)" fg:x="0" fg:w="24"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.51%)</title><rect x="0.1506%" y="197" width="0.5144%" height="15" fill="rgb(206,97,36)" fg:x="24" fg:w="82"/><text x="0.4435%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.51%)</title><rect x="0.6650%" y="197" width="0.5144%" height="15" fill="rgb(253,201,4)" fg:x="106" fg:w="82"/><text x="0.9579%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.51%)</title><rect x="1.1793%" y="165" width="0.5144%" height="15" fill="rgb(211,2,44)" fg:x="188" fg:w="82"/><text x="1.4723%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.51%)</title><rect x="1.6937%" y="149" width="0.5144%" height="15" fill="rgb(211,106,30)" fg:x="270" fg:w="82"/><text x="1.9867%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.04%)</title><rect x="2.2081%" y="133" width="0.0376%" height="15" fill="rgb(245,61,15)" fg:x="352" fg:w="6"/><text x="2.5011%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.78%)</title><rect x="2.2081%" y="149" width="2.7790%" height="15" fill="rgb(218,34,34)" fg:x="352" fg:w="443"/><text x="2.5011%" y="159.50">co..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.60%)</title><rect x="4.9871%" y="149" width="0.5959%" height="15" fill="rgb(242,219,15)" fg:x="795" fg:w="95"/><text x="5.2801%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.38%)</title><rect x="5.5831%" y="149" width="0.3764%" height="15" fill="rgb(207,209,6)" fg:x="890" fg:w="60"/><text x="5.8761%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.38%)</title><rect x="5.9595%" y="149" width="0.3764%" height="15" fill="rgb(244,48,19)" fg:x="950" fg:w="60"/><text x="6.2524%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.38%)</title><rect x="6.3359%" y="149" width="0.3764%" height="15" fill="rgb(222,25,47)" fg:x="1010" fg:w="60"/><text x="6.6288%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (60 instructions, 0.38%)</title><rect x="6.7123%" y="149" width="0.3764%" height="15" fill="rgb(216,125,25)" fg:x="1070" fg:w="60"/><text x="7.0052%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.51%)</title><rect x="7.0886%" y="149" width="0.5144%" height="15" fill="rgb(242,199,45)" fg:x="1130" fg:w="82"/><text x="7.3816%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.44%)</title><rect x="7.6030%" y="149" width="0.4391%" height="15" fill="rgb(233,92,45)" fg:x="1212" fg:w="70"/><text x="7.8960%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.04%)</title><rect x="8.0422%" y="133" width="0.0376%" height="15" fill="rgb(229,70,51)" fg:x="1282" fg:w="6"/><text x="8.3351%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.78%)</title><rect x="8.0422%" y="149" width="2.7790%" height="15" fill="rgb(223,218,43)" fg:x="1282" fg:w="443"/><text x="8.3351%" y="159.50">co..</text></g><g><title>memcmp (19 instructions, 0.12%)</title><rect x="10.8212%" y="149" width="0.1192%" height="15" fill="rgb(208,215,14)" fg:x="1725" fg:w="19"/><text x="11.1141%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.51%)</title><rect x="10.9403%" y="133" width="0.5144%" height="15" fill="rgb(221,190,13)" fg:x="1744" fg:w="82"/><text x="11.2333%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.42%)</title><rect x="11.4547%" y="101" width="0.4203%" height="15" fill="rgb(207,6,26)" fg:x="1826" fg:w="67"/><text x="11.7477%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.60%)</title><rect x="11.4547%" y="117" width="0.6022%" height="15" fill="rgb(220,156,22)" fg:x="1826" fg:w="96"/><text x="11.7477%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.07%)</title><rect x="12.0570%" y="69" width="0.0690%" height="15" fill="rgb(239,34,53)" fg:x="1922" fg:w="11"/><text x="12.3499%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.22%)</title><rect x="12.1260%" y="53" width="0.2196%" height="15" fill="rgb(251,202,37)" fg:x="1933" fg:w="35"/><text x="12.4189%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.40%)</title><rect x="12.1260%" y="69" width="0.4015%" height="15" fill="rgb(254,83,29)" fg:x="1933" fg:w="64"/><text x="12.4189%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.90%)</title><rect x="12.0570%" y="85" width="0.9033%" height="15" fill="rgb(217,26,49)" fg:x="1922" fg:w="144"/><text x="12.3499%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 1.31%)</title><rect x="12.0570%" y="101" width="1.3111%" height="15" fill="rgb(206,131,42)" fg:x="1922" fg:w="209"/><text x="12.3499%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.37%)</title><rect x="12.0570%" y="117" width="1.3738%" height="15" fill="rgb(229,144,32)" fg:x="1922" fg:w="219"/><text x="12.3499%" y="127.50"></text></g><g><title>core::fmt::write (457 instructions, 2.87%)</title><rect x="11.4547%" y="133" width="2.8668%" height="15" fill="rgb(242,211,40)" fg:x="1826" fg:w="457"/><text x="11.7477%" y="143.50">co..</text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 4.25%)</title><rect x="10.9403%" y="149" width="4.2469%" height="15" fill="rgb(235,206,17)" fg:x="1744" fg:w="677"/><text x="11.2333%" y="159.50">allo..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.60%)</title><rect x="15.1873%" y="149" width="0.5959%" height="15" fill="rgb(220,68,38)" fg:x="2421" fg:w="95"/><text x="15.4802%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.38%)</title><rect x="15.7832%" y="149" width="0.3764%" height="15" fill="rgb(216,8,30)" fg:x="2516" fg:w="60"/><text x="16.0762%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.48%)</title><rect x="16.1596%" y="149" width="0.4768%" height="15" fill="rgb(243,64,39)" fg:x="2576" fg:w="76"/><text x="16.4526%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (70 instructions, 0.44%)</title><rect x="16.6363%" y="149" width="0.4391%" height="15" fill="rgb(241,1,24)" fg:x="2652" fg:w="70"/><text x="16.9293%" y="159.50"></text></g><g><title>memcmp (6 instructions, 0.04%)</title><rect x="17.0755%" y="117" width="0.0376%" height="15" fill="rgb(221,194,32)" fg:x="2722" fg:w="6"/><text x="17.3684%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (443 instructions, 2.78%)</title><rect x="17.0755%" y="133" width="2.7790%" height="15" fill="rgb(206,132,2)" fg:x="2722" fg:w="443"/><text x="17.3684%" y="143.50">co..</text></g><g><title>memcmp (19 instructions, 0.12%)</title><rect x="19.8545%" y="133" width="0.1192%" height="15" fill="rgb(246,156,19)" fg:x="3165" fg:w="19"/><text x="20.1474%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.51%)</title><rect x="19.9737%" y="117" width="0.5144%" height="15" fill="rgb(205,87,1)" fg:x="3184" fg:w="82"/><text x="20.2666%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.42%)</title><rect x="20.4880%" y="85" width="0.4203%" height="15" fill="rgb(244,88,9)" fg:x="3266" fg:w="67"/><text x="20.7810%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (96 instructions, 0.60%)</title><rect x="20.4880%" y="101" width="0.6022%" height="15" fill="rgb(254,67,22)" fg:x="3266" fg:w="96"/><text x="20.7810%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.07%)</title><rect x="21.0903%" y="53" width="0.0690%" height="15" fill="rgb(221,40,31)" fg:x="3362" fg:w="11"/><text x="21.3832%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.22%)</title><rect x="21.1593%" y="37" width="0.2196%" height="15" fill="rgb(248,97,6)" fg:x="3373" fg:w="35"/><text x="21.4522%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 instructions, 0.40%)</title><rect x="21.1593%" y="53" width="0.4015%" height="15" fill="rgb(210,185,15)" fg:x="3373" fg:w="64"/><text x="21.4522%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.90%)</title><rect x="21.0903%" y="69" width="0.9033%" height="15" fill="rgb(213,167,41)" fg:x="3362" fg:w="144"/><text x="21.3832%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (209 instructions, 1.31%)</title><rect x="21.0903%" y="85" width="1.3111%" height="15" fill="rgb(213,74,11)" fg:x="3362" fg:w="209"/><text x="21.3832%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (219 instructions, 1.37%)</title><rect x="21.0903%" y="101" width="1.3738%" height="15" fill="rgb(250,160,29)" fg:x="3362" fg:w="219"/><text x="21.3832%" y="111.50"></text></g><g><title>core::fmt::write (457 instructions, 2.87%)</title><rect x="20.4880%" y="117" width="2.8668%" height="15" fill="rgb(217,3,0)" fg:x="3266" fg:w="457"/><text x="20.7810%" y="127.50">co..</text></g><g><title>alloc::fmt::format::format_inner (677 instructions, 4.25%)</title><rect x="19.9737%" y="133" width="4.2469%" height="15" fill="rgb(219,180,3)" fg:x="3184" fg:w="677"/><text x="20.2666%" y="143.50">allo..</text></g><g><title>binread::binary_template::write_vec_named (95 instructions, 0.60%)</title><rect x="24.2206%" y="133" width="0.5959%" height="15" fill="rgb(209,186,7)" fg:x="3861" fg:w="95"/><text x="24.5135%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.38%)</title><rect x="24.8165%" y="133" width="0.3764%" height="15" fill="rgb(215,92,52)" fg:x="3956" fg:w="60"/><text x="25.1095%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (82 instructions, 0.51%)</title><rect x="25.1929%" y="117" width="0.5144%" height="15" fill="rgb(236,38,24)" fg:x="4016" fg:w="82"/><text x="25.4859%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (95 instructions, 0.60%)</title><rect x="25.7073%" y="117" width="0.5959%" height="15" fill="rgb(236,27,45)" fg:x="4098" fg:w="95"/><text x="26.0003%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.48%)</title><rect x="26.3032%" y="117" width="0.4768%" height="15" fill="rgb(221,85,3)" fg:x="4193" fg:w="76"/><text x="26.5962%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (330 instructions, 2.07%)</title><rect x="25.1929%" y="133" width="2.0701%" height="15" fill="rgb(244,21,41)" fg:x="4016" fg:w="330"/><text x="25.4859%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.51%)</title><rect x="27.2630%" y="133" width="0.5144%" height="15" fill="rgb(231,190,37)" fg:x="4346" fg:w="82"/><text x="27.5560%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,952 instructions, 12.25%)</title><rect x="17.0755%" y="149" width="12.2452%" height="15" fill="rgb(221,186,32)" fg:x="2722" fg:w="1952"/><text x="17.3684%" y="159.50">binread::binrea..</text></g><g><title>binread::binary_template::write_end_struct (76 instructions, 0.48%)</title><rect x="29.3206%" y="149" width="0.4768%" height="15" fill="rgb(227,49,18)" fg:x="4674" fg:w="76"/><text x="29.6136%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.09%)</title><rect x="29.7974%" y="149" width="0.0941%" height="15" fill="rgb(215,127,45)" fg:x="4750" fg:w="15"/><text x="30.0903%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.09%)</title><rect x="29.8915%" y="149" width="0.0941%" height="15" fill="rgb(217,41,43)" fg:x="4765" fg:w="15"/><text x="30.1844%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.09%)</title><rect x="29.9856%" y="149" width="0.0941%" height="15" fill="rgb(221,194,39)" fg:x="4780" fg:w="15"/><text x="30.2785%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 instructions, 0.04%)</title><rect x="30.0797%" y="149" width="0.0376%" height="15" fill="rgb(244,150,23)" fg:x="4795" fg:w="6"/><text x="30.3726%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.51%)</title><rect x="30.1173%" y="133" width="0.5144%" height="15" fill="rgb(246,7,50)" fg:x="4801" fg:w="82"/><text x="30.4103%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 1.12%)</title><rect x="30.1173%" y="149" width="1.1166%" height="15" fill="rgb(216,140,7)" fg:x="4801" fg:w="178"/><text x="30.4103%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.51%)</title><rect x="31.2339%" y="117" width="0.5144%" height="15" fill="rgb(217,223,13)" fg:x="4979" fg:w="82"/><text x="31.5269%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.82%)</title><rect x="31.2339%" y="133" width="0.8155%" height="15" fill="rgb(231,37,8)" fg:x="4979" fg:w="130"/><text x="31.5269%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 instructions, 1.35%)</title><rect x="31.2339%" y="149" width="1.3487%" height="15" fill="rgb(211,131,14)" fg:x="4979" fg:w="215"/><text x="31.5269%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.51%)</title><rect x="32.5826%" y="149" width="0.5144%" height="15" fill="rgb(252,137,31)" fg:x="5194" fg:w="82"/><text x="32.8756%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.56%)</title><rect x="33.0970%" y="149" width="0.5583%" height="15" fill="rgb(223,163,39)" fg:x="5276" fg:w="89"/><text x="33.3900%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.51%)</title><rect x="33.6554%" y="149" width="0.5144%" height="15" fill="rgb(210,148,29)" fg:x="5365" fg:w="82"/><text x="33.9483%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.51%)</title><rect x="34.1698%" y="149" width="0.5144%" height="15" fill="rgb(205,201,0)" fg:x="5447" fg:w="82"/><text x="34.4627%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 instructions, 0.03%)</title><rect x="34.6841%" y="149" width="0.0251%" height="15" fill="rgb(224,177,26)" fg:x="5529" fg:w="4"/><text x="34.9771%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.56%)</title><rect x="34.7092%" y="149" width="0.5583%" height="15" fill="rgb(235,54,36)" fg:x="5533" fg:w="89"/><text x="35.0022%" y="159.50"></text></g><g><title>memcpy (392 instructions, 2.46%)</title><rect x="35.2675%" y="149" width="2.4591%" height="15" fill="rgb(228,4,8)" fg:x="5622" fg:w="392"/><text x="35.5605%" y="159.50">m..</text></g><g><title>memcpy (392 instructions, 2.46%)</title><rect x="37.7266%" y="149" width="2.4591%" height="15" fill="rgb(213,9,36)" fg:x="6014" fg:w="392"/><text x="38.0196%" y="159.50">m..</text></g><g><title>memcpy (504 instructions, 3.16%)</title><rect x="40.1857%" y="149" width="3.1617%" height="15" fill="rgb(229,29,50)" fg:x="6406" fg:w="504"/><text x="40.4787%" y="159.50">me..</text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,854 instructions, 49.27%)</title><rect x="1.6937%" y="165" width="49.2692%" height="15" fill="rgb(214,209,6)" fg:x="270" fg:w="7854"/><text x="1.9867%" y="175.50">candid::de::IDLDeserialize::new_with_config</text></g><g><title>memcpy (344 instructions, 2.16%)</title><rect x="50.9629%" y="165" width="2.1580%" height="15" fill="rgb(220,6,29)" fg:x="8124" fg:w="344"/><text x="51.2559%" y="175.50">m..</text></g><g><title>candid::types::internal::find_type (23 instructions, 0.14%)</title><rect x="53.1209%" y="165" width="0.1443%" height="15" fill="rgb(219,208,51)" fg:x="8468" fg:w="23"/><text x="53.4139%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.51%)</title><rect x="53.2652%" y="165" width="0.5144%" height="15" fill="rgb(213,130,19)" fg:x="8491" fg:w="82"/><text x="53.5581%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.51%)</title><rect x="53.7796%" y="149" width="0.5144%" height="15" fill="rgb(217,196,50)" fg:x="8573" fg:w="82"/><text x="54.0725%" y="159.50"></text></g><g><title>candid::types::internal::env_add (165 instructions, 1.04%)</title><rect x="53.7796%" y="165" width="1.0351%" height="15" fill="rgb(220,81,46)" fg:x="8573" fg:w="165"/><text x="54.0725%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.51%)</title><rect x="54.8146%" y="165" width="0.5144%" height="15" fill="rgb(233,143,7)" fg:x="8738" fg:w="82"/><text x="55.1076%" y="175.50"></text></g><g><title>memcmp (77 instructions, 0.48%)</title><rect x="55.3290%" y="149" width="0.4830%" height="15" fill="rgb(245,14,39)" fg:x="8820" fg:w="77"/><text x="55.6220%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.56%)</title><rect x="55.8121%" y="133" width="0.5583%" height="15" fill="rgb(232,154,50)" fg:x="8897" fg:w="89"/><text x="56.1050%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 instructions, 0.83%)</title><rect x="55.8121%" y="149" width="0.8343%" height="15" fill="rgb(236,138,30)" fg:x="8897" fg:w="133"/><text x="56.1050%" y="159.50"></text></g><g><title>candid::types::internal::env_add (382 instructions, 2.40%)</title><rect x="55.3290%" y="165" width="2.3963%" height="15" fill="rgb(222,28,16)" fg:x="8820" fg:w="382"/><text x="55.6220%" y="175.50">c..</text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (51 instructions, 0.32%)</title><rect x="57.7254%" y="149" width="0.3199%" height="15" fill="rgb(211,152,26)" fg:x="9202" fg:w="51"/><text x="58.0183%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="58.0453%" y="149" width="0.0816%" height="15" fill="rgb(208,25,18)" fg:x="9253" fg:w="13"/><text x="58.3383%" y="159.50"></text></g><g><title>candid::types::internal::env_id (198 instructions, 1.24%)</title><rect x="57.7254%" y="165" width="1.2421%" height="15" fill="rgb(249,214,22)" fg:x="9202" fg:w="198"/><text x="58.0183%" y="175.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.31%)</title><rect x="58.9674%" y="165" width="0.3074%" height="15" fill="rgb(209,37,50)" fg:x="9400" fg:w="49"/><text x="59.2604%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.52%)</title><rect x="59.2748%" y="149" width="0.5207%" height="15" fill="rgb(238,145,11)" fg:x="9449" fg:w="83"/><text x="59.5678%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.14%)</title><rect x="60.0715%" y="133" width="0.1443%" height="15" fill="rgb(208,161,17)" fg:x="9576" fg:w="23"/><text x="60.3645%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.87%)</title><rect x="60.0715%" y="149" width="0.8657%" height="15" fill="rgb(224,151,53)" fg:x="9576" fg:w="138"/><text x="60.3645%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (309 instructions, 1.94%)</title><rect x="59.2748%" y="165" width="1.9384%" height="15" fill="rgb(213,86,40)" fg:x="9449" fg:w="309"/><text x="59.5678%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (35 instructions, 0.22%)</title><rect x="61.2132%" y="149" width="0.2196%" height="15" fill="rgb(230,223,50)" fg:x="9758" fg:w="35"/><text x="61.5062%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1619 (34 instructions, 0.21%)</title><rect x="61.4328%" y="149" width="0.2133%" height="15" fill="rgb(214,110,47)" fg:x="9793" fg:w="34"/><text x="61.7258%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1619 (34 instructions, 0.21%)</title><rect x="61.6461%" y="149" width="0.2133%" height="15" fill="rgb(211,48,26)" fg:x="9827" fg:w="34"/><text x="61.9390%" y="159.50"></text></g><g><title>candid::de::Deserializer::add_cost (33 instructions, 0.21%)</title><rect x="61.8594%" y="149" width="0.2070%" height="15" fill="rgb(218,127,8)" fg:x="9861" fg:w="33"/><text x="62.1523%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (250 instructions, 1.57%)</title><rect x="61.2132%" y="165" width="1.5683%" height="15" fill="rgb(223,153,51)" fg:x="9758" fg:w="250"/><text x="61.5062%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="62.7815%" y="165" width="0.0816%" height="15" fill="rgb(246,26,43)" fg:x="10008" fg:w="13"/><text x="63.0745%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="62.8631%" y="165" width="0.0816%" height="15" fill="rgb(252,26,20)" fg:x="10021" fg:w="13"/><text x="63.1560%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="62.9446%" y="165" width="0.0816%" height="15" fill="rgb(236,105,8)" fg:x="10034" fg:w="13"/><text x="63.2376%" y="175.50"></text></g><g><title>candid::de::IDLDeserialize::done (43 instructions, 0.27%)</title><rect x="63.0262%" y="165" width="0.2697%" height="15" fill="rgb(215,121,38)" fg:x="10047" fg:w="43"/><text x="63.3191%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.04%)</title><rect x="63.2959%" y="149" width="0.0439%" height="15" fill="rgb(205,190,32)" fg:x="10090" fg:w="7"/><text x="63.5889%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.17%)</title><rect x="63.3398%" y="133" width="0.1694%" height="15" fill="rgb(210,135,52)" fg:x="10097" fg:w="27"/><text x="63.6328%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.17%)</title><rect x="63.5092%" y="133" width="0.1694%" height="15" fill="rgb(254,82,51)" fg:x="10124" fg:w="27"/><text x="63.8022%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 1.24%)</title><rect x="63.3398%" y="149" width="1.2358%" height="15" fill="rgb(218,133,26)" fg:x="10097" fg:w="197"/><text x="63.6328%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.17%)</title><rect x="64.5756%" y="117" width="0.1694%" height="15" fill="rgb(234,216,23)" fg:x="10294" fg:w="27"/><text x="64.8686%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.89%)</title><rect x="64.5756%" y="133" width="0.8908%" height="15" fill="rgb(233,77,39)" fg:x="10294" fg:w="142"/><text x="64.8686%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 instructions, 1.17%)</title><rect x="64.5756%" y="149" width="1.1668%" height="15" fill="rgb(230,25,39)" fg:x="10294" fg:w="186"/><text x="64.8686%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 instructions, 0.08%)</title><rect x="65.7424%" y="149" width="0.0816%" height="15" fill="rgb(215,177,28)" fg:x="10480" fg:w="13"/><text x="66.0354%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.04%)</title><rect x="65.8240%" y="149" width="0.0439%" height="15" fill="rgb(231,196,21)" fg:x="10493" fg:w="7"/><text x="66.1169%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (470 instructions, 2.95%)</title><rect x="63.2959%" y="165" width="2.9484%" height="15" fill="rgb(226,156,1)" fg:x="10090" fg:w="470"/><text x="63.5889%" y="175.50">co..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.17%)</title><rect x="66.2443%" y="149" width="0.1694%" height="15" fill="rgb(218,62,39)" fg:x="10560" fg:w="27"/><text x="66.5372%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.89%)</title><rect x="66.2443%" y="165" width="0.8908%" height="15" fill="rgb(223,40,40)" fg:x="10560" fg:w="142"/><text x="66.5372%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,083 instructions, 75.80%)</title><rect x="1.1793%" y="181" width="75.7983%" height="15" fill="rgb(238,21,39)" fg:x="188" fg:w="12083"/><text x="1.4723%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.38%)</title><rect x="76.9776%" y="133" width="0.3764%" height="15" fill="rgb(253,146,50)" fg:x="12271" fg:w="60"/><text x="77.2706%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 instructions, 0.65%)</title><rect x="76.9776%" y="149" width="0.6524%" height="15" fill="rgb(238,122,43)" fg:x="12271" fg:w="104"/><text x="77.2706%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.17%)</title><rect x="77.6300%" y="133" width="0.1694%" height="15" fill="rgb(226,161,22)" fg:x="12375" fg:w="27"/><text x="77.9230%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (115 instructions, 0.72%)</title><rect x="77.6300%" y="149" width="0.7214%" height="15" fill="rgb(229,65,35)" fg:x="12375" fg:w="115"/><text x="77.9230%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (343 instructions, 2.15%)</title><rect x="76.9776%" y="165" width="2.1517%" height="15" fill="rgb(214,228,0)" fg:x="12271" fg:w="343"/><text x="77.2706%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (518 instructions, 3.25%)</title><rect x="79.1293%" y="149" width="3.2495%" height="15" fill="rgb(251,129,39)" fg:x="12614" fg:w="518"/><text x="79.4223%" y="159.50">st..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.51%)</title><rect x="82.3788%" y="101" width="0.5144%" height="15" fill="rgb(233,85,4)" fg:x="13132" fg:w="82"/><text x="82.6717%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 instructions, 0.82%)</title><rect x="82.3788%" y="117" width="0.8155%" height="15" fill="rgb(217,4,13)" fg:x="13132" fg:w="130"/><text x="82.6717%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 instructions, 1.33%)</title><rect x="82.3788%" y="133" width="1.3299%" height="15" fill="rgb(236,29,31)" fg:x="13132" fg:w="212"/><text x="82.6717%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.09%)</title><rect x="83.7087%" y="133" width="0.0941%" height="15" fill="rgb(232,96,3)" fg:x="13344" fg:w="15"/><text x="84.0016%" y="143.50"></text></g><g><title>memcpy (15 instructions, 0.09%)</title><rect x="83.8028%" y="133" width="0.0941%" height="15" fill="rgb(230,59,29)" fg:x="13359" fg:w="15"/><text x="84.0957%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 2.68%)</title><rect x="82.3788%" y="149" width="2.6849%" height="15" fill="rgb(228,33,6)" fg:x="13132" fg:w="428"/><text x="82.6717%" y="159.50">c..</text></g><g><title>std::io::Write::write_all (516 instructions, 3.24%)</title><rect x="85.0637%" y="149" width="3.2369%" height="15" fill="rgb(221,30,4)" fg:x="13560" fg:w="516"/><text x="85.3566%" y="159.50">st..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.04%)</title><rect x="88.3006%" y="149" width="0.0439%" height="15" fill="rgb(206,140,47)" fg:x="14076" fg:w="7"/><text x="88.5936%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,566 instructions, 9.82%)</title><rect x="79.1293%" y="165" width="9.8237%" height="15" fill="rgb(253,187,51)" fg:x="12614" fg:w="1566"/><text x="79.4223%" y="175.50">candid::ser:..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.04%)</title><rect x="88.9530%" y="165" width="0.0439%" height="15" fill="rgb(216,168,19)" fg:x="14180" fg:w="7"/><text x="89.2460%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 instructions, 0.04%)</title><rect x="88.9969%" y="165" width="0.0439%" height="15" fill="rgb(210,41,11)" fg:x="14187" fg:w="7"/><text x="89.2899%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (60 instructions, 0.38%)</title><rect x="89.0408%" y="165" width="0.3764%" height="15" fill="rgb(236,46,24)" fg:x="14194" fg:w="60"/><text x="89.3338%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (2,587 instructions, 16.23%)</title><rect x="76.9776%" y="181" width="16.2286%" height="15" fill="rgb(254,140,35)" fg:x="12271" fg:w="2587"/><text x="77.2706%" y="191.50">ic_cdk::api::call::re..</text></g><g><title>vector::__canister_method_batch_remove::{{closure}} (15,390 instructions, 96.54%)</title><rect x="1.1793%" y="197" width="96.5435%" height="15" fill="rgb(238,50,27)" fg:x="188" fg:w="15390"/><text x="1.4723%" y="207.50">vector::__canister_method_batch_remove::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (14 instructions, 0.09%)</title><rect x="97.7229%" y="197" width="0.0878%" height="15" fill="rgb(213,207,23)" fg:x="15578" fg:w="14"/><text x="98.0158%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.17%)</title><rect x="98.3753%" y="181" width="0.1694%" height="15" fill="rgb(213,57,14)" fg:x="15682" fg:w="27"/><text x="98.6682%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (204 instructions, 1.28%)</title><rect x="97.8170%" y="197" width="1.2797%" height="15" fill="rgb(222,31,20)" fg:x="15593" fg:w="204"/><text x="98.1099%" y="207.50"></text></g><g><title>all (15,941 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(225,153,47)" fg:x="0" fg:w="15941"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (15,941 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,141,20)" fg:x="0" fg:w="15941"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>