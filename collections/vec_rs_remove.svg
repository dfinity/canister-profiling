<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">vec_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="13710"><g><title>ic_cdk::setup (19 instructions, 0.14%)</title><rect x="0.0000%" y="197" width="0.1386%" height="15" fill="rgb(219,147,54)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.55%)</title><rect x="0.1386%" y="197" width="0.5543%" height="15" fill="rgb(234,142,19)" fg:x="19" fg:w="76"/><text x="0.4316%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.55%)</title><rect x="0.6929%" y="197" width="0.5543%" height="15" fill="rgb(218,181,25)" fg:x="95" fg:w="76"/><text x="0.9859%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.55%)</title><rect x="1.2473%" y="165" width="0.5543%" height="15" fill="rgb(223,138,12)" fg:x="171" fg:w="76"/><text x="1.5402%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.52%)</title><rect x="1.8016%" y="149" width="0.5179%" height="15" fill="rgb(212,213,27)" fg:x="247" fg:w="71"/><text x="2.0946%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.03%)</title><rect x="2.3195%" y="133" width="0.0292%" height="15" fill="rgb(234,6,8)" fg:x="318" fg:w="4"/><text x="2.6124%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 2.93%)</title><rect x="2.3195%" y="149" width="2.9322%" height="15" fill="rgb(221,157,18)" fg:x="318" fg:w="402"/><text x="2.6124%" y="159.50">co..</text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.61%)</title><rect x="5.2516%" y="149" width="0.6054%" height="15" fill="rgb(235,143,43)" fg:x="720" fg:w="83"/><text x="5.5446%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.39%)</title><rect x="5.8570%" y="149" width="0.3939%" height="15" fill="rgb(207,28,15)" fg:x="803" fg:w="54"/><text x="6.1500%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.39%)</title><rect x="6.2509%" y="149" width="0.3939%" height="15" fill="rgb(212,197,19)" fg:x="857" fg:w="54"/><text x="6.5439%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.39%)</title><rect x="6.6448%" y="149" width="0.3939%" height="15" fill="rgb(217,182,42)" fg:x="911" fg:w="54"/><text x="6.9378%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.39%)</title><rect x="7.0387%" y="149" width="0.3939%" height="15" fill="rgb(232,69,35)" fg:x="965" fg:w="54"/><text x="7.3316%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.52%)</title><rect x="7.4325%" y="149" width="0.5179%" height="15" fill="rgb(214,32,0)" fg:x="1019" fg:w="71"/><text x="7.7255%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.47%)</title><rect x="7.9504%" y="149" width="0.4741%" height="15" fill="rgb(242,57,37)" fg:x="1090" fg:w="65"/><text x="8.2434%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.03%)</title><rect x="8.4245%" y="133" width="0.0292%" height="15" fill="rgb(251,109,35)" fg:x="1155" fg:w="4"/><text x="8.7175%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 2.93%)</title><rect x="8.4245%" y="149" width="2.9322%" height="15" fill="rgb(254,155,37)" fg:x="1155" fg:w="402"/><text x="8.7175%" y="159.50">co..</text></g><g><title>memcmp (16 instructions, 0.12%)</title><rect x="11.3567%" y="149" width="0.1167%" height="15" fill="rgb(232,159,16)" fg:x="1557" fg:w="16"/><text x="11.6496%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.55%)</title><rect x="11.4734%" y="133" width="0.5543%" height="15" fill="rgb(242,92,22)" fg:x="1573" fg:w="76"/><text x="11.7663%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.44%)</title><rect x="12.0277%" y="101" width="0.4376%" height="15" fill="rgb(243,95,35)" fg:x="1649" fg:w="60"/><text x="12.3207%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.62%)</title><rect x="12.0277%" y="117" width="0.6200%" height="15" fill="rgb(210,91,40)" fg:x="1649" fg:w="85"/><text x="12.3207%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.07%)</title><rect x="12.6477%" y="69" width="0.0656%" height="15" fill="rgb(246,85,38)" fg:x="1734" fg:w="9"/><text x="12.9407%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.22%)</title><rect x="12.7133%" y="53" width="0.2188%" height="15" fill="rgb(224,5,10)" fg:x="1743" fg:w="30"/><text x="13.0063%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.40%)</title><rect x="12.7133%" y="69" width="0.4012%" height="15" fill="rgb(223,32,32)" fg:x="1743" fg:w="55"/><text x="13.0063%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.83%)</title><rect x="12.6477%" y="85" width="0.8315%" height="15" fill="rgb(234,122,28)" fg:x="1734" fg:w="114"/><text x="12.9407%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 1.22%)</title><rect x="12.6477%" y="101" width="1.2181%" height="15" fill="rgb(253,73,40)" fg:x="1734" fg:w="167"/><text x="12.9407%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 1.25%)</title><rect x="12.6477%" y="117" width="1.2546%" height="15" fill="rgb(221,144,26)" fg:x="1734" fg:w="172"/><text x="12.9407%" y="127.50"></text></g><g><title>core::fmt::write (368 instructions, 2.68%)</title><rect x="12.0277%" y="133" width="2.6842%" height="15" fill="rgb(222,38,45)" fg:x="1649" fg:w="368"/><text x="12.3207%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 4.12%)</title><rect x="11.4734%" y="149" width="4.1211%" height="15" fill="rgb(250,132,40)" fg:x="1573" fg:w="565"/><text x="11.7663%" y="159.50">all..</text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.61%)</title><rect x="15.5945%" y="149" width="0.6054%" height="15" fill="rgb(244,113,41)" fg:x="2138" fg:w="83"/><text x="15.8874%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.40%)</title><rect x="16.1999%" y="149" width="0.4012%" height="15" fill="rgb(221,99,21)" fg:x="2221" fg:w="55"/><text x="16.4928%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.47%)</title><rect x="16.6010%" y="149" width="0.4741%" height="15" fill="rgb(216,55,3)" fg:x="2276" fg:w="65"/><text x="16.8940%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.47%)</title><rect x="17.0751%" y="149" width="0.4741%" height="15" fill="rgb(248,59,53)" fg:x="2341" fg:w="65"/><text x="17.3681%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.03%)</title><rect x="17.5492%" y="117" width="0.0292%" height="15" fill="rgb(219,6,1)" fg:x="2406" fg:w="4"/><text x="17.8422%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (402 instructions, 2.93%)</title><rect x="17.5492%" y="133" width="2.9322%" height="15" fill="rgb(249,69,18)" fg:x="2406" fg:w="402"/><text x="17.8422%" y="143.50">co..</text></g><g><title>memcmp (16 instructions, 0.12%)</title><rect x="20.4814%" y="133" width="0.1167%" height="15" fill="rgb(230,87,39)" fg:x="2808" fg:w="16"/><text x="20.7744%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.55%)</title><rect x="20.5981%" y="117" width="0.5543%" height="15" fill="rgb(248,125,4)" fg:x="2824" fg:w="76"/><text x="20.8911%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.44%)</title><rect x="21.1524%" y="85" width="0.4376%" height="15" fill="rgb(237,147,54)" fg:x="2900" fg:w="60"/><text x="21.4454%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.62%)</title><rect x="21.1524%" y="101" width="0.6200%" height="15" fill="rgb(230,71,15)" fg:x="2900" fg:w="85"/><text x="21.4454%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.07%)</title><rect x="21.7724%" y="53" width="0.0656%" height="15" fill="rgb(230,206,38)" fg:x="2985" fg:w="9"/><text x="22.0654%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.22%)</title><rect x="21.8381%" y="37" width="0.2188%" height="15" fill="rgb(253,177,25)" fg:x="2994" fg:w="30"/><text x="22.1310%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.40%)</title><rect x="21.8381%" y="53" width="0.4012%" height="15" fill="rgb(222,214,32)" fg:x="2994" fg:w="55"/><text x="22.1310%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (114 instructions, 0.83%)</title><rect x="21.7724%" y="69" width="0.8315%" height="15" fill="rgb(205,73,28)" fg:x="2985" fg:w="114"/><text x="22.0654%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (167 instructions, 1.22%)</title><rect x="21.7724%" y="85" width="1.2181%" height="15" fill="rgb(219,226,5)" fg:x="2985" fg:w="167"/><text x="22.0654%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (172 instructions, 1.25%)</title><rect x="21.7724%" y="101" width="1.2546%" height="15" fill="rgb(248,9,12)" fg:x="2985" fg:w="172"/><text x="22.0654%" y="111.50"></text></g><g><title>core::fmt::write (368 instructions, 2.68%)</title><rect x="21.1524%" y="117" width="2.6842%" height="15" fill="rgb(242,169,3)" fg:x="2900" fg:w="368"/><text x="21.4454%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (565 instructions, 4.12%)</title><rect x="20.5981%" y="133" width="4.1211%" height="15" fill="rgb(229,96,30)" fg:x="2824" fg:w="565"/><text x="20.8911%" y="143.50">all..</text></g><g><title>binread::binary_template::write_vec_named (83 instructions, 0.61%)</title><rect x="24.7192%" y="133" width="0.6054%" height="15" fill="rgb(217,226,47)" fg:x="3389" fg:w="83"/><text x="25.0122%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.40%)</title><rect x="25.3246%" y="133" width="0.4012%" height="15" fill="rgb(251,37,46)" fg:x="3472" fg:w="55"/><text x="25.6175%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (71 instructions, 0.52%)</title><rect x="25.7257%" y="117" width="0.5179%" height="15" fill="rgb(205,71,26)" fg:x="3527" fg:w="71"/><text x="26.0187%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (90 instructions, 0.66%)</title><rect x="26.2436%" y="117" width="0.6565%" height="15" fill="rgb(220,95,21)" fg:x="3598" fg:w="90"/><text x="26.5366%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.47%)</title><rect x="26.9001%" y="117" width="0.4741%" height="15" fill="rgb(237,5,19)" fg:x="3688" fg:w="65"/><text x="27.1930%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (285 instructions, 2.08%)</title><rect x="25.7257%" y="133" width="2.0788%" height="15" fill="rgb(218,183,34)" fg:x="3527" fg:w="285"/><text x="26.0187%" y="143.50">&lt;..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (78 instructions, 0.57%)</title><rect x="27.8045%" y="133" width="0.5689%" height="15" fill="rgb(241,155,35)" fg:x="3812" fg:w="78"/><text x="28.0975%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,687 instructions, 12.30%)</title><rect x="17.5492%" y="149" width="12.3049%" height="15" fill="rgb(247,152,33)" fg:x="2406" fg:w="1687"/><text x="17.8422%" y="159.50">binread::binrea..</text></g><g><title>binread::binary_template::write_end_struct (65 instructions, 0.47%)</title><rect x="29.8541%" y="149" width="0.4741%" height="15" fill="rgb(205,73,11)" fg:x="4093" fg:w="65"/><text x="30.1471%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.09%)</title><rect x="30.3282%" y="149" width="0.0948%" height="15" fill="rgb(239,172,28)" fg:x="4158" fg:w="13"/><text x="30.6212%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.09%)</title><rect x="30.4230%" y="149" width="0.0948%" height="15" fill="rgb(227,32,31)" fg:x="4171" fg:w="13"/><text x="30.7160%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.05%)</title><rect x="30.5179%" y="149" width="0.0511%" height="15" fill="rgb(254,118,35)" fg:x="4184" fg:w="7"/><text x="30.8108%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.11%)</title><rect x="30.5689%" y="149" width="0.1094%" height="15" fill="rgb(234,39,36)" fg:x="4191" fg:w="15"/><text x="30.8619%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.55%)</title><rect x="30.6783%" y="133" width="0.5543%" height="15" fill="rgb(240,211,22)" fg:x="4206" fg:w="76"/><text x="30.9713%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 1.16%)</title><rect x="30.6783%" y="149" width="1.1597%" height="15" fill="rgb(248,129,6)" fg:x="4206" fg:w="159"/><text x="30.9713%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.55%)</title><rect x="31.8381%" y="117" width="0.5543%" height="15" fill="rgb(218,128,36)" fg:x="4365" fg:w="76"/><text x="32.1310%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.80%)</title><rect x="31.8381%" y="133" width="0.8023%" height="15" fill="rgb(208,15,49)" fg:x="4365" fg:w="110"/><text x="32.1310%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (180 instructions, 1.31%)</title><rect x="31.8381%" y="149" width="1.3129%" height="15" fill="rgb(225,130,53)" fg:x="4365" fg:w="180"/><text x="32.1310%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.55%)</title><rect x="33.1510%" y="149" width="0.5543%" height="15" fill="rgb(227,107,36)" fg:x="4545" fg:w="76"/><text x="33.4440%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.59%)</title><rect x="33.7053%" y="149" width="0.5908%" height="15" fill="rgb(207,5,23)" fg:x="4621" fg:w="81"/><text x="33.9983%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.55%)</title><rect x="34.2961%" y="149" width="0.5543%" height="15" fill="rgb(252,129,50)" fg:x="4702" fg:w="76"/><text x="34.5891%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.55%)</title><rect x="34.8505%" y="149" width="0.5543%" height="15" fill="rgb(211,73,47)" fg:x="4778" fg:w="76"/><text x="35.1434%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 instructions, 0.01%)</title><rect x="35.4048%" y="149" width="0.0146%" height="15" fill="rgb(220,207,13)" fg:x="4854" fg:w="2"/><text x="35.6978%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.59%)</title><rect x="35.4194%" y="149" width="0.5908%" height="15" fill="rgb(225,11,29)" fg:x="4856" fg:w="81"/><text x="35.7124%" y="159.50"></text></g><g><title>memcpy (399 instructions, 2.91%)</title><rect x="36.0102%" y="149" width="2.9103%" height="15" fill="rgb(235,153,6)" fg:x="4937" fg:w="399"/><text x="36.3032%" y="159.50">me..</text></g><g><title>memcpy (399 instructions, 2.91%)</title><rect x="38.9205%" y="149" width="2.9103%" height="15" fill="rgb(229,31,20)" fg:x="5336" fg:w="399"/><text x="39.2135%" y="159.50">me..</text></g><g><title>candid::de::IDLDeserialize::new (6,448 instructions, 47.03%)</title><rect x="1.8016%" y="165" width="47.0314%" height="15" fill="rgb(216,193,50)" fg:x="247" fg:w="6448"/><text x="2.0946%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (354 instructions, 2.58%)</title><rect x="48.8330%" y="165" width="2.5821%" height="15" fill="rgb(226,52,45)" fg:x="6695" fg:w="354"/><text x="49.1259%" y="175.50">m..</text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.09%)</title><rect x="51.4150%" y="149" width="0.0875%" height="15" fill="rgb(211,122,23)" fg:x="7049" fg:w="12"/><text x="51.7080%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.36%)</title><rect x="51.4150%" y="165" width="0.3647%" height="15" fill="rgb(229,59,36)" fg:x="7049" fg:w="50"/><text x="51.7080%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.55%)</title><rect x="51.7797%" y="165" width="0.5543%" height="15" fill="rgb(207,167,50)" fg:x="7099" fg:w="76"/><text x="52.0727%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.09%)</title><rect x="52.3341%" y="149" width="0.0875%" height="15" fill="rgb(235,192,33)" fg:x="7175" fg:w="12"/><text x="52.6270%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.39%)</title><rect x="52.4216%" y="133" width="0.3866%" height="15" fill="rgb(230,52,28)" fg:x="7187" fg:w="53"/><text x="52.7146%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.64%)</title><rect x="52.8082%" y="133" width="0.6419%" height="15" fill="rgb(228,101,18)" fg:x="7240" fg:w="88"/><text x="53.1011%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 1.18%)</title><rect x="53.4500%" y="133" width="1.1816%" height="15" fill="rgb(232,196,18)" fg:x="7328" fg:w="162"/><text x="53.7430%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.94%)</title><rect x="52.4216%" y="149" width="3.9387%" height="15" fill="rgb(234,147,53)" fg:x="7187" fg:w="540"/><text x="52.7146%" y="159.50">cor..</text></g><g><title>candid::types::internal::env_add (760 instructions, 5.54%)</title><rect x="52.3341%" y="165" width="5.5434%" height="15" fill="rgb(222,77,52)" fg:x="7175" fg:w="760"/><text x="52.6270%" y="175.50">candid..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.55%)</title><rect x="57.8775%" y="165" width="0.5543%" height="15" fill="rgb(232,105,24)" fg:x="7935" fg:w="76"/><text x="58.1704%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.09%)</title><rect x="58.4318%" y="149" width="0.0875%" height="15" fill="rgb(234,190,18)" fg:x="8011" fg:w="12"/><text x="58.7248%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.39%)</title><rect x="58.5193%" y="133" width="0.3866%" height="15" fill="rgb(209,16,24)" fg:x="8023" fg:w="53"/><text x="58.8123%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.64%)</title><rect x="58.9059%" y="133" width="0.6419%" height="15" fill="rgb(208,2,11)" fg:x="8076" fg:w="88"/><text x="59.1989%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 1.18%)</title><rect x="59.5478%" y="133" width="1.1816%" height="15" fill="rgb(237,24,43)" fg:x="8164" fg:w="162"/><text x="59.8407%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 3.94%)</title><rect x="58.5193%" y="149" width="3.9387%" height="15" fill="rgb(252,33,49)" fg:x="8023" fg:w="540"/><text x="58.8123%" y="159.50">cor..</text></g><g><title>memcmp (68 instructions, 0.50%)</title><rect x="62.4581%" y="149" width="0.4960%" height="15" fill="rgb(248,196,14)" fg:x="8563" fg:w="68"/><text x="62.7510%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.59%)</title><rect x="62.9540%" y="133" width="0.5908%" height="15" fill="rgb(208,220,9)" fg:x="8631" fg:w="81"/><text x="63.2470%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.79%)</title><rect x="62.9540%" y="149" width="0.7877%" height="15" fill="rgb(244,92,27)" fg:x="8631" fg:w="108"/><text x="63.2470%" y="159.50"></text></g><g><title>candid::types::internal::env_add (895 instructions, 6.53%)</title><rect x="58.4318%" y="165" width="6.5281%" height="15" fill="rgb(211,145,15)" fg:x="8011" fg:w="895"/><text x="58.7248%" y="175.50">candid:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.39%)</title><rect x="64.9599%" y="117" width="0.3866%" height="15" fill="rgb(224,161,50)" fg:x="8906" fg:w="53"/><text x="65.2529%" y="127.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::hash::Hash&gt;::hash (79 instructions, 0.58%)</title><rect x="64.9599%" y="133" width="0.5762%" height="15" fill="rgb(237,192,25)" fg:x="8906" fg:w="79"/><text x="65.2529%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (294 instructions, 2.14%)</title><rect x="64.9599%" y="149" width="2.1444%" height="15" fill="rgb(218,175,34)" fg:x="8906" fg:w="294"/><text x="65.2529%" y="159.50">c..</text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.564 (15 instructions, 0.11%)</title><rect x="67.1043%" y="149" width="0.1094%" height="15" fill="rgb(245,181,25)" fg:x="9200" fg:w="15"/><text x="67.3973%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.08%)</title><rect x="67.2137%" y="149" width="0.0802%" height="15" fill="rgb(218,216,24)" fg:x="9215" fg:w="11"/><text x="67.5067%" y="159.50"></text></g><g><title>candid::types::internal::env_id (498 instructions, 3.63%)</title><rect x="64.9599%" y="165" width="3.6324%" height="15" fill="rgb(214,24,37)" fg:x="8906" fg:w="498"/><text x="65.2529%" y="175.50">can..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (45 instructions, 0.33%)</title><rect x="68.5923%" y="165" width="0.3282%" height="15" fill="rgb(214,13,22)" fg:x="9404" fg:w="45"/><text x="68.8852%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.90%)</title><rect x="68.9205%" y="149" width="0.8972%" height="15" fill="rgb(222,91,36)" fg:x="9449" fg:w="123"/><text x="69.2135%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.90%)</title><rect x="70.0146%" y="149" width="0.8972%" height="15" fill="rgb(228,220,48)" fg:x="9599" fg:w="123"/><text x="70.3076%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 2.19%)</title><rect x="68.9205%" y="165" width="2.1882%" height="15" fill="rgb(233,152,12)" fg:x="9449" fg:w="300"/><text x="69.2135%" y="175.50">&lt;..</text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.20%)</title><rect x="71.1087%" y="149" width="0.2042%" height="15" fill="rgb(221,214,15)" fg:x="9749" fg:w="28"/><text x="71.4016%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2489 (15 instructions, 0.11%)</title><rect x="71.3129%" y="149" width="0.1094%" height="15" fill="rgb(248,16,28)" fg:x="9777" fg:w="15"/><text x="71.6059%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.2489 (15 instructions, 0.11%)</title><rect x="71.4223%" y="149" width="0.1094%" height="15" fill="rgb(205,80,34)" fg:x="9792" fg:w="15"/><text x="71.7153%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (135 instructions, 0.98%)</title><rect x="71.1087%" y="165" width="0.9847%" height="15" fill="rgb(206,92,46)" fg:x="9749" fg:w="135"/><text x="71.4016%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.08%)</title><rect x="72.0934%" y="165" width="0.0802%" height="15" fill="rgb(210,48,46)" fg:x="9884" fg:w="11"/><text x="72.3863%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.08%)</title><rect x="72.1736%" y="165" width="0.0802%" height="15" fill="rgb(226,3,46)" fg:x="9895" fg:w="11"/><text x="72.4666%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.08%)</title><rect x="72.2538%" y="165" width="0.0802%" height="15" fill="rgb(242,173,52)" fg:x="9906" fg:w="11"/><text x="72.5468%" y="175.50"></text></g><g><title>memcpy (410 instructions, 2.99%)</title><rect x="72.3341%" y="165" width="2.9905%" height="15" fill="rgb(208,194,31)" fg:x="9917" fg:w="410"/><text x="72.6270%" y="175.50">me..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (15 instructions, 0.11%)</title><rect x="75.3246%" y="133" width="0.1094%" height="15" fill="rgb(214,224,37)" fg:x="10327" fg:w="15"/><text x="75.6175%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 1.23%)</title><rect x="75.4340%" y="133" width="1.2254%" height="15" fill="rgb(250,47,14)" fg:x="10342" fg:w="168"/><text x="75.7270%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.69%)</title><rect x="76.6594%" y="101" width="0.6929%" height="15" fill="rgb(220,114,21)" fg:x="10510" fg:w="95"/><text x="76.9523%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (195 instructions, 1.42%)</title><rect x="76.6594%" y="117" width="1.4223%" height="15" fill="rgb(233,142,0)" fg:x="10510" fg:w="195"/><text x="76.9523%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (222 instructions, 1.62%)</title><rect x="76.6594%" y="133" width="1.6193%" height="15" fill="rgb(223,20,23)" fg:x="10510" fg:w="222"/><text x="76.9523%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.08%)</title><rect x="78.2786%" y="133" width="0.0802%" height="15" fill="rgb(229,186,14)" fg:x="10732" fg:w="11"/><text x="78.5716%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (456 instructions, 3.33%)</title><rect x="75.3246%" y="149" width="3.3260%" height="15" fill="rgb(214,47,31)" fg:x="10327" fg:w="456"/><text x="75.6175%" y="159.50">co..</text></g><g><title>candid::de::IDLDeserialize::done (493 instructions, 3.60%)</title><rect x="75.3246%" y="165" width="3.5959%" height="15" fill="rgb(240,224,36)" fg:x="10327" fg:w="493"/><text x="75.6175%" y="175.50">can..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.39%)</title><rect x="78.9205%" y="149" width="0.3939%" height="15" fill="rgb(241,4,52)" fg:x="10820" fg:w="54"/><text x="79.2135%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.69%)</title><rect x="79.3144%" y="149" width="0.6929%" height="15" fill="rgb(237,188,27)" fg:x="10874" fg:w="95"/><text x="79.6073%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 1.68%)</title><rect x="78.9205%" y="165" width="1.6776%" height="15" fill="rgb(224,69,27)" fg:x="10820" fg:w="230"/><text x="79.2135%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,262 instructions, 82.14%)</title><rect x="1.2473%" y="181" width="82.1444%" height="15" fill="rgb(242,50,16)" fg:x="171" fg:w="11262"/><text x="1.5402%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.09%)</title><rect x="83.3917%" y="149" width="0.0875%" height="15" fill="rgb(236,102,13)" fg:x="11433" fg:w="12"/><text x="83.6847%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.39%)</title><rect x="83.4792%" y="117" width="0.3939%" height="15" fill="rgb(227,152,7)" fg:x="11445" fg:w="54"/><text x="83.7722%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.98%)</title><rect x="83.4792%" y="133" width="0.9847%" height="15" fill="rgb(246,145,51)" fg:x="11445" fg:w="135"/><text x="83.7722%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 1.18%)</title><rect x="83.4792%" y="149" width="1.1816%" height="15" fill="rgb(217,31,52)" fg:x="11445" fg:w="162"/><text x="83.7722%" y="159.50"></text></g><g><title>memset (136 instructions, 0.99%)</title><rect x="84.6608%" y="149" width="0.9920%" height="15" fill="rgb(235,215,13)" fg:x="11607" fg:w="136"/><text x="84.9538%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (468 instructions, 3.41%)</title><rect x="83.3917%" y="165" width="3.4136%" height="15" fill="rgb(221,93,21)" fg:x="11433" fg:w="468"/><text x="83.6847%" y="175.50">ca..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.23%)</title><rect x="86.8053%" y="149" width="0.2334%" height="15" fill="rgb(230,35,17)" fg:x="11901" fg:w="32"/><text x="87.0982%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.55%)</title><rect x="87.0387%" y="101" width="0.5543%" height="15" fill="rgb(226,93,40)" fg:x="11933" fg:w="76"/><text x="87.3316%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.80%)</title><rect x="87.0387%" y="117" width="0.8023%" height="15" fill="rgb(231,126,45)" fg:x="11933" fg:w="110"/><text x="87.3316%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (177 instructions, 1.29%)</title><rect x="87.0387%" y="133" width="1.2910%" height="15" fill="rgb(209,127,12)" fg:x="11933" fg:w="177"/><text x="87.3316%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.08%)</title><rect x="88.3297%" y="133" width="0.0802%" height="15" fill="rgb(211,199,48)" fg:x="12110" fg:w="11"/><text x="88.6227%" y="143.50"></text></g><g><title>memcpy (11 instructions, 0.08%)</title><rect x="88.4099%" y="133" width="0.0802%" height="15" fill="rgb(238,54,41)" fg:x="12121" fg:w="11"/><text x="88.7029%" y="143.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (361 instructions, 2.63%)</title><rect x="87.0387%" y="149" width="2.6331%" height="15" fill="rgb(254,5,6)" fg:x="11933" fg:w="361"/><text x="87.3316%" y="159.50">c..</text></g><g><title>std::io::Write::write_all (30 instructions, 0.22%)</title><rect x="89.6718%" y="149" width="0.2188%" height="15" fill="rgb(249,90,49)" fg:x="12294" fg:w="30"/><text x="89.9647%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.04%)</title><rect x="89.8906%" y="149" width="0.0365%" height="15" fill="rgb(244,62,38)" fg:x="12324" fg:w="5"/><text x="90.1836%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (496 instructions, 3.62%)</title><rect x="86.8053%" y="165" width="3.6178%" height="15" fill="rgb(231,52,0)" fg:x="11901" fg:w="496"/><text x="87.0982%" y="175.50">can..</text></g><g><title>core::ptr::drop_in_place&lt;candid::types::type_env::TypeEnv&gt; (4 instructions, 0.03%)</title><rect x="90.4230%" y="165" width="0.0292%" height="15" fill="rgb(210,28,32)" fg:x="12397" fg:w="4"/><text x="90.7160%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.40%)</title><rect x="90.4522%" y="165" width="0.4012%" height="15" fill="rgb(206,114,53)" fg:x="12401" fg:w="55"/><text x="90.7452%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,097 instructions, 8.00%)</title><rect x="83.3917%" y="181" width="8.0015%" height="15" fill="rgb(210,175,38)" fg:x="11433" fg:w="1097"/><text x="83.6847%" y="191.50">ic_cdk::a..</text></g><g><title>vector::batch_remove_7_::{{closure}} (13,248 instructions, 96.63%)</title><rect x="1.2473%" y="197" width="96.6302%" height="15" fill="rgb(217,34,10)" fg:x="171" fg:w="13248"/><text x="1.5402%" y="207.50">vector::batch_remove_7_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.09%)</title><rect x="97.8775%" y="197" width="0.0875%" height="15" fill="rgb(234,229,37)" fg:x="13419" fg:w="12"/><text x="98.1704%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.59%)</title><rect x="97.9650%" y="197" width="0.5908%" height="15" fill="rgb(237,138,5)" fg:x="13431" fg:w="81"/><text x="98.2580%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.73%)</title><rect x="98.5558%" y="197" width="0.7294%" height="15" fill="rgb(210,139,5)" fg:x="13512" fg:w="100"/><text x="98.8488%" y="207.50"></text></g><g><title>all (13,710 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,115,45)" fg:x="0" fg:w="13710"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (13,710 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(228,78,1)" fg:x="0" fg:w="13710"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>