<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="278" onload="init(evt)" viewBox="0 0 1024 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">vec_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="261.00"> </text><svg id="frames" x="10" width="1004" total_samples="21215"><g><title>ic_cdk::setup (19 instructions, 0.09%)</title><rect x="0.0000%" y="197" width="0.0896%" height="15" fill="rgb(250,192,29)" fg:x="0" fg:w="19"/><text x="0.2930%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.36%)</title><rect x="0.0896%" y="197" width="0.3582%" height="15" fill="rgb(213,145,10)" fg:x="19" fg:w="76"/><text x="0.3825%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.36%)</title><rect x="0.4478%" y="197" width="0.3582%" height="15" fill="rgb(221,67,13)" fg:x="95" fg:w="76"/><text x="0.7408%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.36%)</title><rect x="0.8060%" y="165" width="0.3582%" height="15" fill="rgb(226,37,3)" fg:x="171" fg:w="76"/><text x="1.0990%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.33%)</title><rect x="1.1643%" y="149" width="0.3252%" height="15" fill="rgb(225,49,25)" fg:x="247" fg:w="69"/><text x="1.4572%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="1.4895%" y="133" width="0.0189%" height="15" fill="rgb(248,52,27)" fg:x="316" fg:w="4"/><text x="1.7825%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.91%)</title><rect x="1.4895%" y="149" width="1.9137%" height="15" fill="rgb(207,208,2)" fg:x="316" fg:w="406"/><text x="1.7825%" y="159.50"></text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.39%)</title><rect x="3.4033%" y="149" width="0.3865%" height="15" fill="rgb(218,59,11)" fg:x="722" fg:w="82"/><text x="3.6962%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="3.7898%" y="149" width="0.2545%" height="15" fill="rgb(234,175,27)" fg:x="804" fg:w="54"/><text x="4.0827%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="4.0443%" y="149" width="0.2545%" height="15" fill="rgb(237,193,12)" fg:x="858" fg:w="54"/><text x="4.3373%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="4.2988%" y="149" width="0.2545%" height="15" fill="rgb(215,168,51)" fg:x="912" fg:w="54"/><text x="4.5918%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (54 instructions, 0.25%)</title><rect x="4.5534%" y="149" width="0.2545%" height="15" fill="rgb(226,13,49)" fg:x="966" fg:w="54"/><text x="4.8464%" y="159.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.33%)</title><rect x="4.8079%" y="149" width="0.3252%" height="15" fill="rgb(233,43,19)" fg:x="1020" fg:w="69"/><text x="5.1009%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.31%)</title><rect x="5.1332%" y="149" width="0.3064%" height="15" fill="rgb(208,106,45)" fg:x="1089" fg:w="65"/><text x="5.4261%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="5.4395%" y="133" width="0.0189%" height="15" fill="rgb(234,161,19)" fg:x="1154" fg:w="4"/><text x="5.7325%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.91%)</title><rect x="5.4395%" y="149" width="1.9137%" height="15" fill="rgb(242,117,46)" fg:x="1154" fg:w="406"/><text x="5.7325%" y="159.50"></text></g><g><title>memcmp (16 instructions, 0.08%)</title><rect x="7.3533%" y="149" width="0.0754%" height="15" fill="rgb(219,196,4)" fg:x="1560" fg:w="16"/><text x="7.6463%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.36%)</title><rect x="7.4287%" y="133" width="0.3582%" height="15" fill="rgb(220,6,38)" fg:x="1576" fg:w="76"/><text x="7.7217%" y="143.50"></text></g><g><title>memcpy (60 instructions, 0.28%)</title><rect x="7.7869%" y="101" width="0.2828%" height="15" fill="rgb(222,164,3)" fg:x="1652" fg:w="60"/><text x="8.0799%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.40%)</title><rect x="7.7869%" y="117" width="0.4007%" height="15" fill="rgb(235,198,29)" fg:x="1652" fg:w="85"/><text x="8.0799%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.04%)</title><rect x="8.1876%" y="69" width="0.0424%" height="15" fill="rgb(212,152,0)" fg:x="1737" fg:w="9"/><text x="8.4806%" y="79.50"></text></g><g><title>memcpy (30 instructions, 0.14%)</title><rect x="8.2300%" y="53" width="0.1414%" height="15" fill="rgb(209,181,5)" fg:x="1746" fg:w="30"/><text x="8.5230%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.26%)</title><rect x="8.2300%" y="69" width="0.2593%" height="15" fill="rgb(223,228,54)" fg:x="1746" fg:w="55"/><text x="8.5230%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.56%)</title><rect x="8.1876%" y="85" width="0.5562%" height="15" fill="rgb(219,21,37)" fg:x="1737" fg:w="118"/><text x="8.4806%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.81%)</title><rect x="8.1876%" y="101" width="0.8060%" height="15" fill="rgb(243,167,25)" fg:x="1737" fg:w="171"/><text x="8.4806%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.83%)</title><rect x="8.1876%" y="117" width="0.8296%" height="15" fill="rgb(253,30,47)" fg:x="1737" fg:w="176"/><text x="8.4806%" y="127.50"></text></g><g><title>core::fmt::write (372 instructions, 1.75%)</title><rect x="7.7869%" y="133" width="1.7535%" height="15" fill="rgb(226,10,11)" fg:x="1652" fg:w="372"/><text x="8.0799%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 2.78%)</title><rect x="7.4287%" y="149" width="2.7763%" height="15" fill="rgb(207,78,11)" fg:x="1576" fg:w="589"/><text x="7.7217%" y="159.50">al..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.39%)</title><rect x="10.2050%" y="149" width="0.3865%" height="15" fill="rgb(246,14,33)" fg:x="2165" fg:w="82"/><text x="10.4980%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.26%)</title><rect x="10.5916%" y="149" width="0.2593%" height="15" fill="rgb(205,119,41)" fg:x="2247" fg:w="55"/><text x="10.8845%" y="159.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.30%)</title><rect x="10.8508%" y="149" width="0.2970%" height="15" fill="rgb(224,3,36)" fg:x="2302" fg:w="63"/><text x="11.1438%" y="159.50"></text></g><g><title>candid::binary_parser::read_leb (65 instructions, 0.31%)</title><rect x="11.1478%" y="149" width="0.3064%" height="15" fill="rgb(240,108,35)" fg:x="2365" fg:w="65"/><text x="11.4407%" y="159.50"></text></g><g><title>memcmp (4 instructions, 0.02%)</title><rect x="11.4542%" y="117" width="0.0189%" height="15" fill="rgb(236,27,31)" fg:x="2430" fg:w="4"/><text x="11.7471%" y="127.50"></text></g><g><title>core::str::pattern::StrSearcher::new (406 instructions, 1.91%)</title><rect x="11.4542%" y="133" width="1.9137%" height="15" fill="rgb(213,107,12)" fg:x="2430" fg:w="406"/><text x="11.7471%" y="143.50"></text></g><g><title>memcmp (16 instructions, 0.08%)</title><rect x="13.3679%" y="133" width="0.0754%" height="15" fill="rgb(250,27,7)" fg:x="2836" fg:w="16"/><text x="13.6609%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.36%)</title><rect x="13.4433%" y="117" width="0.3582%" height="15" fill="rgb(218,186,12)" fg:x="2852" fg:w="76"/><text x="13.7363%" y="127.50"></text></g><g><title>memcpy (60 instructions, 0.28%)</title><rect x="13.8016%" y="85" width="0.2828%" height="15" fill="rgb(252,39,21)" fg:x="2928" fg:w="60"/><text x="14.0945%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (85 instructions, 0.40%)</title><rect x="13.8016%" y="101" width="0.4007%" height="15" fill="rgb(207,136,30)" fg:x="2928" fg:w="85"/><text x="14.0945%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 instructions, 0.04%)</title><rect x="14.2022%" y="53" width="0.0424%" height="15" fill="rgb(225,27,45)" fg:x="3013" fg:w="9"/><text x="14.4952%" y="63.50"></text></g><g><title>memcpy (30 instructions, 0.14%)</title><rect x="14.2446%" y="37" width="0.1414%" height="15" fill="rgb(250,14,7)" fg:x="3022" fg:w="30"/><text x="14.5376%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (55 instructions, 0.26%)</title><rect x="14.2446%" y="53" width="0.2593%" height="15" fill="rgb(228,100,27)" fg:x="3022" fg:w="55"/><text x="14.5376%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (118 instructions, 0.56%)</title><rect x="14.2022%" y="69" width="0.5562%" height="15" fill="rgb(252,115,4)" fg:x="3013" fg:w="118"/><text x="14.4952%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (171 instructions, 0.81%)</title><rect x="14.2022%" y="85" width="0.8060%" height="15" fill="rgb(251,99,50)" fg:x="3013" fg:w="171"/><text x="14.4952%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (176 instructions, 0.83%)</title><rect x="14.2022%" y="101" width="0.8296%" height="15" fill="rgb(222,100,37)" fg:x="3013" fg:w="176"/><text x="14.4952%" y="111.50"></text></g><g><title>core::fmt::write (372 instructions, 1.75%)</title><rect x="13.8016%" y="117" width="1.7535%" height="15" fill="rgb(226,183,46)" fg:x="2928" fg:w="372"/><text x="14.0945%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (589 instructions, 2.78%)</title><rect x="13.4433%" y="133" width="2.7763%" height="15" fill="rgb(230,63,7)" fg:x="2852" fg:w="589"/><text x="13.7363%" y="143.50">al..</text></g><g><title>binread::binary_template::write_vec_named (82 instructions, 0.39%)</title><rect x="16.2197%" y="133" width="0.3865%" height="15" fill="rgb(223,99,1)" fg:x="3441" fg:w="82"/><text x="16.5126%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.26%)</title><rect x="16.6062%" y="133" width="0.2593%" height="15" fill="rgb(246,205,20)" fg:x="3523" fg:w="55"/><text x="16.8991%" y="143.50"></text></g><g><title>binread::binary_template::write_start_struct (69 instructions, 0.33%)</title><rect x="16.8654%" y="117" width="0.3252%" height="15" fill="rgb(242,185,13)" fg:x="3578" fg:w="69"/><text x="17.1584%" y="127.50"></text></g><g><title>candid::binary_parser::read_sleb (91 instructions, 0.43%)</title><rect x="17.1907%" y="117" width="0.4289%" height="15" fill="rgb(246,162,16)" fg:x="3647" fg:w="91"/><text x="17.4836%" y="127.50"></text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.30%)</title><rect x="17.6196%" y="117" width="0.2970%" height="15" fill="rgb(230,139,32)" fg:x="3738" fg:w="63"/><text x="17.9126%" y="127.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (282 instructions, 1.33%)</title><rect x="16.8654%" y="133" width="1.3292%" height="15" fill="rgb(213,13,8)" fg:x="3578" fg:w="282"/><text x="17.1584%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.36%)</title><rect x="18.1947%" y="133" width="0.3582%" height="15" fill="rgb(234,225,31)" fg:x="3860" fg:w="76"/><text x="18.4876%" y="143.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,709 instructions, 8.06%)</title><rect x="11.4542%" y="149" width="8.0556%" height="15" fill="rgb(212,196,51)" fg:x="2430" fg:w="1709"/><text x="11.7471%" y="159.50">binread::..</text></g><g><title>binread::binary_template::write_end_struct (63 instructions, 0.30%)</title><rect x="19.5098%" y="149" width="0.2970%" height="15" fill="rgb(228,141,39)" fg:x="4139" fg:w="63"/><text x="19.8027%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.06%)</title><rect x="19.8067%" y="149" width="0.0613%" height="15" fill="rgb(212,10,19)" fg:x="4202" fg:w="13"/><text x="20.0997%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 instructions, 0.06%)</title><rect x="19.8680%" y="149" width="0.0613%" height="15" fill="rgb(231,26,42)" fg:x="4215" fg:w="13"/><text x="20.1610%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::set::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 instructions, 0.03%)</title><rect x="19.9293%" y="149" width="0.0330%" height="15" fill="rgb(225,189,1)" fg:x="4228" fg:w="7"/><text x="20.2223%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 instructions, 0.07%)</title><rect x="19.9623%" y="149" width="0.0707%" height="15" fill="rgb(245,20,22)" fg:x="4235" fg:w="15"/><text x="20.2553%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.36%)</title><rect x="20.0330%" y="133" width="0.3582%" height="15" fill="rgb(221,223,2)" fg:x="4250" fg:w="76"/><text x="20.3260%" y="143.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (159 instructions, 0.75%)</title><rect x="20.0330%" y="149" width="0.7495%" height="15" fill="rgb(205,23,10)" fg:x="4250" fg:w="159"/><text x="20.3260%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.36%)</title><rect x="20.7825%" y="117" width="0.3582%" height="15" fill="rgb(212,53,28)" fg:x="4409" fg:w="76"/><text x="21.0754%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.52%)</title><rect x="20.7825%" y="133" width="0.5185%" height="15" fill="rgb(235,47,2)" fg:x="4409" fg:w="110"/><text x="21.0754%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 instructions, 0.84%)</title><rect x="20.7825%" y="149" width="0.8390%" height="15" fill="rgb(254,206,32)" fg:x="4409" fg:w="178"/><text x="21.0754%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.36%)</title><rect x="21.6215%" y="149" width="0.3582%" height="15" fill="rgb(221,143,48)" fg:x="4587" fg:w="76"/><text x="21.9145%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.38%)</title><rect x="21.9797%" y="149" width="0.3818%" height="15" fill="rgb(211,101,14)" fg:x="4663" fg:w="81"/><text x="22.2727%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.36%)</title><rect x="22.3615%" y="149" width="0.3582%" height="15" fill="rgb(231,59,13)" fg:x="4744" fg:w="76"/><text x="22.6545%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.36%)</title><rect x="22.7198%" y="149" width="0.3582%" height="15" fill="rgb(218,38,12)" fg:x="4820" fg:w="76"/><text x="23.0127%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.38%)</title><rect x="23.0874%" y="149" width="0.3818%" height="15" fill="rgb(241,197,8)" fg:x="4898" fg:w="81"/><text x="23.3804%" y="159.50"></text></g><g><title>memcpy (380 instructions, 1.79%)</title><rect x="23.4692%" y="149" width="1.7912%" height="15" fill="rgb(244,110,1)" fg:x="4979" fg:w="380"/><text x="23.7622%" y="159.50"></text></g><g><title>memcpy (380 instructions, 1.79%)</title><rect x="25.2604%" y="149" width="1.7912%" height="15" fill="rgb(216,47,23)" fg:x="5359" fg:w="380"/><text x="25.5534%" y="159.50"></text></g><g><title>candid::de::IDLDeserialize::new (6,407 instructions, 30.20%)</title><rect x="1.1643%" y="165" width="30.2003%" height="15" fill="rgb(206,33,9)" fg:x="247" fg:w="6407"/><text x="1.4572%" y="175.50">candid::de::IDLDeserialize::new</text></g><g><title>memcpy (335 instructions, 1.58%)</title><rect x="31.3646%" y="165" width="1.5791%" height="15" fill="rgb(252,134,28)" fg:x="6654" fg:w="335"/><text x="31.6576%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.06%)</title><rect x="32.9437%" y="149" width="0.0566%" height="15" fill="rgb(223,227,27)" fg:x="6989" fg:w="12"/><text x="33.2366%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 instructions, 0.24%)</title><rect x="32.9437%" y="165" width="0.2357%" height="15" fill="rgb(242,228,54)" fg:x="6989" fg:w="50"/><text x="33.2366%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.36%)</title><rect x="33.1794%" y="165" width="0.3582%" height="15" fill="rgb(240,142,54)" fg:x="7039" fg:w="76"/><text x="33.4723%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.06%)</title><rect x="33.5376%" y="149" width="0.0566%" height="15" fill="rgb(235,53,34)" fg:x="7115" fg:w="12"/><text x="33.8306%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.25%)</title><rect x="33.5942%" y="133" width="0.2498%" height="15" fill="rgb(254,208,51)" fg:x="7127" fg:w="53"/><text x="33.8871%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.41%)</title><rect x="33.8440%" y="133" width="0.4148%" height="15" fill="rgb(232,154,9)" fg:x="7180" fg:w="88"/><text x="34.1369%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.76%)</title><rect x="34.2588%" y="133" width="0.7636%" height="15" fill="rgb(234,62,29)" fg:x="7268" fg:w="162"/><text x="34.5517%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.55%)</title><rect x="33.5942%" y="149" width="2.5454%" height="15" fill="rgb(214,153,4)" fg:x="7127" fg:w="540"/><text x="33.8871%" y="159.50">c..</text></g><g><title>candid::types::internal::env_add (772 instructions, 3.64%)</title><rect x="33.5376%" y="165" width="3.6389%" height="15" fill="rgb(231,50,8)" fg:x="7115" fg:w="772"/><text x="33.8306%" y="175.50">can..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.36%)</title><rect x="37.1765%" y="165" width="0.3582%" height="15" fill="rgb(220,140,33)" fg:x="7887" fg:w="76"/><text x="37.4695%" y="175.50"></text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.06%)</title><rect x="37.5348%" y="149" width="0.0566%" height="15" fill="rgb(242,125,54)" fg:x="7963" fg:w="12"/><text x="37.8277%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.25%)</title><rect x="37.5913%" y="133" width="0.2498%" height="15" fill="rgb(223,227,17)" fg:x="7975" fg:w="53"/><text x="37.8843%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (88 instructions, 0.41%)</title><rect x="37.8412%" y="133" width="0.4148%" height="15" fill="rgb(208,2,50)" fg:x="8028" fg:w="88"/><text x="38.1341%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 instructions, 0.76%)</title><rect x="38.2560%" y="133" width="0.7636%" height="15" fill="rgb(251,143,40)" fg:x="8116" fg:w="162"/><text x="38.5489%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (540 instructions, 2.55%)</title><rect x="37.5913%" y="149" width="2.5454%" height="15" fill="rgb(242,147,45)" fg:x="7975" fg:w="540"/><text x="37.8843%" y="159.50">c..</text></g><g><title>memcmp (68 instructions, 0.32%)</title><rect x="40.1367%" y="149" width="0.3205%" height="15" fill="rgb(240,18,45)" fg:x="8515" fg:w="68"/><text x="40.4297%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.38%)</title><rect x="40.4572%" y="133" width="0.3818%" height="15" fill="rgb(236,109,11)" fg:x="8583" fg:w="81"/><text x="40.7502%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 instructions, 0.51%)</title><rect x="40.4572%" y="149" width="0.5091%" height="15" fill="rgb(216,81,3)" fg:x="8583" fg:w="108"/><text x="40.7502%" y="159.50"></text></g><g><title>candid::types::internal::env_add (912 instructions, 4.30%)</title><rect x="37.5348%" y="165" width="4.2988%" height="15" fill="rgb(242,153,7)" fg:x="7963" fg:w="912"/><text x="37.8277%" y="175.50">cand..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 instructions, 0.25%)</title><rect x="41.8336%" y="117" width="0.2498%" height="15" fill="rgb(232,163,17)" fg:x="8875" fg:w="53"/><text x="42.1266%" y="127.50"></text></g><g><title>&lt;candid::types::internal::Type as core::hash::Hash&gt;::hash (79 instructions, 0.37%)</title><rect x="41.8336%" y="133" width="0.3724%" height="15" fill="rgb(253,6,41)" fg:x="8875" fg:w="79"/><text x="42.1266%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (292 instructions, 1.38%)</title><rect x="41.8336%" y="149" width="1.3764%" height="15" fill="rgb(210,71,35)" fg:x="8875" fg:w="292"/><text x="42.1266%" y="159.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1078 (15 instructions, 0.07%)</title><rect x="43.2100%" y="149" width="0.0707%" height="15" fill="rgb(232,40,53)" fg:x="9167" fg:w="15"/><text x="43.5030%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="43.2807%" y="149" width="0.0519%" height="15" fill="rgb(225,198,10)" fg:x="9182" fg:w="11"/><text x="43.5737%" y="159.50"></text></g><g><title>candid::types::internal::env_id (522 instructions, 2.46%)</title><rect x="41.8336%" y="165" width="2.4605%" height="15" fill="rgb(222,128,46)" fg:x="8875" fg:w="522"/><text x="42.1266%" y="175.50">c..</text></g><g><title>candid::types::type_env::TypeEnv::trace_type (34 instructions, 0.16%)</title><rect x="44.2941%" y="165" width="0.1603%" height="15" fill="rgb(244,45,43)" fg:x="9397" fg:w="34"/><text x="44.5871%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.58%)</title><rect x="44.4544%" y="149" width="0.5798%" height="15" fill="rgb(241,35,43)" fg:x="9431" fg:w="123"/><text x="44.7474%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (123 instructions, 0.58%)</title><rect x="45.1614%" y="149" width="0.5798%" height="15" fill="rgb(236,9,3)" fg:x="9581" fg:w="123"/><text x="45.4544%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (300 instructions, 1.41%)</title><rect x="44.4544%" y="165" width="1.4141%" height="15" fill="rgb(252,28,10)" fg:x="9431" fg:w="300"/><text x="44.7474%" y="175.50"></text></g><g><title>candid::de::Deserializer::unroll_type (28 instructions, 0.13%)</title><rect x="45.8685%" y="149" width="0.1320%" height="15" fill="rgb(214,193,1)" fg:x="9731" fg:w="28"/><text x="46.1615%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (97 instructions, 0.46%)</title><rect x="45.8685%" y="165" width="0.4572%" height="15" fill="rgb(212,167,39)" fg:x="9731" fg:w="97"/><text x="46.1615%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="46.3257%" y="165" width="0.0519%" height="15" fill="rgb(254,89,31)" fg:x="9828" fg:w="11"/><text x="46.6187%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="46.3776%" y="165" width="0.0519%" height="15" fill="rgb(238,65,34)" fg:x="9839" fg:w="11"/><text x="46.6705%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="46.4294%" y="165" width="0.0519%" height="15" fill="rgb(234,213,2)" fg:x="9850" fg:w="11"/><text x="46.7224%" y="175.50"></text></g><g><title>memcpy (410 instructions, 1.93%)</title><rect x="46.4813%" y="165" width="1.9326%" height="15" fill="rgb(226,220,21)" fg:x="9861" fg:w="410"/><text x="46.7742%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 instructions, 0.06%)</title><rect x="48.4139%" y="133" width="0.0566%" height="15" fill="rgb(236,69,43)" fg:x="10271" fg:w="12"/><text x="48.7068%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (168 instructions, 0.79%)</title><rect x="48.4704%" y="133" width="0.7919%" height="15" fill="rgb(218,157,8)" fg:x="10283" fg:w="168"/><text x="48.7634%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.45%)</title><rect x="49.2623%" y="101" width="0.4478%" height="15" fill="rgb(223,124,24)" fg:x="10451" fg:w="95"/><text x="49.5553%" y="111.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (240 instructions, 1.13%)</title><rect x="49.2623%" y="117" width="1.1313%" height="15" fill="rgb(247,17,42)" fg:x="10451" fg:w="240"/><text x="49.5553%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (267 instructions, 1.26%)</title><rect x="49.2623%" y="133" width="1.2585%" height="15" fill="rgb(205,124,25)" fg:x="10451" fg:w="267"/><text x="49.5553%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 instructions, 0.05%)</title><rect x="50.5209%" y="133" width="0.0519%" height="15" fill="rgb(216,59,50)" fg:x="10718" fg:w="11"/><text x="50.8138%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::Deserializer&gt; (500 instructions, 2.36%)</title><rect x="48.4139%" y="149" width="2.3568%" height="15" fill="rgb(221,209,49)" fg:x="10271" fg:w="500"/><text x="48.7068%" y="159.50">c..</text></g><g><title>candid::de::IDLDeserialize::done (534 instructions, 2.52%)</title><rect x="48.4139%" y="165" width="2.5171%" height="15" fill="rgb(213,100,9)" fg:x="10271" fg:w="534"/><text x="48.7068%" y="175.50">c..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.25%)</title><rect x="50.9309%" y="149" width="0.2545%" height="15" fill="rgb(226,177,49)" fg:x="10805" fg:w="54"/><text x="51.2239%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::insert_large_chunk (95 instructions, 0.45%)</title><rect x="51.1855%" y="149" width="0.4478%" height="15" fill="rgb(229,91,32)" fg:x="10859" fg:w="95"/><text x="51.4785%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (230 instructions, 1.08%)</title><rect x="50.9309%" y="165" width="1.0841%" height="15" fill="rgb(234,111,45)" fg:x="10805" fg:w="230"/><text x="51.2239%" y="175.50"></text></g><g><title>ic_cdk::api::call::arg_data (11,255 instructions, 53.05%)</title><rect x="0.8060%" y="181" width="53.0521%" height="15" fill="rgb(251,44,19)" fg:x="171" fg:w="11255"/><text x="1.0990%" y="191.50">ic_cdk::api::call::arg_data</text></g><g><title>candid::types::internal::ENV::__getit (12 instructions, 0.06%)</title><rect x="53.8581%" y="149" width="0.0566%" height="15" fill="rgb(245,109,2)" fg:x="11426" fg:w="12"/><text x="54.1511%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_large_chunk (54 instructions, 0.25%)</title><rect x="53.9147%" y="117" width="0.2545%" height="15" fill="rgb(213,191,25)" fg:x="11438" fg:w="54"/><text x="54.2077%" y="127.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (135 instructions, 0.64%)</title><rect x="53.9147%" y="133" width="0.6363%" height="15" fill="rgb(248,135,11)" fg:x="11438" fg:w="135"/><text x="54.2077%" y="143.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (162 instructions, 0.76%)</title><rect x="53.9147%" y="149" width="0.7636%" height="15" fill="rgb(245,87,1)" fg:x="11438" fg:w="162"/><text x="54.2077%" y="159.50"></text></g><g><title>memset (136 instructions, 0.64%)</title><rect x="54.6783%" y="149" width="0.6411%" height="15" fill="rgb(242,205,50)" fg:x="11600" fg:w="136"/><text x="54.9713%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::new (468 instructions, 2.21%)</title><rect x="53.8581%" y="165" width="2.2060%" height="15" fill="rgb(213,5,31)" fg:x="11426" fg:w="468"/><text x="54.1511%" y="175.50">c..</text></g><g><title>std::io::Write::write_all (32 instructions, 0.15%)</title><rect x="56.0641%" y="149" width="0.1508%" height="15" fill="rgb(222,135,34)" fg:x="11894" fg:w="32"/><text x="56.3571%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (76 instructions, 0.36%)</title><rect x="56.2149%" y="117" width="0.3582%" height="15" fill="rgb(221,154,8)" fg:x="11926" fg:w="76"/><text x="56.5079%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (110 instructions, 0.52%)</title><rect x="56.2149%" y="133" width="0.5185%" height="15" fill="rgb(229,116,31)" fg:x="11926" fg:w="110"/><text x="56.5079%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (175 instructions, 0.82%)</title><rect x="56.2149%" y="149" width="0.8249%" height="15" fill="rgb(222,138,51)" fg:x="11926" fg:w="175"/><text x="56.5079%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.05%)</title><rect x="57.0398%" y="149" width="0.0519%" height="15" fill="rgb(214,128,39)" fg:x="12101" fg:w="11"/><text x="57.3328%" y="159.50"></text></g><g><title>memcpy (11 instructions, 0.05%)</title><rect x="57.0917%" y="149" width="0.0519%" height="15" fill="rgb(209,131,6)" fg:x="12112" fg:w="11"/><text x="57.3846%" y="159.50"></text></g><g><title>std::io::Write::write_all (30 instructions, 0.14%)</title><rect x="57.1435%" y="149" width="0.1414%" height="15" fill="rgb(251,69,42)" fg:x="12123" fg:w="30"/><text x="57.4365%" y="159.50"></text></g><g><title>std::io::Write::write_all (5 instructions, 0.02%)</title><rect x="57.2849%" y="149" width="0.0236%" height="15" fill="rgb(219,167,0)" fg:x="12153" fg:w="5"/><text x="57.5779%" y="159.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (470 instructions, 2.22%)</title><rect x="56.0641%" y="165" width="2.2154%" height="15" fill="rgb(227,226,42)" fg:x="11894" fg:w="470"/><text x="56.3571%" y="175.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.02%)</title><rect x="58.2795%" y="165" width="0.0236%" height="15" fill="rgb(246,14,0)" fg:x="12364" fg:w="5"/><text x="58.5725%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (55 instructions, 0.26%)</title><rect x="58.3031%" y="165" width="0.2593%" height="15" fill="rgb(239,183,49)" fg:x="12369" fg:w="55"/><text x="58.5961%" y="175.50"></text></g><g><title>ic_cdk::api::call::reply (1,072 instructions, 5.05%)</title><rect x="53.8581%" y="181" width="5.0530%" height="15" fill="rgb(219,40,1)" fg:x="11426" fg:w="1072"/><text x="54.1511%" y="191.50">ic_cd..</text></g><g><title>vector::batch_remove_4_::{{closure}} (20,753 instructions, 97.82%)</title><rect x="0.8060%" y="197" width="97.8223%" height="15" fill="rgb(207,196,38)" fg:x="171" fg:w="20753"/><text x="1.0990%" y="207.50">vector::batch_remove_4_::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (12 instructions, 0.06%)</title><rect x="98.6283%" y="197" width="0.0566%" height="15" fill="rgb(213,48,22)" fg:x="20924" fg:w="12"/><text x="98.9213%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (81 instructions, 0.38%)</title><rect x="98.6849%" y="197" width="0.3818%" height="15" fill="rgb(249,95,2)" fg:x="20936" fg:w="81"/><text x="98.9779%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (100 instructions, 0.47%)</title><rect x="99.0667%" y="197" width="0.4714%" height="15" fill="rgb(243,127,43)" fg:x="21017" fg:w="100"/><text x="99.3597%" y="207.50"></text></g><g><title>all (21,215 instructions, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(244,167,34)" fg:x="0" fg:w="21215"/><text x="0.2930%" y="239.50"></text></g><g><title>canister_update batch_remove (21,215 instructions, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,197,48)" fg:x="0" fg:w="21215"/><text x="0.2930%" y="223.50">canister_update batch_remove</text></g></svg></svg>