<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1024" height="310" onload="init(evt)" viewBox="0 0 1024 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">vec_rs.batch_remove</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1014" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1014" y="293.00"> </text><svg id="frames" x="10" width="1004" total_samples="16734"><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.49%)</title><rect x="0.0000%" y="229" width="0.4900%" height="15" fill="rgb(217,213,2)" fg:x="0" fg:w="82"/><text x="0.2930%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.49%)</title><rect x="0.4900%" y="229" width="0.4900%" height="15" fill="rgb(245,181,4)" fg:x="82" fg:w="82"/><text x="0.7830%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.49%)</title><rect x="0.9800%" y="181" width="0.4900%" height="15" fill="rgb(248,74,13)" fg:x="164" fg:w="82"/><text x="1.2730%" y="191.50"></text></g><g><title>ic_cdk::api::call::arg_data_raw (1,139 instructions, 6.81%)</title><rect x="0.9800%" y="197" width="6.8065%" height="15" fill="rgb(235,125,16)" fg:x="164" fg:w="1139"/><text x="1.2730%" y="207.50">ic_cdk:..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.30%)</title><rect x="7.7865%" y="165" width="0.3048%" height="15" fill="rgb(231,110,23)" fg:x="1303" fg:w="51"/><text x="8.0795%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.04%)</title><rect x="8.0913%" y="149" width="0.0359%" height="15" fill="rgb(237,15,50)" fg:x="1354" fg:w="6"/><text x="8.3843%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 2.61%)</title><rect x="8.0913%" y="165" width="2.6114%" height="15" fill="rgb(213,219,37)" fg:x="1354" fg:w="437"/><text x="8.3843%" y="175.50">c..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.38%)</title><rect x="10.7028%" y="165" width="0.3825%" height="15" fill="rgb(254,152,31)" fg:x="1791" fg:w="64"/><text x="10.9957%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.45%)</title><rect x="11.0852%" y="165" width="0.4542%" height="15" fill="rgb(238,180,53)" fg:x="1855" fg:w="76"/><text x="11.3782%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.45%)</title><rect x="11.5394%" y="165" width="0.4542%" height="15" fill="rgb(220,150,21)" fg:x="1931" fg:w="76"/><text x="11.8323%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.45%)</title><rect x="11.9935%" y="165" width="0.4542%" height="15" fill="rgb(228,103,36)" fg:x="2007" fg:w="76"/><text x="12.2865%" y="175.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for u8&gt;::read_options (76 instructions, 0.45%)</title><rect x="12.4477%" y="165" width="0.4542%" height="15" fill="rgb(221,43,32)" fg:x="2083" fg:w="76"/><text x="12.7407%" y="175.50"></text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.30%)</title><rect x="12.9019%" y="165" width="0.3048%" height="15" fill="rgb(205,76,6)" fg:x="2159" fg:w="51"/><text x="13.1948%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.57%)</title><rect x="13.2066%" y="165" width="0.5677%" height="15" fill="rgb(218,182,4)" fg:x="2210" fg:w="95"/><text x="13.4996%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.04%)</title><rect x="13.7744%" y="149" width="0.0359%" height="15" fill="rgb(243,0,10)" fg:x="2305" fg:w="6"/><text x="14.0673%" y="159.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 2.61%)</title><rect x="13.7744%" y="165" width="2.6114%" height="15" fill="rgb(225,171,13)" fg:x="2305" fg:w="437"/><text x="14.0673%" y="175.50">c..</text></g><g><title>memcmp (19 instructions, 0.11%)</title><rect x="16.3858%" y="165" width="0.1135%" height="15" fill="rgb(248,86,27)" fg:x="2742" fg:w="19"/><text x="16.6788%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.49%)</title><rect x="16.4993%" y="133" width="0.4900%" height="15" fill="rgb(206,61,3)" fg:x="2761" fg:w="82"/><text x="16.7923%" y="143.50"></text></g><g><title>memcpy (67 instructions, 0.40%)</title><rect x="16.9894%" y="101" width="0.4004%" height="15" fill="rgb(229,48,52)" fg:x="2843" fg:w="67"/><text x="17.2823%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.7 (96 instructions, 0.57%)</title><rect x="16.9894%" y="117" width="0.5737%" height="15" fill="rgb(216,39,27)" fg:x="2843" fg:w="96"/><text x="17.2823%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.07%)</title><rect x="17.5630%" y="69" width="0.0657%" height="15" fill="rgb(253,196,4)" fg:x="2939" fg:w="11"/><text x="17.8560%" y="79.50"></text></g><g><title>memcpy (35 instructions, 0.21%)</title><rect x="17.6288%" y="53" width="0.2092%" height="15" fill="rgb(226,37,36)" fg:x="2950" fg:w="35"/><text x="17.9217%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.7 (64 instructions, 0.38%)</title><rect x="17.6288%" y="69" width="0.3825%" height="15" fill="rgb(236,179,25)" fg:x="2950" fg:w="64"/><text x="17.9217%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.86%)</title><rect x="17.5630%" y="85" width="0.8605%" height="15" fill="rgb(226,58,38)" fg:x="2939" fg:w="144"/><text x="17.8560%" y="95.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 1.25%)</title><rect x="17.5630%" y="101" width="1.2549%" height="15" fill="rgb(212,161,8)" fg:x="2939" fg:w="210"/><text x="17.8560%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 1.31%)</title><rect x="17.5630%" y="117" width="1.3147%" height="15" fill="rgb(212,99,34)" fg:x="2939" fg:w="220"/><text x="17.8560%" y="127.50"></text></g><g><title>core::fmt::write (449 instructions, 2.68%)</title><rect x="16.9894%" y="133" width="2.6832%" height="15" fill="rgb(207,180,4)" fg:x="2843" fg:w="449"/><text x="17.2823%" y="143.50">c..</text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 3.99%)</title><rect x="16.4993%" y="149" width="3.9859%" height="15" fill="rgb(232,82,15)" fg:x="2761" fg:w="667"/><text x="16.7923%" y="159.50">all..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.38%)</title><rect x="20.4852%" y="149" width="0.3825%" height="15" fill="rgb(212,194,49)" fg:x="3428" fg:w="64"/><text x="20.7782%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.36%)</title><rect x="20.8677%" y="149" width="0.3645%" height="15" fill="rgb(228,207,25)" fg:x="3492" fg:w="61"/><text x="21.1607%" y="159.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 5.40%)</title><rect x="16.4993%" y="165" width="5.3962%" height="15" fill="rgb(213,223,8)" fg:x="2761" fg:w="903"/><text x="16.7923%" y="175.50">binre..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 instructions, 0.16%)</title><rect x="21.8955%" y="165" width="0.1613%" height="15" fill="rgb(227,59,18)" fg:x="3664" fg:w="27"/><text x="22.1885%" y="175.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.27%)</title><rect x="22.0569%" y="165" width="0.2749%" height="15" fill="rgb(213,115,51)" fg:x="3691" fg:w="46"/><text x="22.3499%" y="175.50"></text></g><g><title>candid::binary_parser::read_leb (95 instructions, 0.57%)</title><rect x="22.3318%" y="165" width="0.5677%" height="15" fill="rgb(211,201,38)" fg:x="3737" fg:w="95"/><text x="22.6247%" y="175.50"></text></g><g><title>memcmp (6 instructions, 0.04%)</title><rect x="22.8995%" y="133" width="0.0359%" height="15" fill="rgb(248,208,6)" fg:x="3832" fg:w="6"/><text x="23.1925%" y="143.50"></text></g><g><title>core::str::pattern::StrSearcher::new (437 instructions, 2.61%)</title><rect x="22.8995%" y="149" width="2.6114%" height="15" fill="rgb(242,171,22)" fg:x="3832" fg:w="437"/><text x="23.1925%" y="159.50">c..</text></g><g><title>memcmp (19 instructions, 0.11%)</title><rect x="25.5109%" y="149" width="0.1135%" height="15" fill="rgb(243,50,36)" fg:x="4269" fg:w="19"/><text x="25.8039%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.49%)</title><rect x="25.6245%" y="117" width="0.4900%" height="15" fill="rgb(215,198,7)" fg:x="4288" fg:w="82"/><text x="25.9174%" y="127.50"></text></g><g><title>memcpy (67 instructions, 0.40%)</title><rect x="26.1145%" y="85" width="0.4004%" height="15" fill="rgb(210,15,39)" fg:x="4370" fg:w="67"/><text x="26.4075%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.7 (96 instructions, 0.57%)</title><rect x="26.1145%" y="101" width="0.5737%" height="15" fill="rgb(212,219,6)" fg:x="4370" fg:w="96"/><text x="26.4075%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 instructions, 0.07%)</title><rect x="26.6882%" y="53" width="0.0657%" height="15" fill="rgb(229,5,10)" fg:x="4466" fg:w="11"/><text x="26.9811%" y="63.50"></text></g><g><title>memcpy (35 instructions, 0.21%)</title><rect x="26.7539%" y="37" width="0.2092%" height="15" fill="rgb(221,152,27)" fg:x="4477" fg:w="35"/><text x="27.0469%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.7 (64 instructions, 0.38%)</title><rect x="26.7539%" y="53" width="0.3825%" height="15" fill="rgb(207,140,1)" fg:x="4477" fg:w="64"/><text x="27.0469%" y="63.50"></text></g><g><title>core::fmt::Formatter::pad_integral (144 instructions, 0.86%)</title><rect x="26.6882%" y="69" width="0.8605%" height="15" fill="rgb(222,26,21)" fg:x="4466" fg:w="144"/><text x="26.9811%" y="79.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (210 instructions, 1.25%)</title><rect x="26.6882%" y="85" width="1.2549%" height="15" fill="rgb(243,182,24)" fg:x="4466" fg:w="210"/><text x="26.9811%" y="95.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (220 instructions, 1.31%)</title><rect x="26.6882%" y="101" width="1.3147%" height="15" fill="rgb(230,130,30)" fg:x="4466" fg:w="220"/><text x="26.9811%" y="111.50"></text></g><g><title>core::fmt::write (449 instructions, 2.68%)</title><rect x="26.1145%" y="117" width="2.6832%" height="15" fill="rgb(221,76,54)" fg:x="4370" fg:w="449"/><text x="26.4075%" y="127.50">c..</text></g><g><title>alloc::fmt::format::format_inner (667 instructions, 3.99%)</title><rect x="25.6245%" y="133" width="3.9859%" height="15" fill="rgb(235,94,36)" fg:x="4288" fg:w="667"/><text x="25.9174%" y="143.50">all..</text></g><g><title>binread::binary_template::write_vec_named (64 instructions, 0.38%)</title><rect x="29.6104%" y="133" width="0.3825%" height="15" fill="rgb(244,7,50)" fg:x="4955" fg:w="64"/><text x="29.9033%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.36%)</title><rect x="29.9928%" y="133" width="0.3645%" height="15" fill="rgb(228,126,24)" fg:x="5019" fg:w="61"/><text x="30.2858%" y="143.50"></text></g><g><title>binread::binary_template::write_vec (903 instructions, 5.40%)</title><rect x="25.6245%" y="149" width="5.3962%" height="15" fill="rgb(208,54,19)" fg:x="4288" fg:w="903"/><text x="25.9174%" y="159.50">binre..</text></g><g><title>binread::binary_template::write_start_struct (51 instructions, 0.30%)</title><rect x="31.0207%" y="133" width="0.3048%" height="15" fill="rgb(207,66,23)" fg:x="5191" fg:w="51"/><text x="31.3136%" y="143.50"></text></g><g><title>candid::binary_parser::read_sleb (118 instructions, 0.71%)</title><rect x="31.3254%" y="133" width="0.7052%" height="15" fill="rgb(251,192,41)" fg:x="5242" fg:w="118"/><text x="31.6184%" y="143.50"></text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.27%)</title><rect x="32.0306%" y="133" width="0.2749%" height="15" fill="rgb(205,211,30)" fg:x="5360" fg:w="46"/><text x="32.3236%" y="143.50"></text></g><g><title>&lt;candid::binary_parser::IndexType as binread::BinRead&gt;::read_options (283 instructions, 1.69%)</title><rect x="31.0207%" y="149" width="1.6912%" height="15" fill="rgb(226,191,33)" fg:x="5191" fg:w="283"/><text x="31.3136%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.49%)</title><rect x="32.7118%" y="149" width="0.4900%" height="15" fill="rgb(215,118,29)" fg:x="5474" fg:w="82"/><text x="33.0048%" y="159.50"></text></g><g><title>binread::binread_impls::&lt;impl binread::BinRead for alloc::vec::Vec&lt;B&gt;&gt;::read_options (1,910 instructions, 11.41%)</title><rect x="22.8995%" y="165" width="11.4139%" height="15" fill="rgb(215,161,17)" fg:x="3832" fg:w="1910"/><text x="23.1925%" y="175.50">binread::binre..</text></g><g><title>binread::binary_template::write_end_struct (46 instructions, 0.27%)</title><rect x="34.3134%" y="165" width="0.2749%" height="15" fill="rgb(250,201,35)" fg:x="5742" fg:w="46"/><text x="34.6063%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 instructions, 0.09%)</title><rect x="34.5883%" y="165" width="0.0896%" height="15" fill="rgb(206,47,20)" fg:x="5788" fg:w="15"/><text x="34.8812%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.05%)</title><rect x="34.6779%" y="165" width="0.0478%" height="15" fill="rgb(254,16,43)" fg:x="5803" fg:w="8"/><text x="34.9709%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.49%)</title><rect x="34.7257%" y="149" width="0.4900%" height="15" fill="rgb(236,158,39)" fg:x="5811" fg:w="82"/><text x="35.0187%" y="159.50"></text></g><g><title>candid::binary_parser::IndexType::to_type (178 instructions, 1.06%)</title><rect x="34.7257%" y="165" width="1.0637%" height="15" fill="rgb(216,71,31)" fg:x="5811" fg:w="178"/><text x="35.0187%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.49%)</title><rect x="35.7894%" y="133" width="0.4900%" height="15" fill="rgb(231,128,16)" fg:x="5989" fg:w="82"/><text x="36.0824%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.74%)</title><rect x="35.7894%" y="149" width="0.7350%" height="15" fill="rgb(235,103,21)" fg:x="5989" fg:w="123"/><text x="36.0824%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (210 instructions, 1.25%)</title><rect x="35.7894%" y="165" width="1.2549%" height="15" fill="rgb(233,223,47)" fg:x="5989" fg:w="210"/><text x="36.0824%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.49%)</title><rect x="37.0443%" y="165" width="0.4900%" height="15" fill="rgb(208,32,38)" fg:x="6199" fg:w="82"/><text x="37.3373%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.53%)</title><rect x="37.5344%" y="165" width="0.5319%" height="15" fill="rgb(214,5,31)" fg:x="6281" fg:w="89"/><text x="37.8273%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.49%)</title><rect x="38.0662%" y="165" width="0.4900%" height="15" fill="rgb(207,141,20)" fg:x="6370" fg:w="82"/><text x="38.3592%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.49%)</title><rect x="38.5562%" y="165" width="0.4900%" height="15" fill="rgb(205,63,34)" fg:x="6452" fg:w="82"/><text x="38.8492%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 instructions, 0.03%)</title><rect x="39.0463%" y="165" width="0.0299%" height="15" fill="rgb(233,55,3)" fg:x="6534" fg:w="5"/><text x="39.3392%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.53%)</title><rect x="39.0761%" y="165" width="0.5319%" height="15" fill="rgb(235,183,4)" fg:x="6539" fg:w="89"/><text x="39.3691%" y="175.50"></text></g><g><title>memcpy (392 instructions, 2.34%)</title><rect x="39.6080%" y="165" width="2.3425%" height="15" fill="rgb(208,220,46)" fg:x="6628" fg:w="392"/><text x="39.9010%" y="175.50">m..</text></g><g><title>memcpy (392 instructions, 2.34%)</title><rect x="41.9505%" y="165" width="2.3425%" height="15" fill="rgb(226,135,42)" fg:x="7020" fg:w="392"/><text x="42.2435%" y="175.50">m..</text></g><g><title>memcpy (504 instructions, 3.01%)</title><rect x="44.2931%" y="165" width="3.0118%" height="15" fill="rgb(228,108,23)" fg:x="7412" fg:w="504"/><text x="44.5860%" y="175.50">me..</text></g><g><title>candid::de::IDLDeserialize::new_with_config (7,857 instructions, 46.95%)</title><rect x="7.7865%" y="181" width="46.9523%" height="15" fill="rgb(253,150,32)" fg:x="1303" fg:w="7857"/><text x="8.0795%" y="191.50">candid::de::IDLDeserialize::new_with_config</text></g><g><title>memcpy (408 instructions, 2.44%)</title><rect x="54.7389%" y="181" width="2.4381%" height="15" fill="rgb(207,188,27)" fg:x="9160" fg:w="408"/><text x="55.0318%" y="191.50">m..</text></g><g><title>memcpy (408 instructions, 2.44%)</title><rect x="57.1770%" y="181" width="2.4381%" height="15" fill="rgb(216,219,42)" fg:x="9568" fg:w="408"/><text x="57.4700%" y="191.50">m..</text></g><g><title>candid::types::internal::find_type (24 instructions, 0.14%)</title><rect x="59.6152%" y="181" width="0.1434%" height="15" fill="rgb(244,64,6)" fg:x="9976" fg:w="24"/><text x="59.9081%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.49%)</title><rect x="59.7586%" y="181" width="0.4900%" height="15" fill="rgb(232,227,43)" fg:x="10000" fg:w="82"/><text x="60.0515%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.49%)</title><rect x="60.2486%" y="165" width="0.4900%" height="15" fill="rgb(236,214,5)" fg:x="10082" fg:w="82"/><text x="60.5416%" y="175.50"></text></g><g><title>candid::types::internal::env_add (166 instructions, 0.99%)</title><rect x="60.2486%" y="181" width="0.9920%" height="15" fill="rgb(236,126,19)" fg:x="10082" fg:w="166"/><text x="60.5416%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.49%)</title><rect x="61.2406%" y="181" width="0.4900%" height="15" fill="rgb(250,227,33)" fg:x="10248" fg:w="82"/><text x="61.5336%" y="191.50"></text></g><g><title>memcmp (77 instructions, 0.46%)</title><rect x="61.7306%" y="165" width="0.4601%" height="15" fill="rgb(236,60,11)" fg:x="10330" fg:w="77"/><text x="62.0236%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (89 instructions, 0.53%)</title><rect x="62.1907%" y="149" width="0.5319%" height="15" fill="rgb(213,157,39)" fg:x="10407" fg:w="89"/><text x="62.4837%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 instructions, 0.96%)</title><rect x="62.1907%" y="165" width="0.9561%" height="15" fill="rgb(218,78,39)" fg:x="10407" fg:w="160"/><text x="62.4837%" y="175.50"></text></g><g><title>candid::types::internal::env_add (416 instructions, 2.49%)</title><rect x="61.7306%" y="181" width="2.4860%" height="15" fill="rgb(213,10,8)" fg:x="10330" fg:w="416"/><text x="62.0236%" y="191.50">c..</text></g><g><title>&lt;candid::types::internal::Type as core::cmp::Ord&gt;::cmp (49 instructions, 0.29%)</title><rect x="64.2166%" y="165" width="0.2928%" height="15" fill="rgb(254,153,48)" fg:x="10746" fg:w="49"/><text x="64.5095%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.08%)</title><rect x="64.5094%" y="165" width="0.0837%" height="15" fill="rgb(229,76,31)" fg:x="10795" fg:w="14"/><text x="64.8024%" y="175.50"></text></g><g><title>candid::types::internal::env_id (200 instructions, 1.20%)</title><rect x="64.2166%" y="181" width="1.1952%" height="15" fill="rgb(219,71,27)" fg:x="10746" fg:w="200"/><text x="64.5095%" y="191.50"></text></g><g><title>candid::types::type_env::TypeEnv::trace_type (49 instructions, 0.29%)</title><rect x="65.4117%" y="181" width="0.2928%" height="15" fill="rgb(216,216,21)" fg:x="10946" fg:w="49"/><text x="65.7047%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (83 instructions, 0.50%)</title><rect x="65.7046%" y="165" width="0.4960%" height="15" fill="rgb(254,40,27)" fg:x="10995" fg:w="83"/><text x="65.9975%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (23 instructions, 0.14%)</title><rect x="66.6248%" y="149" width="0.1374%" height="15" fill="rgb(253,62,14)" fg:x="11149" fg:w="23"/><text x="66.9178%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (138 instructions, 0.82%)</title><rect x="66.6248%" y="165" width="0.8247%" height="15" fill="rgb(226,77,29)" fg:x="11149" fg:w="138"/><text x="66.9178%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (363 instructions, 2.17%)</title><rect x="65.7046%" y="181" width="2.1692%" height="15" fill="rgb(245,199,3)" fg:x="10995" fg:w="363"/><text x="65.9975%" y="191.50">&lt;..</text></g><g><title>candid::de::Deserializer::unroll_type (37 instructions, 0.22%)</title><rect x="67.8738%" y="165" width="0.2211%" height="15" fill="rgb(235,8,46)" fg:x="11358" fg:w="37"/><text x="68.1668%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1731 (34 instructions, 0.20%)</title><rect x="68.0949%" y="165" width="0.2032%" height="15" fill="rgb(239,130,28)" fg:x="11395" fg:w="34"/><text x="68.3879%" y="175.50"></text></g><g><title>&lt;candid::types::internal::TypeInner as core::cmp::PartialEq&gt;::eq.1731 (34 instructions, 0.20%)</title><rect x="68.2981%" y="165" width="0.2032%" height="15" fill="rgb(241,175,4)" fg:x="11429" fg:w="34"/><text x="68.5910%" y="175.50"></text></g><g><title>candid::de::Deserializer::add_cost (31 instructions, 0.19%)</title><rect x="68.5013%" y="165" width="0.1853%" height="15" fill="rgb(237,144,23)" fg:x="11463" fg:w="31"/><text x="68.7942%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (261 instructions, 1.56%)</title><rect x="67.8738%" y="181" width="1.5597%" height="15" fill="rgb(238,207,52)" fg:x="11358" fg:w="261"/><text x="68.1668%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.08%)</title><rect x="69.4335%" y="181" width="0.0837%" height="15" fill="rgb(214,42,53)" fg:x="11619" fg:w="14"/><text x="69.7265%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.08%)</title><rect x="69.5172%" y="181" width="0.0837%" height="15" fill="rgb(207,200,40)" fg:x="11633" fg:w="14"/><text x="69.8101%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.08%)</title><rect x="69.6008%" y="181" width="0.0837%" height="15" fill="rgb(238,115,49)" fg:x="11647" fg:w="14"/><text x="69.8938%" y="191.50"></text></g><g><title>candid::de::IDLDeserialize::done (37 instructions, 0.22%)</title><rect x="69.6845%" y="181" width="0.2211%" height="15" fill="rgb(216,139,41)" fg:x="11661" fg:w="37"/><text x="69.9774%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.05%)</title><rect x="69.9056%" y="165" width="0.0478%" height="15" fill="rgb(240,226,14)" fg:x="11698" fg:w="8"/><text x="70.1986%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="69.9534%" y="149" width="0.1613%" height="15" fill="rgb(222,7,41)" fg:x="11706" fg:w="27"/><text x="70.2464%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="70.1147%" y="149" width="0.1613%" height="15" fill="rgb(226,178,53)" fg:x="11733" fg:w="27"/><text x="70.4077%" y="159.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (197 instructions, 1.18%)</title><rect x="69.9534%" y="165" width="1.1772%" height="15" fill="rgb(237,210,19)" fg:x="11706" fg:w="197"/><text x="70.2464%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="71.1306%" y="133" width="0.1613%" height="15" fill="rgb(230,112,8)" fg:x="11903" fg:w="27"/><text x="71.4236%" y="143.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.85%)</title><rect x="71.1306%" y="149" width="0.8486%" height="15" fill="rgb(244,2,2)" fg:x="11903" fg:w="142"/><text x="71.4236%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (213 instructions, 1.27%)</title><rect x="71.1306%" y="165" width="1.2729%" height="15" fill="rgb(218,176,13)" fg:x="11903" fg:w="213"/><text x="71.4236%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 instructions, 0.08%)</title><rect x="72.4035%" y="165" width="0.0837%" height="15" fill="rgb(241,139,38)" fg:x="12116" fg:w="14"/><text x="72.6965%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;candid::de::IDLDeserialize&gt; (521 instructions, 3.11%)</title><rect x="69.9056%" y="181" width="3.1134%" height="15" fill="rgb(207,164,7)" fg:x="11698" fg:w="521"/><text x="70.1986%" y="191.50">co..</text></g><g><title>candid::utils::decode_args_with_config_debug (11,348 instructions, 67.81%)</title><rect x="7.7865%" y="197" width="67.8140%" height="15" fill="rgb(210,98,35)" fg:x="1303" fg:w="11348"/><text x="8.0795%" y="207.50">candid::utils::decode_args_with_config_debug</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="75.6006%" y="181" width="0.1613%" height="15" fill="rgb(233,179,30)" fg:x="12651" fg:w="27"/><text x="75.8935%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (142 instructions, 0.85%)</title><rect x="75.6006%" y="197" width="0.8486%" height="15" fill="rgb(217,18,41)" fg:x="12651" fg:w="142"/><text x="75.8935%" y="207.50"></text></g><g><title>ic_cdk::api::call::arg_data (12,736 instructions, 76.11%)</title><rect x="0.9800%" y="213" width="76.1085%" height="15" fill="rgb(238,83,47)" fg:x="164" fg:w="12736"/><text x="1.2730%" y="223.50">ic_cdk::api::call::arg_data</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.36%)</title><rect x="77.0886%" y="165" width="0.3645%" height="15" fill="rgb(221,174,40)" fg:x="12900" fg:w="61"/><text x="77.3815%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (132 instructions, 0.79%)</title><rect x="77.0886%" y="181" width="0.7888%" height="15" fill="rgb(232,27,27)" fg:x="12900" fg:w="132"/><text x="77.3815%" y="191.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="77.8774%" y="165" width="0.1613%" height="15" fill="rgb(215,206,27)" fg:x="13032" fg:w="27"/><text x="78.1703%" y="175.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (116 instructions, 0.69%)</title><rect x="77.8774%" y="181" width="0.6932%" height="15" fill="rgb(235,147,53)" fg:x="13032" fg:w="116"/><text x="78.1703%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::new (424 instructions, 2.53%)</title><rect x="77.0886%" y="197" width="2.5338%" height="15" fill="rgb(253,118,18)" fg:x="12900" fg:w="424"/><text x="77.3815%" y="207.50">c..</text></g><g><title>std::io::Write::write_all (518 instructions, 3.10%)</title><rect x="79.6223%" y="181" width="3.0955%" height="15" fill="rgb(245,32,9)" fg:x="13324" fg:w="518"/><text x="79.9153%" y="191.50">st..</text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::malloc (82 instructions, 0.49%)</title><rect x="82.7178%" y="133" width="0.4900%" height="15" fill="rgb(242,26,50)" fg:x="13842" fg:w="82"/><text x="83.0108%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (123 instructions, 0.74%)</title><rect x="82.7178%" y="149" width="0.7350%" height="15" fill="rgb(238,118,5)" fg:x="13842" fg:w="123"/><text x="83.0108%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 instructions, 1.23%)</title><rect x="82.7178%" y="165" width="1.2310%" height="15" fill="rgb(211,208,27)" fg:x="13842" fg:w="206"/><text x="83.0108%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.09%)</title><rect x="83.9488%" y="165" width="0.0896%" height="15" fill="rgb(211,105,1)" fg:x="14048" fg:w="15"/><text x="84.2418%" y="175.50"></text></g><g><title>memcpy (15 instructions, 0.09%)</title><rect x="84.0385%" y="165" width="0.0896%" height="15" fill="rgb(230,147,24)" fg:x="14063" fg:w="15"/><text x="84.3315%" y="175.50"></text></g><g><title>candid::ser::TypeSerialize::serialize (428 instructions, 2.56%)</title><rect x="82.7178%" y="181" width="2.5577%" height="15" fill="rgb(224,121,19)" fg:x="13842" fg:w="428"/><text x="83.0108%" y="191.50">c..</text></g><g><title>std::io::Write::write_all (516 instructions, 3.08%)</title><rect x="85.2755%" y="181" width="3.0835%" height="15" fill="rgb(249,68,23)" fg:x="14270" fg:w="516"/><text x="85.5685%" y="191.50">st..</text></g><g><title>std::io::Write::write_all (7 instructions, 0.04%)</title><rect x="88.3590%" y="181" width="0.0418%" height="15" fill="rgb(210,112,22)" fg:x="14786" fg:w="7"/><text x="88.6520%" y="191.50"></text></g><g><title>candid::ser::IDLBuilder::serialize (1,546 instructions, 9.24%)</title><rect x="79.6223%" y="197" width="9.2387%" height="15" fill="rgb(242,153,37)" fg:x="13324" fg:w="1546"/><text x="79.9153%" y="207.50">candid::ser..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.05%)</title><rect x="88.8610%" y="197" width="0.0478%" height="15" fill="rgb(226,228,35)" fg:x="14870" fg:w="8"/><text x="89.1540%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 instructions, 0.05%)</title><rect x="88.9088%" y="197" width="0.0478%" height="15" fill="rgb(207,78,38)" fg:x="14878" fg:w="8"/><text x="89.2018%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (61 instructions, 0.36%)</title><rect x="88.9566%" y="197" width="0.3645%" height="15" fill="rgb(249,67,4)" fg:x="14886" fg:w="61"/><text x="89.2496%" y="207.50"></text></g><g><title>ic_cdk::api::call::reply (2,680 instructions, 16.02%)</title><rect x="77.0886%" y="213" width="16.0153%" height="15" fill="rgb(247,86,39)" fg:x="12900" fg:w="2680"/><text x="77.3815%" y="223.50">ic_cdk::api::call::re..</text></g><g><title>vector::__canister_method_batch_remove::{{closure}} (16,136 instructions, 96.43%)</title><rect x="0.9800%" y="229" width="96.4264%" height="15" fill="rgb(224,82,50)" fg:x="164" fg:w="16136"/><text x="1.2730%" y="239.50">vector::__canister_method_batch_remove::{{closure}}</text></g><g><title>ic_cdk::futures::waker::drop (15 instructions, 0.09%)</title><rect x="97.4065%" y="229" width="0.0896%" height="15" fill="rgb(224,141,33)" fg:x="16300" fg:w="15"/><text x="97.6994%" y="239.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::unlink_chunk (27 instructions, 0.16%)</title><rect x="98.0339%" y="197" width="0.1613%" height="15" fill="rgb(242,134,10)" fg:x="16405" fg:w="27"/><text x="98.3269%" y="207.50"></text></g><g><title>dlmalloc::dlmalloc::Dlmalloc&lt;A&gt;::free (205 instructions, 1.23%)</title><rect x="97.5021%" y="213" width="1.2251%" height="15" fill="rgb(219,185,50)" fg:x="16316" fg:w="205"/><text x="97.7951%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (323 instructions, 1.93%)</title><rect x="97.4961%" y="229" width="1.9302%" height="15" fill="rgb(246,137,0)" fg:x="16315" fg:w="323"/><text x="97.7891%" y="239.50"></text></g><g><title>all (16,734 instructions, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(211,72,29)" fg:x="0" fg:w="16734"/><text x="0.2930%" y="271.50"></text></g><g><title>canister_update batch_remove (16,734 instructions, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(239,81,27)" fg:x="0" fg:w="16734"/><text x="0.2930%" y="255.50">canister_update batch_remove</text></g></svg></svg>